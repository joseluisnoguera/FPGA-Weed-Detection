-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity xfChannelExtractKern is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_src_mat_data_V_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    p_src_mat_data_V_empty_n : IN STD_LOGIC;
    p_src_mat_data_V_read : OUT STD_LOGIC;
    p_dst_mat_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_dst_mat_data_V_full_n : IN STD_LOGIC;
    p_dst_mat_data_V_write : OUT STD_LOGIC;
    p_channel : IN STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of xfChannelExtractKern is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv8_B4 : STD_LOGIC_VECTOR (7 downto 0) := "10110100";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv9_140 : STD_LOGIC_VECTOR (8 downto 0) := "101000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv24_FFFFFF : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_src_mat_data_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln88_reg_373 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_dst_mat_data_V_blk_n : STD_LOGIC;
    signal t_V_reg_114 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln69_fu_223_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln69_reg_348 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln100_fu_231_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln100_reg_357 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln887_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_V_fu_243_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_V_reg_368 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln88_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln1597_fu_255_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal t_V_3_reg_103 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln65_fu_125_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln65_fu_129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln65_1_fu_135_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln69_fu_149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln69_1_fu_155_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln73_1_fu_169_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln73_fu_177_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln73_2_fu_183_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln73_1_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_1_fu_143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln73_fu_195_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln69_1_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln69_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_fu_203_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln647_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln647_fu_275_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln647_2_fu_284_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_fu_265_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln647_1_fu_279_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln647_fu_288_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln647_2_fu_304_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln647_3_fu_311_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln647_1_fu_296_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln647_fu_317_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln647_1_fu_321_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln647_fu_325_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln647_1_fu_331_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln647_fu_337_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln887_fu_237_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln887_fu_237_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    t_V_3_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                t_V_3_reg_103 <= i_V_reg_368;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_3_reg_103 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    t_V_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln88_fu_249_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                t_V_reg_114 <= add_ln1597_fu_255_p2;
            elsif (((icmp_ln887_fu_237_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                t_V_reg_114 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_V_reg_368 <= i_V_fu_243_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln88_reg_373 <= icmp_ln88_fu_249_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    or_ln100_reg_357(4 downto 3) <= or_ln100_fu_231_p2(4 downto 3);
                    select_ln69_reg_348(4 downto 3) <= select_ln69_fu_223_p3(4 downto 3);
            end if;
        end if;
    end process;
    select_ln69_reg_348(2 downto 0) <= "000";
    or_ln100_reg_357(2 downto 0) <= "111";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln887_fu_237_p2, ap_CS_fsm_state2, icmp_ln88_fu_249_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln887_fu_237_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln88_fu_249_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln88_fu_249_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln1597_fu_255_p2 <= std_logic_vector(unsigned(t_V_reg_114) + unsigned(ap_const_lv9_1));
    and_ln647_fu_337_p2 <= (lshr_ln647_fu_325_p2 and lshr_ln647_1_fu_331_p2);
    and_ln69_fu_217_p2 <= (icmp_ln69_1_fu_211_p2 and icmp_ln65_1_fu_143_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(p_src_mat_data_V_empty_n, p_dst_mat_data_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln88_reg_373)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln88_reg_373 = ap_const_lv1_0) and (p_dst_mat_data_V_full_n = ap_const_logic_0)) or ((icmp_ln88_reg_373 = ap_const_lv1_0) and (p_src_mat_data_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(p_src_mat_data_V_empty_n, p_dst_mat_data_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln88_reg_373)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln88_reg_373 = ap_const_lv1_0) and (p_dst_mat_data_V_full_n = ap_const_logic_0)) or ((icmp_ln88_reg_373 = ap_const_lv1_0) and (p_src_mat_data_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(p_src_mat_data_V_empty_n, p_dst_mat_data_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln88_reg_373)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln88_reg_373 = ap_const_lv1_0) and (p_dst_mat_data_V_full_n = ap_const_logic_0)) or ((icmp_ln88_reg_373 = ap_const_lv1_0) and (p_src_mat_data_V_empty_n = ap_const_logic_0))));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(p_src_mat_data_V_empty_n, p_dst_mat_data_V_full_n, icmp_ln88_reg_373)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (((icmp_ln88_reg_373 = ap_const_lv1_0) and (p_dst_mat_data_V_full_n = ap_const_logic_0)) or ((icmp_ln88_reg_373 = ap_const_lv1_0) and (p_src_mat_data_V_empty_n = ap_const_logic_0)));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln88_fu_249_p2)
    begin
        if ((icmp_ln88_fu_249_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln887_fu_237_p2, ap_CS_fsm_state2)
    begin
        if ((((icmp_ln887_fu_237_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln887_fu_237_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln887_fu_237_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_V_fu_243_p2 <= std_logic_vector(unsigned(t_V_3_reg_103) + unsigned(ap_const_lv8_1));
    icmp_ln647_fu_261_p2 <= "1" when (unsigned(select_ln69_reg_348) > unsigned(or_ln100_reg_357)) else "0";
    icmp_ln65_1_fu_143_p2 <= "1" when (or_ln65_1_fu_135_p3 = ap_const_lv32_0) else "0";
    icmp_ln65_fu_129_p2 <= "1" when (trunc_ln65_fu_125_p1 = ap_const_lv3_4) else "0";
    icmp_ln69_1_fu_211_p2 <= "0" when (or_ln69_1_fu_155_p3 = ap_const_lv32_0) else "1";
    icmp_ln69_fu_149_p2 <= "1" when (trunc_ln65_fu_125_p1 = ap_const_lv3_5) else "0";
    icmp_ln73_1_fu_189_p2 <= "1" when (or_ln73_2_fu_183_p2 = ap_const_lv32_0) else "0";
    icmp_ln73_fu_163_p2 <= "1" when (trunc_ln65_fu_125_p1 = ap_const_lv3_6) else "0";
    icmp_ln887_fu_237_p2 <= "1" when (unsigned(t_V_3_reg_103) < unsigned(ap_const_lv8_B4)) else "0";
    icmp_ln88_fu_249_p2 <= "1" when (t_V_reg_114 = ap_const_lv9_140) else "0";
    lshr_ln647_1_fu_331_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv24_FFFFFF),to_integer(unsigned('0' & zext_ln647_1_fu_321_p1(24-1 downto 0)))));
    lshr_ln647_fu_325_p2 <= std_logic_vector(shift_right(unsigned(select_ln647_1_fu_296_p3),to_integer(unsigned('0' & zext_ln647_fu_317_p1(24-1 downto 0)))));
    or_ln100_fu_231_p2 <= (select_ln69_fu_223_p3 or ap_const_lv5_7);
    or_ln65_1_fu_135_p3 <= (ap_const_lv31_0 & icmp_ln65_fu_129_p2);
    or_ln69_1_fu_155_p3 <= (ap_const_lv31_0 & icmp_ln69_fu_149_p2);
    or_ln73_1_fu_169_p3 <= (ap_const_lv31_0 & icmp_ln73_fu_163_p2);
    or_ln73_2_fu_183_p2 <= (or_ln73_fu_177_p2 or or_ln65_1_fu_135_p3);
    or_ln73_fu_177_p2 <= (or_ln73_1_fu_169_p3 or or_ln69_1_fu_155_p3);

    p_dst_mat_data_V_blk_n_assign_proc : process(p_dst_mat_data_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln88_reg_373)
    begin
        if (((icmp_ln88_reg_373 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_dst_mat_data_V_blk_n <= p_dst_mat_data_V_full_n;
        else 
            p_dst_mat_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_dst_mat_data_V_din <= and_ln647_fu_337_p2(8 - 1 downto 0);

    p_dst_mat_data_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln88_reg_373, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln88_reg_373 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_dst_mat_data_V_write <= ap_const_logic_1;
        else 
            p_dst_mat_data_V_write <= ap_const_logic_0;
        end if; 
    end process;


    p_src_mat_data_V_blk_n_assign_proc : process(p_src_mat_data_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln88_reg_373)
    begin
        if (((icmp_ln88_reg_373 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_src_mat_data_V_blk_n <= p_src_mat_data_V_empty_n;
        else 
            p_src_mat_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_mat_data_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln88_reg_373, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln88_reg_373 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_src_mat_data_V_read <= ap_const_logic_1;
        else 
            p_src_mat_data_V_read <= ap_const_logic_0;
        end if; 
    end process;

    select_ln647_1_fu_296_p3 <= 
        tmp_6_fu_265_p4 when (icmp_ln647_fu_261_p2(0) = '1') else 
        p_src_mat_data_V_dout;
    select_ln647_2_fu_304_p3 <= 
        sub_ln647_1_fu_279_p2 when (icmp_ln647_fu_261_p2(0) = '1') else 
        select_ln69_reg_348;
    select_ln647_fu_288_p3 <= 
        sub_ln647_fu_275_p2 when (icmp_ln647_fu_261_p2(0) = '1') else 
        sub_ln647_2_fu_284_p2;
    select_ln65_fu_203_p3 <= 
        select_ln73_fu_195_p3 when (icmp_ln65_1_fu_143_p2(0) = '1') else 
        ap_const_lv5_0;
    select_ln69_fu_223_p3 <= 
        ap_const_lv5_8 when (and_ln69_fu_217_p2(0) = '1') else 
        select_ln65_fu_203_p3;
    select_ln73_fu_195_p3 <= 
        ap_const_lv5_0 when (icmp_ln73_1_fu_189_p2(0) = '1') else 
        ap_const_lv5_10;
    sub_ln647_1_fu_279_p2 <= std_logic_vector(signed(ap_const_lv5_17) - signed(select_ln69_reg_348));
    sub_ln647_2_fu_284_p2 <= std_logic_vector(unsigned(or_ln100_reg_357) - unsigned(select_ln69_reg_348));
    sub_ln647_3_fu_311_p2 <= std_logic_vector(signed(ap_const_lv5_17) - signed(select_ln647_fu_288_p3));
    sub_ln647_fu_275_p2 <= std_logic_vector(unsigned(select_ln69_reg_348) - unsigned(or_ln100_reg_357));
    
    tmp_6_fu_265_p4_proc : process(p_src_mat_data_V_dout)
    variable vlo_cpy : STD_LOGIC_VECTOR(24+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(24+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable tmp_6_fu_265_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(24 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_17(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_src_mat_data_V_dout;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(24-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(24-1-unsigned(ap_const_lv32_17(5-1 downto 0)));
            for tmp_6_fu_265_p4_i in 0 to 24-1 loop
                v0_cpy(tmp_6_fu_265_p4_i) := p_src_mat_data_V_dout(24-1-tmp_6_fu_265_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(24-1 downto 0)))));
        res_mask := res_mask(24-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_6_fu_265_p4 <= resvalue(24-1 downto 0);
    end process;

    trunc_ln65_fu_125_p1 <= p_channel(3 - 1 downto 0);
    zext_ln647_1_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln647_3_fu_311_p2),24));
    zext_ln647_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln647_2_fu_304_p3),24));
end behav;
