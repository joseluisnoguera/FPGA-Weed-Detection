-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity get_centroid_sh is
port (
    micro_roi_data_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    micro_roi_data_V_ce0 : OUT STD_LOGIC;
    micro_roi_data_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    micro_roi_data_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    micro_roi_data_V_we0 : OUT STD_LOGIC;
    micro_roi_data_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    micro_roi_data_V_ce1 : OUT STD_LOGIC;
    micro_roi_data_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    micro_roi_data_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    micro_roi_data_V_we1 : OUT STD_LOGIC;
    h_offset : IN STD_LOGIC_VECTOR (15 downto 0);
    v_offset_read : IN STD_LOGIC_VECTOR (7 downto 0);
    v_limit : IN STD_LOGIC_VECTOR (7 downto 0);
    h_limit : IN STD_LOGIC_VECTOR (15 downto 0);
    possible_c_x : IN STD_LOGIC_VECTOR (7 downto 0);
    possible_c_y : IN STD_LOGIC_VECTOR (31 downto 0);
    c : OUT STD_LOGIC_VECTOR (47 downto 0);
    c_read : IN STD_LOGIC_VECTOR (47 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    v_limit_ap_vld : IN STD_LOGIC;
    h_limit_ap_vld : IN STD_LOGIC;
    h_offset_ap_vld : IN STD_LOGIC;
    v_offset_read_ap_vld : IN STD_LOGIC;
    possible_c_x_ap_vld : IN STD_LOGIC;
    possible_c_y_ap_vld : IN STD_LOGIC;
    c_read_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    c_ap_vld : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of get_centroid_sh is 
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal get_centroid_sh_Loop_U0_ap_start : STD_LOGIC;
    signal get_centroid_sh_Loop_U0_ap_done : STD_LOGIC;
    signal get_centroid_sh_Loop_U0_ap_continue : STD_LOGIC;
    signal get_centroid_sh_Loop_U0_ap_idle : STD_LOGIC;
    signal get_centroid_sh_Loop_U0_ap_ready : STD_LOGIC;
    signal get_centroid_sh_Loop_U0_micro_roi_data_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal get_centroid_sh_Loop_U0_micro_roi_data_V_ce0 : STD_LOGIC;
    signal get_centroid_sh_Loop_U0_h_offset_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal get_centroid_sh_Loop_U0_h_offset_out_write : STD_LOGIC;
    signal get_centroid_sh_Loop_U0_v_offset_read_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal get_centroid_sh_Loop_U0_v_offset_read_out_write : STD_LOGIC;
    signal get_centroid_sh_Loop_U0_possible_c_x_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal get_centroid_sh_Loop_U0_possible_c_x_out_write : STD_LOGIC;
    signal get_centroid_sh_Loop_U0_possible_c_y_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal get_centroid_sh_Loop_U0_possible_c_y_out_write : STD_LOGIC;
    signal get_centroid_sh_Loop_U0_c_read_out_din : STD_LOGIC_VECTOR (47 downto 0);
    signal get_centroid_sh_Loop_U0_c_read_out_write : STD_LOGIC;
    signal get_centroid_sh_Loop_U0_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal get_centroid_sh_Loop_U0_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal get_centroid_sh_Loop_U0_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_p_sum_0_loc_0_i_loc_c : STD_LOGIC;
    signal p_sum_0_loc_0_i_loc_c_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_p_sum_0_loc_0_i_loc_c : STD_LOGIC := '0';
    signal ap_sync_channel_write_p_sum_0_loc_0_i_loc_c : STD_LOGIC;
    signal ap_channel_done_h_sum_0_loc_0_i_loc_s : STD_LOGIC;
    signal h_sum_0_loc_0_i_loc_s_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_h_sum_0_loc_0_i_loc_s : STD_LOGIC := '0';
    signal ap_sync_channel_write_h_sum_0_loc_0_i_loc_s : STD_LOGIC;
    signal ap_channel_done_v_sum_0_loc_0_i_loc_s : STD_LOGIC;
    signal v_sum_0_loc_0_i_loc_s_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_v_sum_0_loc_0_i_loc_s : STD_LOGIC := '0';
    signal ap_sync_channel_write_v_sum_0_loc_0_i_loc_s : STD_LOGIC;
    signal get_centroid_sh_Bloc_U0_ap_start : STD_LOGIC;
    signal get_centroid_sh_Bloc_U0_ap_done : STD_LOGIC;
    signal get_centroid_sh_Bloc_U0_ap_continue : STD_LOGIC;
    signal get_centroid_sh_Bloc_U0_ap_idle : STD_LOGIC;
    signal get_centroid_sh_Bloc_U0_ap_ready : STD_LOGIC;
    signal get_centroid_sh_Bloc_U0_possible_c_x_read : STD_LOGIC;
    signal get_centroid_sh_Bloc_U0_c_read_read : STD_LOGIC;
    signal get_centroid_sh_Bloc_U0_v_offset_read_read : STD_LOGIC;
    signal get_centroid_sh_Bloc_U0_h_offset_read : STD_LOGIC;
    signal get_centroid_sh_Bloc_U0_possible_c_y_read : STD_LOGIC;
    signal get_centroid_sh_Bloc_U0_c : STD_LOGIC_VECTOR (47 downto 0);
    signal get_centroid_sh_Bloc_U0_c_ap_vld : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal h_offset_c_full_n : STD_LOGIC;
    signal h_offset_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal h_offset_c_empty_n : STD_LOGIC;
    signal v_offset_read_c_full_n : STD_LOGIC;
    signal v_offset_read_c_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal v_offset_read_c_empty_n : STD_LOGIC;
    signal possible_c_x_c_full_n : STD_LOGIC;
    signal possible_c_x_c_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal possible_c_x_c_empty_n : STD_LOGIC;
    signal possible_c_y_c_full_n : STD_LOGIC;
    signal possible_c_y_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal possible_c_y_c_empty_n : STD_LOGIC;
    signal c_read_c_full_n : STD_LOGIC;
    signal c_read_c_dout : STD_LOGIC_VECTOR (47 downto 0);
    signal c_read_c_empty_n : STD_LOGIC;
    signal v_sum_0_loc_0_i_loc_s_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal v_sum_0_loc_0_i_loc_s_empty_n : STD_LOGIC;
    signal h_sum_0_loc_0_i_loc_s_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal h_sum_0_loc_0_i_loc_s_empty_n : STD_LOGIC;
    signal p_sum_0_loc_0_i_loc_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal p_sum_0_loc_0_i_loc_c_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal get_centroid_sh_Loop_U0_start_full_n : STD_LOGIC;
    signal get_centroid_sh_Loop_U0_start_write : STD_LOGIC;
    signal get_centroid_sh_Bloc_U0_start_full_n : STD_LOGIC;
    signal get_centroid_sh_Bloc_U0_start_write : STD_LOGIC;

    component get_centroid_sh_Loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        micro_roi_data_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        micro_roi_data_V_ce0 : OUT STD_LOGIC;
        micro_roi_data_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        v_limit : IN STD_LOGIC_VECTOR (7 downto 0);
        h_limit : IN STD_LOGIC_VECTOR (15 downto 0);
        h_offset : IN STD_LOGIC_VECTOR (15 downto 0);
        v_offset_read : IN STD_LOGIC_VECTOR (7 downto 0);
        possible_c_x : IN STD_LOGIC_VECTOR (7 downto 0);
        possible_c_y : IN STD_LOGIC_VECTOR (31 downto 0);
        c_read : IN STD_LOGIC_VECTOR (47 downto 0);
        h_offset_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        h_offset_out_full_n : IN STD_LOGIC;
        h_offset_out_write : OUT STD_LOGIC;
        v_offset_read_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        v_offset_read_out_full_n : IN STD_LOGIC;
        v_offset_read_out_write : OUT STD_LOGIC;
        possible_c_x_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        possible_c_x_out_full_n : IN STD_LOGIC;
        possible_c_x_out_write : OUT STD_LOGIC;
        possible_c_y_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        possible_c_y_out_full_n : IN STD_LOGIC;
        possible_c_y_out_write : OUT STD_LOGIC;
        c_read_out_din : OUT STD_LOGIC_VECTOR (47 downto 0);
        c_read_out_full_n : IN STD_LOGIC;
        c_read_out_write : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component get_centroid_sh_Bloc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        possible_c_x_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        possible_c_x_empty_n : IN STD_LOGIC;
        possible_c_x_read : OUT STD_LOGIC;
        c_read_dout : IN STD_LOGIC_VECTOR (47 downto 0);
        c_read_empty_n : IN STD_LOGIC;
        c_read_read : OUT STD_LOGIC;
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        v_offset_read_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        v_offset_read_empty_n : IN STD_LOGIC;
        v_offset_read_read : OUT STD_LOGIC;
        p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
        h_offset_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        h_offset_empty_n : IN STD_LOGIC;
        h_offset_read : OUT STD_LOGIC;
        possible_c_y_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        possible_c_y_empty_n : IN STD_LOGIC;
        possible_c_y_read : OUT STD_LOGIC;
        c : OUT STD_LOGIC_VECTOR (47 downto 0);
        c_ap_vld : OUT STD_LOGIC );
    end component;


    component fifo_w16_d2_A_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d2_A_x1 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A_x1 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w48_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (47 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (47 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    get_centroid_sh_Loop_U0 : component get_centroid_sh_Loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => get_centroid_sh_Loop_U0_ap_start,
        ap_done => get_centroid_sh_Loop_U0_ap_done,
        ap_continue => get_centroid_sh_Loop_U0_ap_continue,
        ap_idle => get_centroid_sh_Loop_U0_ap_idle,
        ap_ready => get_centroid_sh_Loop_U0_ap_ready,
        micro_roi_data_V_address0 => get_centroid_sh_Loop_U0_micro_roi_data_V_address0,
        micro_roi_data_V_ce0 => get_centroid_sh_Loop_U0_micro_roi_data_V_ce0,
        micro_roi_data_V_q0 => micro_roi_data_V_q0,
        v_limit => v_limit,
        h_limit => h_limit,
        h_offset => h_offset,
        v_offset_read => v_offset_read,
        possible_c_x => possible_c_x,
        possible_c_y => possible_c_y,
        c_read => c_read,
        h_offset_out_din => get_centroid_sh_Loop_U0_h_offset_out_din,
        h_offset_out_full_n => h_offset_c_full_n,
        h_offset_out_write => get_centroid_sh_Loop_U0_h_offset_out_write,
        v_offset_read_out_din => get_centroid_sh_Loop_U0_v_offset_read_out_din,
        v_offset_read_out_full_n => v_offset_read_c_full_n,
        v_offset_read_out_write => get_centroid_sh_Loop_U0_v_offset_read_out_write,
        possible_c_x_out_din => get_centroid_sh_Loop_U0_possible_c_x_out_din,
        possible_c_x_out_full_n => possible_c_x_c_full_n,
        possible_c_x_out_write => get_centroid_sh_Loop_U0_possible_c_x_out_write,
        possible_c_y_out_din => get_centroid_sh_Loop_U0_possible_c_y_out_din,
        possible_c_y_out_full_n => possible_c_y_c_full_n,
        possible_c_y_out_write => get_centroid_sh_Loop_U0_possible_c_y_out_write,
        c_read_out_din => get_centroid_sh_Loop_U0_c_read_out_din,
        c_read_out_full_n => c_read_c_full_n,
        c_read_out_write => get_centroid_sh_Loop_U0_c_read_out_write,
        ap_return_0 => get_centroid_sh_Loop_U0_ap_return_0,
        ap_return_1 => get_centroid_sh_Loop_U0_ap_return_1,
        ap_return_2 => get_centroid_sh_Loop_U0_ap_return_2);

    get_centroid_sh_Bloc_U0 : component get_centroid_sh_Bloc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => get_centroid_sh_Bloc_U0_ap_start,
        ap_done => get_centroid_sh_Bloc_U0_ap_done,
        ap_continue => get_centroid_sh_Bloc_U0_ap_continue,
        ap_idle => get_centroid_sh_Bloc_U0_ap_idle,
        ap_ready => get_centroid_sh_Bloc_U0_ap_ready,
        p_read => p_sum_0_loc_0_i_loc_c_dout,
        possible_c_x_dout => possible_c_x_c_dout,
        possible_c_x_empty_n => possible_c_x_c_empty_n,
        possible_c_x_read => get_centroid_sh_Bloc_U0_possible_c_x_read,
        c_read_dout => c_read_c_dout,
        c_read_empty_n => c_read_c_empty_n,
        c_read_read => get_centroid_sh_Bloc_U0_c_read_read,
        p_read1 => v_sum_0_loc_0_i_loc_s_dout,
        v_offset_read_dout => v_offset_read_c_dout,
        v_offset_read_empty_n => v_offset_read_c_empty_n,
        v_offset_read_read => get_centroid_sh_Bloc_U0_v_offset_read_read,
        p_read2 => h_sum_0_loc_0_i_loc_s_dout,
        h_offset_dout => h_offset_c_dout,
        h_offset_empty_n => h_offset_c_empty_n,
        h_offset_read => get_centroid_sh_Bloc_U0_h_offset_read,
        possible_c_y_dout => possible_c_y_c_dout,
        possible_c_y_empty_n => possible_c_y_c_empty_n,
        possible_c_y_read => get_centroid_sh_Bloc_U0_possible_c_y_read,
        c => get_centroid_sh_Bloc_U0_c,
        c_ap_vld => get_centroid_sh_Bloc_U0_c_ap_vld);

    h_offset_c_U : component fifo_w16_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => get_centroid_sh_Loop_U0_h_offset_out_din,
        if_full_n => h_offset_c_full_n,
        if_write => get_centroid_sh_Loop_U0_h_offset_out_write,
        if_dout => h_offset_c_dout,
        if_empty_n => h_offset_c_empty_n,
        if_read => get_centroid_sh_Bloc_U0_h_offset_read);

    v_offset_read_c_U : component fifo_w8_d2_A_x1
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => get_centroid_sh_Loop_U0_v_offset_read_out_din,
        if_full_n => v_offset_read_c_full_n,
        if_write => get_centroid_sh_Loop_U0_v_offset_read_out_write,
        if_dout => v_offset_read_c_dout,
        if_empty_n => v_offset_read_c_empty_n,
        if_read => get_centroid_sh_Bloc_U0_v_offset_read_read);

    possible_c_x_c_U : component fifo_w8_d2_A_x1
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => get_centroid_sh_Loop_U0_possible_c_x_out_din,
        if_full_n => possible_c_x_c_full_n,
        if_write => get_centroid_sh_Loop_U0_possible_c_x_out_write,
        if_dout => possible_c_x_c_dout,
        if_empty_n => possible_c_x_c_empty_n,
        if_read => get_centroid_sh_Bloc_U0_possible_c_x_read);

    possible_c_y_c_U : component fifo_w32_d2_A_x1
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => get_centroid_sh_Loop_U0_possible_c_y_out_din,
        if_full_n => possible_c_y_c_full_n,
        if_write => get_centroid_sh_Loop_U0_possible_c_y_out_write,
        if_dout => possible_c_y_c_dout,
        if_empty_n => possible_c_y_c_empty_n,
        if_read => get_centroid_sh_Bloc_U0_possible_c_y_read);

    c_read_c_U : component fifo_w48_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => get_centroid_sh_Loop_U0_c_read_out_din,
        if_full_n => c_read_c_full_n,
        if_write => get_centroid_sh_Loop_U0_c_read_out_write,
        if_dout => c_read_c_dout,
        if_empty_n => c_read_c_empty_n,
        if_read => get_centroid_sh_Bloc_U0_c_read_read);

    v_sum_0_loc_0_i_loc_s_U : component fifo_w32_d2_A_x1
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => get_centroid_sh_Loop_U0_ap_return_0,
        if_full_n => v_sum_0_loc_0_i_loc_s_full_n,
        if_write => ap_channel_done_v_sum_0_loc_0_i_loc_s,
        if_dout => v_sum_0_loc_0_i_loc_s_dout,
        if_empty_n => v_sum_0_loc_0_i_loc_s_empty_n,
        if_read => get_centroid_sh_Bloc_U0_ap_ready);

    h_sum_0_loc_0_i_loc_s_U : component fifo_w32_d2_A_x1
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => get_centroid_sh_Loop_U0_ap_return_1,
        if_full_n => h_sum_0_loc_0_i_loc_s_full_n,
        if_write => ap_channel_done_h_sum_0_loc_0_i_loc_s,
        if_dout => h_sum_0_loc_0_i_loc_s_dout,
        if_empty_n => h_sum_0_loc_0_i_loc_s_empty_n,
        if_read => get_centroid_sh_Bloc_U0_ap_ready);

    p_sum_0_loc_0_i_loc_c_U : component fifo_w32_d2_A_x1
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => get_centroid_sh_Loop_U0_ap_return_2,
        if_full_n => p_sum_0_loc_0_i_loc_c_full_n,
        if_write => ap_channel_done_p_sum_0_loc_0_i_loc_c,
        if_dout => p_sum_0_loc_0_i_loc_c_dout,
        if_empty_n => p_sum_0_loc_0_i_loc_c_empty_n,
        if_read => get_centroid_sh_Bloc_U0_ap_ready);





    ap_sync_reg_channel_write_h_sum_0_loc_0_i_loc_s_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_h_sum_0_loc_0_i_loc_s <= ap_const_logic_0;
            else
                if (((get_centroid_sh_Loop_U0_ap_done and get_centroid_sh_Loop_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_h_sum_0_loc_0_i_loc_s <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_h_sum_0_loc_0_i_loc_s <= ap_sync_channel_write_h_sum_0_loc_0_i_loc_s;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_p_sum_0_loc_0_i_loc_c_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_p_sum_0_loc_0_i_loc_c <= ap_const_logic_0;
            else
                if (((get_centroid_sh_Loop_U0_ap_done and get_centroid_sh_Loop_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_p_sum_0_loc_0_i_loc_c <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_p_sum_0_loc_0_i_loc_c <= ap_sync_channel_write_p_sum_0_loc_0_i_loc_c;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_v_sum_0_loc_0_i_loc_s_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_v_sum_0_loc_0_i_loc_s <= ap_const_logic_0;
            else
                if (((get_centroid_sh_Loop_U0_ap_done and get_centroid_sh_Loop_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_v_sum_0_loc_0_i_loc_s <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_v_sum_0_loc_0_i_loc_s <= ap_sync_channel_write_v_sum_0_loc_0_i_loc_s;
                end if; 
            end if;
        end if;
    end process;

    ap_channel_done_h_sum_0_loc_0_i_loc_s <= (get_centroid_sh_Loop_U0_ap_done and (ap_sync_reg_channel_write_h_sum_0_loc_0_i_loc_s xor ap_const_logic_1));
    ap_channel_done_p_sum_0_loc_0_i_loc_c <= (get_centroid_sh_Loop_U0_ap_done and (ap_sync_reg_channel_write_p_sum_0_loc_0_i_loc_c xor ap_const_logic_1));
    ap_channel_done_v_sum_0_loc_0_i_loc_s <= (get_centroid_sh_Loop_U0_ap_done and (ap_sync_reg_channel_write_v_sum_0_loc_0_i_loc_s xor ap_const_logic_1));
    ap_done <= get_centroid_sh_Bloc_U0_ap_done;
    ap_idle <= (get_centroid_sh_Loop_U0_ap_idle and get_centroid_sh_Bloc_U0_ap_idle and (p_sum_0_loc_0_i_loc_c_empty_n xor ap_const_logic_1) and (h_sum_0_loc_0_i_loc_s_empty_n xor ap_const_logic_1) and (v_sum_0_loc_0_i_loc_s_empty_n xor ap_const_logic_1));
    ap_ready <= get_centroid_sh_Loop_U0_ap_ready;
    ap_sync_channel_write_h_sum_0_loc_0_i_loc_s <= ((h_sum_0_loc_0_i_loc_s_full_n and ap_channel_done_h_sum_0_loc_0_i_loc_s) or ap_sync_reg_channel_write_h_sum_0_loc_0_i_loc_s);
    ap_sync_channel_write_p_sum_0_loc_0_i_loc_c <= ((p_sum_0_loc_0_i_loc_c_full_n and ap_channel_done_p_sum_0_loc_0_i_loc_c) or ap_sync_reg_channel_write_p_sum_0_loc_0_i_loc_c);
    ap_sync_channel_write_v_sum_0_loc_0_i_loc_s <= ((v_sum_0_loc_0_i_loc_s_full_n and ap_channel_done_v_sum_0_loc_0_i_loc_s) or ap_sync_reg_channel_write_v_sum_0_loc_0_i_loc_s);
    ap_sync_continue <= ap_continue;
    ap_sync_done <= get_centroid_sh_Bloc_U0_ap_done;
    ap_sync_ready <= get_centroid_sh_Loop_U0_ap_ready;
    c <= get_centroid_sh_Bloc_U0_c;
    c_ap_vld <= get_centroid_sh_Bloc_U0_c_ap_vld;
    get_centroid_sh_Bloc_U0_ap_continue <= ap_continue;
    get_centroid_sh_Bloc_U0_ap_start <= (v_sum_0_loc_0_i_loc_s_empty_n and p_sum_0_loc_0_i_loc_c_empty_n and h_sum_0_loc_0_i_loc_s_empty_n);
    get_centroid_sh_Bloc_U0_start_full_n <= ap_const_logic_1;
    get_centroid_sh_Bloc_U0_start_write <= ap_const_logic_0;
    get_centroid_sh_Loop_U0_ap_continue <= (ap_sync_channel_write_v_sum_0_loc_0_i_loc_s and ap_sync_channel_write_p_sum_0_loc_0_i_loc_c and ap_sync_channel_write_h_sum_0_loc_0_i_loc_s);
    get_centroid_sh_Loop_U0_ap_start <= ap_start;
    get_centroid_sh_Loop_U0_start_full_n <= ap_const_logic_1;
    get_centroid_sh_Loop_U0_start_write <= ap_const_logic_0;
    micro_roi_data_V_address0 <= get_centroid_sh_Loop_U0_micro_roi_data_V_address0;
    micro_roi_data_V_address1 <= ap_const_lv10_0;
    micro_roi_data_V_ce0 <= get_centroid_sh_Loop_U0_micro_roi_data_V_ce0;
    micro_roi_data_V_ce1 <= ap_const_logic_0;
    micro_roi_data_V_d0 <= ap_const_lv8_0;
    micro_roi_data_V_d1 <= ap_const_lv8_0;
    micro_roi_data_V_we0 <= ap_const_logic_0;
    micro_roi_data_V_we1 <= ap_const_logic_0;
end behav;
