-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity xFHistogramKernel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_src_mat_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    p_src_mat_data_V_empty_n : IN STD_LOGIC;
    p_src_mat_data_V_read : OUT STD_LOGIC;
    hist_array_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    hist_array_ce0 : OUT STD_LOGIC;
    hist_array_we0 : OUT STD_LOGIC;
    hist_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of xFHistogramKernel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_B4 : STD_LOGIC_VECTOR (7 downto 0) := "10110100";
    constant ap_const_lv9_140 : STD_LOGIC_VECTOR (8 downto 0) := "101000000";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_src_mat_data_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal icmp_ln887_13_reg_401 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal p_0396_0_reg_219 : STD_LOGIC_VECTOR (8 downto 0);
    signal t_V_7_reg_231 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln47_fu_242_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln48_fu_259_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln48_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_V_fu_282_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln887_12_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal row_V_fu_300_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_V_reg_396 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln887_13_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state7_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln887_13_reg_401_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_hist_0_addr_3_reg_405 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state8_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_state10_pp1_stage1_iter1 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal col_V_fu_317_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal col_V_reg_410 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_hist1_0_addr_3_reg_415 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln887_14_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_14_reg_420 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state12_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state13_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal i_V_1_fu_348_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal zext_ln544_4_fu_354_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_4_reg_429 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state7 : STD_LOGIC;
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state12 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal tmp_hist_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_hist_0_ce0 : STD_LOGIC;
    signal tmp_hist_0_we0 : STD_LOGIC;
    signal tmp_hist_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_hist_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_hist1_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_hist1_0_ce0 : STD_LOGIC;
    signal tmp_hist1_0_we0 : STD_LOGIC;
    signal tmp_hist1_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_hist1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln47_reg_175 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln47_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln48_reg_186 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_V_reg_197 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln887_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_6_reg_208 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_phi_mux_p_0396_0_phi_fu_223_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln47_fu_248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_fu_265_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_fu_288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_5_fu_312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_6_fu_323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal add_ln97_fu_328_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln99_fu_335_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp1 : BOOLEAN;
    signal ap_block_pp2 : BOOLEAN;
    signal ap_enable_operation_73 : BOOLEAN;
    signal ap_enable_state8_pp1_iter0_stage1 : BOOLEAN;
    signal ap_enable_operation_76 : BOOLEAN;
    signal ap_enable_state9_pp1_iter1_stage0 : BOOLEAN;
    signal ap_enable_operation_81 : BOOLEAN;
    signal ap_enable_operation_79 : BOOLEAN;
    signal ap_enable_operation_87 : BOOLEAN;
    signal ap_enable_state10_pp1_iter1_stage1 : BOOLEAN;
    signal ap_enable_operation_89 : BOOLEAN;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;

    component xFHistogramKerneludo IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    tmp_hist_0_U : component xFHistogramKerneludo
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tmp_hist_0_address0,
        ce0 => tmp_hist_0_ce0,
        we0 => tmp_hist_0_we0,
        d0 => tmp_hist_0_d0,
        q0 => tmp_hist_0_q0);

    tmp_hist1_0_U : component xFHistogramKerneludo
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tmp_hist1_0_address0,
        ce0 => tmp_hist1_0_ce0,
        we0 => tmp_hist1_0_we0,
        d0 => tmp_hist1_0_d0,
        q0 => tmp_hist1_0_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln887_12_fu_294_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((icmp_ln887_12_fu_294_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state12) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln887_12_fu_294_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state12) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state12);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln887_12_fu_294_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    p_0396_0_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_13_reg_401 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                p_0396_0_reg_219 <= col_V_reg_410;
            elsif (((icmp_ln887_12_fu_294_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                p_0396_0_reg_219 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    phi_ln47_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln47_fu_253_p2 = ap_const_lv1_0))) then 
                phi_ln47_reg_175 <= add_ln47_fu_242_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_ln47_reg_175 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    phi_ln48_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln47_fu_253_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_ln48_reg_186 <= ap_const_lv8_0;
            elsif (((icmp_ln48_fu_270_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_ln48_reg_186 <= add_ln48_fu_259_p2;
            end if; 
        end if;
    end process;

    t_V_6_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                t_V_6_reg_208 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                t_V_6_reg_208 <= row_V_reg_396;
            end if; 
        end if;
    end process;

    t_V_7_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln887_12_fu_294_p2 = ap_const_lv1_0))) then 
                t_V_7_reg_231 <= ap_const_lv9_0;
            elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln887_14_fu_342_p2 = ap_const_lv1_0))) then 
                t_V_7_reg_231 <= i_V_1_fu_348_p2;
            end if; 
        end if;
    end process;

    t_V_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_fu_270_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                t_V_reg_197 <= ap_const_lv9_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln887_fu_276_p2 = ap_const_lv1_0))) then 
                t_V_reg_197 <= i_V_fu_282_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_13_reg_401 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then
                col_V_reg_410 <= col_V_fu_317_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln887_13_reg_401 <= icmp_ln887_13_fu_306_p2;
                icmp_ln887_13_reg_401_pp1_iter1_reg <= icmp_ln887_13_reg_401;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln887_14_reg_420 <= icmp_ln887_14_fu_342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                row_V_reg_396 <= row_V_fu_300_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_13_reg_401 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                tmp_hist1_0_addr_3_reg_415 <= zext_ln544_6_fu_323_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_13_reg_401 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then
                tmp_hist_0_addr_3_reg_405 <= zext_ln544_5_fu_312_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln887_14_fu_342_p2 = ap_const_lv1_0))) then
                    zext_ln544_4_reg_429(8 downto 0) <= zext_ln544_4_fu_354_p1(8 downto 0);
            end if;
        end if;
    end process;
    zext_ln544_4_reg_429(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln48_fu_270_p2, ap_CS_fsm_state4, icmp_ln887_12_fu_294_p2, ap_CS_fsm_state6, icmp_ln887_13_fu_306_p2, icmp_ln887_14_fu_342_p2, ap_enable_reg_pp2_iter0, ap_block_pp1_stage0_subdone, ap_block_pp1_stage1_subdone, ap_block_pp2_stage0_subdone, icmp_ln47_fu_253_p2, icmp_ln887_fu_276_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln47_fu_253_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln48_fu_270_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln887_fu_276_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln887_12_fu_294_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln887_13_fu_306_p2 = ap_const_lv1_0))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln887_13_fu_306_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((not(((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_subdone))) and (ap_const_boolean_0 = ap_block_pp1_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((icmp_ln887_14_fu_342_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((icmp_ln887_14_fu_342_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_ln47_fu_242_p2 <= std_logic_vector(unsigned(phi_ln47_reg_175) + unsigned(ap_const_lv8_1));
    add_ln48_fu_259_p2 <= std_logic_vector(unsigned(phi_ln48_reg_186) + unsigned(ap_const_lv8_1));
    add_ln97_fu_328_p2 <= std_logic_vector(unsigned(tmp_hist_0_q0) + unsigned(ap_const_lv32_1));
    add_ln99_fu_335_p2 <= std_logic_vector(unsigned(tmp_hist1_0_q0) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(7);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(8);
    ap_CS_fsm_state14 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_block_pp1_assign_proc : process(ap_CS_fsm, ap_block_pp1_stage0_subdone, ap_block_pp1_stage1_subdone)
    begin
                ap_block_pp1 <= (((ap_ST_fsm_pp1_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp1_stage0_subdone)) or ((ap_const_boolean_1 = ap_block_pp1_stage1_subdone) and (ap_ST_fsm_pp1_stage1 = ap_CS_fsm)));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(p_src_mat_data_V_empty_n, icmp_ln887_13_reg_401, ap_enable_reg_pp1_iter1)
    begin
                ap_block_pp1_stage0_11001 <= ((icmp_ln887_13_reg_401 = ap_const_lv1_1) and (p_src_mat_data_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(p_src_mat_data_V_empty_n, icmp_ln887_13_reg_401, ap_enable_reg_pp1_iter1)
    begin
                ap_block_pp1_stage0_subdone <= ((icmp_ln887_13_reg_401 = ap_const_lv1_1) and (p_src_mat_data_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage1_11001_assign_proc : process(p_src_mat_data_V_empty_n, ap_enable_reg_pp1_iter0, icmp_ln887_13_reg_401)
    begin
                ap_block_pp1_stage1_11001 <= ((icmp_ln887_13_reg_401 = ap_const_lv1_1) and (p_src_mat_data_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage1_subdone_assign_proc : process(p_src_mat_data_V_empty_n, ap_enable_reg_pp1_iter0, icmp_ln887_13_reg_401)
    begin
                ap_block_pp1_stage1_subdone <= ((icmp_ln887_13_reg_401 = ap_const_lv1_1) and (p_src_mat_data_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp2_assign_proc : process(ap_CS_fsm, ap_block_pp2_stage0_subdone)
    begin
                ap_block_pp2 <= ((ap_const_boolean_1 = ap_block_pp2_stage0_subdone) and (ap_ST_fsm_pp2_stage0 = ap_CS_fsm));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_pp1_stage1_iter0_assign_proc : process(p_src_mat_data_V_empty_n, icmp_ln887_13_reg_401)
    begin
                ap_block_state8_pp1_stage1_iter0 <= ((icmp_ln887_13_reg_401 = ap_const_lv1_1) and (p_src_mat_data_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state9_pp1_stage0_iter1_assign_proc : process(p_src_mat_data_V_empty_n, icmp_ln887_13_reg_401)
    begin
                ap_block_state9_pp1_stage0_iter1 <= ((icmp_ln887_13_reg_401 = ap_const_lv1_1) and (p_src_mat_data_V_empty_n = ap_const_logic_0));
    end process;


    ap_condition_pp1_exit_iter0_state7_assign_proc : process(icmp_ln887_13_fu_306_p2)
    begin
        if ((icmp_ln887_13_fu_306_p2 = ap_const_lv1_0)) then 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state12_assign_proc : process(icmp_ln887_14_fu_342_p2)
    begin
        if ((icmp_ln887_14_fu_342_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state12 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_operation_73_assign_proc : process(icmp_ln887_13_reg_401)
    begin
                ap_enable_operation_73 <= (icmp_ln887_13_reg_401 = ap_const_lv1_1);
    end process;


    ap_enable_operation_76_assign_proc : process(icmp_ln887_13_reg_401)
    begin
                ap_enable_operation_76 <= (icmp_ln887_13_reg_401 = ap_const_lv1_1);
    end process;


    ap_enable_operation_79_assign_proc : process(icmp_ln887_13_reg_401)
    begin
                ap_enable_operation_79 <= (icmp_ln887_13_reg_401 = ap_const_lv1_1);
    end process;


    ap_enable_operation_81_assign_proc : process(icmp_ln887_13_reg_401)
    begin
                ap_enable_operation_81 <= (icmp_ln887_13_reg_401 = ap_const_lv1_1);
    end process;


    ap_enable_operation_87_assign_proc : process(icmp_ln887_13_reg_401_pp1_iter1_reg)
    begin
                ap_enable_operation_87 <= (icmp_ln887_13_reg_401_pp1_iter1_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_89_assign_proc : process(icmp_ln887_13_reg_401_pp1_iter1_reg)
    begin
                ap_enable_operation_89 <= (icmp_ln887_13_reg_401_pp1_iter1_reg = ap_const_lv1_1);
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_enable_state10_pp1_iter1_stage1_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter1)
    begin
                ap_enable_state10_pp1_iter1_stage1 <= ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1));
    end process;


    ap_enable_state8_pp1_iter0_stage1_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0)
    begin
                ap_enable_state8_pp1_iter0_stage1 <= ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1));
    end process;


    ap_enable_state9_pp1_iter1_stage0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1)
    begin
                ap_enable_state9_pp1_iter1_stage0 <= ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0));
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_0396_0_phi_fu_223_p4_assign_proc : process(icmp_ln887_13_reg_401, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, p_0396_0_reg_219, col_V_reg_410)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln887_13_reg_401 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_p_0396_0_phi_fu_223_p4 <= col_V_reg_410;
        else 
            ap_phi_mux_p_0396_0_phi_fu_223_p4 <= p_0396_0_reg_219;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col_V_fu_317_p2 <= std_logic_vector(unsigned(p_0396_0_reg_219) + unsigned(ap_const_lv9_2));
    hist_array_address0 <= zext_ln544_4_reg_429(8 - 1 downto 0);

    hist_array_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            hist_array_ce0 <= ap_const_logic_1;
        else 
            hist_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hist_array_d0 <= std_logic_vector(unsigned(tmp_hist1_0_q0) + unsigned(tmp_hist_0_q0));

    hist_array_we0_assign_proc : process(icmp_ln887_14_reg_420, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln887_14_reg_420 = ap_const_lv1_0))) then 
            hist_array_we0 <= ap_const_logic_1;
        else 
            hist_array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_V_1_fu_348_p2 <= std_logic_vector(unsigned(t_V_7_reg_231) + unsigned(ap_const_lv9_1));
    i_V_fu_282_p2 <= std_logic_vector(unsigned(t_V_reg_197) + unsigned(ap_const_lv9_1));
    icmp_ln47_fu_253_p2 <= "1" when (phi_ln47_reg_175 = ap_const_lv8_FF) else "0";
    icmp_ln48_fu_270_p2 <= "1" when (phi_ln48_reg_186 = ap_const_lv8_FF) else "0";
    icmp_ln887_12_fu_294_p2 <= "1" when (unsigned(t_V_6_reg_208) < unsigned(ap_const_lv8_B4)) else "0";
    icmp_ln887_13_fu_306_p2 <= "1" when (unsigned(ap_phi_mux_p_0396_0_phi_fu_223_p4) < unsigned(ap_const_lv9_140)) else "0";
    icmp_ln887_14_fu_342_p2 <= "1" when (t_V_7_reg_231 = ap_const_lv9_100) else "0";
    icmp_ln887_fu_276_p2 <= "1" when (t_V_reg_197 = ap_const_lv9_100) else "0";

    p_src_mat_data_V_blk_n_assign_proc : process(p_src_mat_data_V_empty_n, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_block_pp1_stage1, icmp_ln887_13_reg_401, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln887_13_reg_401 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((icmp_ln887_13_reg_401 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then 
            p_src_mat_data_V_blk_n <= p_src_mat_data_V_empty_n;
        else 
            p_src_mat_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_mat_data_V_read_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, icmp_ln887_13_reg_401, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_11001, ap_block_pp1_stage1_11001)
    begin
        if ((((icmp_ln887_13_reg_401 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((icmp_ln887_13_reg_401 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
            p_src_mat_data_V_read <= ap_const_logic_1;
        else 
            p_src_mat_data_V_read <= ap_const_logic_0;
        end if; 
    end process;

    row_V_fu_300_p2 <= std_logic_vector(unsigned(t_V_6_reg_208) + unsigned(ap_const_lv8_1));

    tmp_hist1_0_address0_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_CS_fsm_state3, ap_CS_fsm_state4, tmp_hist1_0_addr_3_reg_415, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, zext_ln544_4_fu_354_p1, zext_ln48_fu_265_p1, zext_ln544_fu_288_p1, zext_ln544_6_fu_323_p1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            tmp_hist1_0_address0 <= zext_ln544_4_fu_354_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            tmp_hist1_0_address0 <= tmp_hist1_0_addr_3_reg_415;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            tmp_hist1_0_address0 <= zext_ln544_6_fu_323_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tmp_hist1_0_address0 <= zext_ln544_fu_288_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            tmp_hist1_0_address0 <= zext_ln48_fu_265_p1(8 - 1 downto 0);
        else 
            tmp_hist1_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    tmp_hist1_0_ce0_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_block_pp1_stage0_11001, ap_block_pp1_stage1_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            tmp_hist1_0_ce0 <= ap_const_logic_1;
        else 
            tmp_hist1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_hist1_0_d0_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1, ap_enable_reg_pp1_iter1, ap_CS_fsm_state3, ap_CS_fsm_state4, add_ln99_fu_335_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            tmp_hist1_0_d0 <= add_ln99_fu_335_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            tmp_hist1_0_d0 <= ap_const_lv32_0;
        else 
            tmp_hist1_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    tmp_hist1_0_we0_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter1, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln887_13_reg_401_pp1_iter1_reg, ap_block_pp1_stage1_11001, icmp_ln887_fu_276_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln887_13_reg_401_pp1_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln887_fu_276_p2 = ap_const_lv1_0)))) then 
            tmp_hist1_0_we0 <= ap_const_logic_1;
        else 
            tmp_hist1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_hist_0_address0_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_block_pp1_stage1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_CS_fsm_state2, ap_CS_fsm_state4, tmp_hist_0_addr_3_reg_405, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, zext_ln544_4_fu_354_p1, zext_ln47_fu_248_p1, zext_ln544_fu_288_p1, zext_ln544_5_fu_312_p1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            tmp_hist_0_address0 <= zext_ln544_4_fu_354_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            tmp_hist_0_address0 <= tmp_hist_0_addr_3_reg_405;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            tmp_hist_0_address0 <= zext_ln544_5_fu_312_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tmp_hist_0_address0 <= zext_ln544_fu_288_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            tmp_hist_0_address0 <= zext_ln47_fu_248_p1(8 - 1 downto 0);
        else 
            tmp_hist_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    tmp_hist_0_ce0_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_block_pp1_stage0_11001, ap_block_pp1_stage1_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            tmp_hist_0_ce0 <= ap_const_logic_1;
        else 
            tmp_hist_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_hist_0_d0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_CS_fsm_state2, ap_CS_fsm_state4, add_ln97_fu_328_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            tmp_hist_0_d0 <= add_ln97_fu_328_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            tmp_hist_0_d0 <= ap_const_lv32_0;
        else 
            tmp_hist_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    tmp_hist_0_we0_assign_proc : process(icmp_ln887_13_reg_401, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_block_pp1_stage0_11001, icmp_ln887_fu_276_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((icmp_ln887_13_reg_401 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln887_fu_276_p2 = ap_const_lv1_0)))) then 
            tmp_hist_0_we0 <= ap_const_logic_1;
        else 
            tmp_hist_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln47_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln47_reg_175),64));
    zext_ln48_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln48_reg_186),64));
    zext_ln544_4_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_7_reg_231),64));
    zext_ln544_5_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_src_mat_data_V_dout),64));
    zext_ln544_6_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_src_mat_data_V_dout),64));
    zext_ln544_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_197),64));
end behav;
