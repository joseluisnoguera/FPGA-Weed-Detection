-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity xFarithm_proc_2811 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_src1_data_V_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    p_src1_data_V_empty_n : IN STD_LOGIC;
    p_src1_data_V_read : OUT STD_LOGIC;
    p_src2_data_V_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    p_src2_data_V_empty_n : IN STD_LOGIC;
    p_src2_data_V_read : OUT STD_LOGIC;
    p_dst_data_V_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    p_dst_data_V_full_n : IN STD_LOGIC;
    p_dst_data_V_write : OUT STD_LOGIC );
end;


architecture behav of xFarithm_proc_2811 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv10_2D0 : STD_LOGIC_VECTOR (9 downto 0) := "1011010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv11_500 : STD_LOGIC_VECTOR (10 downto 0) := "10100000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_src1_data_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln98_reg_311 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_src2_data_V_blk_n : STD_LOGIC;
    signal p_dst_data_V_blk_n : STD_LOGIC;
    signal t_V_4_reg_100 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln887_fu_111_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_V_fu_117_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_V_reg_306 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln98_fu_123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln1597_fu_129_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal t_V_reg_89 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln647_fu_135_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln647_1_fu_139_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1353_fu_147_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln215_fu_143_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1353_fu_151_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_7_fu_157_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln209_fu_165_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_fu_179_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_1_1_fu_189_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1353_1_fu_203_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln215_6_fu_199_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1353_1_fu_207_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_fu_213_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln209_1_fu_221_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_2_fu_235_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_1_2_fu_245_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1353_2_fu_259_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln215_7_fu_255_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1353_2_fu_263_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_9_fu_269_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln209_2_fu_277_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln209_2_fu_283_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln209_1_fu_227_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln209_fu_171_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln887_fu_111_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln887_fu_111_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    t_V_4_reg_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln98_fu_123_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                t_V_4_reg_100 <= add_ln1597_fu_129_p2;
            elsif (((icmp_ln887_fu_111_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                t_V_4_reg_100 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    t_V_reg_89_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                t_V_reg_89 <= i_V_reg_306;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_reg_89 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_V_reg_306 <= i_V_fu_117_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln98_reg_311 <= icmp_ln98_fu_123_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln887_fu_111_p2, ap_CS_fsm_state2, icmp_ln98_fu_123_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln887_fu_111_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln98_fu_123_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln98_fu_123_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln1353_1_fu_207_p2 <= std_logic_vector(unsigned(zext_ln1353_1_fu_203_p1) + unsigned(zext_ln215_6_fu_199_p1));
    add_ln1353_2_fu_263_p2 <= std_logic_vector(unsigned(zext_ln1353_2_fu_259_p1) + unsigned(zext_ln215_7_fu_255_p1));
    add_ln1353_fu_151_p2 <= std_logic_vector(unsigned(zext_ln1353_fu_147_p1) + unsigned(zext_ln215_fu_143_p1));
    add_ln1597_fu_129_p2 <= std_logic_vector(unsigned(t_V_4_reg_100) + unsigned(ap_const_lv11_1));
    add_ln209_1_fu_221_p2 <= std_logic_vector(unsigned(p_Result_1_1_fu_189_p4) + unsigned(p_Result_s_fu_179_p4));
    add_ln209_2_fu_277_p2 <= std_logic_vector(unsigned(p_Result_1_2_fu_245_p4) + unsigned(p_Result_2_fu_235_p4));
    add_ln209_fu_165_p2 <= std_logic_vector(unsigned(trunc_ln647_1_fu_139_p1) + unsigned(trunc_ln647_fu_135_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(p_src1_data_V_empty_n, p_src2_data_V_empty_n, p_dst_data_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln98_reg_311)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln98_reg_311 = ap_const_lv1_0) and (p_dst_data_V_full_n = ap_const_logic_0)) or ((icmp_ln98_reg_311 = ap_const_lv1_0) and (p_src2_data_V_empty_n = ap_const_logic_0)) or ((icmp_ln98_reg_311 = ap_const_lv1_0) and (p_src1_data_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(p_src1_data_V_empty_n, p_src2_data_V_empty_n, p_dst_data_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln98_reg_311)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln98_reg_311 = ap_const_lv1_0) and (p_dst_data_V_full_n = ap_const_logic_0)) or ((icmp_ln98_reg_311 = ap_const_lv1_0) and (p_src2_data_V_empty_n = ap_const_logic_0)) or ((icmp_ln98_reg_311 = ap_const_lv1_0) and (p_src1_data_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(p_src1_data_V_empty_n, p_src2_data_V_empty_n, p_dst_data_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln98_reg_311)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln98_reg_311 = ap_const_lv1_0) and (p_dst_data_V_full_n = ap_const_logic_0)) or ((icmp_ln98_reg_311 = ap_const_lv1_0) and (p_src2_data_V_empty_n = ap_const_logic_0)) or ((icmp_ln98_reg_311 = ap_const_lv1_0) and (p_src1_data_V_empty_n = ap_const_logic_0))));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(p_src1_data_V_empty_n, p_src2_data_V_empty_n, p_dst_data_V_full_n, icmp_ln98_reg_311)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (((icmp_ln98_reg_311 = ap_const_lv1_0) and (p_dst_data_V_full_n = ap_const_logic_0)) or ((icmp_ln98_reg_311 = ap_const_lv1_0) and (p_src2_data_V_empty_n = ap_const_logic_0)) or ((icmp_ln98_reg_311 = ap_const_lv1_0) and (p_src1_data_V_empty_n = ap_const_logic_0)));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln98_fu_123_p2)
    begin
        if ((icmp_ln98_fu_123_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln887_fu_111_p2, ap_CS_fsm_state2)
    begin
        if ((((icmp_ln887_fu_111_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln887_fu_111_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln887_fu_111_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_V_fu_117_p2 <= std_logic_vector(unsigned(t_V_reg_89) + unsigned(ap_const_lv10_1));
    icmp_ln887_fu_111_p2 <= "1" when (unsigned(t_V_reg_89) < unsigned(ap_const_lv10_2D0)) else "0";
    icmp_ln98_fu_123_p2 <= "1" when (t_V_4_reg_100 = ap_const_lv11_500) else "0";
    p_Result_1_1_fu_189_p4 <= p_src2_data_V_dout(15 downto 8);
    p_Result_1_2_fu_245_p4 <= p_src2_data_V_dout(23 downto 16);
    p_Result_2_fu_235_p4 <= p_src1_data_V_dout(23 downto 16);
    p_Result_s_fu_179_p4 <= p_src1_data_V_dout(15 downto 8);

    p_dst_data_V_blk_n_assign_proc : process(p_dst_data_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln98_reg_311)
    begin
        if (((icmp_ln98_reg_311 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_dst_data_V_blk_n <= p_dst_data_V_full_n;
        else 
            p_dst_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_dst_data_V_din <= ((select_ln209_2_fu_283_p3 & select_ln209_1_fu_227_p3) & select_ln209_fu_171_p3);

    p_dst_data_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln98_reg_311, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln98_reg_311 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_dst_data_V_write <= ap_const_logic_1;
        else 
            p_dst_data_V_write <= ap_const_logic_0;
        end if; 
    end process;


    p_src1_data_V_blk_n_assign_proc : process(p_src1_data_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln98_reg_311)
    begin
        if (((icmp_ln98_reg_311 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_src1_data_V_blk_n <= p_src1_data_V_empty_n;
        else 
            p_src1_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src1_data_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln98_reg_311, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln98_reg_311 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_src1_data_V_read <= ap_const_logic_1;
        else 
            p_src1_data_V_read <= ap_const_logic_0;
        end if; 
    end process;


    p_src2_data_V_blk_n_assign_proc : process(p_src2_data_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln98_reg_311)
    begin
        if (((icmp_ln98_reg_311 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_src2_data_V_blk_n <= p_src2_data_V_empty_n;
        else 
            p_src2_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src2_data_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln98_reg_311, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln98_reg_311 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_src2_data_V_read <= ap_const_logic_1;
        else 
            p_src2_data_V_read <= ap_const_logic_0;
        end if; 
    end process;

    select_ln209_1_fu_227_p3 <= 
        ap_const_lv8_FF when (tmp_8_fu_213_p3(0) = '1') else 
        add_ln209_1_fu_221_p2;
    select_ln209_2_fu_283_p3 <= 
        ap_const_lv8_FF when (tmp_9_fu_269_p3(0) = '1') else 
        add_ln209_2_fu_277_p2;
    select_ln209_fu_171_p3 <= 
        ap_const_lv8_FF when (tmp_7_fu_157_p3(0) = '1') else 
        add_ln209_fu_165_p2;
    tmp_7_fu_157_p3 <= add_ln1353_fu_151_p2(8 downto 8);
    tmp_8_fu_213_p3 <= add_ln1353_1_fu_207_p2(8 downto 8);
    tmp_9_fu_269_p3 <= add_ln1353_2_fu_263_p2(8 downto 8);
    trunc_ln647_1_fu_139_p1 <= p_src2_data_V_dout(8 - 1 downto 0);
    trunc_ln647_fu_135_p1 <= p_src1_data_V_dout(8 - 1 downto 0);
    zext_ln1353_1_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_1_1_fu_189_p4),9));
    zext_ln1353_2_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_1_2_fu_245_p4),9));
    zext_ln1353_fu_147_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln647_1_fu_139_p1),9));
    zext_ln215_6_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_179_p4),9));
    zext_ln215_7_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_2_fu_235_p4),9));
    zext_ln215_fu_143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln647_fu_135_p1),9));
end behav;
