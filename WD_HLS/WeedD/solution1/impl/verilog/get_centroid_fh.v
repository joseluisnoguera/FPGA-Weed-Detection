// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module get_centroid_fh (
        micro_roi_data_V_address0,
        micro_roi_data_V_ce0,
        micro_roi_data_V_d0,
        micro_roi_data_V_q0,
        micro_roi_data_V_we0,
        micro_roi_data_V_address1,
        micro_roi_data_V_ce1,
        micro_roi_data_V_d1,
        micro_roi_data_V_q1,
        micro_roi_data_V_we1,
        h_offset,
        v_offset,
        v_limit,
        h_limit,
        c,
        ap_clk,
        ap_rst,
        h_offset_ap_vld,
        v_offset_ap_vld,
        v_limit_ap_vld,
        h_limit_ap_vld,
        ap_start,
        c_ap_vld,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


output  [9:0] micro_roi_data_V_address0;
output   micro_roi_data_V_ce0;
output  [7:0] micro_roi_data_V_d0;
input  [7:0] micro_roi_data_V_q0;
output   micro_roi_data_V_we0;
output  [9:0] micro_roi_data_V_address1;
output   micro_roi_data_V_ce1;
output  [7:0] micro_roi_data_V_d1;
input  [7:0] micro_roi_data_V_q1;
output   micro_roi_data_V_we1;
input  [15:0] h_offset;
input  [7:0] v_offset;
input  [7:0] v_limit;
input  [15:0] h_limit;
output  [47:0] c;
input   ap_clk;
input   ap_rst;
input   h_offset_ap_vld;
input   v_offset_ap_vld;
input   v_limit_ap_vld;
input   h_limit_ap_vld;
input   ap_start;
output   c_ap_vld;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    get_centroid_fh_entr_U0_ap_start;
wire    get_centroid_fh_entr_U0_ap_done;
wire    get_centroid_fh_entr_U0_ap_continue;
wire    get_centroid_fh_entr_U0_ap_idle;
wire    get_centroid_fh_entr_U0_ap_ready;
wire    get_centroid_fh_entr_U0_start_out;
wire    get_centroid_fh_entr_U0_start_write;
wire   [15:0] get_centroid_fh_entr_U0_h_offset_out_din;
wire    get_centroid_fh_entr_U0_h_offset_out_write;
wire   [7:0] get_centroid_fh_entr_U0_v_offset_out_din;
wire    get_centroid_fh_entr_U0_v_offset_out_write;
wire   [7:0] get_centroid_fh_entr_U0_v_limit_out_din;
wire    get_centroid_fh_entr_U0_v_limit_out_write;
wire   [7:0] get_centroid_fh_entr_U0_v_limit_out1_din;
wire    get_centroid_fh_entr_U0_v_limit_out1_write;
wire   [15:0] get_centroid_fh_entr_U0_h_limit_out_din;
wire    get_centroid_fh_entr_U0_h_limit_out_write;
wire   [15:0] get_centroid_fh_entr_U0_h_limit_out2_din;
wire    get_centroid_fh_entr_U0_h_limit_out2_write;
wire    get_centroid_fh_Bloc_1_U0_ap_start;
wire    get_centroid_fh_Bloc_1_U0_ap_done;
wire    get_centroid_fh_Bloc_1_U0_ap_continue;
wire    get_centroid_fh_Bloc_1_U0_ap_idle;
wire    get_centroid_fh_Bloc_1_U0_ap_ready;
wire    get_centroid_fh_Bloc_1_U0_v_limit_read;
wire    get_centroid_fh_Bloc_1_U0_h_limit_read;
wire   [15:0] get_centroid_fh_Bloc_1_U0_ap_return_0;
wire   [31:0] get_centroid_fh_Bloc_1_U0_ap_return_1;
wire    ap_channel_done_lshr_ln146_cast_loc_s;
wire    lshr_ln146_cast_loc_s_full_n;
reg    ap_sync_reg_channel_write_lshr_ln146_cast_loc_s;
wire    ap_sync_channel_write_lshr_ln146_cast_loc_s;
wire    ap_channel_done_lshr_ln145_cast_loc_s;
wire    lshr_ln145_cast_loc_s_full_n;
reg    ap_sync_reg_channel_write_lshr_ln145_cast_loc_s;
wire    ap_sync_channel_write_lshr_ln145_cast_loc_s;
wire    get_centroid_fh_Loop_U0_ap_start;
wire    get_centroid_fh_Loop_U0_ap_done;
wire    get_centroid_fh_Loop_U0_ap_continue;
wire    get_centroid_fh_Loop_U0_ap_idle;
wire    get_centroid_fh_Loop_U0_ap_ready;
wire    get_centroid_fh_Loop_U0_h_limit_read;
wire    get_centroid_fh_Loop_U0_v_limit_read;
wire   [9:0] get_centroid_fh_Loop_U0_micro_roi_data_V_address0;
wire    get_centroid_fh_Loop_U0_micro_roi_data_V_ce0;
wire   [31:0] get_centroid_fh_Loop_U0_ap_return_0;
wire   [31:0] get_centroid_fh_Loop_U0_ap_return_1;
wire   [31:0] get_centroid_fh_Loop_U0_ap_return_2;
wire    ap_channel_done_p_sum_0_loc_channel;
wire    p_sum_0_loc_channel_full_n;
reg    ap_sync_reg_channel_write_p_sum_0_loc_channel;
wire    ap_sync_channel_write_p_sum_0_loc_channel;
wire    ap_channel_done_h_sum_0_loc_channel;
wire    h_sum_0_loc_channel_full_n;
reg    ap_sync_reg_channel_write_h_sum_0_loc_channel;
wire    ap_sync_channel_write_h_sum_0_loc_channel;
wire    ap_channel_done_v_sum_0_loc_channel;
wire    v_sum_0_loc_channel_full_n;
reg    ap_sync_reg_channel_write_v_sum_0_loc_channel;
wire    ap_sync_channel_write_v_sum_0_loc_channel;
wire    get_centroid_fh_Bloc_U0_ap_start;
wire    get_centroid_fh_Bloc_U0_ap_done;
wire    get_centroid_fh_Bloc_U0_ap_continue;
wire    get_centroid_fh_Bloc_U0_ap_idle;
wire    get_centroid_fh_Bloc_U0_ap_ready;
wire    get_centroid_fh_Bloc_U0_v_offset_read;
wire    get_centroid_fh_Bloc_U0_h_offset_read;
wire   [47:0] get_centroid_fh_Bloc_U0_c;
wire    get_centroid_fh_Bloc_U0_c_ap_vld;
wire    ap_sync_continue;
wire    h_offset_c_full_n;
wire   [15:0] h_offset_c_dout;
wire    h_offset_c_empty_n;
wire    v_offset_c_full_n;
wire   [7:0] v_offset_c_dout;
wire    v_offset_c_empty_n;
wire    v_limit_c_full_n;
wire   [7:0] v_limit_c_dout;
wire    v_limit_c_empty_n;
wire    v_limit_c8_full_n;
wire   [7:0] v_limit_c8_dout;
wire    v_limit_c8_empty_n;
wire    h_limit_c_full_n;
wire   [15:0] h_limit_c_dout;
wire    h_limit_c_empty_n;
wire    h_limit_c9_full_n;
wire   [15:0] h_limit_c9_dout;
wire    h_limit_c9_empty_n;
wire   [15:0] lshr_ln145_cast_loc_s_dout;
wire    lshr_ln145_cast_loc_s_empty_n;
wire   [31:0] lshr_ln146_cast_loc_s_dout;
wire    lshr_ln146_cast_loc_s_empty_n;
wire   [31:0] v_sum_0_loc_channel_dout;
wire    v_sum_0_loc_channel_empty_n;
wire   [31:0] h_sum_0_loc_channel_dout;
wire    h_sum_0_loc_channel_empty_n;
wire   [31:0] p_sum_0_loc_channel_dout;
wire    p_sum_0_loc_channel_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
reg    ap_sync_reg_get_centroid_fh_entr_U0_ap_ready;
wire    ap_sync_get_centroid_fh_entr_U0_ap_ready;
reg   [1:0] get_centroid_fh_entr_U0_ap_ready_count;
reg    ap_sync_reg_get_centroid_fh_Loop_U0_ap_ready;
wire    ap_sync_get_centroid_fh_Loop_U0_ap_ready;
reg   [1:0] get_centroid_fh_Loop_U0_ap_ready_count;
wire   [0:0] start_for_get_centroid_fh_Bloc_1_U0_din;
wire    start_for_get_centroid_fh_Bloc_1_U0_full_n;
wire   [0:0] start_for_get_centroid_fh_Bloc_1_U0_dout;
wire    start_for_get_centroid_fh_Bloc_1_U0_empty_n;
wire    get_centroid_fh_Bloc_1_U0_start_full_n;
wire    get_centroid_fh_Bloc_1_U0_start_write;
wire    get_centroid_fh_Loop_U0_start_full_n;
wire    get_centroid_fh_Loop_U0_start_write;
wire    get_centroid_fh_Bloc_U0_start_full_n;
wire    get_centroid_fh_Bloc_U0_start_write;

// power-on initialization
initial begin
#0 ap_sync_reg_channel_write_lshr_ln146_cast_loc_s = 1'b0;
#0 ap_sync_reg_channel_write_lshr_ln145_cast_loc_s = 1'b0;
#0 ap_sync_reg_channel_write_p_sum_0_loc_channel = 1'b0;
#0 ap_sync_reg_channel_write_h_sum_0_loc_channel = 1'b0;
#0 ap_sync_reg_channel_write_v_sum_0_loc_channel = 1'b0;
#0 ap_sync_reg_get_centroid_fh_entr_U0_ap_ready = 1'b0;
#0 get_centroid_fh_entr_U0_ap_ready_count = 2'd0;
#0 ap_sync_reg_get_centroid_fh_Loop_U0_ap_ready = 1'b0;
#0 get_centroid_fh_Loop_U0_ap_ready_count = 2'd0;
end

get_centroid_fh_entr get_centroid_fh_entr_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(get_centroid_fh_entr_U0_ap_start),
    .start_full_n(start_for_get_centroid_fh_Bloc_1_U0_full_n),
    .ap_done(get_centroid_fh_entr_U0_ap_done),
    .ap_continue(get_centroid_fh_entr_U0_ap_continue),
    .ap_idle(get_centroid_fh_entr_U0_ap_idle),
    .ap_ready(get_centroid_fh_entr_U0_ap_ready),
    .start_out(get_centroid_fh_entr_U0_start_out),
    .start_write(get_centroid_fh_entr_U0_start_write),
    .h_offset(h_offset),
    .v_offset(v_offset),
    .v_limit(v_limit),
    .h_limit(h_limit),
    .h_offset_out_din(get_centroid_fh_entr_U0_h_offset_out_din),
    .h_offset_out_full_n(h_offset_c_full_n),
    .h_offset_out_write(get_centroid_fh_entr_U0_h_offset_out_write),
    .v_offset_out_din(get_centroid_fh_entr_U0_v_offset_out_din),
    .v_offset_out_full_n(v_offset_c_full_n),
    .v_offset_out_write(get_centroid_fh_entr_U0_v_offset_out_write),
    .v_limit_out_din(get_centroid_fh_entr_U0_v_limit_out_din),
    .v_limit_out_full_n(v_limit_c_full_n),
    .v_limit_out_write(get_centroid_fh_entr_U0_v_limit_out_write),
    .v_limit_out1_din(get_centroid_fh_entr_U0_v_limit_out1_din),
    .v_limit_out1_full_n(v_limit_c8_full_n),
    .v_limit_out1_write(get_centroid_fh_entr_U0_v_limit_out1_write),
    .h_limit_out_din(get_centroid_fh_entr_U0_h_limit_out_din),
    .h_limit_out_full_n(h_limit_c_full_n),
    .h_limit_out_write(get_centroid_fh_entr_U0_h_limit_out_write),
    .h_limit_out2_din(get_centroid_fh_entr_U0_h_limit_out2_din),
    .h_limit_out2_full_n(h_limit_c9_full_n),
    .h_limit_out2_write(get_centroid_fh_entr_U0_h_limit_out2_write)
);

get_centroid_fh_Bloc_1 get_centroid_fh_Bloc_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(get_centroid_fh_Bloc_1_U0_ap_start),
    .ap_done(get_centroid_fh_Bloc_1_U0_ap_done),
    .ap_continue(get_centroid_fh_Bloc_1_U0_ap_continue),
    .ap_idle(get_centroid_fh_Bloc_1_U0_ap_idle),
    .ap_ready(get_centroid_fh_Bloc_1_U0_ap_ready),
    .v_limit_dout(v_limit_c_dout),
    .v_limit_empty_n(v_limit_c_empty_n),
    .v_limit_read(get_centroid_fh_Bloc_1_U0_v_limit_read),
    .h_limit_dout(h_limit_c_dout),
    .h_limit_empty_n(h_limit_c_empty_n),
    .h_limit_read(get_centroid_fh_Bloc_1_U0_h_limit_read),
    .ap_return_0(get_centroid_fh_Bloc_1_U0_ap_return_0),
    .ap_return_1(get_centroid_fh_Bloc_1_U0_ap_return_1)
);

get_centroid_fh_Loop get_centroid_fh_Loop_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(get_centroid_fh_Loop_U0_ap_start),
    .ap_done(get_centroid_fh_Loop_U0_ap_done),
    .ap_continue(get_centroid_fh_Loop_U0_ap_continue),
    .ap_idle(get_centroid_fh_Loop_U0_ap_idle),
    .ap_ready(get_centroid_fh_Loop_U0_ap_ready),
    .h_limit_dout(h_limit_c9_dout),
    .h_limit_empty_n(h_limit_c9_empty_n),
    .h_limit_read(get_centroid_fh_Loop_U0_h_limit_read),
    .v_limit_dout(v_limit_c8_dout),
    .v_limit_empty_n(v_limit_c8_empty_n),
    .v_limit_read(get_centroid_fh_Loop_U0_v_limit_read),
    .micro_roi_data_V_address0(get_centroid_fh_Loop_U0_micro_roi_data_V_address0),
    .micro_roi_data_V_ce0(get_centroid_fh_Loop_U0_micro_roi_data_V_ce0),
    .micro_roi_data_V_q0(micro_roi_data_V_q0),
    .ap_return_0(get_centroid_fh_Loop_U0_ap_return_0),
    .ap_return_1(get_centroid_fh_Loop_U0_ap_return_1),
    .ap_return_2(get_centroid_fh_Loop_U0_ap_return_2)
);

get_centroid_fh_Bloc get_centroid_fh_Bloc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(get_centroid_fh_Bloc_U0_ap_start),
    .ap_done(get_centroid_fh_Bloc_U0_ap_done),
    .ap_continue(get_centroid_fh_Bloc_U0_ap_continue),
    .ap_idle(get_centroid_fh_Bloc_U0_ap_idle),
    .ap_ready(get_centroid_fh_Bloc_U0_ap_ready),
    .p_read(p_sum_0_loc_channel_dout),
    .p_read1(lshr_ln146_cast_loc_s_dout),
    .p_read2(lshr_ln145_cast_loc_s_dout),
    .v_offset_dout(v_offset_c_dout),
    .v_offset_empty_n(v_offset_c_empty_n),
    .v_offset_read(get_centroid_fh_Bloc_U0_v_offset_read),
    .h_offset_dout(h_offset_c_dout),
    .h_offset_empty_n(h_offset_c_empty_n),
    .h_offset_read(get_centroid_fh_Bloc_U0_h_offset_read),
    .c(get_centroid_fh_Bloc_U0_c),
    .c_ap_vld(get_centroid_fh_Bloc_U0_c_ap_vld),
    .p_read3(v_sum_0_loc_channel_dout),
    .p_read4(h_sum_0_loc_channel_dout)
);

fifo_w16_d3_A h_offset_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(get_centroid_fh_entr_U0_h_offset_out_din),
    .if_full_n(h_offset_c_full_n),
    .if_write(get_centroid_fh_entr_U0_h_offset_out_write),
    .if_dout(h_offset_c_dout),
    .if_empty_n(h_offset_c_empty_n),
    .if_read(get_centroid_fh_Bloc_U0_h_offset_read)
);

fifo_w8_d3_A v_offset_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(get_centroid_fh_entr_U0_v_offset_out_din),
    .if_full_n(v_offset_c_full_n),
    .if_write(get_centroid_fh_entr_U0_v_offset_out_write),
    .if_dout(v_offset_c_dout),
    .if_empty_n(v_offset_c_empty_n),
    .if_read(get_centroid_fh_Bloc_U0_v_offset_read)
);

fifo_w8_d2_A_x0 v_limit_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(get_centroid_fh_entr_U0_v_limit_out_din),
    .if_full_n(v_limit_c_full_n),
    .if_write(get_centroid_fh_entr_U0_v_limit_out_write),
    .if_dout(v_limit_c_dout),
    .if_empty_n(v_limit_c_empty_n),
    .if_read(get_centroid_fh_Bloc_1_U0_v_limit_read)
);

fifo_w8_d2_A_x0 v_limit_c8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(get_centroid_fh_entr_U0_v_limit_out1_din),
    .if_full_n(v_limit_c8_full_n),
    .if_write(get_centroid_fh_entr_U0_v_limit_out1_write),
    .if_dout(v_limit_c8_dout),
    .if_empty_n(v_limit_c8_empty_n),
    .if_read(get_centroid_fh_Loop_U0_v_limit_read)
);

fifo_w16_d2_A h_limit_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(get_centroid_fh_entr_U0_h_limit_out_din),
    .if_full_n(h_limit_c_full_n),
    .if_write(get_centroid_fh_entr_U0_h_limit_out_write),
    .if_dout(h_limit_c_dout),
    .if_empty_n(h_limit_c_empty_n),
    .if_read(get_centroid_fh_Bloc_1_U0_h_limit_read)
);

fifo_w16_d2_A h_limit_c9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(get_centroid_fh_entr_U0_h_limit_out2_din),
    .if_full_n(h_limit_c9_full_n),
    .if_write(get_centroid_fh_entr_U0_h_limit_out2_write),
    .if_dout(h_limit_c9_dout),
    .if_empty_n(h_limit_c9_empty_n),
    .if_read(get_centroid_fh_Loop_U0_h_limit_read)
);

fifo_w16_d2_A lshr_ln145_cast_loc_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(get_centroid_fh_Bloc_1_U0_ap_return_0),
    .if_full_n(lshr_ln145_cast_loc_s_full_n),
    .if_write(ap_channel_done_lshr_ln145_cast_loc_s),
    .if_dout(lshr_ln145_cast_loc_s_dout),
    .if_empty_n(lshr_ln145_cast_loc_s_empty_n),
    .if_read(get_centroid_fh_Bloc_U0_ap_ready)
);

fifo_w32_d2_A_x0 lshr_ln146_cast_loc_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(get_centroid_fh_Bloc_1_U0_ap_return_1),
    .if_full_n(lshr_ln146_cast_loc_s_full_n),
    .if_write(ap_channel_done_lshr_ln146_cast_loc_s),
    .if_dout(lshr_ln146_cast_loc_s_dout),
    .if_empty_n(lshr_ln146_cast_loc_s_empty_n),
    .if_read(get_centroid_fh_Bloc_U0_ap_ready)
);

fifo_w32_d2_A_x0 v_sum_0_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(get_centroid_fh_Loop_U0_ap_return_0),
    .if_full_n(v_sum_0_loc_channel_full_n),
    .if_write(ap_channel_done_v_sum_0_loc_channel),
    .if_dout(v_sum_0_loc_channel_dout),
    .if_empty_n(v_sum_0_loc_channel_empty_n),
    .if_read(get_centroid_fh_Bloc_U0_ap_ready)
);

fifo_w32_d2_A_x0 h_sum_0_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(get_centroid_fh_Loop_U0_ap_return_1),
    .if_full_n(h_sum_0_loc_channel_full_n),
    .if_write(ap_channel_done_h_sum_0_loc_channel),
    .if_dout(h_sum_0_loc_channel_dout),
    .if_empty_n(h_sum_0_loc_channel_empty_n),
    .if_read(get_centroid_fh_Bloc_U0_ap_ready)
);

fifo_w32_d2_A_x0 p_sum_0_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(get_centroid_fh_Loop_U0_ap_return_2),
    .if_full_n(p_sum_0_loc_channel_full_n),
    .if_write(ap_channel_done_p_sum_0_loc_channel),
    .if_dout(p_sum_0_loc_channel_dout),
    .if_empty_n(p_sum_0_loc_channel_empty_n),
    .if_read(get_centroid_fh_Bloc_U0_ap_ready)
);

start_for_get_cenJfO start_for_get_cenJfO_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_get_centroid_fh_Bloc_1_U0_din),
    .if_full_n(start_for_get_centroid_fh_Bloc_1_U0_full_n),
    .if_write(get_centroid_fh_entr_U0_start_write),
    .if_dout(start_for_get_centroid_fh_Bloc_1_U0_dout),
    .if_empty_n(start_for_get_centroid_fh_Bloc_1_U0_empty_n),
    .if_read(get_centroid_fh_Bloc_1_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_h_sum_0_loc_channel <= 1'b0;
    end else begin
        if (((get_centroid_fh_Loop_U0_ap_done & get_centroid_fh_Loop_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_h_sum_0_loc_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_h_sum_0_loc_channel <= ap_sync_channel_write_h_sum_0_loc_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_lshr_ln145_cast_loc_s <= 1'b0;
    end else begin
        if (((get_centroid_fh_Bloc_1_U0_ap_done & get_centroid_fh_Bloc_1_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_lshr_ln145_cast_loc_s <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_lshr_ln145_cast_loc_s <= ap_sync_channel_write_lshr_ln145_cast_loc_s;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_lshr_ln146_cast_loc_s <= 1'b0;
    end else begin
        if (((get_centroid_fh_Bloc_1_U0_ap_done & get_centroid_fh_Bloc_1_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_lshr_ln146_cast_loc_s <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_lshr_ln146_cast_loc_s <= ap_sync_channel_write_lshr_ln146_cast_loc_s;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_p_sum_0_loc_channel <= 1'b0;
    end else begin
        if (((get_centroid_fh_Loop_U0_ap_done & get_centroid_fh_Loop_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_p_sum_0_loc_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_p_sum_0_loc_channel <= ap_sync_channel_write_p_sum_0_loc_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_v_sum_0_loc_channel <= 1'b0;
    end else begin
        if (((get_centroid_fh_Loop_U0_ap_done & get_centroid_fh_Loop_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_v_sum_0_loc_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_v_sum_0_loc_channel <= ap_sync_channel_write_v_sum_0_loc_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_get_centroid_fh_Loop_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_get_centroid_fh_Loop_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_get_centroid_fh_Loop_U0_ap_ready <= ap_sync_get_centroid_fh_Loop_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_get_centroid_fh_entr_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_get_centroid_fh_entr_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_get_centroid_fh_entr_U0_ap_ready <= ap_sync_get_centroid_fh_entr_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sync_ready == 1'b1) & (get_centroid_fh_Loop_U0_ap_ready == 1'b0))) begin
        get_centroid_fh_Loop_U0_ap_ready_count <= (get_centroid_fh_Loop_U0_ap_ready_count - 2'd1);
    end else if (((get_centroid_fh_Loop_U0_ap_ready == 1'b1) & (ap_sync_ready == 1'b0))) begin
        get_centroid_fh_Loop_U0_ap_ready_count <= (get_centroid_fh_Loop_U0_ap_ready_count + 2'd1);
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sync_ready == 1'b1) & (get_centroid_fh_entr_U0_ap_ready == 1'b0))) begin
        get_centroid_fh_entr_U0_ap_ready_count <= (get_centroid_fh_entr_U0_ap_ready_count - 2'd1);
    end else if (((ap_sync_ready == 1'b0) & (get_centroid_fh_entr_U0_ap_ready == 1'b1))) begin
        get_centroid_fh_entr_U0_ap_ready_count <= (get_centroid_fh_entr_U0_ap_ready_count + 2'd1);
    end
end

assign ap_channel_done_h_sum_0_loc_channel = (get_centroid_fh_Loop_U0_ap_done & (ap_sync_reg_channel_write_h_sum_0_loc_channel ^ 1'b1));

assign ap_channel_done_lshr_ln145_cast_loc_s = (get_centroid_fh_Bloc_1_U0_ap_done & (ap_sync_reg_channel_write_lshr_ln145_cast_loc_s ^ 1'b1));

assign ap_channel_done_lshr_ln146_cast_loc_s = (get_centroid_fh_Bloc_1_U0_ap_done & (ap_sync_reg_channel_write_lshr_ln146_cast_loc_s ^ 1'b1));

assign ap_channel_done_p_sum_0_loc_channel = (get_centroid_fh_Loop_U0_ap_done & (ap_sync_reg_channel_write_p_sum_0_loc_channel ^ 1'b1));

assign ap_channel_done_v_sum_0_loc_channel = (get_centroid_fh_Loop_U0_ap_done & (ap_sync_reg_channel_write_v_sum_0_loc_channel ^ 1'b1));

assign ap_done = get_centroid_fh_Bloc_U0_ap_done;

assign ap_idle = (get_centroid_fh_entr_U0_ap_idle & get_centroid_fh_Loop_U0_ap_idle & get_centroid_fh_Bloc_U0_ap_idle & get_centroid_fh_Bloc_1_U0_ap_idle & (p_sum_0_loc_channel_empty_n ^ 1'b1) & (h_sum_0_loc_channel_empty_n ^ 1'b1) & (v_sum_0_loc_channel_empty_n ^ 1'b1) & (lshr_ln146_cast_loc_s_empty_n ^ 1'b1) & (lshr_ln145_cast_loc_s_empty_n ^ 1'b1));

assign ap_ready = ap_sync_ready;

assign ap_sync_channel_write_h_sum_0_loc_channel = ((h_sum_0_loc_channel_full_n & ap_channel_done_h_sum_0_loc_channel) | ap_sync_reg_channel_write_h_sum_0_loc_channel);

assign ap_sync_channel_write_lshr_ln145_cast_loc_s = ((lshr_ln145_cast_loc_s_full_n & ap_channel_done_lshr_ln145_cast_loc_s) | ap_sync_reg_channel_write_lshr_ln145_cast_loc_s);

assign ap_sync_channel_write_lshr_ln146_cast_loc_s = ((lshr_ln146_cast_loc_s_full_n & ap_channel_done_lshr_ln146_cast_loc_s) | ap_sync_reg_channel_write_lshr_ln146_cast_loc_s);

assign ap_sync_channel_write_p_sum_0_loc_channel = ((p_sum_0_loc_channel_full_n & ap_channel_done_p_sum_0_loc_channel) | ap_sync_reg_channel_write_p_sum_0_loc_channel);

assign ap_sync_channel_write_v_sum_0_loc_channel = ((v_sum_0_loc_channel_full_n & ap_channel_done_v_sum_0_loc_channel) | ap_sync_reg_channel_write_v_sum_0_loc_channel);

assign ap_sync_continue = ap_continue;

assign ap_sync_done = get_centroid_fh_Bloc_U0_ap_done;

assign ap_sync_get_centroid_fh_Loop_U0_ap_ready = (get_centroid_fh_Loop_U0_ap_ready | ap_sync_reg_get_centroid_fh_Loop_U0_ap_ready);

assign ap_sync_get_centroid_fh_entr_U0_ap_ready = (get_centroid_fh_entr_U0_ap_ready | ap_sync_reg_get_centroid_fh_entr_U0_ap_ready);

assign ap_sync_ready = (ap_sync_get_centroid_fh_entr_U0_ap_ready & ap_sync_get_centroid_fh_Loop_U0_ap_ready);

assign c = get_centroid_fh_Bloc_U0_c;

assign c_ap_vld = get_centroid_fh_Bloc_U0_c_ap_vld;

assign get_centroid_fh_Bloc_1_U0_ap_continue = (ap_sync_channel_write_lshr_ln146_cast_loc_s & ap_sync_channel_write_lshr_ln145_cast_loc_s);

assign get_centroid_fh_Bloc_1_U0_ap_start = start_for_get_centroid_fh_Bloc_1_U0_empty_n;

assign get_centroid_fh_Bloc_1_U0_start_full_n = 1'b1;

assign get_centroid_fh_Bloc_1_U0_start_write = 1'b0;

assign get_centroid_fh_Bloc_U0_ap_continue = ap_continue;

assign get_centroid_fh_Bloc_U0_ap_start = (v_sum_0_loc_channel_empty_n & p_sum_0_loc_channel_empty_n & lshr_ln146_cast_loc_s_empty_n & lshr_ln145_cast_loc_s_empty_n & h_sum_0_loc_channel_empty_n);

assign get_centroid_fh_Bloc_U0_start_full_n = 1'b1;

assign get_centroid_fh_Bloc_U0_start_write = 1'b0;

assign get_centroid_fh_Loop_U0_ap_continue = (ap_sync_channel_write_v_sum_0_loc_channel & ap_sync_channel_write_p_sum_0_loc_channel & ap_sync_channel_write_h_sum_0_loc_channel);

assign get_centroid_fh_Loop_U0_ap_start = ((ap_sync_reg_get_centroid_fh_Loop_U0_ap_ready ^ 1'b1) & ap_start);

assign get_centroid_fh_Loop_U0_start_full_n = 1'b1;

assign get_centroid_fh_Loop_U0_start_write = 1'b0;

assign get_centroid_fh_entr_U0_ap_continue = 1'b1;

assign get_centroid_fh_entr_U0_ap_start = ((ap_sync_reg_get_centroid_fh_entr_U0_ap_ready ^ 1'b1) & ap_start);

assign micro_roi_data_V_address0 = get_centroid_fh_Loop_U0_micro_roi_data_V_address0;

assign micro_roi_data_V_address1 = 10'd0;

assign micro_roi_data_V_ce0 = get_centroid_fh_Loop_U0_micro_roi_data_V_ce0;

assign micro_roi_data_V_ce1 = 1'b0;

assign micro_roi_data_V_d0 = 8'd0;

assign micro_roi_data_V_d1 = 8'd0;

assign micro_roi_data_V_we0 = 1'b0;

assign micro_roi_data_V_we1 = 1'b0;

assign start_for_get_centroid_fh_Bloc_1_U0_din = 1'b1;

endmodule //get_centroid_fh
