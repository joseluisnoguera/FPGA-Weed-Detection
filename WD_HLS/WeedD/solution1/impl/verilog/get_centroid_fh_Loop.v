// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module get_centroid_fh_Loop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        h_limit_dout,
        h_limit_empty_n,
        h_limit_read,
        v_limit_dout,
        v_limit_empty_n,
        v_limit_read,
        micro_roi_data_V_address0,
        micro_roi_data_V_ce0,
        micro_roi_data_V_q0,
        ap_return_0,
        ap_return_1,
        ap_return_2
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] h_limit_dout;
input   h_limit_empty_n;
output   h_limit_read;
input  [7:0] v_limit_dout;
input   v_limit_empty_n;
output   v_limit_read;
output  [9:0] micro_roi_data_V_address0;
output   micro_roi_data_V_ce0;
input  [7:0] micro_roi_data_V_q0;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg h_limit_read;
reg v_limit_read;
reg micro_roi_data_V_ce0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    h_limit_blk_n;
reg    v_limit_blk_n;
reg   [15:0] h_limit_read_reg_350;
reg    ap_block_state1;
reg   [7:0] v_limit_read_reg_355;
wire   [5:0] h_fu_152_p2;
reg   [5:0] h_reg_363;
wire    ap_CS_fsm_state2;
wire   [31:0] zext_ln149_fu_158_p1;
reg   [31:0] zext_ln149_reg_368;
wire   [0:0] icmp_ln147_fu_146_p2;
wire   [9:0] zext_ln149_1_fu_162_p1;
reg   [9:0] zext_ln149_1_reg_373;
wire   [0:0] icmp_ln149_fu_170_p2;
reg   [0:0] icmp_ln149_reg_378;
wire   [4:0] v_fu_203_p2;
reg   [4:0] v_reg_386;
wire    ap_CS_fsm_state3;
wire   [0:0] and_ln149_fu_214_p2;
reg   [0:0] and_ln149_reg_391;
wire   [0:0] icmp_ln148_fu_197_p2;
reg   [5:0] h_0_i_reg_99;
reg   [4:0] v_0_i_reg_110;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln150_1_fu_232_p1;
reg   [31:0] p_sum_6_fu_62;
wire   [31:0] p_sum_8_fu_306_p3;
reg   [31:0] h_sum_6_fu_66;
wire   [31:0] h_sum_8_fu_291_p3;
reg   [31:0] v_sum_6_fu_70;
wire   [31:0] v_sum_8_fu_276_p3;
wire   [15:0] zext_ln149_2_fu_166_p1;
wire   [7:0] zext_ln148_fu_193_p1;
wire   [0:0] icmp_ln149_1_fu_209_p2;
wire   [9:0] shl_ln_fu_219_p3;
wire   [9:0] add_ln150_fu_227_p2;
wire   [31:0] zext_ln150_fu_237_p1;
wire   [31:0] v_sum_fu_247_p2;
wire   [0:0] icmp_ln895_fu_241_p2;
wire   [0:0] and_ln895_fu_271_p2;
wire   [31:0] v_sum_7_fu_264_p3;
wire   [31:0] h_sum_fu_253_p2;
wire   [31:0] h_sum_7_fu_284_p3;
wire   [31:0] p_sum_fu_258_p2;
wire   [31:0] p_sum_7_fu_299_p3;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln147_fu_146_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln148_fu_197_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        h_0_i_reg_99 <= h_reg_363;
    end else if ((~((ap_start == 1'b0) | (v_limit_empty_n == 1'b0) | (h_limit_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        h_0_i_reg_99 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        h_sum_6_fu_66 <= h_sum_8_fu_291_p3;
    end else if ((~((ap_start == 1'b0) | (v_limit_empty_n == 1'b0) | (h_limit_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        h_sum_6_fu_66 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_sum_6_fu_62 <= p_sum_8_fu_306_p3;
    end else if ((~((ap_start == 1'b0) | (v_limit_empty_n == 1'b0) | (h_limit_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_sum_6_fu_62 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln147_fu_146_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        v_0_i_reg_110 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        v_0_i_reg_110 <= v_reg_386;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v_sum_6_fu_70 <= v_sum_8_fu_276_p3;
    end else if ((~((ap_start == 1'b0) | (v_limit_empty_n == 1'b0) | (h_limit_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        v_sum_6_fu_70 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln148_fu_197_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        and_ln149_reg_391 <= and_ln149_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (v_limit_empty_n == 1'b0) | (h_limit_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        h_limit_read_reg_350 <= h_limit_dout;
        v_limit_read_reg_355 <= v_limit_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        h_reg_363 <= h_fu_152_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln147_fu_146_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln149_reg_378 <= icmp_ln149_fu_170_p2;
        zext_ln149_1_reg_373[5 : 0] <= zext_ln149_1_fu_162_p1[5 : 0];
        zext_ln149_reg_368[5 : 0] <= zext_ln149_fu_158_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        v_reg_386 <= v_fu_203_p2;
    end
end

always @ (*) begin
    if (((icmp_ln147_fu_146_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln147_fu_146_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        h_limit_blk_n = h_limit_empty_n;
    end else begin
        h_limit_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (v_limit_empty_n == 1'b0) | (h_limit_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        h_limit_read = 1'b1;
    end else begin
        h_limit_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        micro_roi_data_V_ce0 = 1'b1;
    end else begin
        micro_roi_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        v_limit_blk_n = v_limit_empty_n;
    end else begin
        v_limit_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (v_limit_empty_n == 1'b0) | (h_limit_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        v_limit_read = 1'b1;
    end else begin
        v_limit_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (v_limit_empty_n == 1'b0) | (h_limit_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln147_fu_146_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln148_fu_197_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln150_fu_227_p2 = (zext_ln149_1_reg_373 + shl_ln_fu_219_p3);

assign and_ln149_fu_214_p2 = (icmp_ln149_reg_378 & icmp_ln149_1_fu_209_p2);

assign and_ln895_fu_271_p2 = (icmp_ln895_fu_241_p2 & and_ln149_reg_391);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (v_limit_empty_n == 1'b0) | (h_limit_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_return_0 = v_sum_6_fu_70;

assign ap_return_1 = h_sum_6_fu_66;

assign ap_return_2 = p_sum_6_fu_62;

assign h_fu_152_p2 = (h_0_i_reg_99 + 6'd1);

assign h_sum_7_fu_284_p3 = ((and_ln149_reg_391[0:0] === 1'b1) ? h_sum_fu_253_p2 : h_sum_6_fu_66);

assign h_sum_8_fu_291_p3 = ((and_ln895_fu_271_p2[0:0] === 1'b1) ? h_sum_6_fu_66 : h_sum_7_fu_284_p3);

assign h_sum_fu_253_p2 = (zext_ln149_reg_368 + h_sum_6_fu_66);

assign icmp_ln147_fu_146_p2 = ((h_0_i_reg_99 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln148_fu_197_p2 = ((v_0_i_reg_110 == 5'd23) ? 1'b1 : 1'b0);

assign icmp_ln149_1_fu_209_p2 = ((zext_ln148_fu_193_p1 < v_limit_read_reg_355) ? 1'b1 : 1'b0);

assign icmp_ln149_fu_170_p2 = ((zext_ln149_2_fu_166_p1 < h_limit_read_reg_350) ? 1'b1 : 1'b0);

assign icmp_ln895_fu_241_p2 = ((micro_roi_data_V_q0 == 8'd0) ? 1'b1 : 1'b0);

assign micro_roi_data_V_address0 = zext_ln150_1_fu_232_p1;

assign p_sum_7_fu_299_p3 = ((and_ln149_reg_391[0:0] === 1'b1) ? p_sum_fu_258_p2 : p_sum_6_fu_62);

assign p_sum_8_fu_306_p3 = ((and_ln895_fu_271_p2[0:0] === 1'b1) ? p_sum_6_fu_62 : p_sum_7_fu_299_p3);

assign p_sum_fu_258_p2 = (p_sum_6_fu_62 + 32'd1);

assign shl_ln_fu_219_p3 = {{v_0_i_reg_110}, {5'd0}};

assign v_fu_203_p2 = (v_0_i_reg_110 + 5'd1);

assign v_sum_7_fu_264_p3 = ((and_ln149_reg_391[0:0] === 1'b1) ? v_sum_fu_247_p2 : v_sum_6_fu_70);

assign v_sum_8_fu_276_p3 = ((and_ln895_fu_271_p2[0:0] === 1'b1) ? v_sum_6_fu_70 : v_sum_7_fu_264_p3);

assign v_sum_fu_247_p2 = (zext_ln150_fu_237_p1 + v_sum_6_fu_70);

assign zext_ln148_fu_193_p1 = v_0_i_reg_110;

assign zext_ln149_1_fu_162_p1 = h_0_i_reg_99;

assign zext_ln149_2_fu_166_p1 = h_0_i_reg_99;

assign zext_ln149_fu_158_p1 = h_0_i_reg_99;

assign zext_ln150_1_fu_232_p1 = add_ln150_fu_227_p2;

assign zext_ln150_fu_237_p1 = v_0_i_reg_110;

always @ (posedge ap_clk) begin
    zext_ln149_reg_368[31:6] <= 26'b00000000000000000000000000;
    zext_ln149_1_reg_373[9:6] <= 4'b0000;
end

endmodule //get_centroid_fh_Loop
