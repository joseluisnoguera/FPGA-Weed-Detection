// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module merge_Loop_Read_Mat_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        p_src1_cols_load7_loc_dout,
        p_src1_cols_load7_loc_empty_n,
        p_src1_cols_load7_loc_read,
        p_src1_data_V_dout,
        p_src1_data_V_empty_n,
        p_src1_data_V_read,
        p_in1_V_V_din,
        p_in1_V_V_full_n,
        p_in1_V_V_write,
        p_src2_data_V_dout,
        p_src2_data_V_empty_n,
        p_src2_data_V_read,
        p_in2_V_V_din,
        p_in2_V_V_full_n,
        p_in2_V_V_write,
        p_in3_V_V_din,
        p_in3_V_V_full_n,
        p_in3_V_V_write,
        p_src1_cols_load7_loc_out_din,
        p_src1_cols_load7_loc_out_full_n,
        p_src1_cols_load7_loc_out_write
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_pp0_stage0 = 7'd16;
parameter    ap_ST_fsm_pp0_stage1 = 7'd32;
parameter    ap_ST_fsm_state8 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [9:0] p_src1_cols_load7_loc_dout;
input   p_src1_cols_load7_loc_empty_n;
output   p_src1_cols_load7_loc_read;
input  [7:0] p_src1_data_V_dout;
input   p_src1_data_V_empty_n;
output   p_src1_data_V_read;
output  [7:0] p_in1_V_V_din;
input   p_in1_V_V_full_n;
output   p_in1_V_V_write;
input  [7:0] p_src2_data_V_dout;
input   p_src2_data_V_empty_n;
output   p_src2_data_V_read;
output  [7:0] p_in2_V_V_din;
input   p_in2_V_V_full_n;
output   p_in2_V_V_write;
output  [7:0] p_in3_V_V_din;
input   p_in3_V_V_full_n;
output   p_in3_V_V_write;
output  [9:0] p_src1_cols_load7_loc_out_din;
input   p_src1_cols_load7_loc_out_full_n;
output   p_src1_cols_load7_loc_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg p_src1_cols_load7_loc_read;
reg p_src1_data_V_read;
reg p_in1_V_V_write;
reg p_src2_data_V_read;
reg p_in2_V_V_write;
reg p_in3_V_V_write;
reg p_src1_cols_load7_loc_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    p_src1_cols_load7_loc_blk_n;
wire    grp_read_r_fu_112_Mat_0_180_320_1_data_V_addr_blk_n;
reg    p_src1_data_V_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln317_reg_157;
reg    p_in1_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
wire    tmp_V_4_read_r_fu_118_Mat_0_180_320_1_data_V_addr_blk_n;
reg    p_src2_data_V_blk_n;
reg    p_in2_V_V_blk_n;
reg    p_in3_V_V_blk_n;
reg    p_src1_cols_load7_loc_out_blk_n;
reg   [17:0] indvar_flatten_reg_101;
reg    ap_block_state1;
wire   [17:0] grp_fu_141_p2;
reg   [17:0] bound_reg_152;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln317_fu_130_p2;
wire    ap_block_state5_pp0_stage0_iter0;
reg    ap_block_state7_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [17:0] add_ln317_fu_135_p2;
reg   [17:0] add_ln317_reg_161;
wire   [7:0] grp_read_r_fu_112_ap_return;
reg   [7:0] tmp_V_reg_166;
reg    ap_block_state6_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_11001;
wire   [7:0] tmp_V_4_read_r_fu_118_ap_return;
reg   [7:0] tmp_V_4_reg_171;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg    ap_block_pp0_stage1_subdone;
wire    grp_read_r_fu_112_ap_start;
wire    grp_read_r_fu_112_ap_done;
wire    grp_read_r_fu_112_ap_idle;
wire    grp_read_r_fu_112_ap_ready;
reg   [7:0] grp_read_r_fu_112_Mat_0_180_320_1_data_V_addr_dout;
reg    grp_read_r_fu_112_Mat_0_180_320_1_data_V_addr_empty_n;
wire    grp_read_r_fu_112_Mat_0_180_320_1_data_V_addr_read;
reg    grp_read_r_fu_112_ap_ce;
reg    ap_block_state6_pp0_stage1_iter0_ignore_call4;
reg    ap_block_pp0_stage1_11001_ignoreCallOp28;
wire    ap_block_state5_pp0_stage0_iter0_ignore_call8;
reg    ap_block_state7_pp0_stage0_iter1_ignore_call8;
reg    ap_block_pp0_stage0_11001_ignoreCallOp36;
wire    tmp_V_4_read_r_fu_118_ap_start;
wire    tmp_V_4_read_r_fu_118_ap_done;
wire    tmp_V_4_read_r_fu_118_ap_idle;
wire    tmp_V_4_read_r_fu_118_ap_ready;
wire    tmp_V_4_read_r_fu_118_Mat_0_180_320_1_data_V_addr_read;
reg    tmp_V_4_read_r_fu_118_ap_ce;
reg    ap_block_state6_pp0_stage1_iter0_ignore_call6;
reg    ap_block_pp0_stage1_11001_ignoreCallOp29;
reg   [17:0] ap_phi_mux_indvar_flatten_phi_fu_105_p4;
reg    grp_read_r_fu_112_ap_start_reg;
reg    tmp_V_4_read_r_fu_118_ap_start_reg;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] grp_fu_141_p0;
wire   [8:0] grp_fu_141_p1;
reg    grp_fu_141_ce;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state8;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [17:0] grp_fu_141_p00;
reg    ap_condition_90;
reg    ap_condition_107;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 grp_read_r_fu_112_ap_start_reg = 1'b0;
#0 tmp_V_4_read_r_fu_118_ap_start_reg = 1'b0;
end

read_r grp_read_r_fu_112(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_read_r_fu_112_ap_start),
    .ap_done(grp_read_r_fu_112_ap_done),
    .ap_idle(grp_read_r_fu_112_ap_idle),
    .ap_ready(grp_read_r_fu_112_ap_ready),
    .Mat_0_180_320_1_data_V_addr_dout(grp_read_r_fu_112_Mat_0_180_320_1_data_V_addr_dout),
    .Mat_0_180_320_1_data_V_addr_empty_n(grp_read_r_fu_112_Mat_0_180_320_1_data_V_addr_empty_n),
    .Mat_0_180_320_1_data_V_addr_read(grp_read_r_fu_112_Mat_0_180_320_1_data_V_addr_read),
    .ap_return(grp_read_r_fu_112_ap_return),
    .Mat_0_180_320_1_data_V_addr_blk_n(grp_read_r_fu_112_Mat_0_180_320_1_data_V_addr_blk_n),
    .ap_ce(grp_read_r_fu_112_ap_ce)
);

read_r tmp_V_4_read_r_fu_118(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(tmp_V_4_read_r_fu_118_ap_start),
    .ap_done(tmp_V_4_read_r_fu_118_ap_done),
    .ap_idle(tmp_V_4_read_r_fu_118_ap_idle),
    .ap_ready(tmp_V_4_read_r_fu_118_ap_ready),
    .Mat_0_180_320_1_data_V_addr_dout(p_src2_data_V_dout),
    .Mat_0_180_320_1_data_V_addr_empty_n(p_src2_data_V_empty_n),
    .Mat_0_180_320_1_data_V_addr_read(tmp_V_4_read_r_fu_118_Mat_0_180_320_1_data_V_addr_read),
    .ap_return(tmp_V_4_read_r_fu_118_ap_return),
    .Mat_0_180_320_1_data_V_addr_blk_n(tmp_V_4_read_r_fu_118_Mat_0_180_320_1_data_V_addr_blk_n),
    .ap_ce(tmp_V_4_read_r_fu_118_ap_ce)
);

ip_accel_app_mul_7jG #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 18 ))
ip_accel_app_mul_7jG_U506(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_141_p0),
    .din1(grp_fu_141_p1),
    .ce(grp_fu_141_ce),
    .dout(grp_fu_141_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_read_r_fu_112_ap_start_reg <= 1'b0;
    end else begin
        if ((((icmp_ln317_fu_130_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((icmp_ln317_reg_157 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
            grp_read_r_fu_112_ap_start_reg <= 1'b1;
        end else if ((grp_read_r_fu_112_ap_ready == 1'b1)) begin
            grp_read_r_fu_112_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp_V_4_read_r_fu_118_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln317_fu_130_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            tmp_V_4_read_r_fu_118_ap_start_reg <= 1'b1;
        end else if ((tmp_V_4_read_r_fu_118_ap_ready == 1'b1)) begin
            tmp_V_4_read_r_fu_118_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln317_reg_157 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_101 <= add_ln317_reg_161;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten_reg_101 <= 18'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln317_reg_161 <= add_ln317_fu_135_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bound_reg_152 <= grp_fu_141_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln317_reg_157 <= icmp_ln317_fu_130_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln317_reg_157 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_V_4_reg_171 <= tmp_V_4_read_r_fu_118_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln317_reg_157 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_V_reg_166 <= grp_read_r_fu_112_ap_return;
    end
end

always @ (*) begin
    if ((icmp_ln317_fu_130_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln317_reg_157 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_105_p4 = add_ln317_reg_161;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_105_p4 = indvar_flatten_reg_101;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | (~((p_src1_cols_load7_loc_out_full_n == 1'b0) | (p_src1_cols_load7_loc_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        grp_fu_141_ce = 1'b1;
    end else begin
        grp_fu_141_ce = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln317_reg_157 == 1'd0)) begin
        if ((1'b1 == ap_condition_107)) begin
            grp_read_r_fu_112_Mat_0_180_320_1_data_V_addr_dout = p_src2_data_V_dout;
        end else if ((1'b1 == ap_condition_90)) begin
            grp_read_r_fu_112_Mat_0_180_320_1_data_V_addr_dout = p_src1_data_V_dout;
        end else begin
            grp_read_r_fu_112_Mat_0_180_320_1_data_V_addr_dout = p_src2_data_V_dout;
        end
    end else begin
        grp_read_r_fu_112_Mat_0_180_320_1_data_V_addr_dout = p_src2_data_V_dout;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_read_r_fu_112_Mat_0_180_320_1_data_V_addr_empty_n = p_src2_data_V_empty_n;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_read_r_fu_112_Mat_0_180_320_1_data_V_addr_empty_n = p_src1_data_V_empty_n;
    end else begin
        grp_read_r_fu_112_Mat_0_180_320_1_data_V_addr_empty_n = p_src2_data_V_empty_n;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001_ignoreCallOp28)) | ((1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp36) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_read_r_fu_112_ap_ce = 1'b1;
    end else begin
        grp_read_r_fu_112_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln317_reg_157 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        p_in1_V_V_blk_n = p_in1_V_V_full_n;
    end else begin
        p_in1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln317_reg_157 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_in1_V_V_write = 1'b1;
    end else begin
        p_in1_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln317_reg_157 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        p_in2_V_V_blk_n = p_in2_V_V_full_n;
    end else begin
        p_in2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln317_reg_157 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_in2_V_V_write = 1'b1;
    end else begin
        p_in2_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln317_reg_157 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        p_in3_V_V_blk_n = p_in3_V_V_full_n;
    end else begin
        p_in3_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln317_reg_157 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_in3_V_V_write = 1'b1;
    end else begin
        p_in3_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src1_cols_load7_loc_blk_n = p_src1_cols_load7_loc_empty_n;
    end else begin
        p_src1_cols_load7_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src1_cols_load7_loc_out_blk_n = p_src1_cols_load7_loc_out_full_n;
    end else begin
        p_src1_cols_load7_loc_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_src1_cols_load7_loc_out_full_n == 1'b0) | (p_src1_cols_load7_loc_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src1_cols_load7_loc_out_write = 1'b1;
    end else begin
        p_src1_cols_load7_loc_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((p_src1_cols_load7_loc_out_full_n == 1'b0) | (p_src1_cols_load7_loc_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src1_cols_load7_loc_read = 1'b1;
    end else begin
        p_src1_cols_load7_loc_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln317_reg_157 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_src1_data_V_blk_n = grp_read_r_fu_112_Mat_0_180_320_1_data_V_addr_blk_n;
    end else begin
        p_src1_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln317_reg_157 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_src1_data_V_read = grp_read_r_fu_112_Mat_0_180_320_1_data_V_addr_read;
    end else begin
        p_src1_data_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln317_reg_157 == 1'd0)) begin
        if ((1'b1 == ap_condition_107)) begin
            p_src2_data_V_blk_n = grp_read_r_fu_112_Mat_0_180_320_1_data_V_addr_blk_n;
        end else if ((1'b1 == ap_condition_90)) begin
            p_src2_data_V_blk_n = tmp_V_4_read_r_fu_118_Mat_0_180_320_1_data_V_addr_blk_n;
        end else begin
            p_src2_data_V_blk_n = 1'b1;
        end
    end else begin
        p_src2_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((icmp_ln317_reg_157 == 1'd0)) begin
        if ((1'b1 == ap_condition_90)) begin
            p_src2_data_V_read = tmp_V_4_read_r_fu_118_Mat_0_180_320_1_data_V_addr_read;
        end else if ((1'b1 == ap_condition_107)) begin
            p_src2_data_V_read = grp_read_r_fu_112_Mat_0_180_320_1_data_V_addr_read;
        end else begin
            p_src2_data_V_read = 1'b0;
        end
    end else begin
        p_src2_data_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001_ignoreCallOp29) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_V_4_read_r_fu_118_ap_ce = 1'b1;
    end else begin
        tmp_V_4_read_r_fu_118_ap_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((p_src1_cols_load7_loc_out_full_n == 1'b0) | (p_src1_cols_load7_loc_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln317_fu_130_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln317_fu_130_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln317_fu_135_p2 = (ap_phi_mux_indvar_flatten_phi_fu_105_p4 + 18'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln317_reg_157 == 1'd0) & (p_in3_V_V_full_n == 1'b0)) | ((icmp_ln317_reg_157 == 1'd0) & (grp_read_r_fu_112_Mat_0_180_320_1_data_V_addr_blk_n == 1'b0)) | ((icmp_ln317_reg_157 == 1'd0) & (p_in2_V_V_full_n == 1'b0)) | ((icmp_ln317_reg_157 == 1'd0) & (p_in1_V_V_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln317_reg_157 == 1'd0) & (p_in3_V_V_full_n == 1'b0)) | ((icmp_ln317_reg_157 == 1'd0) & (grp_read_r_fu_112_Mat_0_180_320_1_data_V_addr_blk_n == 1'b0)) | ((icmp_ln317_reg_157 == 1'd0) & (p_in2_V_V_full_n == 1'b0)) | ((icmp_ln317_reg_157 == 1'd0) & (p_in1_V_V_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp36 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln317_reg_157 == 1'd0) & (p_in3_V_V_full_n == 1'b0)) | ((icmp_ln317_reg_157 == 1'd0) & (p_in2_V_V_full_n == 1'b0)) | ((icmp_ln317_reg_157 == 1'd0) & (p_in1_V_V_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln317_reg_157 == 1'd0) & (p_in3_V_V_full_n == 1'b0)) | ((icmp_ln317_reg_157 == 1'd0) & (grp_read_r_fu_112_Mat_0_180_320_1_data_V_addr_blk_n == 1'b0)) | ((icmp_ln317_reg_157 == 1'd0) & (p_in2_V_V_full_n == 1'b0)) | ((icmp_ln317_reg_157 == 1'd0) & (p_in1_V_V_full_n == 1'b0))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln317_reg_157 == 1'd0) & (tmp_V_4_read_r_fu_118_Mat_0_180_320_1_data_V_addr_blk_n == 1'b0)) | ((icmp_ln317_reg_157 == 1'd0) & (grp_read_r_fu_112_Mat_0_180_320_1_data_V_addr_blk_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage1_11001_ignoreCallOp28 = ((icmp_ln317_reg_157 == 1'd0) & (tmp_V_4_read_r_fu_118_Mat_0_180_320_1_data_V_addr_blk_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001_ignoreCallOp29 = ((icmp_ln317_reg_157 == 1'd0) & (grp_read_r_fu_112_Mat_0_180_320_1_data_V_addr_blk_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln317_reg_157 == 1'd0) & (tmp_V_4_read_r_fu_118_Mat_0_180_320_1_data_V_addr_blk_n == 1'b0)) | ((icmp_ln317_reg_157 == 1'd0) & (grp_read_r_fu_112_Mat_0_180_320_1_data_V_addr_blk_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((p_src1_cols_load7_loc_out_full_n == 1'b0) | (p_src1_cols_load7_loc_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter0_ignore_call8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage1_iter0 = (((icmp_ln317_reg_157 == 1'd0) & (tmp_V_4_read_r_fu_118_Mat_0_180_320_1_data_V_addr_blk_n == 1'b0)) | ((icmp_ln317_reg_157 == 1'd0) & (grp_read_r_fu_112_Mat_0_180_320_1_data_V_addr_blk_n == 1'b0)));
end

always @ (*) begin
    ap_block_state6_pp0_stage1_iter0_ignore_call4 = ((icmp_ln317_reg_157 == 1'd0) & (tmp_V_4_read_r_fu_118_Mat_0_180_320_1_data_V_addr_blk_n == 1'b0));
end

always @ (*) begin
    ap_block_state6_pp0_stage1_iter0_ignore_call6 = ((icmp_ln317_reg_157 == 1'd0) & (grp_read_r_fu_112_Mat_0_180_320_1_data_V_addr_blk_n == 1'b0));
end

always @ (*) begin
    ap_block_state7_pp0_stage0_iter1 = (((icmp_ln317_reg_157 == 1'd0) & (p_in3_V_V_full_n == 1'b0)) | ((icmp_ln317_reg_157 == 1'd0) & (grp_read_r_fu_112_Mat_0_180_320_1_data_V_addr_blk_n == 1'b0)) | ((icmp_ln317_reg_157 == 1'd0) & (p_in2_V_V_full_n == 1'b0)) | ((icmp_ln317_reg_157 == 1'd0) & (p_in1_V_V_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state7_pp0_stage0_iter1_ignore_call8 = (((icmp_ln317_reg_157 == 1'd0) & (p_in3_V_V_full_n == 1'b0)) | ((icmp_ln317_reg_157 == 1'd0) & (p_in2_V_V_full_n == 1'b0)) | ((icmp_ln317_reg_157 == 1'd0) & (p_in1_V_V_full_n == 1'b0)));
end

always @ (*) begin
    ap_condition_107 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0));
end

always @ (*) begin
    ap_condition_90 = ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign grp_fu_141_p0 = grp_fu_141_p00;

assign grp_fu_141_p00 = p_src1_cols_load7_loc_dout;

assign grp_fu_141_p1 = 18'd180;

assign grp_read_r_fu_112_ap_start = grp_read_r_fu_112_ap_start_reg;

assign icmp_ln317_fu_130_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_105_p4 == bound_reg_152) ? 1'b1 : 1'b0);

assign p_in1_V_V_din = tmp_V_reg_166;

assign p_in2_V_V_din = tmp_V_4_reg_171;

assign p_in3_V_V_din = grp_read_r_fu_112_ap_return;

assign p_src1_cols_load7_loc_out_din = p_src1_cols_load7_loc_dout;

assign start_out = real_start;

assign tmp_V_4_read_r_fu_118_ap_start = tmp_V_4_read_r_fu_118_ap_start_reg;

endmodule //merge_Loop_Read_Mat_s
