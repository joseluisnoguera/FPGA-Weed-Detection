// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module least_squares_line (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        centroids_4_address0,
        centroids_4_ce0,
        centroids_4_q0,
        size,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 72'd1;
parameter    ap_ST_fsm_pp0_stage0 = 72'd2;
parameter    ap_ST_fsm_state7 = 72'd4;
parameter    ap_ST_fsm_state8 = 72'd8;
parameter    ap_ST_fsm_state9 = 72'd16;
parameter    ap_ST_fsm_state10 = 72'd32;
parameter    ap_ST_fsm_state11 = 72'd64;
parameter    ap_ST_fsm_state12 = 72'd128;
parameter    ap_ST_fsm_state13 = 72'd256;
parameter    ap_ST_fsm_state14 = 72'd512;
parameter    ap_ST_fsm_state15 = 72'd1024;
parameter    ap_ST_fsm_state16 = 72'd2048;
parameter    ap_ST_fsm_state17 = 72'd4096;
parameter    ap_ST_fsm_state18 = 72'd8192;
parameter    ap_ST_fsm_state19 = 72'd16384;
parameter    ap_ST_fsm_state20 = 72'd32768;
parameter    ap_ST_fsm_state21 = 72'd65536;
parameter    ap_ST_fsm_state22 = 72'd131072;
parameter    ap_ST_fsm_state23 = 72'd262144;
parameter    ap_ST_fsm_state24 = 72'd524288;
parameter    ap_ST_fsm_state25 = 72'd1048576;
parameter    ap_ST_fsm_state26 = 72'd2097152;
parameter    ap_ST_fsm_state27 = 72'd4194304;
parameter    ap_ST_fsm_state28 = 72'd8388608;
parameter    ap_ST_fsm_state29 = 72'd16777216;
parameter    ap_ST_fsm_state30 = 72'd33554432;
parameter    ap_ST_fsm_state31 = 72'd67108864;
parameter    ap_ST_fsm_state32 = 72'd134217728;
parameter    ap_ST_fsm_state33 = 72'd268435456;
parameter    ap_ST_fsm_state34 = 72'd536870912;
parameter    ap_ST_fsm_state35 = 72'd1073741824;
parameter    ap_ST_fsm_state36 = 72'd2147483648;
parameter    ap_ST_fsm_state37 = 72'd4294967296;
parameter    ap_ST_fsm_state38 = 72'd8589934592;
parameter    ap_ST_fsm_state39 = 72'd17179869184;
parameter    ap_ST_fsm_state40 = 72'd34359738368;
parameter    ap_ST_fsm_state41 = 72'd68719476736;
parameter    ap_ST_fsm_state42 = 72'd137438953472;
parameter    ap_ST_fsm_state43 = 72'd274877906944;
parameter    ap_ST_fsm_state44 = 72'd549755813888;
parameter    ap_ST_fsm_state45 = 72'd1099511627776;
parameter    ap_ST_fsm_state46 = 72'd2199023255552;
parameter    ap_ST_fsm_state47 = 72'd4398046511104;
parameter    ap_ST_fsm_state48 = 72'd8796093022208;
parameter    ap_ST_fsm_state49 = 72'd17592186044416;
parameter    ap_ST_fsm_state50 = 72'd35184372088832;
parameter    ap_ST_fsm_state51 = 72'd70368744177664;
parameter    ap_ST_fsm_state52 = 72'd140737488355328;
parameter    ap_ST_fsm_state53 = 72'd281474976710656;
parameter    ap_ST_fsm_state54 = 72'd562949953421312;
parameter    ap_ST_fsm_state55 = 72'd1125899906842624;
parameter    ap_ST_fsm_state56 = 72'd2251799813685248;
parameter    ap_ST_fsm_state57 = 72'd4503599627370496;
parameter    ap_ST_fsm_state58 = 72'd9007199254740992;
parameter    ap_ST_fsm_state59 = 72'd18014398509481984;
parameter    ap_ST_fsm_state60 = 72'd36028797018963968;
parameter    ap_ST_fsm_state61 = 72'd72057594037927936;
parameter    ap_ST_fsm_state62 = 72'd144115188075855872;
parameter    ap_ST_fsm_state63 = 72'd288230376151711744;
parameter    ap_ST_fsm_state64 = 72'd576460752303423488;
parameter    ap_ST_fsm_state65 = 72'd1152921504606846976;
parameter    ap_ST_fsm_state66 = 72'd2305843009213693952;
parameter    ap_ST_fsm_state67 = 72'd4611686018427387904;
parameter    ap_ST_fsm_state68 = 72'd9223372036854775808;
parameter    ap_ST_fsm_state69 = 72'd18446744073709551616;
parameter    ap_ST_fsm_state70 = 72'd36893488147419103232;
parameter    ap_ST_fsm_state71 = 72'd73786976294838206464;
parameter    ap_ST_fsm_state72 = 72'd147573952589676412928;
parameter    ap_ST_fsm_state73 = 72'd295147905179352825856;
parameter    ap_ST_fsm_state74 = 72'd590295810358705651712;
parameter    ap_ST_fsm_state75 = 72'd1180591620717411303424;
parameter    ap_ST_fsm_state76 = 72'd2361183241434822606848;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] centroids_4_address0;
output   centroids_4_ce0;
input  [47:0] centroids_4_q0;
input  [3:0] size;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg centroids_4_ce0;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;

(* fsm_encoding = "none" *) reg   [71:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] sum_x_0_reg_149;
reg   [31:0] sum_y_0_reg_161;
reg   [31:0] sum_xy_0_reg_173;
reg   [31:0] sum_xx_0_reg_185;
reg   [3:0] i_0_reg_197;
wire   [0:0] icmp_ln185_fu_216_p2;
reg   [0:0] icmp_ln185_reg_931;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln185_reg_931_pp0_iter1_reg;
reg   [0:0] icmp_ln185_reg_931_pp0_iter2_reg;
reg   [0:0] icmp_ln185_reg_931_pp0_iter3_reg;
wire   [3:0] i_fu_222_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln186_fu_228_p2;
reg   [0:0] icmp_ln186_reg_940;
reg   [0:0] icmp_ln186_reg_940_pp0_iter1_reg;
reg   [0:0] icmp_ln186_reg_940_pp0_iter2_reg;
reg   [0:0] icmp_ln186_reg_940_pp0_iter3_reg;
wire   [31:0] zext_ln187_1_fu_242_p1;
wire   [31:0] sum_x_1_fu_280_p3;
reg   [31:0] sum_x_1_reg_959;
reg    ap_enable_reg_pp0_iter1;
wire   [31:0] sum_y_1_fu_287_p3;
reg   [31:0] sum_y_1_reg_964;
wire   [31:0] sum_xy_1_fu_294_p3;
reg   [31:0] sum_xy_1_reg_969;
wire   [31:0] sum_xx_1_fu_301_p3;
reg    ap_enable_reg_pp0_iter4;
wire    ap_CS_fsm_state7;
wire   [31:0] zext_ln195_fu_396_p1;
wire   [31:0] grp_fu_399_p2;
reg   [31:0] udiv_ln195_reg_995;
wire    ap_CS_fsm_state42;
wire   [31:0] grp_fu_405_p2;
reg   [31:0] udiv_ln195_1_reg_1000;
wire   [31:0] select_ln935_fu_747_p3;
reg   [31:0] select_ln935_reg_1005;
wire    ap_CS_fsm_state74;
wire   [31:0] grp_fu_212_p1;
wire    ap_CS_fsm_state75;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg   [31:0] ap_phi_mux_sum_x_0_phi_fu_153_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_sum_y_0_phi_fu_165_p4;
reg   [31:0] ap_phi_mux_sum_xy_0_phi_fu_177_p4;
reg   [31:0] ap_phi_mux_sum_xx_0_phi_fu_189_p4;
wire   [63:0] zext_ln187_fu_233_p1;
wire   [15:0] trunc_ln187_fu_238_p1;
wire  signed [31:0] centroids_y_1_load_n_fu_252_p4;
wire   [15:0] mul_ln189_fu_268_p0;
wire   [31:0] mul_ln189_fu_268_p2;
wire   [31:0] sum_x_fu_246_p2;
wire   [31:0] sum_y_fu_262_p2;
wire   [31:0] sum_xy_fu_274_p2;
wire   [31:0] grp_fu_915_p3;
wire   [31:0] mul_ln731_fu_314_p0;
wire   [3:0] mul_ln731_fu_314_p1;
wire   [35:0] zext_ln731_fu_307_p1;
wire   [35:0] mul_ln731_fu_314_p2;
wire   [31:0] mul_ln731_3_fu_332_p0;
wire   [47:0] zext_ln731_9_fu_320_p1;
wire   [31:0] mul_ln731_3_fu_332_p1;
wire   [31:0] mul_ln731_2_fu_342_p0;
wire   [3:0] mul_ln731_2_fu_342_p1;
wire   [35:0] mul_ln731_2_fu_342_p2;
wire   [31:0] mul_ln731_4_fu_352_p0;
wire   [31:0] mul_ln731_4_fu_352_p1;
wire   [47:0] zext_ln731_11_fu_328_p1;
wire   [47:0] mul_ln731_3_fu_332_p2;
wire   [47:0] zext_ln731_13_fu_348_p1;
wire   [47:0] mul_ln731_4_fu_352_p2;
wire   [47:0] sub_ln731_4_fu_364_p2;
wire   [47:0] sub_ln731_fu_358_p2;
wire  signed [55:0] shl_ln731_1_fu_370_p3;
wire   [63:0] grp_fu_390_p0;
wire   [3:0] grp_fu_399_p1;
wire   [3:0] grp_fu_405_p1;
wire  signed [63:0] grp_fu_390_p2;
wire  signed [64:0] tmp_V_20_fu_411_p1;
wire   [0:0] p_Result_25_fu_421_p3;
wire   [64:0] tmp_V_fu_429_p2;
wire   [64:0] tmp_V_21_fu_435_p3;
wire   [63:0] p_Result_s_fu_443_p4;
reg   [63:0] tmp_s_fu_453_p3;
wire   [0:0] trunc_ln1081_fu_471_p1;
wire   [63:0] p_Result_26_fu_475_p3;
reg   [63:0] tmp_fu_483_p3;
wire   [31:0] trunc_ln1074_fu_461_p1;
wire   [31:0] trunc_ln1083_fu_491_p1;
wire   [0:0] icmp_ln1075_fu_465_p2;
wire   [31:0] NZeros_fu_495_p2;
wire   [31:0] l_fu_501_p3;
wire   [31:0] sub_ln944_fu_509_p2;
wire   [31:0] lsb_index_fu_515_p2;
wire   [30:0] tmp_43_fu_521_p4;
wire   [6:0] trunc_ln947_fu_537_p1;
wire   [6:0] sub_ln947_fu_541_p2;
wire   [64:0] zext_ln947_fu_547_p1;
wire   [64:0] lshr_ln947_fu_551_p2;
wire   [64:0] p_Result_18_fu_557_p2;
wire   [0:0] icmp_ln947_fu_531_p2;
wire   [0:0] icmp_ln947_1_fu_563_p2;
wire   [0:0] tmp_44_fu_575_p3;
wire   [0:0] p_Result_9_fu_589_p3;
wire   [0:0] xor_ln949_fu_583_p2;
wire   [0:0] and_ln949_fu_597_p2;
wire   [0:0] a_fu_569_p2;
wire   [0:0] or_ln949_fu_603_p2;
wire   [31:0] add_ln954_fu_623_p2;
wire   [64:0] zext_ln954_fu_629_p1;
wire   [31:0] sub_ln954_fu_639_p2;
wire   [64:0] zext_ln954_1_fu_645_p1;
wire   [64:0] lshr_ln954_fu_633_p2;
wire   [64:0] shl_ln954_fu_649_p2;
wire   [0:0] icmp_ln954_fu_617_p2;
wire   [31:0] trunc_ln954_fu_655_p1;
wire   [31:0] trunc_ln954_2_fu_659_p1;
wire   [31:0] m_fu_663_p3;
wire   [31:0] or_ln_fu_609_p3;
wire   [31:0] m_6_fu_671_p2;
wire   [30:0] m_8_fu_677_p4;
wire   [0:0] tmp_45_fu_691_p3;
wire   [7:0] trunc_ln943_fu_707_p1;
wire   [7:0] select_ln964_fu_699_p3;
wire   [7:0] sub_ln964_fu_711_p2;
wire   [7:0] add_ln964_fu_717_p2;
wire   [31:0] m_10_fu_687_p1;
wire   [8:0] tmp_8_fu_723_p3;
wire   [31:0] p_Result_27_fu_731_p5;
wire   [0:0] icmp_ln935_fu_415_p2;
wire   [31:0] bitcast_ln739_fu_743_p1;
wire   [31:0] grp_fu_208_p2;
wire    ap_CS_fsm_state76;
wire   [31:0] p_Val2_25_fu_755_p1;
wire   [22:0] tmp_V_23_fu_777_p1;
wire   [24:0] mantissa_V_fu_781_p4;
wire   [7:0] tmp_V_22_fu_767_p4;
wire   [8:0] zext_ln339_fu_795_p1;
wire   [8:0] add_ln339_fu_799_p2;
wire   [7:0] sub_ln1311_fu_813_p2;
wire   [0:0] isNeg_fu_805_p3;
wire  signed [8:0] sext_ln1311_fu_819_p1;
wire  signed [8:0] ush_fu_823_p3;
wire  signed [31:0] sext_ln1311_2_fu_831_p1;
wire  signed [24:0] sext_ln1311_3_fu_835_p1;
wire   [78:0] zext_ln682_fu_791_p1;
wire   [78:0] zext_ln1287_fu_839_p1;
wire   [24:0] r_V_fu_843_p2;
wire   [0:0] tmp_48_fu_855_p3;
wire   [78:0] r_V_4_fu_849_p2;
wire   [31:0] zext_ln662_fu_863_p1;
wire   [31:0] tmp_4_fu_867_p4;
wire   [31:0] p_Val2_s_fu_877_p3;
wire   [0:0] p_Result_28_fu_759_p3;
wire   [31:0] result_V_2_fu_885_p2;
wire   [31:0] p_Val2_27_fu_891_p3;
wire   [31:0] sub_ln195_fu_899_p2;
wire   [15:0] grp_fu_915_p0;
wire   [15:0] grp_fu_915_p1;
reg    grp_fu_390_ap_start;
wire    grp_fu_390_ap_done;
reg    grp_fu_399_ap_start;
wire    grp_fu_399_ap_done;
reg    grp_fu_405_ap_start;
wire    grp_fu_405_ap_done;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [71:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [35:0] mul_ln731_2_fu_342_p00;
wire   [47:0] mul_ln731_3_fu_332_p10;
wire   [35:0] mul_ln731_fu_314_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 72'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
end

ip_accel_app_fmulKfY #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ip_accel_app_fmulKfY_U402(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_212_p1),
    .din1(select_ln935_reg_1005),
    .ce(1'b1),
    .dout(grp_fu_208_p2)
);

ip_accel_app_uitoLf8 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ip_accel_app_uitoLf8_U403(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(udiv_ln195_1_reg_1000),
    .ce(1'b1),
    .dout(grp_fu_212_p1)
);

ip_accel_app_sdivMgi #(
    .ID( 1 ),
    .NUM_STAGE( 68 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 56 ),
    .dout_WIDTH( 64 ))
ip_accel_app_sdivMgi_U404(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_390_ap_start),
    .done(grp_fu_390_ap_done),
    .din0(grp_fu_390_p0),
    .din1(shl_ln731_1_fu_370_p3),
    .ce(1'b1),
    .dout(grp_fu_390_p2)
);

ip_accel_app_udivNgs #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
ip_accel_app_udivNgs_U405(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_399_ap_start),
    .done(grp_fu_399_ap_done),
    .din0(sum_y_0_reg_161),
    .din1(grp_fu_399_p1),
    .ce(1'b1),
    .dout(grp_fu_399_p2)
);

ip_accel_app_udivNgs #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
ip_accel_app_udivNgs_U406(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_405_ap_start),
    .done(grp_fu_405_ap_done),
    .din0(sum_x_0_reg_149),
    .din1(grp_fu_405_p1),
    .ce(1'b1),
    .dout(grp_fu_405_p2)
);

ip_accel_app_mac_OgC #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ip_accel_app_mac_OgC_U407(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_915_p0),
    .din1(grp_fu_915_p1),
    .din2(ap_phi_mux_sum_xx_0_phi_fu_189_p4),
    .ce(1'b1),
    .dout(grp_fu_915_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state76)) begin
            ap_return_0_preg <= select_ln935_reg_1005;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state76)) begin
            ap_return_1_preg <= sub_ln195_fu_899_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln185_fu_216_p2 == 1'd0))) begin
        i_0_reg_197 <= i_fu_222_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_197 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln185_reg_931_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sum_x_0_reg_149 <= sum_x_1_reg_959;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sum_x_0_reg_149 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln185_reg_931_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sum_xx_0_reg_185 <= sum_xx_1_fu_301_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sum_xx_0_reg_185 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln185_reg_931_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sum_xy_0_reg_173 <= sum_xy_1_reg_969;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sum_xy_0_reg_173 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln185_reg_931_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sum_y_0_reg_161 <= sum_y_1_reg_964;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sum_y_0_reg_161 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln185_reg_931 <= icmp_ln185_fu_216_p2;
        icmp_ln185_reg_931_pp0_iter1_reg <= icmp_ln185_reg_931;
        icmp_ln186_reg_940_pp0_iter1_reg <= icmp_ln186_reg_940;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln185_reg_931_pp0_iter2_reg <= icmp_ln185_reg_931_pp0_iter1_reg;
        icmp_ln185_reg_931_pp0_iter3_reg <= icmp_ln185_reg_931_pp0_iter2_reg;
        icmp_ln186_reg_940_pp0_iter2_reg <= icmp_ln186_reg_940_pp0_iter1_reg;
        icmp_ln186_reg_940_pp0_iter3_reg <= icmp_ln186_reg_940_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln185_fu_216_p2 == 1'd0))) begin
        icmp_ln186_reg_940 <= icmp_ln186_fu_228_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        select_ln935_reg_1005 <= select_ln935_fu_747_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln185_reg_931 == 1'd0))) begin
        sum_x_1_reg_959 <= sum_x_1_fu_280_p3;
        sum_xy_1_reg_969 <= sum_xy_1_fu_294_p3;
        sum_y_1_reg_964 <= sum_y_1_fu_287_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        udiv_ln195_1_reg_1000 <= grp_fu_405_p2;
        udiv_ln195_reg_995 <= grp_fu_399_p2;
    end
end

always @ (*) begin
    if ((icmp_ln185_fu_216_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state76) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln185_reg_931_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_sum_x_0_phi_fu_153_p4 = sum_x_1_reg_959;
    end else begin
        ap_phi_mux_sum_x_0_phi_fu_153_p4 = sum_x_0_reg_149;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln185_reg_931_pp0_iter3_reg == 1'd0))) begin
        ap_phi_mux_sum_xx_0_phi_fu_189_p4 = sum_xx_1_fu_301_p3;
    end else begin
        ap_phi_mux_sum_xx_0_phi_fu_189_p4 = sum_xx_0_reg_185;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln185_reg_931_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_sum_xy_0_phi_fu_177_p4 = sum_xy_1_reg_969;
    end else begin
        ap_phi_mux_sum_xy_0_phi_fu_177_p4 = sum_xy_0_reg_173;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln185_reg_931_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_sum_y_0_phi_fu_165_p4 = sum_y_1_reg_964;
    end else begin
        ap_phi_mux_sum_y_0_phi_fu_165_p4 = sum_y_0_reg_161;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        ap_return_0 = select_ln935_reg_1005;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        ap_return_1 = sub_ln195_fu_899_p2;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        centroids_4_ce0 = 1'b1;
    end else begin
        centroids_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_390_ap_start = 1'b1;
    end else begin
        grp_fu_390_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_399_ap_start = 1'b1;
    end else begin
        grp_fu_399_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_405_ap_start = 1'b1;
    end else begin
        grp_fu_405_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln185_fu_216_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln185_fu_216_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign NZeros_fu_495_p2 = (trunc_ln1074_fu_461_p1 + trunc_ln1083_fu_491_p1);

assign a_fu_569_p2 = (icmp_ln947_fu_531_p2 & icmp_ln947_1_fu_563_p2);

assign add_ln339_fu_799_p2 = ($signed(9'd385) + $signed(zext_ln339_fu_795_p1));

assign add_ln954_fu_623_p2 = ($signed(32'd4294967271) + $signed(sub_ln944_fu_509_p2));

assign add_ln964_fu_717_p2 = (select_ln964_fu_699_p3 + sub_ln964_fu_711_p2);

assign and_ln949_fu_597_p2 = (xor_ln949_fu_583_p2 & p_Result_9_fu_589_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd71];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln739_fu_743_p1 = p_Result_27_fu_731_p5;

assign centroids_4_address0 = zext_ln187_fu_233_p1;

assign centroids_y_1_load_n_fu_252_p4 = {{centroids_4_q0[47:16]}};

assign grp_fu_390_p0 = {{sub_ln731_fu_358_p2}, {16'd0}};

assign grp_fu_399_p1 = zext_ln195_fu_396_p1;

assign grp_fu_405_p1 = zext_ln195_fu_396_p1;

assign grp_fu_915_p0 = zext_ln187_1_fu_242_p1;

assign grp_fu_915_p1 = zext_ln187_1_fu_242_p1;

assign i_fu_222_p2 = (i_0_reg_197 + 4'd1);

assign icmp_ln1075_fu_465_p2 = ((p_Result_s_fu_443_p4 == 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln185_fu_216_p2 = ((i_0_reg_197 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln186_fu_228_p2 = ((i_0_reg_197 < size) ? 1'b1 : 1'b0);

assign icmp_ln935_fu_415_p2 = ((grp_fu_390_p2 == 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln947_1_fu_563_p2 = ((p_Result_18_fu_557_p2 != 65'd0) ? 1'b1 : 1'b0);

assign icmp_ln947_fu_531_p2 = (($signed(tmp_43_fu_521_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln954_fu_617_p2 = (($signed(lsb_index_fu_515_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign isNeg_fu_805_p3 = add_ln339_fu_799_p2[32'd8];

assign l_fu_501_p3 = ((icmp_ln1075_fu_465_p2[0:0] === 1'b1) ? NZeros_fu_495_p2 : trunc_ln1074_fu_461_p1);

assign lsb_index_fu_515_p2 = ($signed(32'd4294967272) + $signed(sub_ln944_fu_509_p2));

assign lshr_ln947_fu_551_p2 = 65'd36893488147419103231 >> zext_ln947_fu_547_p1;

assign lshr_ln954_fu_633_p2 = tmp_V_21_fu_435_p3 >> zext_ln954_fu_629_p1;

assign m_10_fu_687_p1 = m_8_fu_677_p4;

assign m_6_fu_671_p2 = (m_fu_663_p3 + or_ln_fu_609_p3);

assign m_8_fu_677_p4 = {{m_6_fu_671_p2[31:1]}};

assign m_fu_663_p3 = ((icmp_ln954_fu_617_p2[0:0] === 1'b1) ? trunc_ln954_fu_655_p1 : trunc_ln954_2_fu_659_p1);

assign mantissa_V_fu_781_p4 = {{{{1'd1}, {tmp_V_23_fu_777_p1}}}, {1'd0}};

assign mul_ln189_fu_268_p0 = zext_ln187_1_fu_242_p1;

assign mul_ln189_fu_268_p2 = ($signed({{1'b0}, {mul_ln189_fu_268_p0}}) * $signed(centroids_y_1_load_n_fu_252_p4));

assign mul_ln731_2_fu_342_p0 = mul_ln731_2_fu_342_p00;

assign mul_ln731_2_fu_342_p00 = sum_xx_0_reg_185;

assign mul_ln731_2_fu_342_p1 = zext_ln731_fu_307_p1;

assign mul_ln731_2_fu_342_p2 = (mul_ln731_2_fu_342_p0 * mul_ln731_2_fu_342_p1);

assign mul_ln731_3_fu_332_p0 = zext_ln731_9_fu_320_p1;

assign mul_ln731_3_fu_332_p1 = mul_ln731_3_fu_332_p10;

assign mul_ln731_3_fu_332_p10 = sum_y_0_reg_161;

assign mul_ln731_3_fu_332_p2 = (mul_ln731_3_fu_332_p0 * mul_ln731_3_fu_332_p1);

assign mul_ln731_4_fu_352_p0 = zext_ln731_9_fu_320_p1;

assign mul_ln731_4_fu_352_p1 = zext_ln731_9_fu_320_p1;

assign mul_ln731_4_fu_352_p2 = (mul_ln731_4_fu_352_p0 * mul_ln731_4_fu_352_p1);

assign mul_ln731_fu_314_p0 = mul_ln731_fu_314_p00;

assign mul_ln731_fu_314_p00 = sum_xy_0_reg_173;

assign mul_ln731_fu_314_p1 = zext_ln731_fu_307_p1;

assign mul_ln731_fu_314_p2 = (mul_ln731_fu_314_p0 * mul_ln731_fu_314_p1);

assign or_ln949_fu_603_p2 = (and_ln949_fu_597_p2 | a_fu_569_p2);

assign or_ln_fu_609_p3 = {{31'd0}, {or_ln949_fu_603_p2}};

assign p_Result_18_fu_557_p2 = (tmp_V_21_fu_435_p3 & lshr_ln947_fu_551_p2);

assign p_Result_25_fu_421_p3 = grp_fu_390_p2[32'd63];

assign p_Result_26_fu_475_p3 = {{trunc_ln1081_fu_471_p1}, {63'd9223372036854775807}};

assign p_Result_27_fu_731_p5 = {{tmp_8_fu_723_p3}, {m_10_fu_687_p1[22:0]}};

assign p_Result_28_fu_759_p3 = p_Val2_25_fu_755_p1[32'd31];

assign p_Result_9_fu_589_p3 = tmp_V_21_fu_435_p3[lsb_index_fu_515_p2];

assign p_Result_s_fu_443_p4 = {{tmp_V_21_fu_435_p3[64:1]}};

assign p_Val2_25_fu_755_p1 = grp_fu_208_p2;

assign p_Val2_27_fu_891_p3 = ((p_Result_28_fu_759_p3[0:0] === 1'b1) ? result_V_2_fu_885_p2 : p_Val2_s_fu_877_p3);

assign p_Val2_s_fu_877_p3 = ((isNeg_fu_805_p3[0:0] === 1'b1) ? zext_ln662_fu_863_p1 : tmp_4_fu_867_p4);

assign r_V_4_fu_849_p2 = zext_ln682_fu_791_p1 << zext_ln1287_fu_839_p1;

assign r_V_fu_843_p2 = mantissa_V_fu_781_p4 >> sext_ln1311_3_fu_835_p1;

assign result_V_2_fu_885_p2 = (32'd0 - p_Val2_s_fu_877_p3);

assign select_ln935_fu_747_p3 = ((icmp_ln935_fu_415_p2[0:0] === 1'b1) ? 32'd0 : bitcast_ln739_fu_743_p1);

assign select_ln964_fu_699_p3 = ((tmp_45_fu_691_p3[0:0] === 1'b1) ? 8'd127 : 8'd126);

assign sext_ln1311_2_fu_831_p1 = ush_fu_823_p3;

assign sext_ln1311_3_fu_835_p1 = ush_fu_823_p3;

assign sext_ln1311_fu_819_p1 = $signed(sub_ln1311_fu_813_p2);

assign shl_ln731_1_fu_370_p3 = {{sub_ln731_4_fu_364_p2}, {8'd0}};

assign shl_ln954_fu_649_p2 = tmp_V_21_fu_435_p3 << zext_ln954_1_fu_645_p1;

assign sub_ln1311_fu_813_p2 = (8'd127 - tmp_V_22_fu_767_p4);

assign sub_ln195_fu_899_p2 = (udiv_ln195_reg_995 - p_Val2_27_fu_891_p3);

assign sub_ln731_4_fu_364_p2 = (zext_ln731_13_fu_348_p1 - mul_ln731_4_fu_352_p2);

assign sub_ln731_fu_358_p2 = (zext_ln731_11_fu_328_p1 - mul_ln731_3_fu_332_p2);

assign sub_ln944_fu_509_p2 = (32'd65 - l_fu_501_p3);

assign sub_ln947_fu_541_p2 = ($signed(7'd90) - $signed(trunc_ln947_fu_537_p1));

assign sub_ln954_fu_639_p2 = (32'd25 - sub_ln944_fu_509_p2);

assign sub_ln964_fu_711_p2 = (8'd57 - trunc_ln943_fu_707_p1);

assign sum_x_1_fu_280_p3 = ((icmp_ln186_reg_940[0:0] === 1'b1) ? sum_x_fu_246_p2 : ap_phi_mux_sum_x_0_phi_fu_153_p4);

assign sum_x_fu_246_p2 = (zext_ln187_1_fu_242_p1 + ap_phi_mux_sum_x_0_phi_fu_153_p4);

assign sum_xx_1_fu_301_p3 = ((icmp_ln186_reg_940_pp0_iter3_reg[0:0] === 1'b1) ? grp_fu_915_p3 : sum_xx_0_reg_185);

assign sum_xy_1_fu_294_p3 = ((icmp_ln186_reg_940[0:0] === 1'b1) ? sum_xy_fu_274_p2 : ap_phi_mux_sum_xy_0_phi_fu_177_p4);

assign sum_xy_fu_274_p2 = (ap_phi_mux_sum_xy_0_phi_fu_177_p4 + mul_ln189_fu_268_p2);

assign sum_y_1_fu_287_p3 = ((icmp_ln186_reg_940[0:0] === 1'b1) ? sum_y_fu_262_p2 : ap_phi_mux_sum_y_0_phi_fu_165_p4);

assign sum_y_fu_262_p2 = ($signed(ap_phi_mux_sum_y_0_phi_fu_165_p4) + $signed(centroids_y_1_load_n_fu_252_p4));

assign tmp_43_fu_521_p4 = {{lsb_index_fu_515_p2[31:1]}};

assign tmp_44_fu_575_p3 = lsb_index_fu_515_p2[32'd31];

assign tmp_45_fu_691_p3 = m_6_fu_671_p2[32'd25];

assign tmp_48_fu_855_p3 = r_V_fu_843_p2[32'd24];

assign tmp_4_fu_867_p4 = {{r_V_4_fu_849_p2[55:24]}};

assign tmp_8_fu_723_p3 = {{p_Result_25_fu_421_p3}, {add_ln964_fu_717_p2}};

assign tmp_V_20_fu_411_p1 = grp_fu_390_p2;

assign tmp_V_21_fu_435_p3 = ((p_Result_25_fu_421_p3[0:0] === 1'b1) ? tmp_V_fu_429_p2 : tmp_V_20_fu_411_p1);

assign tmp_V_22_fu_767_p4 = {{p_Val2_25_fu_755_p1[30:23]}};

assign tmp_V_23_fu_777_p1 = p_Val2_25_fu_755_p1[22:0];

assign tmp_V_fu_429_p2 = ($signed(65'd0) - $signed(tmp_V_20_fu_411_p1));

always @ (p_Result_26_fu_475_p3) begin
    if (p_Result_26_fu_475_p3[63] == 1'b1) begin
        tmp_fu_483_p3 = 64'd0;
    end else if (p_Result_26_fu_475_p3[62] == 1'b1) begin
        tmp_fu_483_p3 = 64'd1;
    end else if (p_Result_26_fu_475_p3[61] == 1'b1) begin
        tmp_fu_483_p3 = 64'd2;
    end else if (p_Result_26_fu_475_p3[60] == 1'b1) begin
        tmp_fu_483_p3 = 64'd3;
    end else if (p_Result_26_fu_475_p3[59] == 1'b1) begin
        tmp_fu_483_p3 = 64'd4;
    end else if (p_Result_26_fu_475_p3[58] == 1'b1) begin
        tmp_fu_483_p3 = 64'd5;
    end else if (p_Result_26_fu_475_p3[57] == 1'b1) begin
        tmp_fu_483_p3 = 64'd6;
    end else if (p_Result_26_fu_475_p3[56] == 1'b1) begin
        tmp_fu_483_p3 = 64'd7;
    end else if (p_Result_26_fu_475_p3[55] == 1'b1) begin
        tmp_fu_483_p3 = 64'd8;
    end else if (p_Result_26_fu_475_p3[54] == 1'b1) begin
        tmp_fu_483_p3 = 64'd9;
    end else if (p_Result_26_fu_475_p3[53] == 1'b1) begin
        tmp_fu_483_p3 = 64'd10;
    end else if (p_Result_26_fu_475_p3[52] == 1'b1) begin
        tmp_fu_483_p3 = 64'd11;
    end else if (p_Result_26_fu_475_p3[51] == 1'b1) begin
        tmp_fu_483_p3 = 64'd12;
    end else if (p_Result_26_fu_475_p3[50] == 1'b1) begin
        tmp_fu_483_p3 = 64'd13;
    end else if (p_Result_26_fu_475_p3[49] == 1'b1) begin
        tmp_fu_483_p3 = 64'd14;
    end else if (p_Result_26_fu_475_p3[48] == 1'b1) begin
        tmp_fu_483_p3 = 64'd15;
    end else if (p_Result_26_fu_475_p3[47] == 1'b1) begin
        tmp_fu_483_p3 = 64'd16;
    end else if (p_Result_26_fu_475_p3[46] == 1'b1) begin
        tmp_fu_483_p3 = 64'd17;
    end else if (p_Result_26_fu_475_p3[45] == 1'b1) begin
        tmp_fu_483_p3 = 64'd18;
    end else if (p_Result_26_fu_475_p3[44] == 1'b1) begin
        tmp_fu_483_p3 = 64'd19;
    end else if (p_Result_26_fu_475_p3[43] == 1'b1) begin
        tmp_fu_483_p3 = 64'd20;
    end else if (p_Result_26_fu_475_p3[42] == 1'b1) begin
        tmp_fu_483_p3 = 64'd21;
    end else if (p_Result_26_fu_475_p3[41] == 1'b1) begin
        tmp_fu_483_p3 = 64'd22;
    end else if (p_Result_26_fu_475_p3[40] == 1'b1) begin
        tmp_fu_483_p3 = 64'd23;
    end else if (p_Result_26_fu_475_p3[39] == 1'b1) begin
        tmp_fu_483_p3 = 64'd24;
    end else if (p_Result_26_fu_475_p3[38] == 1'b1) begin
        tmp_fu_483_p3 = 64'd25;
    end else if (p_Result_26_fu_475_p3[37] == 1'b1) begin
        tmp_fu_483_p3 = 64'd26;
    end else if (p_Result_26_fu_475_p3[36] == 1'b1) begin
        tmp_fu_483_p3 = 64'd27;
    end else if (p_Result_26_fu_475_p3[35] == 1'b1) begin
        tmp_fu_483_p3 = 64'd28;
    end else if (p_Result_26_fu_475_p3[34] == 1'b1) begin
        tmp_fu_483_p3 = 64'd29;
    end else if (p_Result_26_fu_475_p3[33] == 1'b1) begin
        tmp_fu_483_p3 = 64'd30;
    end else if (p_Result_26_fu_475_p3[32] == 1'b1) begin
        tmp_fu_483_p3 = 64'd31;
    end else if (p_Result_26_fu_475_p3[31] == 1'b1) begin
        tmp_fu_483_p3 = 64'd32;
    end else if (p_Result_26_fu_475_p3[30] == 1'b1) begin
        tmp_fu_483_p3 = 64'd33;
    end else if (p_Result_26_fu_475_p3[29] == 1'b1) begin
        tmp_fu_483_p3 = 64'd34;
    end else if (p_Result_26_fu_475_p3[28] == 1'b1) begin
        tmp_fu_483_p3 = 64'd35;
    end else if (p_Result_26_fu_475_p3[27] == 1'b1) begin
        tmp_fu_483_p3 = 64'd36;
    end else if (p_Result_26_fu_475_p3[26] == 1'b1) begin
        tmp_fu_483_p3 = 64'd37;
    end else if (p_Result_26_fu_475_p3[25] == 1'b1) begin
        tmp_fu_483_p3 = 64'd38;
    end else if (p_Result_26_fu_475_p3[24] == 1'b1) begin
        tmp_fu_483_p3 = 64'd39;
    end else if (p_Result_26_fu_475_p3[23] == 1'b1) begin
        tmp_fu_483_p3 = 64'd40;
    end else if (p_Result_26_fu_475_p3[22] == 1'b1) begin
        tmp_fu_483_p3 = 64'd41;
    end else if (p_Result_26_fu_475_p3[21] == 1'b1) begin
        tmp_fu_483_p3 = 64'd42;
    end else if (p_Result_26_fu_475_p3[20] == 1'b1) begin
        tmp_fu_483_p3 = 64'd43;
    end else if (p_Result_26_fu_475_p3[19] == 1'b1) begin
        tmp_fu_483_p3 = 64'd44;
    end else if (p_Result_26_fu_475_p3[18] == 1'b1) begin
        tmp_fu_483_p3 = 64'd45;
    end else if (p_Result_26_fu_475_p3[17] == 1'b1) begin
        tmp_fu_483_p3 = 64'd46;
    end else if (p_Result_26_fu_475_p3[16] == 1'b1) begin
        tmp_fu_483_p3 = 64'd47;
    end else if (p_Result_26_fu_475_p3[15] == 1'b1) begin
        tmp_fu_483_p3 = 64'd48;
    end else if (p_Result_26_fu_475_p3[14] == 1'b1) begin
        tmp_fu_483_p3 = 64'd49;
    end else if (p_Result_26_fu_475_p3[13] == 1'b1) begin
        tmp_fu_483_p3 = 64'd50;
    end else if (p_Result_26_fu_475_p3[12] == 1'b1) begin
        tmp_fu_483_p3 = 64'd51;
    end else if (p_Result_26_fu_475_p3[11] == 1'b1) begin
        tmp_fu_483_p3 = 64'd52;
    end else if (p_Result_26_fu_475_p3[10] == 1'b1) begin
        tmp_fu_483_p3 = 64'd53;
    end else if (p_Result_26_fu_475_p3[9] == 1'b1) begin
        tmp_fu_483_p3 = 64'd54;
    end else if (p_Result_26_fu_475_p3[8] == 1'b1) begin
        tmp_fu_483_p3 = 64'd55;
    end else if (p_Result_26_fu_475_p3[7] == 1'b1) begin
        tmp_fu_483_p3 = 64'd56;
    end else if (p_Result_26_fu_475_p3[6] == 1'b1) begin
        tmp_fu_483_p3 = 64'd57;
    end else if (p_Result_26_fu_475_p3[5] == 1'b1) begin
        tmp_fu_483_p3 = 64'd58;
    end else if (p_Result_26_fu_475_p3[4] == 1'b1) begin
        tmp_fu_483_p3 = 64'd59;
    end else if (p_Result_26_fu_475_p3[3] == 1'b1) begin
        tmp_fu_483_p3 = 64'd60;
    end else if (p_Result_26_fu_475_p3[2] == 1'b1) begin
        tmp_fu_483_p3 = 64'd61;
    end else if (p_Result_26_fu_475_p3[1] == 1'b1) begin
        tmp_fu_483_p3 = 64'd62;
    end else if (p_Result_26_fu_475_p3[0] == 1'b1) begin
        tmp_fu_483_p3 = 64'd63;
    end else begin
        tmp_fu_483_p3 = 64'd64;
    end
end

always @ (p_Result_s_fu_443_p4) begin
    if (p_Result_s_fu_443_p4[63] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd0;
    end else if (p_Result_s_fu_443_p4[62] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd1;
    end else if (p_Result_s_fu_443_p4[61] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd2;
    end else if (p_Result_s_fu_443_p4[60] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd3;
    end else if (p_Result_s_fu_443_p4[59] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd4;
    end else if (p_Result_s_fu_443_p4[58] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd5;
    end else if (p_Result_s_fu_443_p4[57] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd6;
    end else if (p_Result_s_fu_443_p4[56] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd7;
    end else if (p_Result_s_fu_443_p4[55] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd8;
    end else if (p_Result_s_fu_443_p4[54] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd9;
    end else if (p_Result_s_fu_443_p4[53] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd10;
    end else if (p_Result_s_fu_443_p4[52] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd11;
    end else if (p_Result_s_fu_443_p4[51] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd12;
    end else if (p_Result_s_fu_443_p4[50] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd13;
    end else if (p_Result_s_fu_443_p4[49] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd14;
    end else if (p_Result_s_fu_443_p4[48] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd15;
    end else if (p_Result_s_fu_443_p4[47] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd16;
    end else if (p_Result_s_fu_443_p4[46] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd17;
    end else if (p_Result_s_fu_443_p4[45] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd18;
    end else if (p_Result_s_fu_443_p4[44] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd19;
    end else if (p_Result_s_fu_443_p4[43] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd20;
    end else if (p_Result_s_fu_443_p4[42] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd21;
    end else if (p_Result_s_fu_443_p4[41] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd22;
    end else if (p_Result_s_fu_443_p4[40] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd23;
    end else if (p_Result_s_fu_443_p4[39] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd24;
    end else if (p_Result_s_fu_443_p4[38] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd25;
    end else if (p_Result_s_fu_443_p4[37] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd26;
    end else if (p_Result_s_fu_443_p4[36] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd27;
    end else if (p_Result_s_fu_443_p4[35] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd28;
    end else if (p_Result_s_fu_443_p4[34] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd29;
    end else if (p_Result_s_fu_443_p4[33] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd30;
    end else if (p_Result_s_fu_443_p4[32] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd31;
    end else if (p_Result_s_fu_443_p4[31] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd32;
    end else if (p_Result_s_fu_443_p4[30] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd33;
    end else if (p_Result_s_fu_443_p4[29] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd34;
    end else if (p_Result_s_fu_443_p4[28] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd35;
    end else if (p_Result_s_fu_443_p4[27] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd36;
    end else if (p_Result_s_fu_443_p4[26] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd37;
    end else if (p_Result_s_fu_443_p4[25] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd38;
    end else if (p_Result_s_fu_443_p4[24] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd39;
    end else if (p_Result_s_fu_443_p4[23] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd40;
    end else if (p_Result_s_fu_443_p4[22] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd41;
    end else if (p_Result_s_fu_443_p4[21] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd42;
    end else if (p_Result_s_fu_443_p4[20] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd43;
    end else if (p_Result_s_fu_443_p4[19] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd44;
    end else if (p_Result_s_fu_443_p4[18] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd45;
    end else if (p_Result_s_fu_443_p4[17] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd46;
    end else if (p_Result_s_fu_443_p4[16] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd47;
    end else if (p_Result_s_fu_443_p4[15] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd48;
    end else if (p_Result_s_fu_443_p4[14] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd49;
    end else if (p_Result_s_fu_443_p4[13] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd50;
    end else if (p_Result_s_fu_443_p4[12] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd51;
    end else if (p_Result_s_fu_443_p4[11] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd52;
    end else if (p_Result_s_fu_443_p4[10] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd53;
    end else if (p_Result_s_fu_443_p4[9] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd54;
    end else if (p_Result_s_fu_443_p4[8] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd55;
    end else if (p_Result_s_fu_443_p4[7] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd56;
    end else if (p_Result_s_fu_443_p4[6] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd57;
    end else if (p_Result_s_fu_443_p4[5] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd58;
    end else if (p_Result_s_fu_443_p4[4] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd59;
    end else if (p_Result_s_fu_443_p4[3] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd60;
    end else if (p_Result_s_fu_443_p4[2] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd61;
    end else if (p_Result_s_fu_443_p4[1] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd62;
    end else if (p_Result_s_fu_443_p4[0] == 1'b1) begin
        tmp_s_fu_453_p3 = 64'd63;
    end else begin
        tmp_s_fu_453_p3 = 64'd64;
    end
end

assign trunc_ln1074_fu_461_p1 = tmp_s_fu_453_p3[31:0];

assign trunc_ln1081_fu_471_p1 = tmp_V_21_fu_435_p3[0:0];

assign trunc_ln1083_fu_491_p1 = tmp_fu_483_p3[31:0];

assign trunc_ln187_fu_238_p1 = centroids_4_q0[15:0];

assign trunc_ln943_fu_707_p1 = l_fu_501_p3[7:0];

assign trunc_ln947_fu_537_p1 = sub_ln944_fu_509_p2[6:0];

assign trunc_ln954_2_fu_659_p1 = shl_ln954_fu_649_p2[31:0];

assign trunc_ln954_fu_655_p1 = lshr_ln954_fu_633_p2[31:0];

assign ush_fu_823_p3 = ((isNeg_fu_805_p3[0:0] === 1'b1) ? sext_ln1311_fu_819_p1 : add_ln339_fu_799_p2);

assign xor_ln949_fu_583_p2 = (tmp_44_fu_575_p3 ^ 1'd1);

assign zext_ln1287_fu_839_p1 = $unsigned(sext_ln1311_2_fu_831_p1);

assign zext_ln187_1_fu_242_p1 = trunc_ln187_fu_238_p1;

assign zext_ln187_fu_233_p1 = i_0_reg_197;

assign zext_ln195_fu_396_p1 = size;

assign zext_ln339_fu_795_p1 = tmp_V_22_fu_767_p4;

assign zext_ln662_fu_863_p1 = tmp_48_fu_855_p3;

assign zext_ln682_fu_791_p1 = mantissa_V_fu_781_p4;

assign zext_ln731_11_fu_328_p1 = mul_ln731_fu_314_p2;

assign zext_ln731_13_fu_348_p1 = mul_ln731_2_fu_342_p2;

assign zext_ln731_9_fu_320_p1 = sum_x_0_reg_149;

assign zext_ln731_fu_307_p1 = size;

assign zext_ln947_fu_547_p1 = sub_ln947_fu_541_p2;

assign zext_ln954_1_fu_645_p1 = sub_ln954_fu_639_p2;

assign zext_ln954_fu_629_p1 = add_ln954_fu_623_p2;

endmodule //least_squares_line
