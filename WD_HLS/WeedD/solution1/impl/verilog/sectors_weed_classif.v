// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sectors_weed_classif (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        weed_mask_tmp_data_V_dout,
        weed_mask_tmp_data_V_empty_n,
        weed_mask_tmp_data_V_read,
        weed_mask_out_data_V_dout,
        weed_mask_out_data_V_empty_n,
        weed_mask_out_data_V_read,
        weed_mask_out_data_V_din,
        weed_mask_out_data_V_full_n,
        weed_mask_out_data_V_write,
        opened_data_V_dout,
        opened_data_V_empty_n,
        opened_data_V_read
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_pp1_stage0 = 16'd2048;
parameter    ap_ST_fsm_state50 = 16'd4096;
parameter    ap_ST_fsm_state51 = 16'd8192;
parameter    ap_ST_fsm_state52 = 16'd16384;
parameter    ap_ST_fsm_state53 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [1:0] weed_mask_tmp_data_V_dout;
input   weed_mask_tmp_data_V_empty_n;
output   weed_mask_tmp_data_V_read;
input  [7:0] weed_mask_out_data_V_dout;
input   weed_mask_out_data_V_empty_n;
output   weed_mask_out_data_V_read;
output  [7:0] weed_mask_out_data_V_din;
input   weed_mask_out_data_V_full_n;
output   weed_mask_out_data_V_write;
input  [7:0] opened_data_V_dout;
input   opened_data_V_empty_n;
output   opened_data_V_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weed_mask_tmp_data_V_read;
reg weed_mask_out_data_V_read;
reg weed_mask_out_data_V_write;
reg opened_data_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] segments_address0;
reg    segments_ce0;
wire   [7:0] segments_q0;
wire   [3:0] segments_address1;
reg    segments_ce1;
wire   [7:0] segments_q1;
reg    weed_mask_tmp_data_V_blk_n;
wire    ap_CS_fsm_state8;
reg   [0:0] icmp_ln23_reg_717;
wire   [0:0] icmp_ln26_fu_484_p2;
wire   [0:0] icmp_ln27_fu_496_p2;
wire    ap_CS_fsm_state52;
reg   [0:0] icmp_ln51_reg_811;
wire   [0:0] icmp_ln54_fu_628_p2;
wire   [0:0] icmp_ln55_fu_640_p2;
reg    weed_mask_out_data_V_i_blk_n;
wire    ap_CS_fsm_state9;
reg   [2:0] i1_0_reg_313;
wire   [0:0] icmp_ln13_fu_419_p2;
wire    ap_CS_fsm_state3;
wire   [3:0] seg_index_fu_425_p2;
reg   [3:0] seg_index_reg_672;
wire   [2:0] i_fu_437_p2;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg   [7:0] v_limit_reg_696;
wire    ap_CS_fsm_state6;
reg   [7:0] segments_load_reg_702;
wire   [0:0] icmp_ln21_fu_462_p2;
wire    ap_CS_fsm_state7;
wire   [4:0] p_v_fu_468_p2;
reg   [4:0] p_v_reg_712;
wire   [0:0] icmp_ln23_fu_479_p2;
wire   [8:0] h_fu_490_p2;
reg   [8:0] h_reg_724;
reg    ap_predicate_op117_read_state8;
reg    ap_block_state8;
wire   [63:0] zext_ln30_fu_502_p1;
reg   [63:0] zext_ln30_reg_735;
wire   [0:0] grp_fu_413_p2;
reg   [2:0] quadrant_space_addr_2_reg_740;
wire   [7:0] zext_ln34_fu_525_p1;
wire   [0:0] icmp_ln895_1_fu_536_p2;
reg   [0:0] icmp_ln895_1_reg_750;
reg   [2:0] quadrant_weed_V_addr_2_reg_754;
wire   [0:0] icmp_ln44_fu_549_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state12_pp1_stage0_iter0;
wire    ap_block_state13_pp1_stage0_iter1;
wire    ap_block_state14_pp1_stage0_iter2;
wire    ap_block_state15_pp1_stage0_iter3;
wire    ap_block_state16_pp1_stage0_iter4;
wire    ap_block_state17_pp1_stage0_iter5;
wire    ap_block_state18_pp1_stage0_iter6;
wire    ap_block_state19_pp1_stage0_iter7;
wire    ap_block_state20_pp1_stage0_iter8;
wire    ap_block_state21_pp1_stage0_iter9;
wire    ap_block_state22_pp1_stage0_iter10;
wire    ap_block_state23_pp1_stage0_iter11;
wire    ap_block_state24_pp1_stage0_iter12;
wire    ap_block_state25_pp1_stage0_iter13;
wire    ap_block_state26_pp1_stage0_iter14;
wire    ap_block_state27_pp1_stage0_iter15;
wire    ap_block_state28_pp1_stage0_iter16;
wire    ap_block_state29_pp1_stage0_iter17;
wire    ap_block_state30_pp1_stage0_iter18;
wire    ap_block_state31_pp1_stage0_iter19;
wire    ap_block_state32_pp1_stage0_iter20;
wire    ap_block_state33_pp1_stage0_iter21;
wire    ap_block_state34_pp1_stage0_iter22;
wire    ap_block_state35_pp1_stage0_iter23;
wire    ap_block_state36_pp1_stage0_iter24;
wire    ap_block_state37_pp1_stage0_iter25;
wire    ap_block_state38_pp1_stage0_iter26;
wire    ap_block_state39_pp1_stage0_iter27;
wire    ap_block_state40_pp1_stage0_iter28;
wire    ap_block_state41_pp1_stage0_iter29;
wire    ap_block_state42_pp1_stage0_iter30;
wire    ap_block_state43_pp1_stage0_iter31;
wire    ap_block_state44_pp1_stage0_iter32;
wire    ap_block_state45_pp1_stage0_iter33;
wire    ap_block_state46_pp1_stage0_iter34;
wire    ap_block_state47_pp1_stage0_iter35;
wire    ap_block_state48_pp1_stage0_iter36;
wire    ap_block_state49_pp1_stage0_iter37;
wire    ap_block_pp1_stage0_11001;
wire   [2:0] i_3_fu_555_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [63:0] zext_ln45_fu_561_p1;
reg   [63:0] zext_ln45_reg_768;
wire   [15:0] quadrant_space_q0;
reg   [15:0] p_Val2_s_reg_778;
reg    ap_enable_reg_pp1_iter1;
wire   [0:0] icmp_ln45_fu_566_p2;
reg   [0:0] icmp_ln45_reg_783;
reg   [0:0] icmp_ln45_reg_783_pp1_iter2_reg;
reg   [0:0] icmp_ln45_reg_783_pp1_iter3_reg;
reg   [0:0] icmp_ln45_reg_783_pp1_iter4_reg;
reg   [0:0] icmp_ln45_reg_783_pp1_iter5_reg;
reg   [0:0] icmp_ln45_reg_783_pp1_iter6_reg;
reg   [0:0] icmp_ln45_reg_783_pp1_iter7_reg;
reg   [0:0] icmp_ln45_reg_783_pp1_iter8_reg;
reg   [0:0] icmp_ln45_reg_783_pp1_iter9_reg;
reg   [0:0] icmp_ln45_reg_783_pp1_iter10_reg;
reg   [0:0] icmp_ln45_reg_783_pp1_iter11_reg;
reg   [0:0] icmp_ln45_reg_783_pp1_iter12_reg;
reg   [0:0] icmp_ln45_reg_783_pp1_iter13_reg;
reg   [0:0] icmp_ln45_reg_783_pp1_iter14_reg;
reg   [0:0] icmp_ln45_reg_783_pp1_iter15_reg;
reg   [0:0] icmp_ln45_reg_783_pp1_iter16_reg;
reg   [0:0] icmp_ln45_reg_783_pp1_iter17_reg;
reg   [0:0] icmp_ln45_reg_783_pp1_iter18_reg;
reg   [0:0] icmp_ln45_reg_783_pp1_iter19_reg;
reg   [0:0] icmp_ln45_reg_783_pp1_iter20_reg;
reg   [0:0] icmp_ln45_reg_783_pp1_iter21_reg;
reg   [0:0] icmp_ln45_reg_783_pp1_iter22_reg;
reg   [0:0] icmp_ln45_reg_783_pp1_iter23_reg;
reg   [0:0] icmp_ln45_reg_783_pp1_iter24_reg;
reg   [0:0] icmp_ln45_reg_783_pp1_iter25_reg;
reg   [0:0] icmp_ln45_reg_783_pp1_iter26_reg;
reg   [0:0] icmp_ln45_reg_783_pp1_iter27_reg;
reg   [0:0] icmp_ln45_reg_783_pp1_iter28_reg;
reg   [0:0] icmp_ln45_reg_783_pp1_iter29_reg;
reg   [0:0] icmp_ln45_reg_783_pp1_iter30_reg;
reg   [0:0] icmp_ln45_reg_783_pp1_iter31_reg;
reg   [0:0] icmp_ln45_reg_783_pp1_iter32_reg;
reg   [0:0] icmp_ln45_reg_783_pp1_iter33_reg;
reg   [0:0] icmp_ln45_reg_783_pp1_iter34_reg;
reg   [0:0] icmp_ln45_reg_783_pp1_iter35_reg;
reg   [0:0] icmp_ln45_reg_783_pp1_iter36_reg;
reg   [2:0] quadrant_weed_V_addr_1_reg_787;
reg   [2:0] quadrant_weed_V_addr_1_reg_787_pp1_iter2_reg;
reg   [2:0] quadrant_weed_V_addr_1_reg_787_pp1_iter3_reg;
reg   [2:0] quadrant_weed_V_addr_1_reg_787_pp1_iter4_reg;
reg   [2:0] quadrant_weed_V_addr_1_reg_787_pp1_iter5_reg;
reg   [2:0] quadrant_weed_V_addr_1_reg_787_pp1_iter6_reg;
reg   [2:0] quadrant_weed_V_addr_1_reg_787_pp1_iter7_reg;
reg   [2:0] quadrant_weed_V_addr_1_reg_787_pp1_iter8_reg;
reg   [2:0] quadrant_weed_V_addr_1_reg_787_pp1_iter9_reg;
reg   [2:0] quadrant_weed_V_addr_1_reg_787_pp1_iter10_reg;
reg   [2:0] quadrant_weed_V_addr_1_reg_787_pp1_iter11_reg;
reg   [2:0] quadrant_weed_V_addr_1_reg_787_pp1_iter12_reg;
reg   [2:0] quadrant_weed_V_addr_1_reg_787_pp1_iter13_reg;
reg   [2:0] quadrant_weed_V_addr_1_reg_787_pp1_iter14_reg;
reg   [2:0] quadrant_weed_V_addr_1_reg_787_pp1_iter15_reg;
reg   [2:0] quadrant_weed_V_addr_1_reg_787_pp1_iter16_reg;
reg   [2:0] quadrant_weed_V_addr_1_reg_787_pp1_iter17_reg;
reg   [2:0] quadrant_weed_V_addr_1_reg_787_pp1_iter18_reg;
reg   [2:0] quadrant_weed_V_addr_1_reg_787_pp1_iter19_reg;
reg   [2:0] quadrant_weed_V_addr_1_reg_787_pp1_iter20_reg;
reg   [2:0] quadrant_weed_V_addr_1_reg_787_pp1_iter21_reg;
reg   [2:0] quadrant_weed_V_addr_1_reg_787_pp1_iter22_reg;
reg   [2:0] quadrant_weed_V_addr_1_reg_787_pp1_iter23_reg;
reg   [2:0] quadrant_weed_V_addr_1_reg_787_pp1_iter24_reg;
reg   [2:0] quadrant_weed_V_addr_1_reg_787_pp1_iter25_reg;
reg   [2:0] quadrant_weed_V_addr_1_reg_787_pp1_iter26_reg;
reg   [2:0] quadrant_weed_V_addr_1_reg_787_pp1_iter27_reg;
reg   [2:0] quadrant_weed_V_addr_1_reg_787_pp1_iter28_reg;
reg   [2:0] quadrant_weed_V_addr_1_reg_787_pp1_iter29_reg;
reg   [2:0] quadrant_weed_V_addr_1_reg_787_pp1_iter30_reg;
reg   [2:0] quadrant_weed_V_addr_1_reg_787_pp1_iter31_reg;
reg   [2:0] quadrant_weed_V_addr_1_reg_787_pp1_iter32_reg;
reg   [2:0] quadrant_weed_V_addr_1_reg_787_pp1_iter33_reg;
reg   [2:0] quadrant_weed_V_addr_1_reg_787_pp1_iter34_reg;
reg   [2:0] quadrant_weed_V_addr_1_reg_787_pp1_iter35_reg;
reg   [2:0] quadrant_weed_V_addr_1_reg_787_pp1_iter36_reg;
wire   [4:0] p_v_1_fu_612_p2;
reg   [4:0] p_v_1_reg_806;
wire    ap_CS_fsm_state51;
wire   [0:0] icmp_ln51_fu_623_p2;
wire   [0:0] icmp_ln49_fu_606_p2;
wire   [8:0] h_1_fu_634_p2;
reg   [8:0] h_1_reg_818;
reg    ap_predicate_op232_read_state52;
reg    ap_block_state52;
wire   [7:0] zext_ln61_fu_664_p1;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state12;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
reg    ap_enable_reg_pp1_iter6;
reg    ap_enable_reg_pp1_iter7;
reg    ap_enable_reg_pp1_iter8;
reg    ap_enable_reg_pp1_iter9;
reg    ap_enable_reg_pp1_iter10;
reg    ap_enable_reg_pp1_iter11;
reg    ap_enable_reg_pp1_iter12;
reg    ap_enable_reg_pp1_iter13;
reg    ap_enable_reg_pp1_iter14;
reg    ap_enable_reg_pp1_iter15;
reg    ap_enable_reg_pp1_iter16;
reg    ap_enable_reg_pp1_iter17;
reg    ap_enable_reg_pp1_iter18;
reg    ap_enable_reg_pp1_iter19;
reg    ap_enable_reg_pp1_iter20;
reg    ap_enable_reg_pp1_iter21;
reg    ap_enable_reg_pp1_iter22;
reg    ap_enable_reg_pp1_iter23;
reg    ap_enable_reg_pp1_iter24;
reg    ap_enable_reg_pp1_iter25;
reg    ap_enable_reg_pp1_iter26;
reg    ap_enable_reg_pp1_iter27;
reg    ap_enable_reg_pp1_iter28;
reg    ap_enable_reg_pp1_iter29;
reg    ap_enable_reg_pp1_iter30;
reg    ap_enable_reg_pp1_iter31;
reg    ap_enable_reg_pp1_iter32;
reg    ap_enable_reg_pp1_iter33;
reg    ap_enable_reg_pp1_iter34;
reg    ap_enable_reg_pp1_iter35;
reg    ap_enable_reg_pp1_iter36;
reg    ap_enable_reg_pp1_iter37;
reg   [2:0] quadrant_space_address0;
reg    quadrant_space_ce0;
reg    quadrant_space_we0;
reg   [15:0] quadrant_space_d0;
reg   [2:0] quadrant_weed_V_address0;
reg    quadrant_weed_V_ce0;
reg    quadrant_weed_V_we0;
reg   [23:0] quadrant_weed_V_d0;
wire   [23:0] quadrant_weed_V_q0;
reg    quadrant_weed_V_ce1;
reg    quadrant_weed_V_we1;
wire   [23:0] quadrant_weed_V_d1;
wire    grp_bitwise_and_fu_403_ap_start;
wire    grp_bitwise_and_fu_403_ap_done;
wire    grp_bitwise_and_fu_403_ap_idle;
wire    grp_bitwise_and_fu_403_ap_ready;
wire    grp_bitwise_and_fu_403_p_src1_data_V_read;
wire    grp_bitwise_and_fu_403_p_src2_data_V_read;
wire   [7:0] grp_bitwise_and_fu_403_p_dst_data_V_din;
wire    grp_bitwise_and_fu_403_p_dst_data_V_write;
reg   [3:0] seg_index_0_reg_211;
wire    ap_CS_fsm_state2;
reg   [2:0] i_0_reg_223;
wire   [0:0] icmp_ln16_fu_431_p2;
reg   [4:0] p_v_0_reg_234;
wire   [7:0] ap_phi_mux_quadrant_index_0_phi_fu_249_p4;
reg   [7:0] quadrant_index_0_reg_245;
wire    ap_CS_fsm_state11;
reg   [0:0] flag_quadrant_0_reg_257;
reg   [8:0] h_0_reg_269;
reg   [7:0] quadrant_index_0_be_reg_280;
wire    ap_CS_fsm_state10;
reg   [0:0] flag_quadrant_0_be_reg_295;
reg   [4:0] p_v2_0_reg_324;
wire    ap_CS_fsm_state50;
reg   [7:0] quadrant_index4_0_reg_335;
wire    ap_CS_fsm_state53;
reg   [0:0] flag_quadrant5_0_reg_347;
reg   [8:0] h6_0_reg_359;
reg   [7:0] quadrant_index4_0_be_reg_370;
reg   [0:0] flag_quadrant5_0_be_reg_385;
reg    grp_bitwise_and_fu_403_ap_start_reg;
reg    ap_block_state1_ignore_call5;
wire   [63:0] zext_ln17_fu_443_p1;
wire   [63:0] zext_ln20_fu_449_p1;
wire   [63:0] zext_ln22_fu_454_p1;
wire    ap_block_pp1_stage0;
wire   [15:0] add_ln30_fu_529_p2;
wire   [23:0] add_ln703_fu_542_p2;
wire   [7:0] zext_ln21_fu_458_p1;
wire   [7:0] v_fu_474_p2;
wire   [2:0] trunc_ln26_fu_507_p1;
wire   [2:0] add_ln35_fu_511_p2;
wire   [2:0] select_ln34_fu_517_p3;
wire   [23:0] shl_ln_fu_572_p3;
wire   [31:0] grp_fu_591_p0;
wire   [23:0] grp_fu_591_p1;
wire   [23:0] grp_fu_591_p2;
wire   [7:0] zext_ln49_fu_602_p1;
wire   [7:0] v_1_fu_618_p2;
wire   [2:0] trunc_ln54_fu_646_p1;
wire   [2:0] add_ln62_fu_650_p2;
wire   [2:0] select_ln61_fu_656_p3;
reg   [15:0] ap_NS_fsm;
reg    ap_block_state1;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [31:0] grp_fu_591_p10;
reg    ap_condition_842;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 16'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter8 = 1'b0;
#0 ap_enable_reg_pp1_iter9 = 1'b0;
#0 ap_enable_reg_pp1_iter10 = 1'b0;
#0 ap_enable_reg_pp1_iter11 = 1'b0;
#0 ap_enable_reg_pp1_iter12 = 1'b0;
#0 ap_enable_reg_pp1_iter13 = 1'b0;
#0 ap_enable_reg_pp1_iter14 = 1'b0;
#0 ap_enable_reg_pp1_iter15 = 1'b0;
#0 ap_enable_reg_pp1_iter16 = 1'b0;
#0 ap_enable_reg_pp1_iter17 = 1'b0;
#0 ap_enable_reg_pp1_iter18 = 1'b0;
#0 ap_enable_reg_pp1_iter19 = 1'b0;
#0 ap_enable_reg_pp1_iter20 = 1'b0;
#0 ap_enable_reg_pp1_iter21 = 1'b0;
#0 ap_enable_reg_pp1_iter22 = 1'b0;
#0 ap_enable_reg_pp1_iter23 = 1'b0;
#0 ap_enable_reg_pp1_iter24 = 1'b0;
#0 ap_enable_reg_pp1_iter25 = 1'b0;
#0 ap_enable_reg_pp1_iter26 = 1'b0;
#0 ap_enable_reg_pp1_iter27 = 1'b0;
#0 ap_enable_reg_pp1_iter28 = 1'b0;
#0 ap_enable_reg_pp1_iter29 = 1'b0;
#0 ap_enable_reg_pp1_iter30 = 1'b0;
#0 ap_enable_reg_pp1_iter31 = 1'b0;
#0 ap_enable_reg_pp1_iter32 = 1'b0;
#0 ap_enable_reg_pp1_iter33 = 1'b0;
#0 ap_enable_reg_pp1_iter34 = 1'b0;
#0 ap_enable_reg_pp1_iter35 = 1'b0;
#0 ap_enable_reg_pp1_iter36 = 1'b0;
#0 ap_enable_reg_pp1_iter37 = 1'b0;
#0 grp_bitwise_and_fu_403_ap_start_reg = 1'b0;
end

sectors_weed_clas5jm #(
    .DataWidth( 8 ),
    .AddressRange( 13 ),
    .AddressWidth( 4 ))
segments_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(segments_address0),
    .ce0(segments_ce0),
    .q0(segments_q0),
    .address1(segments_address1),
    .ce1(segments_ce1),
    .q1(segments_q1)
);

sectors_weed_clas6jw #(
    .DataWidth( 16 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
quadrant_space_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(quadrant_space_address0),
    .ce0(quadrant_space_ce0),
    .we0(quadrant_space_we0),
    .d0(quadrant_space_d0),
    .q0(quadrant_space_q0)
);

sectors_weed_clas7jG #(
    .DataWidth( 24 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
quadrant_weed_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(quadrant_weed_V_address0),
    .ce0(quadrant_weed_V_ce0),
    .we0(quadrant_weed_V_we0),
    .d0(quadrant_weed_V_d0),
    .q0(quadrant_weed_V_q0),
    .address1(quadrant_weed_V_addr_1_reg_787_pp1_iter36_reg),
    .ce1(quadrant_weed_V_ce1),
    .we1(quadrant_weed_V_we1),
    .d1(quadrant_weed_V_d1)
);

bitwise_and grp_bitwise_and_fu_403(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_bitwise_and_fu_403_ap_start),
    .ap_done(grp_bitwise_and_fu_403_ap_done),
    .ap_idle(grp_bitwise_and_fu_403_ap_idle),
    .ap_ready(grp_bitwise_and_fu_403_ap_ready),
    .p_src1_data_V_dout(weed_mask_tmp_data_V_dout),
    .p_src1_data_V_empty_n(weed_mask_tmp_data_V_empty_n),
    .p_src1_data_V_read(grp_bitwise_and_fu_403_p_src1_data_V_read),
    .p_src2_data_V_dout(opened_data_V_dout),
    .p_src2_data_V_empty_n(opened_data_V_empty_n),
    .p_src2_data_V_read(grp_bitwise_and_fu_403_p_src2_data_V_read),
    .p_dst_data_V_din(grp_bitwise_and_fu_403_p_dst_data_V_din),
    .p_dst_data_V_full_n(weed_mask_out_data_V_full_n),
    .p_dst_data_V_write(grp_bitwise_and_fu_403_p_dst_data_V_write)
);

ip_accel_app_udiv8jQ #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
ip_accel_app_udiv8jQ_U518(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_591_p0),
    .din1(grp_fu_591_p1),
    .ce(1'b1),
    .dout(grp_fu_591_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln13_fu_419_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state12) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((icmp_ln21_fu_462_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state12)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state12);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter13 <= ap_enable_reg_pp1_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter14 <= ap_enable_reg_pp1_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter15 <= ap_enable_reg_pp1_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter16 <= ap_enable_reg_pp1_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter17 <= ap_enable_reg_pp1_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter18 <= ap_enable_reg_pp1_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter19 <= ap_enable_reg_pp1_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter20 <= ap_enable_reg_pp1_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter21 <= ap_enable_reg_pp1_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter22 <= ap_enable_reg_pp1_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter23 <= ap_enable_reg_pp1_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter24 <= ap_enable_reg_pp1_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter25 <= ap_enable_reg_pp1_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter26 <= ap_enable_reg_pp1_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter27 <= ap_enable_reg_pp1_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter28 <= ap_enable_reg_pp1_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter29 <= ap_enable_reg_pp1_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter30 <= ap_enable_reg_pp1_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter31 <= ap_enable_reg_pp1_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter32 <= ap_enable_reg_pp1_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter33 <= ap_enable_reg_pp1_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter34 <= ap_enable_reg_pp1_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter35 <= ap_enable_reg_pp1_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter36 <= ap_enable_reg_pp1_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter37 <= ap_enable_reg_pp1_iter36;
        end else if (((icmp_ln21_fu_462_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp1_iter37 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_bitwise_and_fu_403_ap_start_reg <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_bitwise_and_fu_403_ap_start_reg <= 1'b1;
        end else if ((grp_bitwise_and_fu_403_ap_ready == 1'b1)) begin
            grp_bitwise_and_fu_403_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_842)) begin
        if (((grp_fu_413_p2 == 1'd0) & (icmp_ln55_fu_640_p2 == 1'd1))) begin
            flag_quadrant5_0_be_reg_385 <= 1'd1;
        end else if ((icmp_ln55_fu_640_p2 == 1'd0)) begin
            flag_quadrant5_0_be_reg_385 <= flag_quadrant5_0_reg_347;
        end else if (((icmp_ln55_fu_640_p2 == 1'd1) & (grp_fu_413_p2 == 1'd1))) begin
            flag_quadrant5_0_be_reg_385 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        flag_quadrant5_0_reg_347 <= flag_quadrant5_0_be_reg_385;
    end else if (((icmp_ln49_fu_606_p2 == 1'd0) & (icmp_ln51_fu_623_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state51))) begin
        flag_quadrant5_0_reg_347 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op117_read_state8 == 1'b1) & (weed_mask_tmp_data_V_empty_n == 1'b0)) & (icmp_ln27_fu_496_p2 == 1'd0) & (icmp_ln26_fu_484_p2 == 1'd0) & (icmp_ln23_reg_717 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        flag_quadrant_0_be_reg_295 <= flag_quadrant_0_reg_257;
    end else if ((~((ap_predicate_op117_read_state8 == 1'b1) & (weed_mask_tmp_data_V_empty_n == 1'b0)) & (icmp_ln26_fu_484_p2 == 1'd0) & (icmp_ln27_fu_496_p2 == 1'd1) & (grp_fu_413_p2 == 1'd1) & (icmp_ln23_reg_717 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        flag_quadrant_0_be_reg_295 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        flag_quadrant_0_be_reg_295 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        flag_quadrant_0_reg_257 <= flag_quadrant_0_be_reg_295;
    end else if (((icmp_ln21_fu_462_p2 == 1'd0) & (icmp_ln23_fu_479_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        flag_quadrant_0_reg_257 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        h6_0_reg_359 <= h_1_reg_818;
    end else if (((icmp_ln49_fu_606_p2 == 1'd0) & (icmp_ln51_fu_623_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state51))) begin
        h6_0_reg_359 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        h_0_reg_269 <= h_reg_724;
    end else if (((icmp_ln21_fu_462_p2 == 1'd0) & (icmp_ln23_fu_479_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        h_0_reg_269 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_462_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        i1_0_reg_313 <= 3'd0;
    end else if (((icmp_ln44_fu_549_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i1_0_reg_313 <= i_3_fu_555_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_419_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_223 <= 3'd0;
    end else if (((icmp_ln16_fu_431_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_0_reg_223 <= i_fu_437_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        p_v2_0_reg_324 <= 5'd0;
    end else if ((~((ap_predicate_op232_read_state52 == 1'b1) & (weed_mask_tmp_data_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state52) & ((icmp_ln51_reg_811 == 1'd0) | (icmp_ln54_fu_628_p2 == 1'd1)))) begin
        p_v2_0_reg_324 <= p_v_1_reg_806;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op117_read_state8 == 1'b1) & (weed_mask_tmp_data_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8) & ((icmp_ln26_fu_484_p2 == 1'd1) | (icmp_ln23_reg_717 == 1'd0)))) begin
        p_v_0_reg_234 <= p_v_reg_712;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        p_v_0_reg_234 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_predicate_op232_read_state52 == 1'b1) & (weed_mask_tmp_data_V_empty_n == 1'b0)) & (icmp_ln54_fu_628_p2 == 1'd0) & (grp_fu_413_p2 == 1'd0) & (icmp_ln55_fu_640_p2 == 1'd1) & (icmp_ln51_reg_811 == 1'd1) & (1'b1 == ap_CS_fsm_state52)) | (~((ap_predicate_op232_read_state52 == 1'b1) & (weed_mask_tmp_data_V_empty_n == 1'b0)) & (icmp_ln55_fu_640_p2 == 1'd0) & (icmp_ln54_fu_628_p2 == 1'd0) & (icmp_ln51_reg_811 == 1'd1) & (1'b1 == ap_CS_fsm_state52)))) begin
        quadrant_index4_0_be_reg_370 <= quadrant_index4_0_reg_335;
    end else if ((~((ap_predicate_op232_read_state52 == 1'b1) & (weed_mask_tmp_data_V_empty_n == 1'b0)) & (icmp_ln54_fu_628_p2 == 1'd0) & (icmp_ln55_fu_640_p2 == 1'd1) & (icmp_ln51_reg_811 == 1'd1) & (grp_fu_413_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state52))) begin
        quadrant_index4_0_be_reg_370 <= zext_ln61_fu_664_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        quadrant_index4_0_reg_335 <= quadrant_index4_0_be_reg_370;
    end else if (((icmp_ln49_fu_606_p2 == 1'd0) & (icmp_ln51_fu_623_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state51))) begin
        quadrant_index4_0_reg_335 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op117_read_state8 == 1'b1) & (weed_mask_tmp_data_V_empty_n == 1'b0)) & (icmp_ln27_fu_496_p2 == 1'd0) & (icmp_ln26_fu_484_p2 == 1'd0) & (icmp_ln23_reg_717 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        quadrant_index_0_be_reg_280 <= ap_phi_mux_quadrant_index_0_phi_fu_249_p4;
    end else if ((~((ap_predicate_op117_read_state8 == 1'b1) & (weed_mask_tmp_data_V_empty_n == 1'b0)) & (icmp_ln26_fu_484_p2 == 1'd0) & (icmp_ln27_fu_496_p2 == 1'd1) & (grp_fu_413_p2 == 1'd1) & (icmp_ln23_reg_717 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        quadrant_index_0_be_reg_280 <= zext_ln34_fu_525_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        quadrant_index_0_be_reg_280 <= quadrant_index_0_reg_245;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        quadrant_index_0_reg_245 <= quadrant_index_0_be_reg_280;
    end else if (((icmp_ln21_fu_462_p2 == 1'd0) & (icmp_ln23_fu_479_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        quadrant_index_0_reg_245 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_fu_606_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state51))) begin
        seg_index_0_reg_211 <= seg_index_reg_672;
    end else if (((grp_bitwise_and_fu_403_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        seg_index_0_reg_211 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op232_read_state52 == 1'b1) & (weed_mask_tmp_data_V_empty_n == 1'b0)) & (icmp_ln51_reg_811 == 1'd1) & (1'b1 == ap_CS_fsm_state52))) begin
        h_1_reg_818 <= h_1_fu_634_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op117_read_state8 == 1'b1) & (weed_mask_tmp_data_V_empty_n == 1'b0)) & (icmp_ln23_reg_717 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        h_reg_724 <= h_fu_490_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_462_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        icmp_ln23_reg_717 <= icmp_ln23_fu_479_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln45_reg_783 <= icmp_ln45_fu_566_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln45_reg_783_pp1_iter10_reg <= icmp_ln45_reg_783_pp1_iter9_reg;
        icmp_ln45_reg_783_pp1_iter11_reg <= icmp_ln45_reg_783_pp1_iter10_reg;
        icmp_ln45_reg_783_pp1_iter12_reg <= icmp_ln45_reg_783_pp1_iter11_reg;
        icmp_ln45_reg_783_pp1_iter13_reg <= icmp_ln45_reg_783_pp1_iter12_reg;
        icmp_ln45_reg_783_pp1_iter14_reg <= icmp_ln45_reg_783_pp1_iter13_reg;
        icmp_ln45_reg_783_pp1_iter15_reg <= icmp_ln45_reg_783_pp1_iter14_reg;
        icmp_ln45_reg_783_pp1_iter16_reg <= icmp_ln45_reg_783_pp1_iter15_reg;
        icmp_ln45_reg_783_pp1_iter17_reg <= icmp_ln45_reg_783_pp1_iter16_reg;
        icmp_ln45_reg_783_pp1_iter18_reg <= icmp_ln45_reg_783_pp1_iter17_reg;
        icmp_ln45_reg_783_pp1_iter19_reg <= icmp_ln45_reg_783_pp1_iter18_reg;
        icmp_ln45_reg_783_pp1_iter20_reg <= icmp_ln45_reg_783_pp1_iter19_reg;
        icmp_ln45_reg_783_pp1_iter21_reg <= icmp_ln45_reg_783_pp1_iter20_reg;
        icmp_ln45_reg_783_pp1_iter22_reg <= icmp_ln45_reg_783_pp1_iter21_reg;
        icmp_ln45_reg_783_pp1_iter23_reg <= icmp_ln45_reg_783_pp1_iter22_reg;
        icmp_ln45_reg_783_pp1_iter24_reg <= icmp_ln45_reg_783_pp1_iter23_reg;
        icmp_ln45_reg_783_pp1_iter25_reg <= icmp_ln45_reg_783_pp1_iter24_reg;
        icmp_ln45_reg_783_pp1_iter26_reg <= icmp_ln45_reg_783_pp1_iter25_reg;
        icmp_ln45_reg_783_pp1_iter27_reg <= icmp_ln45_reg_783_pp1_iter26_reg;
        icmp_ln45_reg_783_pp1_iter28_reg <= icmp_ln45_reg_783_pp1_iter27_reg;
        icmp_ln45_reg_783_pp1_iter29_reg <= icmp_ln45_reg_783_pp1_iter28_reg;
        icmp_ln45_reg_783_pp1_iter2_reg <= icmp_ln45_reg_783;
        icmp_ln45_reg_783_pp1_iter30_reg <= icmp_ln45_reg_783_pp1_iter29_reg;
        icmp_ln45_reg_783_pp1_iter31_reg <= icmp_ln45_reg_783_pp1_iter30_reg;
        icmp_ln45_reg_783_pp1_iter32_reg <= icmp_ln45_reg_783_pp1_iter31_reg;
        icmp_ln45_reg_783_pp1_iter33_reg <= icmp_ln45_reg_783_pp1_iter32_reg;
        icmp_ln45_reg_783_pp1_iter34_reg <= icmp_ln45_reg_783_pp1_iter33_reg;
        icmp_ln45_reg_783_pp1_iter35_reg <= icmp_ln45_reg_783_pp1_iter34_reg;
        icmp_ln45_reg_783_pp1_iter36_reg <= icmp_ln45_reg_783_pp1_iter35_reg;
        icmp_ln45_reg_783_pp1_iter3_reg <= icmp_ln45_reg_783_pp1_iter2_reg;
        icmp_ln45_reg_783_pp1_iter4_reg <= icmp_ln45_reg_783_pp1_iter3_reg;
        icmp_ln45_reg_783_pp1_iter5_reg <= icmp_ln45_reg_783_pp1_iter4_reg;
        icmp_ln45_reg_783_pp1_iter6_reg <= icmp_ln45_reg_783_pp1_iter5_reg;
        icmp_ln45_reg_783_pp1_iter7_reg <= icmp_ln45_reg_783_pp1_iter6_reg;
        icmp_ln45_reg_783_pp1_iter8_reg <= icmp_ln45_reg_783_pp1_iter7_reg;
        icmp_ln45_reg_783_pp1_iter9_reg <= icmp_ln45_reg_783_pp1_iter8_reg;
        quadrant_weed_V_addr_1_reg_787_pp1_iter10_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter9_reg;
        quadrant_weed_V_addr_1_reg_787_pp1_iter11_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter10_reg;
        quadrant_weed_V_addr_1_reg_787_pp1_iter12_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter11_reg;
        quadrant_weed_V_addr_1_reg_787_pp1_iter13_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter12_reg;
        quadrant_weed_V_addr_1_reg_787_pp1_iter14_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter13_reg;
        quadrant_weed_V_addr_1_reg_787_pp1_iter15_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter14_reg;
        quadrant_weed_V_addr_1_reg_787_pp1_iter16_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter15_reg;
        quadrant_weed_V_addr_1_reg_787_pp1_iter17_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter16_reg;
        quadrant_weed_V_addr_1_reg_787_pp1_iter18_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter17_reg;
        quadrant_weed_V_addr_1_reg_787_pp1_iter19_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter18_reg;
        quadrant_weed_V_addr_1_reg_787_pp1_iter20_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter19_reg;
        quadrant_weed_V_addr_1_reg_787_pp1_iter21_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter20_reg;
        quadrant_weed_V_addr_1_reg_787_pp1_iter22_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter21_reg;
        quadrant_weed_V_addr_1_reg_787_pp1_iter23_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter22_reg;
        quadrant_weed_V_addr_1_reg_787_pp1_iter24_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter23_reg;
        quadrant_weed_V_addr_1_reg_787_pp1_iter25_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter24_reg;
        quadrant_weed_V_addr_1_reg_787_pp1_iter26_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter25_reg;
        quadrant_weed_V_addr_1_reg_787_pp1_iter27_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter26_reg;
        quadrant_weed_V_addr_1_reg_787_pp1_iter28_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter27_reg;
        quadrant_weed_V_addr_1_reg_787_pp1_iter29_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter28_reg;
        quadrant_weed_V_addr_1_reg_787_pp1_iter2_reg <= quadrant_weed_V_addr_1_reg_787;
        quadrant_weed_V_addr_1_reg_787_pp1_iter30_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter29_reg;
        quadrant_weed_V_addr_1_reg_787_pp1_iter31_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter30_reg;
        quadrant_weed_V_addr_1_reg_787_pp1_iter32_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter31_reg;
        quadrant_weed_V_addr_1_reg_787_pp1_iter33_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter32_reg;
        quadrant_weed_V_addr_1_reg_787_pp1_iter34_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter33_reg;
        quadrant_weed_V_addr_1_reg_787_pp1_iter35_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter34_reg;
        quadrant_weed_V_addr_1_reg_787_pp1_iter36_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter35_reg;
        quadrant_weed_V_addr_1_reg_787_pp1_iter3_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter2_reg;
        quadrant_weed_V_addr_1_reg_787_pp1_iter4_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter3_reg;
        quadrant_weed_V_addr_1_reg_787_pp1_iter5_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter4_reg;
        quadrant_weed_V_addr_1_reg_787_pp1_iter6_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter5_reg;
        quadrant_weed_V_addr_1_reg_787_pp1_iter7_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter6_reg;
        quadrant_weed_V_addr_1_reg_787_pp1_iter8_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter7_reg;
        quadrant_weed_V_addr_1_reg_787_pp1_iter9_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_fu_606_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state51))) begin
        icmp_ln51_reg_811 <= icmp_ln51_fu_623_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((weed_mask_out_data_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        icmp_ln895_1_reg_750 <= icmp_ln895_1_fu_536_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        p_Val2_s_reg_778 <= quadrant_space_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        p_v_1_reg_806 <= p_v_1_fu_612_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        p_v_reg_712 <= p_v_fu_468_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op117_read_state8 == 1'b1) & (weed_mask_tmp_data_V_empty_n == 1'b0)) & (grp_fu_413_p2 == 1'd0) & (icmp_ln26_fu_484_p2 == 1'd0) & (icmp_ln27_fu_496_p2 == 1'd1) & (icmp_ln23_reg_717 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        quadrant_space_addr_2_reg_740 <= zext_ln30_fu_502_p1;
        zext_ln30_reg_735[7 : 0] <= zext_ln30_fu_502_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_fu_566_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        quadrant_weed_V_addr_1_reg_787 <= zext_ln45_reg_768;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln895_1_fu_536_p2 == 1'd0) & (weed_mask_out_data_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        quadrant_weed_V_addr_2_reg_754 <= zext_ln30_reg_735;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        seg_index_reg_672 <= seg_index_fu_425_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        segments_load_reg_702 <= segments_q1;
        v_limit_reg_696 <= segments_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln44_fu_549_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        zext_ln45_reg_768[2 : 0] <= zext_ln45_fu_561_p1[2 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln44_fu_549_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state12 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state12 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln13_fu_419_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter37 == 1'b0) & (ap_enable_reg_pp1_iter36 == 1'b0) & (ap_enable_reg_pp1_iter35 == 1'b0) & (ap_enable_reg_pp1_iter34 == 1'b0) & (ap_enable_reg_pp1_iter33 == 1'b0) & (ap_enable_reg_pp1_iter32 == 1'b0) & (ap_enable_reg_pp1_iter31 == 1'b0) & (ap_enable_reg_pp1_iter30 == 1'b0) & (ap_enable_reg_pp1_iter29 == 1'b0) & (ap_enable_reg_pp1_iter28 == 1'b0) & (ap_enable_reg_pp1_iter27 == 1'b0) & (ap_enable_reg_pp1_iter26 == 1'b0) & (ap_enable_reg_pp1_iter25 == 1'b0) & (ap_enable_reg_pp1_iter24 == 1'b0) & (ap_enable_reg_pp1_iter23 == 1'b0) & (ap_enable_reg_pp1_iter22 == 1'b0) & (ap_enable_reg_pp1_iter21 == 1'b0) & (ap_enable_reg_pp1_iter20 == 1'b0) & (ap_enable_reg_pp1_iter19 == 1'b0) & (ap_enable_reg_pp1_iter18 == 1'b0) & (ap_enable_reg_pp1_iter17 == 1'b0) & (ap_enable_reg_pp1_iter16 == 1'b0) & (ap_enable_reg_pp1_iter15 == 1'b0) & (ap_enable_reg_pp1_iter14 == 1'b0) & (ap_enable_reg_pp1_iter13 == 1'b0) & (ap_enable_reg_pp1_iter12 == 1'b0) & (ap_enable_reg_pp1_iter11 == 1'b0) & (ap_enable_reg_pp1_iter10 == 1'b0) & (ap_enable_reg_pp1_iter9 == 1'b0) & (ap_enable_reg_pp1_iter8 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln13_fu_419_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        opened_data_V_read = grp_bitwise_and_fu_403_p_src2_data_V_read;
    end else begin
        opened_data_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        quadrant_space_address0 = zext_ln45_fu_561_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        quadrant_space_address0 = quadrant_space_addr_2_reg_740;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        quadrant_space_address0 = zext_ln30_fu_502_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        quadrant_space_address0 = zext_ln17_fu_443_p1;
    end else begin
        quadrant_space_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (~((ap_predicate_op117_read_state8 == 1'b1) & (weed_mask_tmp_data_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((weed_mask_out_data_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state9)))) begin
        quadrant_space_ce0 = 1'b1;
    end else begin
        quadrant_space_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        quadrant_space_d0 = add_ln30_fu_529_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        quadrant_space_d0 = 16'd0;
    end else begin
        quadrant_space_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln16_fu_431_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((weed_mask_out_data_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state9)))) begin
        quadrant_space_we0 = 1'b1;
    end else begin
        quadrant_space_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        quadrant_weed_V_address0 = zext_ln45_reg_768;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        quadrant_weed_V_address0 = quadrant_weed_V_addr_2_reg_754;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        quadrant_weed_V_address0 = zext_ln30_reg_735;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        quadrant_weed_V_address0 = zext_ln17_fu_443_p1;
    end else begin
        quadrant_weed_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state4) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((weed_mask_out_data_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state9)))) begin
        quadrant_weed_V_ce0 = 1'b1;
    end else begin
        quadrant_weed_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter37 == 1'b1))) begin
        quadrant_weed_V_ce1 = 1'b1;
    end else begin
        quadrant_weed_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        quadrant_weed_V_d0 = add_ln703_fu_542_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        quadrant_weed_V_d0 = 24'd0;
    end else begin
        quadrant_weed_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln895_1_reg_750 == 1'd0) & (1'b1 == ap_CS_fsm_state10)) | ((icmp_ln16_fu_431_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        quadrant_weed_V_we0 = 1'b1;
    end else begin
        quadrant_weed_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_783_pp1_iter36_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter37 == 1'b1))) begin
        quadrant_weed_V_we1 = 1'b1;
    end else begin
        quadrant_weed_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        segments_ce0 = 1'b1;
    end else begin
        segments_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        segments_ce1 = 1'b1;
    end else begin
        segments_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        weed_mask_out_data_V_i_blk_n = weed_mask_out_data_V_empty_n;
    end else begin
        weed_mask_out_data_V_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((weed_mask_out_data_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        weed_mask_out_data_V_read = 1'b1;
    end else begin
        weed_mask_out_data_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        weed_mask_out_data_V_write = grp_bitwise_and_fu_403_p_dst_data_V_write;
    end else begin
        weed_mask_out_data_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln54_fu_628_p2 == 1'd0) & (icmp_ln55_fu_640_p2 == 1'd1) & (icmp_ln51_reg_811 == 1'd1) & (1'b1 == ap_CS_fsm_state52)) | ((icmp_ln26_fu_484_p2 == 1'd0) & (icmp_ln27_fu_496_p2 == 1'd1) & (icmp_ln23_reg_717 == 1'd1) & (1'b1 == ap_CS_fsm_state8)))) begin
        weed_mask_tmp_data_V_blk_n = weed_mask_tmp_data_V_empty_n;
    end else begin
        weed_mask_tmp_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((ap_predicate_op232_read_state52 == 1'b1) & (weed_mask_tmp_data_V_empty_n == 1'b0)) & (ap_predicate_op232_read_state52 == 1'b1) & (1'b1 == ap_CS_fsm_state52)) | (~((ap_predicate_op117_read_state8 == 1'b1) & (weed_mask_tmp_data_V_empty_n == 1'b0)) & (ap_predicate_op117_read_state8 == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
        weed_mask_tmp_data_V_read = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        weed_mask_tmp_data_V_read = grp_bitwise_and_fu_403_p_src1_data_V_read;
    end else begin
        weed_mask_tmp_data_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_bitwise_and_fu_403_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln13_fu_419_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln16_fu_431_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln21_fu_462_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if ((~((ap_predicate_op117_read_state8 == 1'b1) & (weed_mask_tmp_data_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8) & ((icmp_ln26_fu_484_p2 == 1'd1) | (icmp_ln23_reg_717 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if ((~((ap_predicate_op117_read_state8 == 1'b1) & (weed_mask_tmp_data_V_empty_n == 1'b0)) & (grp_fu_413_p2 == 1'd0) & (icmp_ln26_fu_484_p2 == 1'd0) & (icmp_ln27_fu_496_p2 == 1'd1) & (icmp_ln23_reg_717 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else if ((~((ap_predicate_op117_read_state8 == 1'b1) & (weed_mask_tmp_data_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8) & (((icmp_ln27_fu_496_p2 == 1'd0) & (icmp_ln26_fu_484_p2 == 1'd0) & (icmp_ln23_reg_717 == 1'd1)) | ((icmp_ln26_fu_484_p2 == 1'd0) & (grp_fu_413_p2 == 1'd1) & (icmp_ln23_reg_717 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((weed_mask_out_data_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln44_fu_549_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((ap_enable_reg_pp1_iter36 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter37 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter36 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter37 == 1'b1)) | ((icmp_ln44_fu_549_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            if (((icmp_ln49_fu_606_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state51))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state52 : begin
            if ((~((ap_predicate_op232_read_state52 == 1'b1) & (weed_mask_tmp_data_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state52) & ((icmp_ln51_reg_811 == 1'd0) | (icmp_ln54_fu_628_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else if ((~((ap_predicate_op232_read_state52 == 1'b1) & (weed_mask_tmp_data_V_empty_n == 1'b0)) & (icmp_ln54_fu_628_p2 == 1'd0) & (icmp_ln51_reg_811 == 1'd1) & (1'b1 == ap_CS_fsm_state52))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln30_fu_529_p2 = (quadrant_space_q0 + 16'd1);

assign add_ln35_fu_511_p2 = (3'd1 + trunc_ln26_fu_507_p1);

assign add_ln62_fu_650_p2 = (3'd1 + trunc_ln54_fu_646_p1);

assign add_ln703_fu_542_p2 = (quadrant_weed_V_q0 + 24'd256);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state12_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_ignore_call5 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state20_pp1_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp1_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp1_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp1_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp1_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp1_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp1_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp1_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp1_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp1_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp1_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp1_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp1_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp1_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp1_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp1_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp1_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp1_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp1_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp1_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp1_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp1_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp1_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp1_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp1_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp1_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp1_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp1_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp1_stage0_iter37 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state52 = ((ap_predicate_op232_read_state52 == 1'b1) & (weed_mask_tmp_data_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state8 = ((ap_predicate_op117_read_state8 == 1'b1) & (weed_mask_tmp_data_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_condition_842 = (~((ap_predicate_op232_read_state52 == 1'b1) & (weed_mask_tmp_data_V_empty_n == 1'b0)) & (icmp_ln54_fu_628_p2 == 1'd0) & (icmp_ln51_reg_811 == 1'd1) & (1'b1 == ap_CS_fsm_state52));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_mux_quadrant_index_0_phi_fu_249_p4 = quadrant_index_0_reg_245;

always @ (*) begin
    ap_predicate_op117_read_state8 = ((icmp_ln26_fu_484_p2 == 1'd0) & (icmp_ln27_fu_496_p2 == 1'd1) & (icmp_ln23_reg_717 == 1'd1));
end

always @ (*) begin
    ap_predicate_op232_read_state52 = ((icmp_ln54_fu_628_p2 == 1'd0) & (icmp_ln55_fu_640_p2 == 1'd1) & (icmp_ln51_reg_811 == 1'd1));
end

assign grp_bitwise_and_fu_403_ap_start = grp_bitwise_and_fu_403_ap_start_reg;

assign grp_fu_413_p2 = ((weed_mask_tmp_data_V_dout == 2'd0) ? 1'b1 : 1'b0);

assign grp_fu_591_p0 = {{quadrant_weed_V_q0}, {8'd0}};

assign grp_fu_591_p1 = grp_fu_591_p10;

assign grp_fu_591_p10 = shl_ln_fu_572_p3;

assign h_1_fu_634_p2 = (h6_0_reg_359 + 9'd1);

assign h_fu_490_p2 = (h_0_reg_269 + 9'd1);

assign i_3_fu_555_p2 = (i1_0_reg_313 + 3'd1);

assign i_fu_437_p2 = (i_0_reg_223 + 3'd1);

assign icmp_ln13_fu_419_p2 = ((seg_index_0_reg_211 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_431_p2 = ((i_0_reg_223 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_462_p2 = ((p_v_0_reg_234 == 5'd19) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_479_p2 = ((v_fu_474_p2 < v_limit_reg_696) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_484_p2 = ((h_0_reg_269 == 9'd320) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_496_p2 = ((quadrant_index_0_reg_245 < 8'd5) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_549_p2 = ((i1_0_reg_313 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_566_p2 = ((quadrant_space_q0 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_606_p2 = ((p_v2_0_reg_324 == 5'd19) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_623_p2 = ((v_1_fu_618_p2 < v_limit_reg_696) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_628_p2 = ((h6_0_reg_359 == 9'd320) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_640_p2 = ((quadrant_index4_0_reg_335 < 8'd5) ? 1'b1 : 1'b0);

assign icmp_ln895_1_fu_536_p2 = ((weed_mask_out_data_V_dout == 8'd0) ? 1'b1 : 1'b0);

assign p_v_1_fu_612_p2 = (p_v2_0_reg_324 + 5'd1);

assign p_v_fu_468_p2 = (p_v_0_reg_234 + 5'd1);

assign quadrant_weed_V_d1 = grp_fu_591_p2[23:0];

assign seg_index_fu_425_p2 = (seg_index_0_reg_211 + 4'd1);

assign segments_address0 = zext_ln20_fu_449_p1;

assign segments_address1 = zext_ln22_fu_454_p1;

assign select_ln34_fu_517_p3 = ((flag_quadrant_0_reg_257[0:0] === 1'b1) ? add_ln35_fu_511_p2 : trunc_ln26_fu_507_p1);

assign select_ln61_fu_656_p3 = ((flag_quadrant5_0_reg_347[0:0] === 1'b1) ? add_ln62_fu_650_p2 : trunc_ln54_fu_646_p1);

assign shl_ln_fu_572_p3 = {{p_Val2_s_reg_778}, {8'd0}};

assign trunc_ln26_fu_507_p1 = quadrant_index_0_reg_245[2:0];

assign trunc_ln54_fu_646_p1 = quadrant_index4_0_reg_335[2:0];

assign v_1_fu_618_p2 = (segments_load_reg_702 + zext_ln49_fu_602_p1);

assign v_fu_474_p2 = (segments_load_reg_702 + zext_ln21_fu_458_p1);

assign weed_mask_out_data_V_din = grp_bitwise_and_fu_403_p_dst_data_V_din;

assign zext_ln17_fu_443_p1 = i_0_reg_223;

assign zext_ln20_fu_449_p1 = seg_index_0_reg_211;

assign zext_ln21_fu_458_p1 = p_v_0_reg_234;

assign zext_ln22_fu_454_p1 = seg_index_reg_672;

assign zext_ln30_fu_502_p1 = quadrant_index_0_reg_245;

assign zext_ln34_fu_525_p1 = select_ln34_fu_517_p3;

assign zext_ln45_fu_561_p1 = i1_0_reg_313;

assign zext_ln49_fu_602_p1 = p_v2_0_reg_324;

assign zext_ln61_fu_664_p1 = select_ln61_fu_656_p3;

always @ (posedge ap_clk) begin
    zext_ln30_reg_735[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln45_reg_768[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //sectors_weed_classif
