// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module get_line_bases (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        bottom_data_V_dout,
        bottom_data_V_empty_n,
        bottom_data_V_read,
        line_bases_address0,
        line_bases_ce0,
        line_bases_we0,
        line_bases_d0,
        line_bases_q0,
        line_bases_address1,
        line_bases_ce1,
        line_bases_we1,
        line_bases_d1
);

parameter    ap_ST_fsm_state1 = 38'd1;
parameter    ap_ST_fsm_state2 = 38'd2;
parameter    ap_ST_fsm_state3 = 38'd4;
parameter    ap_ST_fsm_pp1_stage0 = 38'd8;
parameter    ap_ST_fsm_pp1_stage1 = 38'd16;
parameter    ap_ST_fsm_pp1_stage2 = 38'd32;
parameter    ap_ST_fsm_pp1_stage3 = 38'd64;
parameter    ap_ST_fsm_pp1_stage4 = 38'd128;
parameter    ap_ST_fsm_pp1_stage5 = 38'd256;
parameter    ap_ST_fsm_pp1_stage6 = 38'd512;
parameter    ap_ST_fsm_pp1_stage7 = 38'd1024;
parameter    ap_ST_fsm_pp1_stage8 = 38'd2048;
parameter    ap_ST_fsm_pp1_stage9 = 38'd4096;
parameter    ap_ST_fsm_pp1_stage10 = 38'd8192;
parameter    ap_ST_fsm_pp1_stage11 = 38'd16384;
parameter    ap_ST_fsm_pp1_stage12 = 38'd32768;
parameter    ap_ST_fsm_pp1_stage13 = 38'd65536;
parameter    ap_ST_fsm_pp1_stage14 = 38'd131072;
parameter    ap_ST_fsm_pp1_stage15 = 38'd262144;
parameter    ap_ST_fsm_pp1_stage16 = 38'd524288;
parameter    ap_ST_fsm_pp1_stage17 = 38'd1048576;
parameter    ap_ST_fsm_pp1_stage18 = 38'd2097152;
parameter    ap_ST_fsm_pp1_stage19 = 38'd4194304;
parameter    ap_ST_fsm_pp1_stage20 = 38'd8388608;
parameter    ap_ST_fsm_pp1_stage21 = 38'd16777216;
parameter    ap_ST_fsm_pp1_stage22 = 38'd33554432;
parameter    ap_ST_fsm_state51 = 38'd67108864;
parameter    ap_ST_fsm_state52 = 38'd134217728;
parameter    ap_ST_fsm_state53 = 38'd268435456;
parameter    ap_ST_fsm_state54 = 38'd536870912;
parameter    ap_ST_fsm_pp2_stage0 = 38'd1073741824;
parameter    ap_ST_fsm_state57 = 38'd2147483648;
parameter    ap_ST_fsm_state58 = 38'd4294967296;
parameter    ap_ST_fsm_state59 = 38'd8589934592;
parameter    ap_ST_fsm_state60 = 38'd17179869184;
parameter    ap_ST_fsm_state61 = 38'd34359738368;
parameter    ap_ST_fsm_state62 = 38'd68719476736;
parameter    ap_ST_fsm_state63 = 38'd137438953472;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] bottom_data_V_dout;
input   bottom_data_V_empty_n;
output   bottom_data_V_read;
output  [2:0] line_bases_address0;
output   line_bases_ce0;
output   line_bases_we0;
output  [16:0] line_bases_d0;
input  [16:0] line_bases_q0;
output  [2:0] line_bases_address1;
output   line_bases_ce1;
output   line_bases_we1;
output  [16:0] line_bases_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg bottom_data_V_read;
reg[2:0] line_bases_address0;
reg line_bases_ce0;
reg line_bases_we0;
reg[16:0] line_bases_d0;
reg[2:0] line_bases_address1;
reg line_bases_ce1;
reg line_bases_we1;
reg[16:0] line_bases_d1;

(* fsm_encoding = "none" *) reg   [37:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [8:0] histogram_address0;
reg    histogram_ce0;
reg    histogram_we0;
reg   [7:0] histogram_d0;
wire   [7:0] histogram_q0;
reg   [8:0] histogram_address1;
reg    histogram_ce1;
reg    histogram_we1;
reg   [7:0] histogram_d1;
wire   [7:0] histogram_q1;
reg   [8:0] smoothed_address0;
reg    smoothed_ce0;
reg    smoothed_we0;
wire   [7:0] smoothed_d0;
wire   [7:0] smoothed_q0;
reg    bottom_data_V_blk_n;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage1;
reg   [0:0] icmp_ln18_reg_875;
wire    ap_CS_fsm_pp1_stage2;
wire    ap_block_pp1_stage2;
wire    ap_CS_fsm_pp1_stage3;
wire    ap_block_pp1_stage3;
wire    ap_CS_fsm_pp1_stage4;
wire    ap_block_pp1_stage4;
wire    ap_CS_fsm_pp1_stage5;
wire    ap_block_pp1_stage5;
wire    ap_CS_fsm_pp1_stage6;
wire    ap_block_pp1_stage6;
wire    ap_CS_fsm_pp1_stage7;
wire    ap_block_pp1_stage7;
wire    ap_CS_fsm_pp1_stage8;
wire    ap_block_pp1_stage8;
wire    ap_CS_fsm_pp1_stage9;
wire    ap_block_pp1_stage9;
wire    ap_CS_fsm_pp1_stage10;
wire    ap_block_pp1_stage10;
wire    ap_CS_fsm_pp1_stage11;
wire    ap_block_pp1_stage11;
wire    ap_CS_fsm_pp1_stage12;
wire    ap_block_pp1_stage12;
wire    ap_CS_fsm_pp1_stage13;
wire    ap_block_pp1_stage13;
wire    ap_CS_fsm_pp1_stage14;
wire    ap_block_pp1_stage14;
wire    ap_CS_fsm_pp1_stage15;
wire    ap_block_pp1_stage15;
wire    ap_CS_fsm_pp1_stage16;
wire    ap_block_pp1_stage16;
wire    ap_CS_fsm_pp1_stage17;
wire    ap_block_pp1_stage17;
wire    ap_CS_fsm_pp1_stage18;
wire    ap_block_pp1_stage18;
wire    ap_CS_fsm_pp1_stage19;
wire    ap_block_pp1_stage19;
wire    ap_CS_fsm_pp1_stage20;
wire    ap_block_pp1_stage20;
wire    ap_CS_fsm_pp1_stage21;
wire    ap_block_pp1_stage21;
wire    ap_CS_fsm_pp1_stage22;
wire    ap_block_pp1_stage22;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [8:0] h_0_i_i_reg_274;
reg   [2:0] i1_0_i_reg_320;
wire   [8:0] i_fu_455_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln18_fu_466_p2;
wire    ap_block_state4_pp1_stage0_iter0;
reg    ap_block_state27_pp1_stage0_iter1;
wire    ap_block_state50_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
wire   [8:0] h_fu_472_p2;
reg   [8:0] h_reg_879;
reg   [8:0] histogram_addr_1_reg_884;
reg   [8:0] histogram_addr_1_reg_884_pp1_iter1_reg;
wire   [0:0] grp_fu_391_p2;
reg   [0:0] icmp_ln895_reg_890;
reg    ap_block_state5_pp1_stage1_iter0;
wire    ap_block_state28_pp1_stage1_iter1;
reg    ap_block_pp1_stage1_11001;
reg   [0:0] icmp_ln895_3_reg_894;
reg    ap_block_state6_pp1_stage2_iter0;
wire    ap_block_state29_pp1_stage2_iter1;
reg    ap_block_pp1_stage2_11001;
reg   [0:0] icmp_ln895_4_reg_898;
reg    ap_block_state7_pp1_stage3_iter0;
wire    ap_block_state30_pp1_stage3_iter1;
reg    ap_block_pp1_stage3_11001;
reg   [0:0] icmp_ln895_5_reg_902;
reg    ap_block_state8_pp1_stage4_iter0;
wire    ap_block_state31_pp1_stage4_iter1;
reg    ap_block_pp1_stage4_11001;
reg   [0:0] icmp_ln895_6_reg_906;
reg    ap_block_state9_pp1_stage5_iter0;
wire    ap_block_state32_pp1_stage5_iter1;
reg    ap_block_pp1_stage5_11001;
reg   [0:0] icmp_ln895_7_reg_910;
reg    ap_block_state10_pp1_stage6_iter0;
wire    ap_block_state33_pp1_stage6_iter1;
reg    ap_block_pp1_stage6_11001;
reg   [0:0] icmp_ln895_8_reg_914;
reg    ap_block_state11_pp1_stage7_iter0;
wire    ap_block_state34_pp1_stage7_iter1;
reg    ap_block_pp1_stage7_11001;
reg   [0:0] icmp_ln895_9_reg_918;
reg    ap_block_state12_pp1_stage8_iter0;
wire    ap_block_state35_pp1_stage8_iter1;
reg    ap_block_pp1_stage8_11001;
reg   [0:0] icmp_ln895_10_reg_922;
reg    ap_block_state13_pp1_stage9_iter0;
wire    ap_block_state36_pp1_stage9_iter1;
reg    ap_block_pp1_stage9_11001;
reg   [0:0] icmp_ln895_11_reg_926;
reg    ap_block_state14_pp1_stage10_iter0;
wire    ap_block_state37_pp1_stage10_iter1;
reg    ap_block_pp1_stage10_11001;
reg   [0:0] icmp_ln895_12_reg_930;
reg    ap_block_state15_pp1_stage11_iter0;
wire    ap_block_state38_pp1_stage11_iter1;
reg    ap_block_pp1_stage11_11001;
reg   [0:0] icmp_ln895_13_reg_934;
reg    ap_block_state16_pp1_stage12_iter0;
wire    ap_block_state39_pp1_stage12_iter1;
reg    ap_block_pp1_stage12_11001;
reg   [0:0] icmp_ln895_14_reg_938;
reg    ap_block_state17_pp1_stage13_iter0;
wire    ap_block_state40_pp1_stage13_iter1;
reg    ap_block_pp1_stage13_11001;
reg   [0:0] icmp_ln895_15_reg_942;
reg    ap_block_state18_pp1_stage14_iter0;
wire    ap_block_state41_pp1_stage14_iter1;
reg    ap_block_pp1_stage14_11001;
reg   [0:0] icmp_ln895_16_reg_946;
reg    ap_block_state19_pp1_stage15_iter0;
wire    ap_block_state42_pp1_stage15_iter1;
reg    ap_block_pp1_stage15_11001;
reg   [0:0] icmp_ln895_17_reg_950;
reg    ap_block_state20_pp1_stage16_iter0;
wire    ap_block_state43_pp1_stage16_iter1;
reg    ap_block_pp1_stage16_11001;
reg   [0:0] icmp_ln895_18_reg_954;
reg    ap_block_state21_pp1_stage17_iter0;
wire    ap_block_state44_pp1_stage17_iter1;
reg    ap_block_pp1_stage17_11001;
reg   [0:0] icmp_ln895_19_reg_958;
reg    ap_block_state22_pp1_stage18_iter0;
wire    ap_block_state45_pp1_stage18_iter1;
reg    ap_block_pp1_stage18_11001;
reg   [0:0] icmp_ln895_20_reg_962;
reg    ap_block_state23_pp1_stage19_iter0;
wire    ap_block_state46_pp1_stage19_iter1;
reg    ap_block_pp1_stage19_11001;
reg   [0:0] icmp_ln895_21_reg_966;
reg    ap_block_state24_pp1_stage20_iter0;
wire    ap_block_state47_pp1_stage20_iter1;
reg    ap_block_pp1_stage20_11001;
reg   [0:0] icmp_ln895_22_reg_970;
reg    ap_block_state25_pp1_stage21_iter0;
wire    ap_block_state48_pp1_stage21_iter1;
reg    ap_block_pp1_stage21_11001;
reg   [0:0] icmp_ln895_23_reg_974;
reg    ap_block_state26_pp1_stage22_iter0;
wire    ap_block_state49_pp1_stage22_iter1;
reg    ap_block_pp1_stage22_11001;
reg   [0:0] icmp_ln895_24_reg_978;
wire   [0:0] icmp_ln36_fu_483_p2;
wire    ap_CS_fsm_state52;
wire   [8:0] y_fu_489_p2;
reg   [8:0] y_reg_986;
wire   [9:0] zext_ln38_fu_495_p1;
reg   [9:0] zext_ln38_reg_991;
wire   [4:0] x_fu_505_p2;
reg   [4:0] x_reg_999;
wire    ap_CS_fsm_state53;
wire  signed [9:0] tmp_fu_525_p2;
reg  signed [9:0] tmp_reg_1004;
wire   [0:0] icmp_ln38_fu_499_p2;
wire   [15:0] total_1_fu_589_p3;
wire    ap_CS_fsm_state54;
wire   [0:0] icmp_ln47_fu_597_p2;
reg   [0:0] icmp_ln47_reg_1020;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state55_pp2_stage0_iter0;
wire    ap_block_state56_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
wire   [2:0] i_4_fu_603_p2;
reg    ap_enable_reg_pp2_iter0;
reg   [2:0] line_bases_addr_1_reg_1029;
wire   [15:0] zext_ln53_fu_625_p1;
reg   [15:0] zext_ln53_reg_1058;
wire    ap_CS_fsm_state58;
wire   [8:0] i_5_fu_635_p2;
reg   [8:0] i_5_reg_1069;
wire   [0:0] icmp_ln53_fu_629_p2;
reg   [7:0] smoothed_load_reg_1082;
wire    ap_CS_fsm_state59;
reg   [2:0] line_bases_addr_2_reg_1091;
wire   [0:0] icmp_ln54_fu_646_p2;
wire   [0:0] icmp_ln54_1_fu_652_p2;
reg   [16:0] line_bases_load_1_reg_1097;
wire    ap_CS_fsm_state60;
wire   [15:0] trunc_ln61_fu_689_p1;
reg   [15:0] trunc_ln61_reg_1103;
wire    ap_CS_fsm_state61;
wire   [0:0] grp_fu_430_p2;
wire   [0:0] icmp_ln72_fu_698_p2;
wire   [0:0] flag_meceta_0_i_load_load_fu_719_p1;
wire   [15:0] last_max_dist_fu_856_p2;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state3;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state4;
reg    ap_block_pp1_stage22_subdone;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state55;
reg    ap_enable_reg_pp2_iter1;
reg   [8:0] i_0_i_reg_263;
wire   [0:0] icmp_ln30_fu_449_p2;
reg   [8:0] ap_phi_mux_h_0_i_i_phi_fu_278_p4;
reg   [8:0] y_0_i_reg_285;
wire    ap_CS_fsm_state51;
reg   [4:0] x_0_i_reg_297;
reg   [15:0] total_0_i_reg_308;
reg   [15:0] last_max_dist_0_i_reg_331;
wire    ap_CS_fsm_state57;
reg   [8:0] i2_0_i_reg_343;
reg   [15:0] last_max_dist_6_i_reg_355;
wire   [0:0] icmp_ln62_fu_801_p2;
wire   [0:0] icmp_ln75_fu_769_p2;
wire    ap_CS_fsm_state62;
wire   [0:0] and_ln86_fu_837_p2;
wire   [63:0] zext_ln31_fu_461_p1;
wire   [63:0] zext_ln21_fu_478_p1;
wire   [63:0] zext_ln41_fu_534_p1;
wire   [63:0] zext_ln43_fu_550_p1;
wire   [63:0] zext_ln48_fu_609_p1;
wire    ap_block_pp2_stage0;
wire   [63:0] zext_ln54_fu_641_p1;
wire  signed [63:0] sext_ln61_fu_671_p1;
wire   [63:0] zext_ln61_1_fu_693_p1;
wire  signed [63:0] sext_ln86_fu_732_p1;
wire   [63:0] zext_ln76_fu_787_p1;
wire   [63:0] zext_ln65_fu_807_p1;
wire   [63:0] zext_ln87_fu_843_p1;
reg   [0:0] flag_meceta_0_i_fu_118;
reg   [7:0] line_counter_3_fu_122;
wire   [7:0] grp_fu_438_p2;
reg   [15:0] meceta_counter_1_fu_126;
wire   [15:0] meceta_counter_fu_703_p2;
wire   [7:0] grp_fu_397_p2;
wire   [7:0] grp_fu_404_p2;
reg   [16:0] tmp_43_fu_614_p4;
wire   [16:0] gep84345_part_set_i_fu_676_p3;
wire   [16:0] line_bases_y_3_addr1_1_fu_775_p5;
wire   [16:0] line_bases_active_3_2_fu_792_p3;
wire   [16:0] line_bases_active_3_1_fu_812_p3;
wire   [16:0] line_bases_y_3_addr1_fu_820_p5;
wire   [16:0] line_bases_active_3_3_fu_848_p3;
wire   [3:0] trunc_ln39_fu_511_p1;
wire   [3:0] xor_ln39_fu_515_p2;
wire  signed [9:0] sext_ln39_1_fu_521_p1;
wire  signed [31:0] sext_ln39_fu_530_p1;
wire   [0:0] tmp_44_fu_555_p3;
wire   [0:0] icmp_ln40_fu_568_p2;
wire   [0:0] xor_ln40_fu_562_p2;
wire   [15:0] zext_ln41_1_fu_579_p1;
wire   [0:0] and_ln40_fu_573_p2;
wire   [15:0] total_fu_583_p2;
wire   [8:0] zext_ln61_fu_661_p1;
wire   [8:0] add_ln61_fu_665_p2;
wire   [9:0] zext_ln86_fu_722_p1;
wire   [9:0] add_ln86_fu_726_p2;
wire   [14:0] lshr_ln_fu_737_p4;
wire   [15:0] zext_ln74_fu_747_p1;
wire   [15:0] p_tmp_fu_751_p2;
wire   [16:0] zext_ln75_cast_i_fu_756_p1;
wire   [16:0] zext_ln75_fu_760_p1;
wire   [16:0] sub_ln75_fu_763_p2;
wire   [0:0] icmp_ln86_1_fu_831_p2;
reg   [37:0] ap_NS_fsm;
reg    ap_block_pp1_stage1_subdone;
reg    ap_block_pp1_stage2_subdone;
reg    ap_block_pp1_stage3_subdone;
reg    ap_block_pp1_stage4_subdone;
reg    ap_block_pp1_stage5_subdone;
reg    ap_block_pp1_stage6_subdone;
reg    ap_block_pp1_stage7_subdone;
reg    ap_block_pp1_stage8_subdone;
reg    ap_block_pp1_stage9_subdone;
reg    ap_block_pp1_stage10_subdone;
reg    ap_block_pp1_stage11_subdone;
reg    ap_block_pp1_stage12_subdone;
reg    ap_block_pp1_stage13_subdone;
reg    ap_block_pp1_stage14_subdone;
reg    ap_block_pp1_stage15_subdone;
reg    ap_block_pp1_stage16_subdone;
reg    ap_block_pp1_stage17_subdone;
reg    ap_block_pp1_stage18_subdone;
reg    ap_block_pp1_stage19_subdone;
reg    ap_block_pp1_stage20_subdone;
reg    ap_block_pp1_stage21_subdone;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;

// power-on initialization
initial begin
#0 ap_CS_fsm = 38'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
end

get_line_bases_hiFfa #(
    .DataWidth( 8 ),
    .AddressRange( 320 ),
    .AddressWidth( 9 ))
histogram_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(histogram_address0),
    .ce0(histogram_ce0),
    .we0(histogram_we0),
    .d0(histogram_d0),
    .q0(histogram_q0),
    .address1(histogram_address1),
    .ce1(histogram_ce1),
    .we1(histogram_we1),
    .d1(histogram_d1),
    .q1(histogram_q1)
);

get_line_bases_smGfk #(
    .DataWidth( 8 ),
    .AddressRange( 320 ),
    .AddressWidth( 9 ))
smoothed_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(smoothed_address0),
    .ce0(smoothed_ce0),
    .we0(smoothed_we0),
    .d0(smoothed_d0),
    .q0(smoothed_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage22_subdone) & (1'b1 == ap_CS_fsm_pp1_stage22))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage22_subdone) & (1'b1 == ap_CS_fsm_pp1_stage22)))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state55) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((icmp_ln36_fu_483_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state52))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state55))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state55);
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if (((icmp_ln36_fu_483_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state52))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state61) & (icmp_ln72_fu_698_p2 == 1'd0) & (grp_fu_430_p2 == 1'd0))) begin
        flag_meceta_0_i_fu_118 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state57) | ((1'b1 == ap_CS_fsm_state62) & (1'd0 == and_ln86_fu_837_p2)) | ((1'd1 == and_ln86_fu_837_p2) & (1'b1 == ap_CS_fsm_state62)) | ((icmp_ln75_fu_769_p2 == 1'd1) & (flag_meceta_0_i_load_load_fu_719_p1 == 1'd1) & (icmp_ln72_fu_698_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state61) & (grp_fu_430_p2 == 1'd0)) | ((flag_meceta_0_i_load_load_fu_719_p1 == 1'd1) & (icmp_ln72_fu_698_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state61) & (icmp_ln75_fu_769_p2 == 1'd0) & (grp_fu_430_p2 == 1'd0)))) begin
        flag_meceta_0_i_fu_118 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h_0_i_i_reg_274 <= 9'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln18_reg_875 == 1'd0))) begin
        h_0_i_i_reg_274 <= h_reg_879;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln36_fu_483_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state52))) begin
        i1_0_i_reg_320 <= 3'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln47_fu_597_p2 == 1'd0))) begin
        i1_0_i_reg_320 <= i_4_fu_603_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        i2_0_i_reg_343 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        i2_0_i_reg_343 <= i_5_reg_1069;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln30_fu_449_p2 == 1'd0))) begin
        i_0_i_reg_263 <= i_fu_455_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_reg_263 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        last_max_dist_0_i_reg_331 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        last_max_dist_0_i_reg_331 <= last_max_dist_fu_856_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state62) & (1'd0 == and_ln86_fu_837_p2)) | ((1'b1 == ap_CS_fsm_state61) & (icmp_ln72_fu_698_p2 == 1'd0) & (grp_fu_430_p2 == 1'd0)) | ((icmp_ln54_1_fu_652_p2 == 1'd1) & (icmp_ln54_fu_646_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state59)) | ((icmp_ln54_1_fu_652_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state59) & (icmp_ln54_fu_646_p2 == 1'd0)))) begin
        last_max_dist_6_i_reg_355 <= last_max_dist_0_i_reg_331;
    end else if ((((1'd1 == and_ln86_fu_837_p2) & (1'b1 == ap_CS_fsm_state62)) | ((icmp_ln62_fu_801_p2 == 1'd1) & (grp_fu_430_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state61)) | ((grp_fu_430_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state61) & (icmp_ln62_fu_801_p2 == 1'd0)) | ((icmp_ln75_fu_769_p2 == 1'd1) & (flag_meceta_0_i_load_load_fu_719_p1 == 1'd1) & (icmp_ln72_fu_698_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state61) & (grp_fu_430_p2 == 1'd0)) | ((flag_meceta_0_i_load_load_fu_719_p1 == 1'd1) & (icmp_ln72_fu_698_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state61) & (icmp_ln75_fu_769_p2 == 1'd0) & (grp_fu_430_p2 == 1'd0)) | ((icmp_ln54_fu_646_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state59) & (icmp_ln54_1_fu_652_p2 == 1'd0)))) begin
        last_max_dist_6_i_reg_355 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'd1 == and_ln86_fu_837_p2) & (1'b1 == ap_CS_fsm_state62)) | ((grp_fu_430_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state61) & (icmp_ln62_fu_801_p2 == 1'd0)) | ((icmp_ln75_fu_769_p2 == 1'd1) & (flag_meceta_0_i_load_load_fu_719_p1 == 1'd1) & (icmp_ln72_fu_698_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state61) & (grp_fu_430_p2 == 1'd0)))) begin
        line_counter_3_fu_122 <= grp_fu_438_p2;
    end else if (((icmp_ln54_fu_646_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state59) & (icmp_ln54_1_fu_652_p2 == 1'd0))) begin
        line_counter_3_fu_122 <= 8'd1;
    end else if (((1'b1 == ap_CS_fsm_state57) | ((icmp_ln54_1_fu_652_p2 == 1'd1) & (icmp_ln54_fu_646_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state59)))) begin
        line_counter_3_fu_122 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state61) & (icmp_ln72_fu_698_p2 == 1'd0) & (grp_fu_430_p2 == 1'd0))) begin
        meceta_counter_1_fu_126 <= meceta_counter_fu_703_p2;
    end else if (((1'b1 == ap_CS_fsm_state57) | ((icmp_ln62_fu_801_p2 == 1'd1) & (grp_fu_430_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state61)) | ((grp_fu_430_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state61) & (icmp_ln62_fu_801_p2 == 1'd0)) | ((icmp_ln75_fu_769_p2 == 1'd1) & (flag_meceta_0_i_load_load_fu_719_p1 == 1'd1) & (icmp_ln72_fu_698_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state61) & (grp_fu_430_p2 == 1'd0)) | ((flag_meceta_0_i_load_load_fu_719_p1 == 1'd1) & (icmp_ln72_fu_698_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state61) & (icmp_ln75_fu_769_p2 == 1'd0) & (grp_fu_430_p2 == 1'd0)))) begin
        meceta_counter_1_fu_126 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        total_0_i_reg_308 <= total_1_fu_589_p3;
    end else if (((1'b1 == ap_CS_fsm_state52) & (icmp_ln36_fu_483_p2 == 1'd0))) begin
        total_0_i_reg_308 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        x_0_i_reg_297 <= x_reg_999;
    end else if (((1'b1 == ap_CS_fsm_state52) & (icmp_ln36_fu_483_p2 == 1'd0))) begin
        x_0_i_reg_297 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        y_0_i_reg_285 <= 9'd0;
    end else if (((icmp_ln38_fu_499_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state53))) begin
        y_0_i_reg_285 <= y_reg_986;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        h_reg_879 <= h_fu_472_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln18_fu_466_p2 == 1'd0))) begin
        histogram_addr_1_reg_884 <= zext_ln21_fu_478_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        histogram_addr_1_reg_884_pp1_iter1_reg <= histogram_addr_1_reg_884;
        icmp_ln18_reg_875 <= icmp_ln18_fu_466_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        i_5_reg_1069 <= i_5_fu_635_p2;
        zext_ln53_reg_1058[8 : 0] <= zext_ln53_fu_625_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln47_reg_1020 <= icmp_ln47_fu_597_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage9_11001) & (1'b1 == ap_CS_fsm_pp1_stage9) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0))) begin
        icmp_ln895_10_reg_922 <= grp_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage10_11001) & (1'b1 == ap_CS_fsm_pp1_stage10) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0))) begin
        icmp_ln895_11_reg_926 <= grp_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage11_11001) & (1'b1 == ap_CS_fsm_pp1_stage11) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0))) begin
        icmp_ln895_12_reg_930 <= grp_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage12_11001) & (1'b1 == ap_CS_fsm_pp1_stage12) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0))) begin
        icmp_ln895_13_reg_934 <= grp_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage13_11001) & (1'b1 == ap_CS_fsm_pp1_stage13) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0))) begin
        icmp_ln895_14_reg_938 <= grp_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage14_11001) & (1'b1 == ap_CS_fsm_pp1_stage14) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0))) begin
        icmp_ln895_15_reg_942 <= grp_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage15_11001) & (1'b1 == ap_CS_fsm_pp1_stage15) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0))) begin
        icmp_ln895_16_reg_946 <= grp_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage16_11001) & (1'b1 == ap_CS_fsm_pp1_stage16) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0))) begin
        icmp_ln895_17_reg_950 <= grp_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage17_11001) & (1'b1 == ap_CS_fsm_pp1_stage17) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0))) begin
        icmp_ln895_18_reg_954 <= grp_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage18_11001) & (1'b1 == ap_CS_fsm_pp1_stage18) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0))) begin
        icmp_ln895_19_reg_958 <= grp_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage19_11001) & (1'b1 == ap_CS_fsm_pp1_stage19) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0))) begin
        icmp_ln895_20_reg_962 <= grp_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage20_11001) & (1'b1 == ap_CS_fsm_pp1_stage20) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0))) begin
        icmp_ln895_21_reg_966 <= grp_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage21_11001) & (1'b1 == ap_CS_fsm_pp1_stage21) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0))) begin
        icmp_ln895_22_reg_970 <= grp_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage22_11001) & (1'b1 == ap_CS_fsm_pp1_stage22) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0))) begin
        icmp_ln895_23_reg_974 <= grp_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln895_24_reg_978 <= grp_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0))) begin
        icmp_ln895_3_reg_894 <= grp_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0))) begin
        icmp_ln895_4_reg_898 <= grp_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0))) begin
        icmp_ln895_5_reg_902 <= grp_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage5_11001) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0))) begin
        icmp_ln895_6_reg_906 <= grp_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage6_11001) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0))) begin
        icmp_ln895_7_reg_910 <= grp_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage7_11001) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0))) begin
        icmp_ln895_8_reg_914 <= grp_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage8_11001) & (1'b1 == ap_CS_fsm_pp1_stage8) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0))) begin
        icmp_ln895_9_reg_918 <= grp_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln18_reg_875 == 1'd0))) begin
        icmp_ln895_reg_890 <= grp_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln47_fu_597_p2 == 1'd0))) begin
        line_bases_addr_1_reg_1029 <= zext_ln48_fu_609_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state59) & (icmp_ln54_1_fu_652_p2 == 1'd0) & (icmp_ln54_fu_646_p2 == 1'd0))) begin
        line_bases_addr_2_reg_1091 <= sext_ln61_fu_671_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        line_bases_load_1_reg_1097 <= line_bases_q0;
        trunc_ln61_reg_1103 <= trunc_ln61_fu_689_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        smoothed_load_reg_1082 <= smoothed_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state53) & (icmp_ln38_fu_499_p2 == 1'd0))) begin
        tmp_reg_1004 <= tmp_fu_525_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        x_reg_999 <= x_fu_505_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        y_reg_986 <= y_fu_489_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state52) & (icmp_ln36_fu_483_p2 == 1'd0))) begin
        zext_ln38_reg_991[8 : 0] <= zext_ln38_fu_495_p1[8 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln18_fu_466_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln47_fu_597_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state55 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state55 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln53_fu_629_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state58)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln18_reg_875 == 1'd0))) begin
        ap_phi_mux_h_0_i_i_phi_fu_278_p4 = h_reg_879;
    end else begin
        ap_phi_mux_h_0_i_i_phi_fu_278_p4 = h_0_i_i_reg_274;
    end
end

always @ (*) begin
    if (((icmp_ln53_fu_629_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state58))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage22) & (1'b1 == ap_CS_fsm_pp1_stage22) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage21) & (1'b1 == ap_CS_fsm_pp1_stage21) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage20) & (1'b1 == ap_CS_fsm_pp1_stage20) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage19) & (1'b1 == ap_CS_fsm_pp1_stage19) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage18) & (1'b1 == ap_CS_fsm_pp1_stage18) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage17) & (1'b1 == ap_CS_fsm_pp1_stage17) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage16) & (1'b1 == ap_CS_fsm_pp1_stage16) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage15) & (1'b1 == ap_CS_fsm_pp1_stage15) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage14) & (1'b1 == ap_CS_fsm_pp1_stage14) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage13) & (1'b1 == ap_CS_fsm_pp1_stage13) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage12) & (1'b1 == ap_CS_fsm_pp1_stage12) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage11) & (1'b1 == ap_CS_fsm_pp1_stage11) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage10) & (1'b1 == ap_CS_fsm_pp1_stage10) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage9) & (1'b1 == ap_CS_fsm_pp1_stage9) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp1_stage8) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage8) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage7) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage6) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage5) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage4) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage3) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage2) & (icmp_ln18_reg_875 == 1'd0)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln18_reg_875 == 1'd0) & (1'b0 == ap_block_pp1_stage1)))) begin
        bottom_data_V_blk_n = bottom_data_V_empty_n;
    end else begin
        bottom_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage22_11001) & (1'b1 == ap_CS_fsm_pp1_stage22) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage21_11001) & (1'b1 == ap_CS_fsm_pp1_stage21) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage20_11001) & (1'b1 == ap_CS_fsm_pp1_stage20) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage19_11001) & (1'b1 == ap_CS_fsm_pp1_stage19) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage18_11001) & (1'b1 == ap_CS_fsm_pp1_stage18) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage17_11001) & (1'b1 == ap_CS_fsm_pp1_stage17) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage16_11001) & (1'b1 == ap_CS_fsm_pp1_stage16) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage15_11001) & (1'b1 == ap_CS_fsm_pp1_stage15) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage14_11001) & (1'b1 == ap_CS_fsm_pp1_stage14) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage13_11001) & (1'b1 == ap_CS_fsm_pp1_stage13) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage12_11001) & (1'b1 == ap_CS_fsm_pp1_stage12) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage11_11001) & (1'b1 == ap_CS_fsm_pp1_stage11) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage10_11001) & (1'b1 == ap_CS_fsm_pp1_stage10) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage9_11001) & (1'b1 == ap_CS_fsm_pp1_stage9) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage8_11001) & (1'b1 == ap_CS_fsm_pp1_stage8) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage7_11001) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage6_11001) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage5_11001) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln18_reg_875 == 1'd0)))) begin
        bottom_data_V_read = 1'b1;
    end else begin
        bottom_data_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage22) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage22)) | ((1'b0 == ap_block_pp1_stage21) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage21)) | ((1'b0 == ap_block_pp1_stage20) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage20)) | ((1'b0 == ap_block_pp1_stage19) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage19)) | ((1'b0 == ap_block_pp1_stage18) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage18)) | ((1'b0 == ap_block_pp1_stage17) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage17)) | ((1'b0 == ap_block_pp1_stage16) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage16)) | ((1'b0 == ap_block_pp1_stage15) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage15)) | ((1'b0 == ap_block_pp1_stage14) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage14)) | ((1'b0 == ap_block_pp1_stage13) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage13)) | ((1'b0 == ap_block_pp1_stage12) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage12)) | ((1'b0 == ap_block_pp1_stage11) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage11)) | ((1'b0 == ap_block_pp1_stage10) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage10)) | ((1'b0 == ap_block_pp1_stage9) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage9)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage8) & (1'b0 == ap_block_pp1_stage8)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage7) & (1'b0 == ap_block_pp1_stage7)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage6) & (1'b0 == ap_block_pp1_stage6)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage5) & (1'b0 == ap_block_pp1_stage5)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage4) & (1'b0 == ap_block_pp1_stage4)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3) & (1'b0 == ap_block_pp1_stage3)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1)))) begin
        histogram_address0 = histogram_addr_1_reg_884_pp1_iter1_reg;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        histogram_address0 = histogram_addr_1_reg_884;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        histogram_address0 = zext_ln31_fu_461_p1;
    end else begin
        histogram_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        histogram_address1 = zext_ln41_fu_534_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        histogram_address1 = histogram_addr_1_reg_884_pp1_iter1_reg;
    end else if ((((1'b0 == ap_block_pp1_stage22) & (1'b1 == ap_CS_fsm_pp1_stage22) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage21) & (1'b1 == ap_CS_fsm_pp1_stage21) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage20) & (1'b1 == ap_CS_fsm_pp1_stage20) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage19) & (1'b1 == ap_CS_fsm_pp1_stage19) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage18) & (1'b1 == ap_CS_fsm_pp1_stage18) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage17) & (1'b1 == ap_CS_fsm_pp1_stage17) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage16) & (1'b1 == ap_CS_fsm_pp1_stage16) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage15) & (1'b1 == ap_CS_fsm_pp1_stage15) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage14) & (1'b1 == ap_CS_fsm_pp1_stage14) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage13) & (1'b1 == ap_CS_fsm_pp1_stage13) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage12) & (1'b1 == ap_CS_fsm_pp1_stage12) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage11) & (1'b1 == ap_CS_fsm_pp1_stage11) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage10) & (1'b1 == ap_CS_fsm_pp1_stage10) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage9) & (1'b1 == ap_CS_fsm_pp1_stage9) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage8) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage8)) | ((1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage7)) | ((1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage6)) | ((1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage5)) | ((1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage4)) | ((1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage3)) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage2)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1)))) begin
        histogram_address1 = histogram_addr_1_reg_884;
    end else begin
        histogram_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage22_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage22)) | ((1'b0 == ap_block_pp1_stage21_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage21)) | ((1'b0 == ap_block_pp1_stage20_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage20)) | ((1'b0 == ap_block_pp1_stage19_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage19)) | ((1'b0 == ap_block_pp1_stage18_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage18)) | ((1'b0 == ap_block_pp1_stage17_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage17)) | ((1'b0 == ap_block_pp1_stage16_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage16)) | ((1'b0 == ap_block_pp1_stage15_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage15)) | ((1'b0 == ap_block_pp1_stage14_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage14)) | ((1'b0 == ap_block_pp1_stage13_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage13)) | ((1'b0 == ap_block_pp1_stage12_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage12)) | ((1'b0 == ap_block_pp1_stage11_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage11)) | ((1'b0 == ap_block_pp1_stage10_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage10)) | ((1'b0 == ap_block_pp1_stage9_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage9)) | ((1'b0 == ap_block_pp1_stage8_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage8)) | ((1'b0 == ap_block_pp1_stage7_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage7)) | ((1'b0 == ap_block_pp1_stage6_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage6)) | ((1'b0 == ap_block_pp1_stage5_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage5)) | ((1'b0 == ap_block_pp1_stage4_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage4)) | ((1'b0 == ap_block_pp1_stage3_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3)) | ((1'b0 == ap_block_pp1_stage2_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        histogram_ce0 = 1'b1;
    end else begin
        histogram_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state53) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage22_11001) & (1'b1 == ap_CS_fsm_pp1_stage22) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage21_11001) & (1'b1 == ap_CS_fsm_pp1_stage21) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage20_11001) & (1'b1 == ap_CS_fsm_pp1_stage20) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage19_11001) & (1'b1 == ap_CS_fsm_pp1_stage19) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage18_11001) & (1'b1 == ap_CS_fsm_pp1_stage18) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage17_11001) & (1'b1 == ap_CS_fsm_pp1_stage17) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage16_11001) & (1'b1 == ap_CS_fsm_pp1_stage16) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage15_11001) & (1'b1 == ap_CS_fsm_pp1_stage15) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage14_11001) & (1'b1 == ap_CS_fsm_pp1_stage14) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage13_11001) & (1'b1 == ap_CS_fsm_pp1_stage13) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage12_11001) & (1'b1 == ap_CS_fsm_pp1_stage12) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage11_11001) & (1'b1 == ap_CS_fsm_pp1_stage11) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage10_11001) & (1'b1 == ap_CS_fsm_pp1_stage10) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage9_11001) & (1'b1 == ap_CS_fsm_pp1_stage9) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage8_11001) & (1'b1 == ap_CS_fsm_pp1_stage8) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage7_11001) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage6_11001) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage5_11001) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        histogram_ce1 = 1'b1;
    end else begin
        histogram_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage21) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage21)) | ((1'b0 == ap_block_pp1_stage19) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage19)) | ((1'b0 == ap_block_pp1_stage17) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage17)) | ((1'b0 == ap_block_pp1_stage15) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage15)) | ((1'b0 == ap_block_pp1_stage13) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage13)) | ((1'b0 == ap_block_pp1_stage11) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage11)) | ((1'b0 == ap_block_pp1_stage9) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage9)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage7) & (1'b0 == ap_block_pp1_stage7)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage5) & (1'b0 == ap_block_pp1_stage5)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3) & (1'b0 == ap_block_pp1_stage3)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1)))) begin
        histogram_d0 = grp_fu_404_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        histogram_d0 = 8'd0;
    end else begin
        histogram_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        histogram_d1 = grp_fu_404_p2;
    end else if ((((1'b0 == ap_block_pp1_stage22) & (1'b1 == ap_CS_fsm_pp1_stage22) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage20) & (1'b1 == ap_CS_fsm_pp1_stage20) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage18) & (1'b1 == ap_CS_fsm_pp1_stage18) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage16) & (1'b1 == ap_CS_fsm_pp1_stage16) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage14) & (1'b1 == ap_CS_fsm_pp1_stage14) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage12) & (1'b1 == ap_CS_fsm_pp1_stage12) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage10) & (1'b1 == ap_CS_fsm_pp1_stage10) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage8) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage8)) | ((1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage6)) | ((1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage4)) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage2)))) begin
        histogram_d1 = grp_fu_397_p2;
    end else begin
        histogram_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (icmp_ln30_fu_449_p2 == 1'd0)) | ((1'b0 == ap_block_pp1_stage21_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage21) & (icmp_ln895_23_reg_974 == 1'd0)) | ((1'b0 == ap_block_pp1_stage19_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage19) & (icmp_ln895_22_reg_970 == 1'd0)) | ((1'b0 == ap_block_pp1_stage17_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage17) & (icmp_ln895_21_reg_966 == 1'd0)) | ((1'b0 == ap_block_pp1_stage15_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage15) & (icmp_ln895_20_reg_962 == 1'd0)) | ((1'b0 == ap_block_pp1_stage13_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage13) & (icmp_ln895_19_reg_958 == 1'd0)) | ((1'b0 == ap_block_pp1_stage11_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage11) & (icmp_ln895_18_reg_954 == 1'd0)) | ((1'b0 == ap_block_pp1_stage9_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage9) & (icmp_ln895_17_reg_950 == 1'd0)) | ((1'b0 == ap_block_pp1_stage7_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage7) & (icmp_ln895_16_reg_946 == 1'd0)) | ((1'b0 == ap_block_pp1_stage5_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage5) & (icmp_ln895_15_reg_942 == 1'd0)) | ((1'b0 == ap_block_pp1_stage3_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3) & (icmp_ln895_14_reg_938 == 1'd0)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln895_13_reg_934 == 1'd0)))) begin
        histogram_we0 = 1'b1;
    end else begin
        histogram_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln895_24_reg_978 == 1'd0)) | ((1'b0 == ap_block_pp1_stage22_11001) & (1'b1 == ap_CS_fsm_pp1_stage22) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln895_12_reg_930 == 1'd0) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage20_11001) & (1'b1 == ap_CS_fsm_pp1_stage20) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln895_11_reg_926 == 1'd0) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage18_11001) & (1'b1 == ap_CS_fsm_pp1_stage18) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln895_10_reg_922 == 1'd0) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage16_11001) & (1'b1 == ap_CS_fsm_pp1_stage16) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln895_9_reg_918 == 1'd0) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage14_11001) & (1'b1 == ap_CS_fsm_pp1_stage14) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln895_8_reg_914 == 1'd0) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage12_11001) & (1'b1 == ap_CS_fsm_pp1_stage12) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln895_7_reg_910 == 1'd0) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage10_11001) & (1'b1 == ap_CS_fsm_pp1_stage10) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln895_6_reg_906 == 1'd0) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage8_11001) & (1'b1 == ap_CS_fsm_pp1_stage8) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln895_5_reg_902 == 1'd0) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage6_11001) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln895_4_reg_898 == 1'd0) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln895_3_reg_894 == 1'd0) & (icmp_ln18_reg_875 == 1'd0)) | ((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln895_reg_890 == 1'd0) & (icmp_ln18_reg_875 == 1'd0)))) begin
        histogram_we1 = 1'b1;
    end else begin
        histogram_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        line_bases_address0 = zext_ln87_fu_843_p1;
    end else if (((icmp_ln54_fu_646_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state59) & (icmp_ln54_1_fu_652_p2 == 1'd0))) begin
        line_bases_address0 = 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state59) & (icmp_ln54_1_fu_652_p2 == 1'd0) & (icmp_ln54_fu_646_p2 == 1'd0))) begin
        line_bases_address0 = sext_ln61_fu_671_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        line_bases_address0 = zext_ln48_fu_609_p1;
    end else begin
        line_bases_address0 = 'bx;
    end
end

always @ (*) begin
    if (((grp_fu_430_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state61) & (icmp_ln62_fu_801_p2 == 1'd0))) begin
        line_bases_address1 = zext_ln65_fu_807_p1;
    end else if (((icmp_ln75_fu_769_p2 == 1'd1) & (flag_meceta_0_i_load_load_fu_719_p1 == 1'd1) & (icmp_ln72_fu_698_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state61) & (grp_fu_430_p2 == 1'd0))) begin
        line_bases_address1 = zext_ln76_fu_787_p1;
    end else if ((((icmp_ln62_fu_801_p2 == 1'd1) & (grp_fu_430_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state61)) | ((flag_meceta_0_i_load_load_fu_719_p1 == 1'd1) & (icmp_ln72_fu_698_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state61) & (icmp_ln75_fu_769_p2 == 1'd0) & (grp_fu_430_p2 == 1'd0)))) begin
        line_bases_address1 = line_bases_addr_2_reg_1091;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        line_bases_address1 = line_bases_addr_1_reg_1029;
    end else begin
        line_bases_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state62) | ((icmp_ln54_fu_646_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state59) & (icmp_ln54_1_fu_652_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state59) & (icmp_ln54_1_fu_652_p2 == 1'd0) & (icmp_ln54_fu_646_p2 == 1'd0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        line_bases_ce0 = 1'b1;
    end else begin
        line_bases_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln62_fu_801_p2 == 1'd1) & (grp_fu_430_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state61)) | ((grp_fu_430_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state61) & (icmp_ln62_fu_801_p2 == 1'd0)) | ((icmp_ln75_fu_769_p2 == 1'd1) & (flag_meceta_0_i_load_load_fu_719_p1 == 1'd1) & (icmp_ln72_fu_698_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state61) & (grp_fu_430_p2 == 1'd0)) | ((flag_meceta_0_i_load_load_fu_719_p1 == 1'd1) & (icmp_ln72_fu_698_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state61) & (icmp_ln75_fu_769_p2 == 1'd0) & (grp_fu_430_p2 == 1'd0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        line_bases_ce1 = 1'b1;
    end else begin
        line_bases_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        line_bases_d0 = line_bases_active_3_3_fu_848_p3;
    end else if (((icmp_ln54_fu_646_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state59) & (icmp_ln54_1_fu_652_p2 == 1'd0))) begin
        line_bases_d0 = gep84345_part_set_i_fu_676_p3;
    end else begin
        line_bases_d0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln62_fu_801_p2 == 1'd1) & (grp_fu_430_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state61))) begin
        line_bases_d1 = line_bases_y_3_addr1_fu_820_p5;
    end else if (((grp_fu_430_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state61) & (icmp_ln62_fu_801_p2 == 1'd0))) begin
        line_bases_d1 = line_bases_active_3_1_fu_812_p3;
    end else if (((icmp_ln75_fu_769_p2 == 1'd1) & (flag_meceta_0_i_load_load_fu_719_p1 == 1'd1) & (icmp_ln72_fu_698_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state61) & (grp_fu_430_p2 == 1'd0))) begin
        line_bases_d1 = line_bases_active_3_2_fu_792_p3;
    end else if (((flag_meceta_0_i_load_load_fu_719_p1 == 1'd1) & (icmp_ln72_fu_698_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state61) & (icmp_ln75_fu_769_p2 == 1'd0) & (grp_fu_430_p2 == 1'd0))) begin
        line_bases_d1 = line_bases_y_3_addr1_1_fu_775_p5;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        line_bases_d1 = tmp_43_fu_614_p4;
    end else begin
        line_bases_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'd1 == and_ln86_fu_837_p2) & (1'b1 == ap_CS_fsm_state62)) | ((icmp_ln54_fu_646_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state59) & (icmp_ln54_1_fu_652_p2 == 1'd0)))) begin
        line_bases_we0 = 1'b1;
    end else begin
        line_bases_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln62_fu_801_p2 == 1'd1) & (grp_fu_430_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state61)) | ((grp_fu_430_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state61) & (icmp_ln62_fu_801_p2 == 1'd0)) | ((icmp_ln75_fu_769_p2 == 1'd1) & (flag_meceta_0_i_load_load_fu_719_p1 == 1'd1) & (icmp_ln72_fu_698_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state61) & (grp_fu_430_p2 == 1'd0)) | ((flag_meceta_0_i_load_load_fu_719_p1 == 1'd1) & (icmp_ln72_fu_698_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state61) & (icmp_ln75_fu_769_p2 == 1'd0) & (grp_fu_430_p2 == 1'd0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln47_reg_1020 == 1'd0)))) begin
        line_bases_we1 = 1'b1;
    end else begin
        line_bases_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        smoothed_address0 = sext_ln86_fu_732_p1;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        smoothed_address0 = zext_ln61_1_fu_693_p1;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        smoothed_address0 = zext_ln54_fu_641_p1;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        smoothed_address0 = zext_ln43_fu_550_p1;
    end else begin
        smoothed_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state53))) begin
        smoothed_ce0 = 1'b1;
    end else begin
        smoothed_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln38_fu_499_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state53))) begin
        smoothed_we0 = 1'b1;
    end else begin
        smoothed_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln30_fu_449_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln18_fu_466_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln18_fu_466_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if ((1'b0 == ap_block_pp1_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_pp1_stage3 : begin
            if ((1'b0 == ap_block_pp1_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end
        end
        ap_ST_fsm_pp1_stage4 : begin
            if ((1'b0 == ap_block_pp1_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end
        end
        ap_ST_fsm_pp1_stage5 : begin
            if ((1'b0 == ap_block_pp1_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            end
        end
        ap_ST_fsm_pp1_stage6 : begin
            if ((1'b0 == ap_block_pp1_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            end
        end
        ap_ST_fsm_pp1_stage7 : begin
            if ((1'b0 == ap_block_pp1_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage7;
            end
        end
        ap_ST_fsm_pp1_stage8 : begin
            if ((1'b0 == ap_block_pp1_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage8;
            end
        end
        ap_ST_fsm_pp1_stage9 : begin
            if ((1'b0 == ap_block_pp1_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage9;
            end
        end
        ap_ST_fsm_pp1_stage10 : begin
            if ((1'b0 == ap_block_pp1_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage10;
            end
        end
        ap_ST_fsm_pp1_stage11 : begin
            if ((1'b0 == ap_block_pp1_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage11;
            end
        end
        ap_ST_fsm_pp1_stage12 : begin
            if ((1'b0 == ap_block_pp1_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage12;
            end
        end
        ap_ST_fsm_pp1_stage13 : begin
            if ((1'b0 == ap_block_pp1_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage13;
            end
        end
        ap_ST_fsm_pp1_stage14 : begin
            if ((1'b0 == ap_block_pp1_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage14;
            end
        end
        ap_ST_fsm_pp1_stage15 : begin
            if ((1'b0 == ap_block_pp1_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage15;
            end
        end
        ap_ST_fsm_pp1_stage16 : begin
            if ((1'b0 == ap_block_pp1_stage16_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage16;
            end
        end
        ap_ST_fsm_pp1_stage17 : begin
            if ((1'b0 == ap_block_pp1_stage17_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage17;
            end
        end
        ap_ST_fsm_pp1_stage18 : begin
            if ((1'b0 == ap_block_pp1_stage18_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage18;
            end
        end
        ap_ST_fsm_pp1_stage19 : begin
            if ((1'b0 == ap_block_pp1_stage19_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage19;
            end
        end
        ap_ST_fsm_pp1_stage20 : begin
            if ((1'b0 == ap_block_pp1_stage20_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage20;
            end
        end
        ap_ST_fsm_pp1_stage21 : begin
            if ((1'b0 == ap_block_pp1_stage21_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage21;
            end
        end
        ap_ST_fsm_pp1_stage22 : begin
            if ((1'b0 == ap_block_pp1_stage22_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage22;
            end
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            if (((icmp_ln36_fu_483_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state52))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state53 : begin
            if (((icmp_ln38_fu_499_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln47_fu_597_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln47_fu_597_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            if (((icmp_ln53_fu_629_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state59 : begin
            if (((1'b1 == ap_CS_fsm_state59) & ((icmp_ln54_1_fu_652_p2 == 1'd1) | (icmp_ln54_fu_646_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            if (((icmp_ln72_fu_698_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state61) & (flag_meceta_0_i_load_load_fu_719_p1 == 1'd0) & (grp_fu_430_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln61_fu_665_p2 = ($signed(9'd511) + $signed(zext_ln61_fu_661_p1));

assign add_ln86_fu_726_p2 = ($signed(zext_ln86_fu_722_p1) + $signed(10'd1023));

assign and_ln40_fu_573_p2 = (xor_ln40_fu_562_p2 & icmp_ln40_fu_568_p2);

assign and_ln86_fu_837_p2 = (icmp_ln86_1_fu_831_p2 & grp_fu_430_p2);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp1_stage10 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp1_stage11 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp1_stage12 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp1_stage13 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp1_stage14 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp1_stage15 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp1_stage16 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp1_stage17 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp1_stage18 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp1_stage19 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp1_stage20 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_pp1_stage21 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp1_stage22 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_pp1_stage3 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp1_stage4 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp1_stage5 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage6 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp1_stage7 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp1_stage8 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp1_stage9 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd37];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage10_11001 = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage10_subdone = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

assign ap_block_pp1_stage11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage11_11001 = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage11_subdone = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

assign ap_block_pp1_stage12 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage12_11001 = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage12_subdone = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

assign ap_block_pp1_stage13 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage13_11001 = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage13_subdone = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

assign ap_block_pp1_stage14 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage14_11001 = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage14_subdone = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

assign ap_block_pp1_stage15 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage15_11001 = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage15_subdone = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

assign ap_block_pp1_stage16 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage16_11001 = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage16_subdone = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

assign ap_block_pp1_stage17 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage17_11001 = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage17_subdone = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

assign ap_block_pp1_stage18 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage18_11001 = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage18_subdone = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

assign ap_block_pp1_stage19 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage19_11001 = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage19_subdone = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage1_11001 = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage1_subdone = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

assign ap_block_pp1_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage20 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage20_11001 = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage20_subdone = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

assign ap_block_pp1_stage21 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage21_11001 = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage21_subdone = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

assign ap_block_pp1_stage22 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage22_11001 = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage22_subdone = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage2_11001 = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage2_subdone = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

assign ap_block_pp1_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage3_11001 = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage3_subdone = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

assign ap_block_pp1_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage4_11001 = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage4_subdone = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

assign ap_block_pp1_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage5_11001 = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage5_subdone = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

assign ap_block_pp1_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage6_11001 = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage6_subdone = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

assign ap_block_pp1_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage7_11001 = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage7_subdone = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

assign ap_block_pp1_stage8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage8_11001 = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage8_subdone = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

assign ap_block_pp1_stage9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage9_11001 = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage9_subdone = ((bottom_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln18_reg_875 == 1'd0));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state10_pp1_stage6_iter0 = ((bottom_data_V_empty_n == 1'b0) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_state11_pp1_stage7_iter0 = ((bottom_data_V_empty_n == 1'b0) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_state12_pp1_stage8_iter0 = ((bottom_data_V_empty_n == 1'b0) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_state13_pp1_stage9_iter0 = ((bottom_data_V_empty_n == 1'b0) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_state14_pp1_stage10_iter0 = ((bottom_data_V_empty_n == 1'b0) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_state15_pp1_stage11_iter0 = ((bottom_data_V_empty_n == 1'b0) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_state16_pp1_stage12_iter0 = ((bottom_data_V_empty_n == 1'b0) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_state17_pp1_stage13_iter0 = ((bottom_data_V_empty_n == 1'b0) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_state18_pp1_stage14_iter0 = ((bottom_data_V_empty_n == 1'b0) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_state19_pp1_stage15_iter0 = ((bottom_data_V_empty_n == 1'b0) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_state20_pp1_stage16_iter0 = ((bottom_data_V_empty_n == 1'b0) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_state21_pp1_stage17_iter0 = ((bottom_data_V_empty_n == 1'b0) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_state22_pp1_stage18_iter0 = ((bottom_data_V_empty_n == 1'b0) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_state23_pp1_stage19_iter0 = ((bottom_data_V_empty_n == 1'b0) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_state24_pp1_stage20_iter0 = ((bottom_data_V_empty_n == 1'b0) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_state25_pp1_stage21_iter0 = ((bottom_data_V_empty_n == 1'b0) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_state26_pp1_stage22_iter0 = ((bottom_data_V_empty_n == 1'b0) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_state27_pp1_stage0_iter1 = (bottom_data_V_empty_n == 1'b0);
end

assign ap_block_state28_pp1_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp1_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp1_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp1_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp1_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp1_stage6_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp1_stage7_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp1_stage8_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp1_stage9_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp1_stage10_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp1_stage11_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp1_stage12_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp1_stage13_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp1_stage14_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp1_stage15_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp1_stage16_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp1_stage17_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp1_stage18_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp1_stage19_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp1_stage20_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp1_stage21_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp1_stage22_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp1_stage1_iter0 = ((bottom_data_V_empty_n == 1'b0) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_state6_pp1_stage2_iter0 = ((bottom_data_V_empty_n == 1'b0) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_state7_pp1_stage3_iter0 = ((bottom_data_V_empty_n == 1'b0) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_state8_pp1_stage4_iter0 = ((bottom_data_V_empty_n == 1'b0) & (icmp_ln18_reg_875 == 1'd0));
end

always @ (*) begin
    ap_block_state9_pp1_stage5_iter0 = ((bottom_data_V_empty_n == 1'b0) & (icmp_ln18_reg_875 == 1'd0));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign flag_meceta_0_i_load_load_fu_719_p1 = flag_meceta_0_i_fu_118;

assign gep84345_part_set_i_fu_676_p3 = {{1'd1}, {zext_ln53_reg_1058}};

assign grp_fu_391_p2 = ((bottom_data_V_dout == 8'd0) ? 1'b1 : 1'b0);

assign grp_fu_397_p2 = (histogram_q1 + 8'd1);

assign grp_fu_404_p2 = (histogram_q0 + 8'd1);

assign grp_fu_430_p2 = ((smoothed_load_reg_1082 > smoothed_q0) ? 1'b1 : 1'b0);

assign grp_fu_438_p2 = (line_counter_3_fu_122 + 8'd1);

assign h_fu_472_p2 = (ap_phi_mux_h_0_i_i_phi_fu_278_p4 + 9'd1);

assign i_4_fu_603_p2 = (i1_0_i_reg_320 + 3'd1);

assign i_5_fu_635_p2 = (i2_0_i_reg_343 + 9'd1);

assign i_fu_455_p2 = (i_0_i_reg_263 + 9'd1);

assign icmp_ln18_fu_466_p2 = ((ap_phi_mux_h_0_i_i_phi_fu_278_p4 == 9'd320) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_449_p2 = ((i_0_i_reg_263 == 9'd320) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_483_p2 = ((y_0_i_reg_285 == 9'd320) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_499_p2 = ((x_0_i_reg_297 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_568_p2 = (($signed(tmp_reg_1004) < $signed(10'd320)) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_597_p2 = ((i1_0_i_reg_320 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_629_p2 = ((i2_0_i_reg_343 == 9'd320) ? 1'b1 : 1'b0);

assign icmp_ln54_1_fu_652_p2 = ((smoothed_q0 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_646_p2 = ((line_counter_3_fu_122 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_801_p2 = ((last_max_dist_0_i_reg_331 < 16'd52) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_698_p2 = ((smoothed_load_reg_1082 < smoothed_q0) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_769_p2 = (($signed(sub_ln75_fu_763_p2) > $signed(17'd51)) ? 1'b1 : 1'b0);

assign icmp_ln86_1_fu_831_p2 = ((last_max_dist_0_i_reg_331 > 16'd51) ? 1'b1 : 1'b0);

assign last_max_dist_fu_856_p2 = (last_max_dist_6_i_reg_355 + 16'd1);

assign line_bases_active_3_1_fu_812_p3 = {{1'd1}, {zext_ln53_reg_1058}};

assign line_bases_active_3_2_fu_792_p3 = {{1'd1}, {p_tmp_fu_751_p2}};

assign line_bases_active_3_3_fu_848_p3 = {{1'd1}, {zext_ln53_reg_1058}};

assign line_bases_y_3_addr1_1_fu_775_p5 = {{line_bases_load_1_reg_1097[16:16]}, {p_tmp_fu_751_p2}};

assign line_bases_y_3_addr1_fu_820_p5 = {{line_bases_load_1_reg_1097[16:16]}, {zext_ln53_reg_1058}};

assign lshr_ln_fu_737_p4 = {{meceta_counter_1_fu_126[15:1]}};

assign meceta_counter_fu_703_p2 = (meceta_counter_1_fu_126 + 16'd1);

assign p_tmp_fu_751_p2 = (trunc_ln61_reg_1103 + zext_ln74_fu_747_p1);

assign sext_ln39_1_fu_521_p1 = $signed(xor_ln39_fu_515_p2);

assign sext_ln39_fu_530_p1 = tmp_fu_525_p2;

assign sext_ln61_fu_671_p1 = $signed(add_ln61_fu_665_p2);

assign sext_ln86_fu_732_p1 = $signed(add_ln86_fu_726_p2);

assign smoothed_d0 = {{total_0_i_reg_308[11:4]}};

assign sub_ln75_fu_763_p2 = (zext_ln75_cast_i_fu_756_p1 - zext_ln75_fu_760_p1);

always @ (*) begin
    tmp_43_fu_614_p4 = line_bases_q0;
    tmp_43_fu_614_p4[32'd16] = |(1'd0);
end

assign tmp_44_fu_555_p3 = tmp_reg_1004[32'd9];

assign tmp_fu_525_p2 = ($signed(sext_ln39_1_fu_521_p1) + $signed(zext_ln38_reg_991));

assign total_1_fu_589_p3 = ((and_ln40_fu_573_p2[0:0] === 1'b1) ? total_fu_583_p2 : total_0_i_reg_308);

assign total_fu_583_p2 = (total_0_i_reg_308 + zext_ln41_1_fu_579_p1);

assign trunc_ln39_fu_511_p1 = x_0_i_reg_297[3:0];

assign trunc_ln61_fu_689_p1 = line_bases_q0[15:0];

assign x_fu_505_p2 = (x_0_i_reg_297 + 5'd1);

assign xor_ln39_fu_515_p2 = (trunc_ln39_fu_511_p1 ^ 4'd8);

assign xor_ln40_fu_562_p2 = (tmp_44_fu_555_p3 ^ 1'd1);

assign y_fu_489_p2 = (y_0_i_reg_285 + 9'd1);

assign zext_ln21_fu_478_p1 = ap_phi_mux_h_0_i_i_phi_fu_278_p4;

assign zext_ln31_fu_461_p1 = i_0_i_reg_263;

assign zext_ln38_fu_495_p1 = y_0_i_reg_285;

assign zext_ln41_1_fu_579_p1 = histogram_q1;

assign zext_ln41_fu_534_p1 = $unsigned(sext_ln39_fu_530_p1);

assign zext_ln43_fu_550_p1 = y_0_i_reg_285;

assign zext_ln48_fu_609_p1 = i1_0_i_reg_320;

assign zext_ln53_fu_625_p1 = i2_0_i_reg_343;

assign zext_ln54_fu_641_p1 = i2_0_i_reg_343;

assign zext_ln61_1_fu_693_p1 = trunc_ln61_fu_689_p1;

assign zext_ln61_fu_661_p1 = line_counter_3_fu_122;

assign zext_ln65_fu_807_p1 = line_counter_3_fu_122;

assign zext_ln74_fu_747_p1 = lshr_ln_fu_737_p4;

assign zext_ln75_cast_i_fu_756_p1 = p_tmp_fu_751_p2;

assign zext_ln75_fu_760_p1 = trunc_ln61_reg_1103;

assign zext_ln76_fu_787_p1 = line_counter_3_fu_122;

assign zext_ln86_fu_722_p1 = i2_0_i_reg_343;

assign zext_ln87_fu_843_p1 = line_counter_3_fu_122;

always @ (posedge ap_clk) begin
    zext_ln38_reg_991[9] <= 1'b0;
    zext_ln53_reg_1058[15:9] <= 7'b0000000;
end

endmodule //get_line_bases
