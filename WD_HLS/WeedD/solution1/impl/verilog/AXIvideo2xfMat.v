// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AXIvideo2xfMat (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        stream_in_TDATA,
        stream_in_TVALID,
        stream_in_TREADY,
        stream_in_TKEEP,
        stream_in_TSTRB,
        stream_in_TUSER,
        stream_in_TLAST,
        stream_in_TID,
        stream_in_TDEST,
        img_data_V_din,
        img_data_V_full_n,
        img_data_V_write
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_pp1_stage0 = 8'd16;
parameter    ap_ST_fsm_state7 = 8'd32;
parameter    ap_ST_fsm_state8 = 8'd64;
parameter    ap_ST_fsm_state9 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] stream_in_TDATA;
input   stream_in_TVALID;
output   stream_in_TREADY;
input  [3:0] stream_in_TKEEP;
input  [3:0] stream_in_TSTRB;
input  [0:0] stream_in_TUSER;
input  [0:0] stream_in_TLAST;
input  [0:0] stream_in_TID;
input  [0:0] stream_in_TDEST;
output  [23:0] img_data_V_din;
input   img_data_V_full_n;
output   img_data_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg stream_in_TREADY;
reg img_data_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    stream_in_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage0;
wire   [0:0] icmp_ln129_fu_271_p2;
wire   [0:0] or_ln132_fu_286_p2;
wire    ap_CS_fsm_state8;
wire   [0:0] ap_phi_mux_eol_2_phi_fu_233_p4;
reg    img_data_V_blk_n;
reg    ap_enable_reg_pp1_iter1;
reg   [0:0] icmp_ln129_reg_330;
reg   [0:0] eol_reg_136;
reg   [31:0] axi_data_V_1_reg_147;
reg   [0:0] eol_0_reg_158;
reg   [10:0] j_0_reg_170;
reg   [0:0] axi_last_V_2_reg_181;
reg   [31:0] p_Val2_s_reg_194;
reg   [31:0] tmp_data_V_reg_301;
reg   [0:0] tmp_last_V_reg_309;
wire   [0:0] icmp_ln127_fu_259_p2;
wire    ap_CS_fsm_state4;
wire   [9:0] i_fu_265_p2;
reg   [9:0] i_reg_325;
reg    ap_predicate_op48_read_state5;
reg    ap_block_state5_pp1_stage0_iter0;
reg    ap_block_state6_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
wire   [10:0] j_fu_277_p2;
wire   [23:0] trunc_ln647_fu_292_p1;
reg   [23:0] trunc_ln647_reg_343;
reg    ap_block_state8;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state5;
reg   [0:0] axi_last_V_3_reg_206;
reg   [0:0] axi_last_V_0_reg_105;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state3;
reg   [31:0] axi_data_V_3_reg_218;
reg   [31:0] axi_data_V_0_reg_115;
reg   [9:0] i_0_reg_125;
reg   [0:0] ap_phi_mux_eol_phi_fu_139_p4;
reg   [31:0] ap_phi_mux_axi_data_V_1_phi_fu_150_p4;
reg   [0:0] ap_phi_mux_eol_0_phi_fu_162_p4;
wire   [0:0] ap_phi_reg_pp1_iter0_axi_last_V_2_reg_181;
reg   [31:0] ap_phi_mux_p_Val2_s_phi_fu_198_p4;
wire   [31:0] ap_phi_reg_pp1_iter0_p_Val2_s_reg_194;
wire    ap_CS_fsm_state7;
reg   [0:0] eol_2_reg_230;
reg   [0:0] sof_1_fu_76;
reg    ap_block_pp1_stage0_01001;
wire   [0:0] tmp_user_V_fu_250_p1;
reg   [7:0] ap_NS_fsm;
reg    ap_block_state1;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    regslice_both_AXI_video_strm_V_data_V_U_apdone_blk;
wire   [31:0] stream_in_TDATA_int;
wire    stream_in_TVALID_int;
reg    stream_in_TREADY_int;
wire    regslice_both_AXI_video_strm_V_data_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_keep_V_U_apdone_blk;
wire   [3:0] stream_in_TKEEP_int;
wire    regslice_both_AXI_video_strm_V_keep_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_keep_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_strb_V_U_apdone_blk;
wire   [3:0] stream_in_TSTRB_int;
wire    regslice_both_AXI_video_strm_V_strb_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_strb_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_user_V_U_apdone_blk;
wire   [0:0] stream_in_TUSER_int;
wire    regslice_both_AXI_video_strm_V_user_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_user_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_last_V_U_apdone_blk;
wire   [0:0] stream_in_TLAST_int;
wire    regslice_both_AXI_video_strm_V_last_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_last_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_id_V_U_apdone_blk;
wire   [0:0] stream_in_TID_int;
wire    regslice_both_AXI_video_strm_V_id_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_id_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_dest_V_U_apdone_blk;
wire   [0:0] stream_in_TDEST_int;
wire    regslice_both_AXI_video_strm_V_dest_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_dest_V_U_ack_in;
reg    ap_condition_132;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

regslice_both #(
    .DataWidth( 32 ))
regslice_both_AXI_video_strm_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(stream_in_TDATA),
    .vld_in(stream_in_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_data_V_U_ack_in),
    .data_out(stream_in_TDATA_int),
    .vld_out(stream_in_TVALID_int),
    .ack_out(stream_in_TREADY_int),
    .apdone_blk(regslice_both_AXI_video_strm_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_AXI_video_strm_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(stream_in_TKEEP),
    .vld_in(stream_in_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_keep_V_U_ack_in),
    .data_out(stream_in_TKEEP_int),
    .vld_out(regslice_both_AXI_video_strm_V_keep_V_U_vld_out),
    .ack_out(stream_in_TREADY_int),
    .apdone_blk(regslice_both_AXI_video_strm_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_AXI_video_strm_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(stream_in_TSTRB),
    .vld_in(stream_in_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_strb_V_U_ack_in),
    .data_out(stream_in_TSTRB_int),
    .vld_out(regslice_both_AXI_video_strm_V_strb_V_U_vld_out),
    .ack_out(stream_in_TREADY_int),
    .apdone_blk(regslice_both_AXI_video_strm_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(stream_in_TUSER),
    .vld_in(stream_in_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_user_V_U_ack_in),
    .data_out(stream_in_TUSER_int),
    .vld_out(regslice_both_AXI_video_strm_V_user_V_U_vld_out),
    .ack_out(stream_in_TREADY_int),
    .apdone_blk(regslice_both_AXI_video_strm_V_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(stream_in_TLAST),
    .vld_in(stream_in_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_last_V_U_ack_in),
    .data_out(stream_in_TLAST_int),
    .vld_out(regslice_both_AXI_video_strm_V_last_V_U_vld_out),
    .ack_out(stream_in_TREADY_int),
    .apdone_blk(regslice_both_AXI_video_strm_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(stream_in_TID),
    .vld_in(stream_in_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_id_V_U_ack_in),
    .data_out(stream_in_TID_int),
    .vld_out(regslice_both_AXI_video_strm_V_id_V_U_vld_out),
    .ack_out(stream_in_TREADY_int),
    .apdone_blk(regslice_both_AXI_video_strm_V_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(stream_in_TDEST),
    .vld_in(stream_in_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_dest_V_U_ack_in),
    .data_out(stream_in_TDEST_int),
    .vld_out(regslice_both_AXI_video_strm_V_dest_V_U_vld_out),
    .ack_out(stream_in_TREADY_int),
    .apdone_blk(regslice_both_AXI_video_strm_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln127_fu_259_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state5) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((icmp_ln127_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state5) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state5);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((icmp_ln127_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        axi_data_V_0_reg_115 <= tmp_data_V_reg_301;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        axi_data_V_0_reg_115 <= axi_data_V_3_reg_218;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln129_reg_330 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        axi_data_V_1_reg_147 <= p_Val2_s_reg_194;
    end else if (((icmp_ln127_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        axi_data_V_1_reg_147 <= axi_data_V_0_reg_115;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        axi_data_V_3_reg_218 <= axi_data_V_1_reg_147;
    end else if ((~((eol_2_reg_230 == 1'd0) & (stream_in_TVALID_int == 1'b0)) & (eol_2_reg_230 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        axi_data_V_3_reg_218 <= stream_in_TDATA_int;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        axi_last_V_0_reg_105 <= tmp_last_V_reg_309;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        axi_last_V_0_reg_105 <= axi_last_V_3_reg_206;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_132)) begin
        if (((or_ln132_fu_286_p2 == 1'd1) & (icmp_ln129_fu_271_p2 == 1'd1))) begin
            axi_last_V_2_reg_181 <= ap_phi_mux_eol_phi_fu_139_p4;
        end else if (((or_ln132_fu_286_p2 == 1'd0) & (icmp_ln129_fu_271_p2 == 1'd1))) begin
            axi_last_V_2_reg_181 <= stream_in_TLAST_int;
        end else if ((1'b1 == 1'b1)) begin
            axi_last_V_2_reg_181 <= ap_phi_reg_pp1_iter0_axi_last_V_2_reg_181;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        axi_last_V_3_reg_206 <= eol_reg_136;
    end else if ((~((eol_2_reg_230 == 1'd0) & (stream_in_TVALID_int == 1'b0)) & (eol_2_reg_230 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        axi_last_V_3_reg_206 <= stream_in_TLAST_int;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln129_reg_330 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        eol_0_reg_158 <= axi_last_V_2_reg_181;
    end else if (((icmp_ln127_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        eol_0_reg_158 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        eol_2_reg_230 <= eol_0_reg_158;
    end else if ((~((eol_2_reg_230 == 1'd0) & (stream_in_TVALID_int == 1'b0)) & (eol_2_reg_230 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        eol_2_reg_230 <= stream_in_TLAST_int;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln129_reg_330 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        eol_reg_136 <= axi_last_V_2_reg_181;
    end else if (((icmp_ln127_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        eol_reg_136 <= axi_last_V_0_reg_105;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_125 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        i_0_reg_125 <= i_reg_325;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln129_fu_271_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        j_0_reg_170 <= j_fu_277_p2;
    end else if (((icmp_ln127_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_0_reg_170 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_132)) begin
        if (((or_ln132_fu_286_p2 == 1'd1) & (icmp_ln129_fu_271_p2 == 1'd1))) begin
            p_Val2_s_reg_194 <= ap_phi_mux_axi_data_V_1_phi_fu_150_p4;
        end else if (((or_ln132_fu_286_p2 == 1'd0) & (icmp_ln129_fu_271_p2 == 1'd1))) begin
            p_Val2_s_reg_194 <= stream_in_TDATA_int;
        end else if ((1'b1 == 1'b1)) begin
            p_Val2_s_reg_194 <= ap_phi_reg_pp1_iter0_p_Val2_s_reg_194;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln129_fu_271_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sof_1_fu_76 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sof_1_fu_76 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_325 <= i_fu_265_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln129_reg_330 <= icmp_ln129_fu_271_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((stream_in_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_data_V_reg_301 <= stream_in_TDATA_int;
        tmp_last_V_reg_309 <= stream_in_TLAST_int;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln129_fu_271_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        trunc_ln647_reg_343 <= trunc_ln647_fu_292_p1;
    end
end

always @ (*) begin
    if ((icmp_ln129_fu_271_p2 == 1'd0)) begin
        ap_condition_pp1_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln127_fu_259_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln129_reg_330 == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_axi_data_V_1_phi_fu_150_p4 = p_Val2_s_reg_194;
    end else begin
        ap_phi_mux_axi_data_V_1_phi_fu_150_p4 = axi_data_V_1_reg_147;
    end
end

always @ (*) begin
    if (((icmp_ln129_reg_330 == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_eol_0_phi_fu_162_p4 = axi_last_V_2_reg_181;
    end else begin
        ap_phi_mux_eol_0_phi_fu_162_p4 = eol_0_reg_158;
    end
end

always @ (*) begin
    if (((icmp_ln129_reg_330 == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_eol_phi_fu_139_p4 = axi_last_V_2_reg_181;
    end else begin
        ap_phi_mux_eol_phi_fu_139_p4 = eol_reg_136;
    end
end

always @ (*) begin
    if ((icmp_ln129_fu_271_p2 == 1'd1)) begin
        if ((or_ln132_fu_286_p2 == 1'd1)) begin
            ap_phi_mux_p_Val2_s_phi_fu_198_p4 = ap_phi_mux_axi_data_V_1_phi_fu_150_p4;
        end else if ((or_ln132_fu_286_p2 == 1'd0)) begin
            ap_phi_mux_p_Val2_s_phi_fu_198_p4 = stream_in_TDATA_int;
        end else begin
            ap_phi_mux_p_Val2_s_phi_fu_198_p4 = ap_phi_reg_pp1_iter0_p_Val2_s_reg_194;
        end
    end else begin
        ap_phi_mux_p_Val2_s_phi_fu_198_p4 = ap_phi_reg_pp1_iter0_p_Val2_s_reg_194;
    end
end

always @ (*) begin
    if (((icmp_ln127_fu_259_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln129_reg_330 == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        img_data_V_blk_n = img_data_V_full_n;
    end else begin
        img_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln129_reg_330 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        img_data_V_write = 1'b1;
    end else begin
        img_data_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((eol_2_reg_230 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((or_ln132_fu_286_p2 == 1'd0) & (icmp_ln129_fu_271_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        stream_in_TDATA_blk_n = stream_in_TVALID_int;
    end else begin
        stream_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_AXI_video_strm_V_data_V_U_ack_in == 1'b1) & (stream_in_TVALID == 1'b1))) begin
        stream_in_TREADY = 1'b1;
    end else begin
        stream_in_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((~((eol_2_reg_230 == 1'd0) & (stream_in_TVALID_int == 1'b0)) & (eol_2_reg_230 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((ap_predicate_op48_read_state5 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((stream_in_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        stream_in_TREADY_int = 1'b1;
    end else begin
        stream_in_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_user_V_fu_250_p1 == 1'd0) & (stream_in_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((tmp_user_V_fu_250_p1 == 1'd1) & (stream_in_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln127_fu_259_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((icmp_ln129_fu_271_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((icmp_ln129_fu_271_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if ((~((eol_2_reg_230 == 1'd0) & (stream_in_TVALID_int == 1'b0)) & (eol_2_reg_230 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else if ((~((eol_2_reg_230 == 1'd0) & (stream_in_TVALID_int == 1'b0)) & (ap_phi_mux_eol_2_phi_fu_233_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((icmp_ln129_reg_330 == 1'd1) & (img_data_V_full_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((stream_in_TVALID_int == 1'b0) & (ap_predicate_op48_read_state5 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((icmp_ln129_reg_330 == 1'd1) & (img_data_V_full_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((stream_in_TVALID_int == 1'b0) & (ap_predicate_op48_read_state5 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((icmp_ln129_reg_330 == 1'd1) & (img_data_V_full_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((stream_in_TVALID_int == 1'b0) & (ap_predicate_op48_read_state5 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state5_pp1_stage0_iter0 = ((stream_in_TVALID_int == 1'b0) & (ap_predicate_op48_read_state5 == 1'b1));
end

always @ (*) begin
    ap_block_state6_pp1_stage0_iter1 = ((icmp_ln129_reg_330 == 1'd1) & (img_data_V_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state8 = ((eol_2_reg_230 == 1'd0) & (stream_in_TVALID_int == 1'b0));
end

always @ (*) begin
    ap_condition_132 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_mux_eol_2_phi_fu_233_p4 = eol_2_reg_230;

assign ap_phi_reg_pp1_iter0_axi_last_V_2_reg_181 = 'bx;

assign ap_phi_reg_pp1_iter0_p_Val2_s_reg_194 = 'bx;

always @ (*) begin
    ap_predicate_op48_read_state5 = ((or_ln132_fu_286_p2 == 1'd0) & (icmp_ln129_fu_271_p2 == 1'd1));
end

assign i_fu_265_p2 = (i_0_reg_125 + 10'd1);

assign icmp_ln127_fu_259_p2 = ((i_0_reg_125 < 10'd720) ? 1'b1 : 1'b0);

assign icmp_ln129_fu_271_p2 = ((j_0_reg_170 < 11'd1280) ? 1'b1 : 1'b0);

assign img_data_V_din = trunc_ln647_reg_343;

assign j_fu_277_p2 = (j_0_reg_170 + 11'd1);

assign or_ln132_fu_286_p2 = (sof_1_fu_76 | ap_phi_mux_eol_0_phi_fu_162_p4);

assign tmp_user_V_fu_250_p1 = stream_in_TUSER_int;

assign trunc_ln647_fu_292_p1 = ap_phi_mux_p_Val2_s_phi_fu_198_p4[23:0];

endmodule //AXIvideo2xfMat
