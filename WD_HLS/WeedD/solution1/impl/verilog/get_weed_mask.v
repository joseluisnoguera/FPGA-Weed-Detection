// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module get_weed_mask (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weed_mask_tmp_data_V_din,
        weed_mask_tmp_data_V_full_n,
        weed_mask_tmp_data_V_write,
        lines_founded_read,
        lines_address0,
        lines_ce0,
        lines_q0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] weed_mask_tmp_data_V_din;
input   weed_mask_tmp_data_V_full_n;
output   weed_mask_tmp_data_V_write;
input   lines_founded_read;
output  [2:0] lines_address0;
output   lines_ce0;
input  [56:0] lines_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[1:0] weed_mask_tmp_data_V_din;
reg weed_mask_tmp_data_V_write;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    weed_mask_tmp_data_V_blk_n;
wire    ap_CS_fsm_state4;
wire   [0:0] lines_founded_read_1_read_fu_66_p2;
wire   [0:0] icmp_ln415_fu_170_p2;
reg   [4:0] tmp_6_reg_183;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_34_fu_128_p3;
wire   [8:0] h_2_fu_152_p2;
reg   [8:0] h_2_reg_191;
wire    ap_CS_fsm_state3;
wire   [13:0] add_ln703_fu_158_p2;
wire   [0:0] icmp_ln413_fu_146_p2;
wire   [8:0] v_2_fu_164_p2;
wire    grp_is_crop_or_furrow_fu_117_ap_start;
wire    grp_is_crop_or_furrow_fu_117_ap_done;
wire    grp_is_crop_or_furrow_fu_117_ap_idle;
wire    grp_is_crop_or_furrow_fu_117_ap_ready;
wire   [2:0] grp_is_crop_or_furrow_fu_117_lines_address0;
wire    grp_is_crop_or_furrow_fu_117_lines_ce0;
wire   [1:0] grp_is_crop_or_furrow_fu_117_ap_return;
reg   [13:0] p_Val2_s_reg_81;
reg   [8:0] v_reg_93;
reg   [8:0] h_reg_105;
reg    ap_predicate_op32_write_state4;
reg    ap_predicate_op34_write_state4;
reg    ap_block_state4;
reg    ap_block_state4_on_subcall_done;
reg    grp_is_crop_or_furrow_fu_117_ap_start_reg;
reg   [3:0] ap_NS_fsm;
reg    ap_condition_118;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 grp_is_crop_or_furrow_fu_117_ap_start_reg = 1'b0;
end

is_crop_or_furrow grp_is_crop_or_furrow_fu_117(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_is_crop_or_furrow_fu_117_ap_start),
    .ap_done(grp_is_crop_or_furrow_fu_117_ap_done),
    .ap_idle(grp_is_crop_or_furrow_fu_117_ap_idle),
    .ap_ready(grp_is_crop_or_furrow_fu_117_ap_ready),
    .lines_address0(grp_is_crop_or_furrow_fu_117_lines_address0),
    .lines_ce0(grp_is_crop_or_furrow_fu_117_lines_ce0),
    .lines_q0(lines_q0),
    .px_read(v_reg_93),
    .py_read(h_reg_105),
    .crop_width_read(tmp_6_reg_183),
    .ap_return(grp_is_crop_or_furrow_fu_117_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_is_crop_or_furrow_fu_117_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln413_fu_146_p2 == 1'd0) & (lines_founded_read_1_read_fu_66_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_is_crop_or_furrow_fu_117_ap_start_reg <= 1'b1;
        end else if ((grp_is_crop_or_furrow_fu_117_ap_ready == 1'b1)) begin
            grp_is_crop_or_furrow_fu_117_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state4_on_subcall_done) | ((weed_mask_tmp_data_V_full_n == 1'b0) & (ap_predicate_op34_write_state4 == 1'b1)) | ((weed_mask_tmp_data_V_full_n == 1'b0) & (ap_predicate_op32_write_state4 == 1'b1))) & (1'b1 == ap_CS_fsm_state4))) begin
        h_reg_105 <= h_2_reg_191;
    end else if (((tmp_34_fu_128_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        h_reg_105 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln413_fu_146_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        p_Val2_s_reg_81 <= add_ln703_fu_158_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Val2_s_reg_81 <= 14'd13056;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln413_fu_146_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        v_reg_93 <= v_2_fu_164_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        v_reg_93 <= 9'd179;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h_2_reg_191 <= h_2_fu_152_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_34_fu_128_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_6_reg_183 <= {{p_Val2_s_reg_81[13:9]}};
    end
end

always @ (*) begin
    if ((((tmp_34_fu_128_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_34_fu_128_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & ((icmp_ln415_fu_170_p2 == 1'd0) | (lines_founded_read_1_read_fu_66_p2 == 1'd0))) | ((icmp_ln415_fu_170_p2 == 1'd1) & (lines_founded_read_1_read_fu_66_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)))) begin
        weed_mask_tmp_data_V_blk_n = weed_mask_tmp_data_V_full_n;
    end else begin
        weed_mask_tmp_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_118)) begin
        if ((ap_predicate_op34_write_state4 == 1'b1)) begin
            weed_mask_tmp_data_V_din = 2'd3;
        end else if ((ap_predicate_op32_write_state4 == 1'b1)) begin
            weed_mask_tmp_data_V_din = 2'd0;
        end else begin
            weed_mask_tmp_data_V_din = 'bx;
        end
    end else begin
        weed_mask_tmp_data_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state4_on_subcall_done) | ((weed_mask_tmp_data_V_full_n == 1'b0) & (ap_predicate_op34_write_state4 == 1'b1)) | ((weed_mask_tmp_data_V_full_n == 1'b0) & (ap_predicate_op32_write_state4 == 1'b1))) & (1'b1 == ap_CS_fsm_state4) & (ap_predicate_op34_write_state4 == 1'b1)) | (~((1'b1 == ap_block_state4_on_subcall_done) | ((weed_mask_tmp_data_V_full_n == 1'b0) & (ap_predicate_op34_write_state4 == 1'b1)) | ((weed_mask_tmp_data_V_full_n == 1'b0) & (ap_predicate_op32_write_state4 == 1'b1))) & (1'b1 == ap_CS_fsm_state4) & (ap_predicate_op32_write_state4 == 1'b1)))) begin
        weed_mask_tmp_data_V_write = 1'b1;
    end else begin
        weed_mask_tmp_data_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_34_fu_128_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln413_fu_146_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((1'b1 == ap_block_state4_on_subcall_done) | ((weed_mask_tmp_data_V_full_n == 1'b0) & (ap_predicate_op34_write_state4 == 1'b1)) | ((weed_mask_tmp_data_V_full_n == 1'b0) & (ap_predicate_op32_write_state4 == 1'b1))) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln703_fu_158_p2 = ($signed(p_Val2_s_reg_81) + $signed(14'd16335));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state4 = (((weed_mask_tmp_data_V_full_n == 1'b0) & (ap_predicate_op34_write_state4 == 1'b1)) | ((weed_mask_tmp_data_V_full_n == 1'b0) & (ap_predicate_op32_write_state4 == 1'b1)));
end

always @ (*) begin
    ap_block_state4_on_subcall_done = ((lines_founded_read_1_read_fu_66_p2 == 1'd1) & (grp_is_crop_or_furrow_fu_117_ap_done == 1'b0));
end

always @ (*) begin
    ap_condition_118 = (~((1'b1 == ap_block_state4_on_subcall_done) | ((weed_mask_tmp_data_V_full_n == 1'b0) & (ap_predicate_op34_write_state4 == 1'b1)) | ((weed_mask_tmp_data_V_full_n == 1'b0) & (ap_predicate_op32_write_state4 == 1'b1))) & (1'b1 == ap_CS_fsm_state4));
end

always @ (*) begin
    ap_predicate_op32_write_state4 = ((icmp_ln415_fu_170_p2 == 1'd0) | (lines_founded_read_1_read_fu_66_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op34_write_state4 = ((icmp_ln415_fu_170_p2 == 1'd1) & (lines_founded_read_1_read_fu_66_p2 == 1'd1));
end

assign grp_is_crop_or_furrow_fu_117_ap_start = grp_is_crop_or_furrow_fu_117_ap_start_reg;

assign h_2_fu_152_p2 = (h_reg_105 + 9'd1);

assign icmp_ln413_fu_146_p2 = ((h_reg_105 == 9'd320) ? 1'b1 : 1'b0);

assign icmp_ln415_fu_170_p2 = ((grp_is_crop_or_furrow_fu_117_ap_return == 2'd3) ? 1'b1 : 1'b0);

assign lines_address0 = grp_is_crop_or_furrow_fu_117_lines_address0;

assign lines_ce0 = grp_is_crop_or_furrow_fu_117_lines_ce0;

assign lines_founded_read_1_read_fu_66_p2 = lines_founded_read;

assign tmp_34_fu_128_p3 = v_reg_93[32'd8];

assign v_2_fu_164_p2 = ($signed(v_reg_93) + $signed(9'd511));

endmodule //get_weed_mask
