// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module get_total_vegetation_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        agg_result_V,
        agg_result_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [23:0] p_read;
input  [23:0] p_read1;
output  [23:0] agg_result_V;
output   agg_result_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[23:0] agg_result_V;
reg agg_result_V_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1;
wire   [23:0] zext_ln703_2_fu_83_p1;
reg   [23:0] agg_result_V_preg;
wire   [24:0] zext_ln703_1_fu_45_p1;
wire   [24:0] zext_ln703_fu_41_p1;
wire   [24:0] ret_V_fu_49_p2;
wire   [32:0] t_V_fu_55_p3;
wire   [32:0] mul_ln1148_fu_67_p0;
wire   [66:0] mul_ln1148_fu_67_p2;
wire   [9:0] tmp_fu_73_p4;
reg   [0:0] ap_NS_fsm;
wire   [66:0] mul_ln1148_fu_67_p00;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 agg_result_V_preg = 24'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                agg_result_V_preg[0] <= 1'b0;
        agg_result_V_preg[1] <= 1'b0;
        agg_result_V_preg[2] <= 1'b0;
        agg_result_V_preg[3] <= 1'b0;
        agg_result_V_preg[4] <= 1'b0;
        agg_result_V_preg[5] <= 1'b0;
        agg_result_V_preg[6] <= 1'b0;
        agg_result_V_preg[7] <= 1'b0;
        agg_result_V_preg[8] <= 1'b0;
        agg_result_V_preg[9] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        agg_result_V_preg[9 : 0] <= zext_ln703_2_fu_83_p1[9 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        agg_result_V = zext_ln703_2_fu_83_p1;
    end else begin
        agg_result_V = agg_result_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        agg_result_V_ap_vld = 1'b1;
    end else begin
        agg_result_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign mul_ln1148_fu_67_p0 = mul_ln1148_fu_67_p00;

assign mul_ln1148_fu_67_p00 = t_V_fu_55_p3;

assign mul_ln1148_fu_67_p2 = (mul_ln1148_fu_67_p0 * $signed(67'h2468ACF14));

assign ret_V_fu_49_p2 = (zext_ln703_1_fu_45_p1 + zext_ln703_fu_41_p1);

assign t_V_fu_55_p3 = {{ret_V_fu_49_p2}, {8'd0}};

assign tmp_fu_73_p4 = {{mul_ln1148_fu_67_p2[66:57]}};

assign zext_ln703_1_fu_45_p1 = p_read1;

assign zext_ln703_2_fu_83_p1 = tmp_fu_73_p4;

assign zext_ln703_fu_41_p1 = p_read;

always @ (posedge ap_clk) begin
    agg_result_V_preg[23:10] <= 14'b00000000000000;
end

endmodule //get_total_vegetation_2
