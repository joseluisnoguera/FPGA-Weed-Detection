// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module get_lines_lsl (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        line_bases_address0,
        line_bases_ce0,
        line_bases_q0,
        centroids_address0,
        centroids_ce0,
        centroids_q0,
        lines_address0,
        lines_ce0,
        lines_we0,
        lines_d0,
        lines_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_pp0_stage0 = 9'd8;
parameter    ap_ST_fsm_state6 = 9'd16;
parameter    ap_ST_fsm_state7 = 9'd32;
parameter    ap_ST_fsm_state8 = 9'd64;
parameter    ap_ST_fsm_state9 = 9'd128;
parameter    ap_ST_fsm_state10 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] line_bases_address0;
output   line_bases_ce0;
input  [16:0] line_bases_q0;
output  [6:0] centroids_address0;
output   centroids_ce0;
input  [47:0] centroids_q0;
output  [2:0] lines_address0;
output   lines_ce0;
output   lines_we0;
output  [64:0] lines_d0;
input  [64:0] lines_q0;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg line_bases_ce0;
reg centroids_ce0;
reg[2:0] lines_address0;
reg lines_ce0;
reg lines_we0;
reg[64:0] lines_d0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] line_centroids_address0;
reg    line_centroids_ce0;
reg    line_centroids_we0;
wire   [47:0] line_centroids_q0;
reg   [3:0] s_index_0_i_reg_201;
wire   [2:0] line_index_fu_274_p2;
reg   [2:0] line_index_reg_702;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln352_fu_280_p1;
reg   [63:0] zext_ln352_reg_707;
wire   [0:0] icmp_ln351_fu_268_p2;
wire   [7:0] zext_ln351_fu_288_p1;
reg   [7:0] zext_ln351_reg_718;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_fu_292_p3;
reg   [0:0] tmp_reg_723;
wire   [0:0] icmp_ln355_fu_300_p2;
reg   [0:0] icmp_ln355_reg_727;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] s_index_fu_306_p2;
reg   [3:0] s_index_reg_731;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] m_reg_741;
wire    ap_CS_fsm_state7;
wire    grp_least_squares_line_1_fu_213_ap_ready;
wire    grp_least_squares_line_1_fu_213_ap_done;
reg   [31:0] b_reg_753;
wire   [31:0] grp_fu_223_p2;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_229_p1;
wire   [0:0] and_ln362_2_fu_588_p2;
reg   [0:0] and_ln362_2_reg_769;
wire    ap_CS_fsm_state9;
wire   [0:0] and_ln362_5_fu_624_p2;
reg   [0:0] and_ln362_5_reg_773;
wire   [0:0] and_ln362_8_fu_660_p2;
reg   [0:0] and_ln362_8_reg_777;
reg   [2:0] lines_addr_1_reg_781;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter1;
wire    grp_least_squares_line_1_fu_213_ap_start;
wire    grp_least_squares_line_1_fu_213_ap_idle;
wire   [3:0] grp_least_squares_line_1_fu_213_centroids_2_address0;
wire    grp_least_squares_line_1_fu_213_centroids_2_ce0;
wire   [31:0] grp_least_squares_line_1_fu_213_ap_return_0;
wire   [31:0] grp_least_squares_line_1_fu_213_ap_return_1;
reg   [2:0] line_index_0_i_reg_189;
wire    ap_CS_fsm_state10;
reg   [3:0] ap_phi_mux_s_index_0_i_phi_fu_205_p4;
wire    ap_block_pp0_stage0;
reg    grp_least_squares_line_1_fu_213_ap_start_reg;
wire    ap_CS_fsm_state6;
wire   [63:0] zext_ln356_3_fu_351_p1;
wire   [63:0] zext_ln356_fu_356_p1;
wire   [2:0] lines_addr_gep_fu_181_p3;
reg   [0:0] lines_founded_write_s_fu_124;
wire   [64:0] final_lines_b_addr_fu_666_p4;
reg   [64:0] tmp_57_fu_681_p4;
wire   [6:0] shl_ln_fu_312_p3;
wire   [4:0] shl_ln356_1_fu_324_p3;
wire   [7:0] zext_ln356_1_fu_320_p1;
wire   [7:0] zext_ln356_2_fu_332_p1;
wire   [7:0] sub_ln356_fu_336_p2;
wire   [7:0] add_ln356_fu_342_p2;
wire  signed [31:0] sext_ln356_fu_347_p1;
wire   [31:0] grp_fu_219_p2;
wire   [31:0] p_Val2_s_fu_371_p1;
wire   [22:0] tmp_V_25_fu_393_p1;
wire   [24:0] mantissa_V_fu_397_p4;
wire   [7:0] tmp_V_fu_383_p4;
wire   [8:0] zext_ln339_fu_411_p1;
wire   [8:0] add_ln339_fu_415_p2;
wire   [7:0] sub_ln1311_fu_429_p2;
wire   [0:0] isNeg_fu_421_p3;
wire  signed [8:0] sext_ln1311_fu_435_p1;
wire  signed [8:0] ush_fu_439_p3;
wire  signed [31:0] sext_ln1311_4_fu_447_p1;
wire  signed [24:0] sext_ln1311_5_fu_451_p1;
wire   [78:0] zext_ln682_fu_407_p1;
wire   [78:0] zext_ln1287_fu_455_p1;
wire   [24:0] r_V_fu_459_p2;
wire   [0:0] tmp_55_fu_471_p3;
wire   [78:0] r_V_6_fu_465_p2;
wire   [31:0] zext_ln662_fu_479_p1;
wire   [31:0] tmp_7_fu_483_p4;
wire   [31:0] p_Val2_38_fu_493_p3;
wire   [0:0] p_Result_s_fu_375_p3;
wire   [31:0] result_V_4_fu_501_p2;
wire   [31:0] p_Val2_39_fu_507_p3;
wire   [0:0] tmp_56_fu_515_p3;
wire   [31:0] bitcast_ln362_fu_535_p1;
wire   [7:0] tmp_s_fu_538_p4;
wire   [22:0] trunc_ln362_fu_548_p1;
wire   [0:0] icmp_ln362_6_fu_558_p2;
wire   [0:0] icmp_ln362_1_fu_552_p2;
wire   [0:0] or_ln362_fu_564_p2;
wire   [0:0] tmp_8_fu_233_p2;
wire   [0:0] icmp_ln362_fu_529_p2;
wire   [0:0] xor_ln362_fu_523_p2;
wire   [0:0] and_ln362_fu_570_p2;
wire   [0:0] tmp_9_fu_238_p2;
wire   [0:0] and_ln362_3_fu_582_p2;
wire   [0:0] and_ln362_1_fu_576_p2;
wire   [0:0] tmp_10_fu_243_p2;
wire   [0:0] icmp_ln362_2_fu_594_p2;
wire   [0:0] icmp_ln362_3_fu_600_p2;
wire   [0:0] and_ln362_4_fu_606_p2;
wire   [0:0] tmp_11_fu_248_p2;
wire   [0:0] and_ln362_7_fu_618_p2;
wire   [0:0] and_ln362_6_fu_612_p2;
wire   [0:0] tmp_12_fu_253_p2;
wire   [0:0] icmp_ln362_4_fu_630_p2;
wire   [0:0] icmp_ln362_5_fu_636_p2;
wire   [0:0] and_ln362_9_fu_642_p2;
wire   [0:0] tmp_13_fu_258_p2;
wire   [0:0] and_ln362_11_fu_654_p2;
wire   [0:0] and_ln362_10_fu_648_p2;
reg    grp_fu_223_ce;
reg    grp_fu_229_ce;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 grp_least_squares_line_1_fu_213_ap_start_reg = 1'b0;
end

get_lines_lsl_lin0iy #(
    .DataWidth( 48 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
line_centroids_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_centroids_address0),
    .ce0(line_centroids_ce0),
    .we0(line_centroids_we0),
    .d0(centroids_q0),
    .q0(line_centroids_q0)
);

least_squares_line_1 grp_least_squares_line_1_fu_213(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_least_squares_line_1_fu_213_ap_start),
    .ap_done(grp_least_squares_line_1_fu_213_ap_done),
    .ap_idle(grp_least_squares_line_1_fu_213_ap_idle),
    .ap_ready(grp_least_squares_line_1_fu_213_ap_ready),
    .centroids_2_address0(grp_least_squares_line_1_fu_213_centroids_2_address0),
    .centroids_2_ce0(grp_least_squares_line_1_fu_213_centroids_2_ce0),
    .centroids_2_q0(line_centroids_q0),
    .ap_return_0(grp_least_squares_line_1_fu_213_ap_return_0),
    .ap_return_1(grp_least_squares_line_1_fu_213_ap_return_1)
);

ip_accel_app_faddShg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ip_accel_app_faddShg_U485(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_223_p2),
    .din1(grp_fu_229_p1),
    .ce(1'b1),
    .dout(grp_fu_219_p2)
);

ip_accel_app_fmulKfY #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ip_accel_app_fmulKfY_U486(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_least_squares_line_1_fu_213_ap_return_0),
    .din1(32'd1127481344),
    .ce(grp_fu_223_ce),
    .dout(grp_fu_223_p2)
);

ip_accel_app_sitoThq #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ip_accel_app_sitoThq_U487(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_least_squares_line_1_fu_213_ap_return_1),
    .ce(grp_fu_229_ce),
    .dout(grp_fu_229_p1)
);

ip_accel_app_fcmp1iI #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
ip_accel_app_fcmp1iI_U488(
    .din0(m_reg_741),
    .din1(32'd3188677673),
    .opcode(5'd4),
    .dout(tmp_8_fu_233_p2)
);

ip_accel_app_fcmp1iI #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
ip_accel_app_fcmp1iI_U489(
    .din0(m_reg_741),
    .din1(32'd3212836864),
    .opcode(5'd2),
    .dout(tmp_9_fu_238_p2)
);

ip_accel_app_fcmp1iI #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
ip_accel_app_fcmp1iI_U490(
    .din0(m_reg_741),
    .din1(32'd1041194025),
    .opcode(5'd2),
    .dout(tmp_10_fu_243_p2)
);

ip_accel_app_fcmp1iI #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
ip_accel_app_fcmp1iI_U491(
    .din0(m_reg_741),
    .din1(32'd1065353216),
    .opcode(5'd4),
    .dout(tmp_11_fu_248_p2)
);

ip_accel_app_fcmp1iI #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
ip_accel_app_fcmp1iI_U492(
    .din0(m_reg_741),
    .din1(32'd1053609165),
    .opcode(5'd4),
    .dout(tmp_12_fu_253_p2)
);

ip_accel_app_fcmp1iI #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
ip_accel_app_fcmp1iI_U493(
    .din0(m_reg_741),
    .din1(32'd3201092813),
    .opcode(5'd2),
    .dout(tmp_13_fu_258_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((tmp_fu_292_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((tmp_fu_292_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_least_squares_line_1_fu_213_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            grp_least_squares_line_1_fu_213_ap_start_reg <= 1'b1;
        end else if ((grp_least_squares_line_1_fu_213_ap_ready == 1'b1)) begin
            grp_least_squares_line_1_fu_213_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        line_index_0_i_reg_189 <= line_index_reg_702;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        line_index_0_i_reg_189 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & ((1'd1 == and_ln362_2_fu_588_p2) | ((1'd1 == and_ln362_8_fu_660_p2) | (1'd1 == and_ln362_5_fu_624_p2))))) begin
        lines_founded_write_s_fu_124 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        lines_founded_write_s_fu_124 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_727 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        s_index_0_i_reg_201 <= s_index_reg_731;
    end else if (((tmp_fu_292_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        s_index_0_i_reg_201 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        and_ln362_2_reg_769 <= and_ln362_2_fu_588_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln362_2_fu_588_p2) & (1'b1 == ap_CS_fsm_state9))) begin
        and_ln362_5_reg_773 <= and_ln362_5_fu_624_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln362_5_fu_624_p2) & (1'd0 == and_ln362_2_fu_588_p2) & (1'b1 == ap_CS_fsm_state9))) begin
        and_ln362_8_reg_777 <= and_ln362_8_fu_660_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (grp_least_squares_line_1_fu_213_ap_done == 1'b1))) begin
        b_reg_753 <= grp_least_squares_line_1_fu_213_ap_return_1;
        m_reg_741 <= grp_least_squares_line_1_fu_213_ap_return_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln355_reg_727 <= icmp_ln355_fu_300_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        line_index_reg_702 <= line_index_fu_274_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln362_8_fu_660_p2) & (1'd0 == and_ln362_5_fu_624_p2) & (1'd0 == and_ln362_2_fu_588_p2) & (1'b1 == ap_CS_fsm_state9))) begin
        lines_addr_1_reg_781 <= zext_ln352_reg_707;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        s_index_reg_731 <= s_index_fu_306_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_reg_723 <= line_bases_q0[32'd16];
        zext_ln351_reg_718[2 : 0] <= zext_ln351_fu_288_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln351_fu_268_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln352_reg_707[2 : 0] <= zext_ln352_fu_280_p1[2 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln355_fu_300_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln351_fu_268_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln355_reg_727 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_s_index_0_i_phi_fu_205_p4 = s_index_reg_731;
    end else begin
        ap_phi_mux_s_index_0_i_phi_fu_205_p4 = s_index_0_i_reg_201;
    end
end

always @ (*) begin
    if (((icmp_ln351_fu_268_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        centroids_ce0 = 1'b1;
    end else begin
        centroids_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state7) & (grp_least_squares_line_1_fu_213_ap_done == 1'b1)))) begin
        grp_fu_223_ce = 1'b1;
    end else begin
        grp_fu_223_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state7) & (grp_least_squares_line_1_fu_213_ap_done == 1'b1)))) begin
        grp_fu_229_ce = 1'b1;
    end else begin
        grp_fu_229_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        line_bases_ce0 = 1'b1;
    end else begin
        line_bases_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        line_centroids_address0 = zext_ln356_fu_356_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        line_centroids_address0 = grp_least_squares_line_1_fu_213_centroids_2_address0;
    end else begin
        line_centroids_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        line_centroids_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        line_centroids_ce0 = grp_least_squares_line_1_fu_213_centroids_2_ce0;
    end else begin
        line_centroids_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln355_reg_727 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        line_centroids_we0 = 1'b1;
    end else begin
        line_centroids_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        lines_address0 = lines_addr_1_reg_781;
    end else if (((1'b1 == ap_CS_fsm_state9) & ((1'd1 == and_ln362_2_fu_588_p2) | ((1'd1 == and_ln362_8_fu_660_p2) | (1'd1 == and_ln362_5_fu_624_p2))))) begin
        lines_address0 = lines_addr_gep_fu_181_p3;
    end else if (((1'd0 == and_ln362_8_fu_660_p2) & (1'd0 == and_ln362_5_fu_624_p2) & (1'd0 == and_ln362_2_fu_588_p2) & (1'b1 == ap_CS_fsm_state9))) begin
        lines_address0 = zext_ln352_reg_707;
    end else begin
        lines_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state9) & ((1'd1 == and_ln362_2_fu_588_p2) | ((1'd1 == and_ln362_8_fu_660_p2) | (1'd1 == and_ln362_5_fu_624_p2)))) | ((1'd0 == and_ln362_8_fu_660_p2) & (1'd0 == and_ln362_5_fu_624_p2) & (1'd0 == and_ln362_2_fu_588_p2) & (1'b1 == ap_CS_fsm_state9)))) begin
        lines_ce0 = 1'b1;
    end else begin
        lines_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        lines_d0 = tmp_57_fu_681_p4;
    end else if (((1'b1 == ap_CS_fsm_state9) & ((1'd1 == and_ln362_2_fu_588_p2) | ((1'd1 == and_ln362_8_fu_660_p2) | (1'd1 == and_ln362_5_fu_624_p2))))) begin
        lines_d0 = final_lines_b_addr_fu_666_p4;
    end else begin
        lines_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_reg_723 == 1'd1) & (1'd0 == and_ln362_8_reg_777) & (1'd0 == and_ln362_5_reg_773) & (1'd0 == and_ln362_2_reg_769) & (1'b1 == ap_CS_fsm_state10)) | ((1'b1 == ap_CS_fsm_state9) & ((1'd1 == and_ln362_2_fu_588_p2) | ((1'd1 == and_ln362_8_fu_660_p2) | (1'd1 == and_ln362_5_fu_624_p2)))))) begin
        lines_we0 = 1'b1;
    end else begin
        lines_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln351_fu_268_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_fu_292_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln355_fu_300_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln355_fu_300_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (grp_least_squares_line_1_fu_213_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln339_fu_415_p2 = ($signed(9'd385) + $signed(zext_ln339_fu_411_p1));

assign add_ln356_fu_342_p2 = (zext_ln351_reg_718 + sub_ln356_fu_336_p2);

assign and_ln362_10_fu_648_p2 = (icmp_ln362_5_fu_636_p2 & icmp_ln362_4_fu_630_p2);

assign and_ln362_11_fu_654_p2 = (tmp_13_fu_258_p2 & and_ln362_9_fu_642_p2);

assign and_ln362_1_fu_576_p2 = (xor_ln362_fu_523_p2 & icmp_ln362_fu_529_p2);

assign and_ln362_2_fu_588_p2 = (and_ln362_3_fu_582_p2 & and_ln362_1_fu_576_p2);

assign and_ln362_3_fu_582_p2 = (tmp_9_fu_238_p2 & and_ln362_fu_570_p2);

assign and_ln362_4_fu_606_p2 = (tmp_10_fu_243_p2 & or_ln362_fu_564_p2);

assign and_ln362_5_fu_624_p2 = (and_ln362_7_fu_618_p2 & and_ln362_6_fu_612_p2);

assign and_ln362_6_fu_612_p2 = (icmp_ln362_3_fu_600_p2 & icmp_ln362_2_fu_594_p2);

assign and_ln362_7_fu_618_p2 = (tmp_11_fu_248_p2 & and_ln362_4_fu_606_p2);

assign and_ln362_8_fu_660_p2 = (and_ln362_11_fu_654_p2 & and_ln362_10_fu_648_p2);

assign and_ln362_9_fu_642_p2 = (tmp_12_fu_253_p2 & or_ln362_fu_564_p2);

assign and_ln362_fu_570_p2 = (tmp_8_fu_233_p2 & or_ln362_fu_564_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return = lines_founded_write_s_fu_124;

assign bitcast_ln362_fu_535_p1 = m_reg_741;

assign centroids_address0 = zext_ln356_3_fu_351_p1;

assign final_lines_b_addr_fu_666_p4 = {{{b_reg_753}, {bitcast_ln362_fu_535_p1}}, {1'd1}};

assign grp_least_squares_line_1_fu_213_ap_start = grp_least_squares_line_1_fu_213_ap_start_reg;

assign icmp_ln351_fu_268_p2 = ((line_index_0_i_reg_189 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln355_fu_300_p2 = ((ap_phi_mux_s_index_0_i_phi_fu_205_p4 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln362_1_fu_552_p2 = ((tmp_s_fu_538_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln362_2_fu_594_p2 = (($signed(p_Val2_39_fu_507_p3) > $signed(32'd212)) ? 1'b1 : 1'b0);

assign icmp_ln362_3_fu_600_p2 = (($signed(p_Val2_39_fu_507_p3) < $signed(32'd320)) ? 1'b1 : 1'b0);

assign icmp_ln362_4_fu_630_p2 = (($signed(p_Val2_39_fu_507_p3) < $signed(32'd213)) ? 1'b1 : 1'b0);

assign icmp_ln362_5_fu_636_p2 = (($signed(p_Val2_39_fu_507_p3) > $signed(32'd106)) ? 1'b1 : 1'b0);

assign icmp_ln362_6_fu_558_p2 = ((trunc_ln362_fu_548_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln362_fu_529_p2 = (($signed(p_Val2_39_fu_507_p3) < $signed(32'd107)) ? 1'b1 : 1'b0);

assign isNeg_fu_421_p3 = add_ln339_fu_415_p2[32'd8];

assign line_bases_address0 = zext_ln352_fu_280_p1;

assign line_index_fu_274_p2 = (line_index_0_i_reg_189 + 3'd1);

assign lines_addr_gep_fu_181_p3 = zext_ln352_reg_707;

assign mantissa_V_fu_397_p4 = {{{{1'd1}, {tmp_V_25_fu_393_p1}}}, {1'd0}};

assign or_ln362_fu_564_p2 = (icmp_ln362_6_fu_558_p2 | icmp_ln362_1_fu_552_p2);

assign p_Result_s_fu_375_p3 = p_Val2_s_fu_371_p1[32'd31];

assign p_Val2_38_fu_493_p3 = ((isNeg_fu_421_p3[0:0] === 1'b1) ? zext_ln662_fu_479_p1 : tmp_7_fu_483_p4);

assign p_Val2_39_fu_507_p3 = ((p_Result_s_fu_375_p3[0:0] === 1'b1) ? result_V_4_fu_501_p2 : p_Val2_38_fu_493_p3);

assign p_Val2_s_fu_371_p1 = grp_fu_219_p2;

assign r_V_6_fu_465_p2 = zext_ln682_fu_407_p1 << zext_ln1287_fu_455_p1;

assign r_V_fu_459_p2 = mantissa_V_fu_397_p4 >> sext_ln1311_5_fu_451_p1;

assign result_V_4_fu_501_p2 = (32'd0 - p_Val2_38_fu_493_p3);

assign s_index_fu_306_p2 = (ap_phi_mux_s_index_0_i_phi_fu_205_p4 + 4'd1);

assign sext_ln1311_4_fu_447_p1 = ush_fu_439_p3;

assign sext_ln1311_5_fu_451_p1 = ush_fu_439_p3;

assign sext_ln1311_fu_435_p1 = $signed(sub_ln1311_fu_429_p2);

assign sext_ln356_fu_347_p1 = $signed(add_ln356_fu_342_p2);

assign shl_ln356_1_fu_324_p3 = {{ap_phi_mux_s_index_0_i_phi_fu_205_p4}, {1'd0}};

assign shl_ln_fu_312_p3 = {{ap_phi_mux_s_index_0_i_phi_fu_205_p4}, {3'd0}};

assign sub_ln1311_fu_429_p2 = (8'd127 - tmp_V_fu_383_p4);

assign sub_ln356_fu_336_p2 = (zext_ln356_1_fu_320_p1 - zext_ln356_2_fu_332_p1);

assign tmp_55_fu_471_p3 = r_V_fu_459_p2[32'd24];

assign tmp_56_fu_515_p3 = p_Val2_39_fu_507_p3[32'd31];

always @ (*) begin
    tmp_57_fu_681_p4 = lines_q0;
    tmp_57_fu_681_p4[32'd0] = |(1'd0);
end

assign tmp_7_fu_483_p4 = {{r_V_6_fu_465_p2[55:24]}};

assign tmp_V_25_fu_393_p1 = p_Val2_s_fu_371_p1[22:0];

assign tmp_V_fu_383_p4 = {{p_Val2_s_fu_371_p1[30:23]}};

assign tmp_fu_292_p3 = line_bases_q0[32'd16];

assign tmp_s_fu_538_p4 = {{bitcast_ln362_fu_535_p1[30:23]}};

assign trunc_ln362_fu_548_p1 = bitcast_ln362_fu_535_p1[22:0];

assign ush_fu_439_p3 = ((isNeg_fu_421_p3[0:0] === 1'b1) ? sext_ln1311_fu_435_p1 : add_ln339_fu_415_p2);

assign xor_ln362_fu_523_p2 = (tmp_56_fu_515_p3 ^ 1'd1);

assign zext_ln1287_fu_455_p1 = $unsigned(sext_ln1311_4_fu_447_p1);

assign zext_ln339_fu_411_p1 = tmp_V_fu_383_p4;

assign zext_ln351_fu_288_p1 = line_index_0_i_reg_189;

assign zext_ln352_fu_280_p1 = line_index_0_i_reg_189;

assign zext_ln356_1_fu_320_p1 = shl_ln_fu_312_p3;

assign zext_ln356_2_fu_332_p1 = shl_ln356_1_fu_324_p3;

assign zext_ln356_3_fu_351_p1 = $unsigned(sext_ln356_fu_347_p1);

assign zext_ln356_fu_356_p1 = s_index_0_i_reg_201;

assign zext_ln662_fu_479_p1 = tmp_55_fu_471_p3;

assign zext_ln682_fu_407_p1 = mantissa_V_fu_397_p4;

always @ (posedge ap_clk) begin
    zext_ln352_reg_707[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln351_reg_718[7:3] <= 5'b00000;
end

endmodule //get_lines_lsl
