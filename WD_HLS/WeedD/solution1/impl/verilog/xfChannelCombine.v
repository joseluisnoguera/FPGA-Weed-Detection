// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module xfChannelCombine (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        p_in1_V_V_dout,
        p_in1_V_V_empty_n,
        p_in1_V_V_read,
        p_in2_V_V_dout,
        p_in2_V_V_empty_n,
        p_in2_V_V_read,
        p_in3_V_V_dout,
        p_in3_V_V_empty_n,
        p_in3_V_V_read,
        p_out_V_V_din,
        p_out_V_V_full_n,
        p_out_V_V_write,
        p_src1_cols_load7_loc_dout,
        p_src1_cols_load7_loc_empty_n,
        p_src1_cols_load7_loc_read
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] p_in1_V_V_dout;
input   p_in1_V_V_empty_n;
output   p_in1_V_V_read;
input  [7:0] p_in2_V_V_dout;
input   p_in2_V_V_empty_n;
output   p_in2_V_V_read;
input  [7:0] p_in3_V_V_dout;
input   p_in3_V_V_empty_n;
output   p_in3_V_V_read;
output  [23:0] p_out_V_V_din;
input   p_out_V_V_full_n;
output   p_out_V_V_write;
input  [9:0] p_src1_cols_load7_loc_dout;
input   p_src1_cols_load7_loc_empty_n;
output   p_src1_cols_load7_loc_read;

reg ap_done;
reg ap_idle;
reg start_write;
reg p_in1_V_V_read;
reg p_in2_V_V_read;
reg p_in3_V_V_read;
reg p_out_V_V_write;
reg p_src1_cols_load7_loc_read;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    p_in1_V_V_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln118_fu_127_p2;
reg    p_in2_V_V_blk_n;
reg    p_in3_V_V_blk_n;
reg    p_out_V_V_blk_n;
reg    p_src1_cols_load7_loc_blk_n;
wire  signed [15:0] sext_ln330_fu_111_p1;
reg  signed [15:0] sext_ln330_reg_149;
reg    ap_block_state1;
wire   [7:0] i_fu_121_p2;
reg   [7:0] i_reg_157;
wire    ap_CS_fsm_state2;
wire   [15:0] j_fu_132_p2;
reg    ap_block_state3;
reg   [7:0] i_0_i_i_i_reg_89;
reg   [15:0] j_0_i_i_i_reg_100;
wire   [0:0] icmp_ln113_fu_115_p2;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln113_fu_115_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~(((icmp_ln118_fu_127_p2 == 1'd0) & (p_in3_V_V_empty_n == 1'b0)) | ((icmp_ln118_fu_127_p2 == 1'd0) & (p_in2_V_V_empty_n == 1'b0)) | ((icmp_ln118_fu_127_p2 == 1'd0) & (p_in1_V_V_empty_n == 1'b0)) | ((icmp_ln118_fu_127_p2 == 1'd0) & (p_out_V_V_full_n == 1'b0))) & (icmp_ln118_fu_127_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_i_i_i_reg_89 <= i_reg_157;
    end else if ((~((real_start == 1'b0) | (p_src1_cols_load7_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_i_i_reg_89 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((icmp_ln118_fu_127_p2 == 1'd0) & (p_in3_V_V_empty_n == 1'b0)) | ((icmp_ln118_fu_127_p2 == 1'd0) & (p_in2_V_V_empty_n == 1'b0)) | ((icmp_ln118_fu_127_p2 == 1'd0) & (p_in1_V_V_empty_n == 1'b0)) | ((icmp_ln118_fu_127_p2 == 1'd0) & (p_out_V_V_full_n == 1'b0))) & (icmp_ln118_fu_127_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_0_i_i_i_reg_100 <= j_fu_132_p2;
    end else if (((icmp_ln113_fu_115_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_i_i_i_reg_100 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_157 <= i_fu_121_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (p_src1_cols_load7_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sext_ln330_reg_149 <= sext_ln330_fu_111_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln113_fu_115_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln113_fu_115_p2 == 1'd1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln118_fu_127_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_in1_V_V_blk_n = p_in1_V_V_empty_n;
    end else begin
        p_in1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((icmp_ln118_fu_127_p2 == 1'd0) & (p_in3_V_V_empty_n == 1'b0)) | ((icmp_ln118_fu_127_p2 == 1'd0) & (p_in2_V_V_empty_n == 1'b0)) | ((icmp_ln118_fu_127_p2 == 1'd0) & (p_in1_V_V_empty_n == 1'b0)) | ((icmp_ln118_fu_127_p2 == 1'd0) & (p_out_V_V_full_n == 1'b0))) & (icmp_ln118_fu_127_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_in1_V_V_read = 1'b1;
    end else begin
        p_in1_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln118_fu_127_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_in2_V_V_blk_n = p_in2_V_V_empty_n;
    end else begin
        p_in2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((icmp_ln118_fu_127_p2 == 1'd0) & (p_in3_V_V_empty_n == 1'b0)) | ((icmp_ln118_fu_127_p2 == 1'd0) & (p_in2_V_V_empty_n == 1'b0)) | ((icmp_ln118_fu_127_p2 == 1'd0) & (p_in1_V_V_empty_n == 1'b0)) | ((icmp_ln118_fu_127_p2 == 1'd0) & (p_out_V_V_full_n == 1'b0))) & (icmp_ln118_fu_127_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_in2_V_V_read = 1'b1;
    end else begin
        p_in2_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln118_fu_127_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_in3_V_V_blk_n = p_in3_V_V_empty_n;
    end else begin
        p_in3_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((icmp_ln118_fu_127_p2 == 1'd0) & (p_in3_V_V_empty_n == 1'b0)) | ((icmp_ln118_fu_127_p2 == 1'd0) & (p_in2_V_V_empty_n == 1'b0)) | ((icmp_ln118_fu_127_p2 == 1'd0) & (p_in1_V_V_empty_n == 1'b0)) | ((icmp_ln118_fu_127_p2 == 1'd0) & (p_out_V_V_full_n == 1'b0))) & (icmp_ln118_fu_127_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_in3_V_V_read = 1'b1;
    end else begin
        p_in3_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln118_fu_127_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_out_V_V_blk_n = p_out_V_V_full_n;
    end else begin
        p_out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((icmp_ln118_fu_127_p2 == 1'd0) & (p_in3_V_V_empty_n == 1'b0)) | ((icmp_ln118_fu_127_p2 == 1'd0) & (p_in2_V_V_empty_n == 1'b0)) | ((icmp_ln118_fu_127_p2 == 1'd0) & (p_in1_V_V_empty_n == 1'b0)) | ((icmp_ln118_fu_127_p2 == 1'd0) & (p_out_V_V_full_n == 1'b0))) & (icmp_ln118_fu_127_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_out_V_V_write = 1'b1;
    end else begin
        p_out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src1_cols_load7_loc_blk_n = p_src1_cols_load7_loc_empty_n;
    end else begin
        p_src1_cols_load7_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (p_src1_cols_load7_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src1_cols_load7_loc_read = 1'b1;
    end else begin
        p_src1_cols_load7_loc_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (p_src1_cols_load7_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln113_fu_115_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~(((icmp_ln118_fu_127_p2 == 1'd0) & (p_in3_V_V_empty_n == 1'b0)) | ((icmp_ln118_fu_127_p2 == 1'd0) & (p_in2_V_V_empty_n == 1'b0)) | ((icmp_ln118_fu_127_p2 == 1'd0) & (p_in1_V_V_empty_n == 1'b0)) | ((icmp_ln118_fu_127_p2 == 1'd0) & (p_out_V_V_full_n == 1'b0))) & (icmp_ln118_fu_127_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~(((icmp_ln118_fu_127_p2 == 1'd0) & (p_in3_V_V_empty_n == 1'b0)) | ((icmp_ln118_fu_127_p2 == 1'd0) & (p_in2_V_V_empty_n == 1'b0)) | ((icmp_ln118_fu_127_p2 == 1'd0) & (p_in1_V_V_empty_n == 1'b0)) | ((icmp_ln118_fu_127_p2 == 1'd0) & (p_out_V_V_full_n == 1'b0))) & (icmp_ln118_fu_127_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (p_src1_cols_load7_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state3 = (((icmp_ln118_fu_127_p2 == 1'd0) & (p_in3_V_V_empty_n == 1'b0)) | ((icmp_ln118_fu_127_p2 == 1'd0) & (p_in2_V_V_empty_n == 1'b0)) | ((icmp_ln118_fu_127_p2 == 1'd0) & (p_in1_V_V_empty_n == 1'b0)) | ((icmp_ln118_fu_127_p2 == 1'd0) & (p_out_V_V_full_n == 1'b0)));
end

assign ap_ready = internal_ap_ready;

assign i_fu_121_p2 = (i_0_i_i_i_reg_89 + 8'd1);

assign icmp_ln113_fu_115_p2 = ((i_0_i_i_i_reg_89 == 8'd180) ? 1'b1 : 1'b0);

assign icmp_ln118_fu_127_p2 = ((j_0_i_i_i_reg_100 == sext_ln330_reg_149) ? 1'b1 : 1'b0);

assign j_fu_132_p2 = (j_0_i_i_i_reg_100 + 16'd1);

assign p_out_V_V_din = {{{p_in1_V_V_dout}, {p_in2_V_V_dout}}, {p_in3_V_V_dout}};

assign sext_ln330_fu_111_p1 = $signed(p_src1_cols_load7_loc_dout);

assign start_out = real_start;

endmodule //xfChannelCombine
