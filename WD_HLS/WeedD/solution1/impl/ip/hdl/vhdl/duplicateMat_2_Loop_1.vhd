-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity duplicateMat_2_Loop_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_dst1_rows_dout : IN STD_LOGIC_VECTOR (10 downto 0);
    p_dst1_rows_empty_n : IN STD_LOGIC;
    p_dst1_rows_read : OUT STD_LOGIC;
    p_dst1_cols_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    p_dst1_cols_empty_n : IN STD_LOGIC;
    p_dst1_cols_read : OUT STD_LOGIC;
    dst_V_V_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    dst_V_V_empty_n : IN STD_LOGIC;
    dst_V_V_read : OUT STD_LOGIC;
    p_dst1_data_V_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    p_dst1_data_V_full_n : IN STD_LOGIC;
    p_dst1_data_V_write : OUT STD_LOGIC;
    dst1_V_V_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    dst1_V_V_empty_n : IN STD_LOGIC;
    dst1_V_V_read : OUT STD_LOGIC;
    p_dst2_data_V_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    p_dst2_data_V_full_n : IN STD_LOGIC;
    p_dst2_data_V_write : OUT STD_LOGIC );
end;


architecture behav of duplicateMat_2_Loop_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_dst1_rows_blk_n : STD_LOGIC;
    signal p_dst1_cols_blk_n : STD_LOGIC;
    signal dst_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln108_reg_165 : STD_LOGIC_VECTOR (0 downto 0);
    signal call_ln113_write_r_fu_100_Mat_9_720_1280_1_data_V_addr_blk_n : STD_LOGIC;
    signal p_dst1_data_V_blk_n : STD_LOGIC;
    signal dst1_V_V_blk_n : STD_LOGIC;
    signal call_ln114_write_r_fu_108_Mat_9_720_1280_1_data_V_addr_blk_n : STD_LOGIC;
    signal p_dst2_data_V_blk_n : STD_LOGIC;
    signal j2_0_i_reg_89 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_dst1_rows_read_reg_146 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal p_dst1_cols_read_reg_151 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln105_fu_119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_125_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_160 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln108_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_fu_140_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal call_ln113_write_r_fu_100_ap_start : STD_LOGIC;
    signal call_ln113_write_r_fu_100_ap_done : STD_LOGIC;
    signal call_ln113_write_r_fu_100_ap_idle : STD_LOGIC;
    signal call_ln113_write_r_fu_100_ap_ready : STD_LOGIC;
    signal call_ln113_write_r_fu_100_Mat_9_720_1280_1_data_V_addr_din : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ln113_write_r_fu_100_Mat_9_720_1280_1_data_V_addr_write : STD_LOGIC;
    signal call_ln113_write_r_fu_100_ap_ce : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter0_ignore_call4 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1_ignore_call4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp37 : BOOLEAN;
    signal call_ln114_write_r_fu_108_ap_start : STD_LOGIC;
    signal call_ln114_write_r_fu_108_ap_done : STD_LOGIC;
    signal call_ln114_write_r_fu_108_ap_idle : STD_LOGIC;
    signal call_ln114_write_r_fu_108_ap_ready : STD_LOGIC;
    signal call_ln114_write_r_fu_108_Mat_9_720_1280_1_data_V_addr_din : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ln114_write_r_fu_108_Mat_9_720_1280_1_data_V_addr_write : STD_LOGIC;
    signal call_ln114_write_r_fu_108_ap_ce : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter0_ignore_call6 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1_ignore_call6 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp39 : BOOLEAN;
    signal i1_0_i_reg_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal call_ln113_write_r_fu_100_ap_start_reg : STD_LOGIC := '0';
    signal call_ln114_write_r_fu_108_ap_start_reg : STD_LOGIC := '0';
    signal sext_ln105_fu_116_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln108_fu_131_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component write_r IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        val_V : IN STD_LOGIC_VECTOR (23 downto 0);
        Mat_9_720_1280_1_data_V_addr_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        Mat_9_720_1280_1_data_V_addr_full_n : IN STD_LOGIC;
        Mat_9_720_1280_1_data_V_addr_write : OUT STD_LOGIC;
        Mat_9_720_1280_1_data_V_addr_blk_n : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC );
    end component;



begin
    call_ln113_write_r_fu_100 : component write_r
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => call_ln113_write_r_fu_100_ap_start,
        ap_done => call_ln113_write_r_fu_100_ap_done,
        ap_idle => call_ln113_write_r_fu_100_ap_idle,
        ap_ready => call_ln113_write_r_fu_100_ap_ready,
        val_V => dst_V_V_dout,
        Mat_9_720_1280_1_data_V_addr_din => call_ln113_write_r_fu_100_Mat_9_720_1280_1_data_V_addr_din,
        Mat_9_720_1280_1_data_V_addr_full_n => p_dst1_data_V_full_n,
        Mat_9_720_1280_1_data_V_addr_write => call_ln113_write_r_fu_100_Mat_9_720_1280_1_data_V_addr_write,
        Mat_9_720_1280_1_data_V_addr_blk_n => call_ln113_write_r_fu_100_Mat_9_720_1280_1_data_V_addr_blk_n,
        ap_ce => call_ln113_write_r_fu_100_ap_ce);

    call_ln114_write_r_fu_108 : component write_r
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => call_ln114_write_r_fu_108_ap_start,
        ap_done => call_ln114_write_r_fu_108_ap_done,
        ap_idle => call_ln114_write_r_fu_108_ap_idle,
        ap_ready => call_ln114_write_r_fu_108_ap_ready,
        val_V => dst1_V_V_dout,
        Mat_9_720_1280_1_data_V_addr_din => call_ln114_write_r_fu_108_Mat_9_720_1280_1_data_V_addr_din,
        Mat_9_720_1280_1_data_V_addr_full_n => p_dst2_data_V_full_n,
        Mat_9_720_1280_1_data_V_addr_write => call_ln114_write_r_fu_108_Mat_9_720_1280_1_data_V_addr_write,
        Mat_9_720_1280_1_data_V_addr_blk_n => call_ln114_write_r_fu_108_Mat_9_720_1280_1_data_V_addr_blk_n,
        ap_ce => call_ln114_write_r_fu_108_ap_ce);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln105_fu_119_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln105_fu_119_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln105_fu_119_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    call_ln113_write_r_fu_100_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                call_ln113_write_r_fu_100_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln108_fu_134_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    call_ln113_write_r_fu_100_ap_start_reg <= ap_const_logic_1;
                elsif ((call_ln113_write_r_fu_100_ap_ready = ap_const_logic_1)) then 
                    call_ln113_write_r_fu_100_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    call_ln114_write_r_fu_108_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                call_ln114_write_r_fu_108_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln108_fu_134_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    call_ln114_write_r_fu_108_ap_start_reg <= ap_const_logic_1;
                elsif ((call_ln114_write_r_fu_108_ap_ready = ap_const_logic_1)) then 
                    call_ln114_write_r_fu_108_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_0_i_reg_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i1_0_i_reg_78 <= i_reg_160;
            elsif ((not(((ap_start = ap_const_logic_0) or (p_dst1_cols_empty_n = ap_const_logic_0) or (p_dst1_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i1_0_i_reg_78 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    j2_0_i_reg_89_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln108_fu_134_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j2_0_i_reg_89 <= j_fu_140_p2;
            elsif (((icmp_ln105_fu_119_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j2_0_i_reg_89 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_160 <= i_fu_125_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln108_reg_165 <= icmp_ln108_fu_134_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (p_dst1_cols_empty_n = ap_const_logic_0) or (p_dst1_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                p_dst1_cols_read_reg_151 <= p_dst1_cols_dout;
                p_dst1_rows_read_reg_146 <= p_dst1_rows_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_dst1_rows_empty_n, p_dst1_cols_empty_n, icmp_ln105_fu_119_p2, ap_CS_fsm_state2, icmp_ln108_fu_134_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (p_dst1_cols_empty_n = ap_const_logic_0) or (p_dst1_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln105_fu_119_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln108_fu_134_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln108_fu_134_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(dst_V_V_empty_n, dst1_V_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln108_reg_165, call_ln113_write_r_fu_100_Mat_9_720_1280_1_data_V_addr_blk_n, call_ln114_write_r_fu_108_Mat_9_720_1280_1_data_V_addr_blk_n)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln108_reg_165 = ap_const_lv1_1) and (call_ln114_write_r_fu_108_Mat_9_720_1280_1_data_V_addr_blk_n = ap_const_logic_0)) or ((icmp_ln108_reg_165 = ap_const_lv1_1) and (dst1_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln108_reg_165 = ap_const_lv1_1) and (call_ln113_write_r_fu_100_Mat_9_720_1280_1_data_V_addr_blk_n = ap_const_logic_0)) or ((icmp_ln108_reg_165 = ap_const_lv1_1) and (dst_V_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp37_assign_proc : process(dst_V_V_empty_n, dst1_V_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln108_reg_165, call_ln114_write_r_fu_108_Mat_9_720_1280_1_data_V_addr_blk_n)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp37 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln108_reg_165 = ap_const_lv1_1) and (call_ln114_write_r_fu_108_Mat_9_720_1280_1_data_V_addr_blk_n = ap_const_logic_0)) or ((icmp_ln108_reg_165 = ap_const_lv1_1) and (dst1_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln108_reg_165 = ap_const_lv1_1) and (dst_V_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp39_assign_proc : process(dst_V_V_empty_n, dst1_V_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln108_reg_165, call_ln113_write_r_fu_100_Mat_9_720_1280_1_data_V_addr_blk_n)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp39 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln108_reg_165 = ap_const_lv1_1) and (dst1_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln108_reg_165 = ap_const_lv1_1) and (call_ln113_write_r_fu_100_Mat_9_720_1280_1_data_V_addr_blk_n = ap_const_logic_0)) or ((icmp_ln108_reg_165 = ap_const_lv1_1) and (dst_V_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(dst_V_V_empty_n, dst1_V_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln108_reg_165, call_ln113_write_r_fu_100_Mat_9_720_1280_1_data_V_addr_blk_n, call_ln114_write_r_fu_108_Mat_9_720_1280_1_data_V_addr_blk_n)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln108_reg_165 = ap_const_lv1_1) and (call_ln114_write_r_fu_108_Mat_9_720_1280_1_data_V_addr_blk_n = ap_const_logic_0)) or ((icmp_ln108_reg_165 = ap_const_lv1_1) and (dst1_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln108_reg_165 = ap_const_lv1_1) and (call_ln113_write_r_fu_100_Mat_9_720_1280_1_data_V_addr_blk_n = ap_const_logic_0)) or ((icmp_ln108_reg_165 = ap_const_lv1_1) and (dst_V_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, p_dst1_rows_empty_n, p_dst1_cols_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (p_dst1_cols_empty_n = ap_const_logic_0) or (p_dst1_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0_ignore_call4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(dst_V_V_empty_n, dst1_V_V_empty_n, icmp_ln108_reg_165, call_ln113_write_r_fu_100_Mat_9_720_1280_1_data_V_addr_blk_n, call_ln114_write_r_fu_108_Mat_9_720_1280_1_data_V_addr_blk_n)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (((icmp_ln108_reg_165 = ap_const_lv1_1) and (call_ln114_write_r_fu_108_Mat_9_720_1280_1_data_V_addr_blk_n = ap_const_logic_0)) or ((icmp_ln108_reg_165 = ap_const_lv1_1) and (dst1_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln108_reg_165 = ap_const_lv1_1) and (call_ln113_write_r_fu_100_Mat_9_720_1280_1_data_V_addr_blk_n = ap_const_logic_0)) or ((icmp_ln108_reg_165 = ap_const_lv1_1) and (dst_V_V_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state4_pp0_stage0_iter1_ignore_call4_assign_proc : process(dst_V_V_empty_n, dst1_V_V_empty_n, icmp_ln108_reg_165, call_ln114_write_r_fu_108_Mat_9_720_1280_1_data_V_addr_blk_n)
    begin
                ap_block_state4_pp0_stage0_iter1_ignore_call4 <= (((icmp_ln108_reg_165 = ap_const_lv1_1) and (call_ln114_write_r_fu_108_Mat_9_720_1280_1_data_V_addr_blk_n = ap_const_logic_0)) or ((icmp_ln108_reg_165 = ap_const_lv1_1) and (dst1_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln108_reg_165 = ap_const_lv1_1) and (dst_V_V_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state4_pp0_stage0_iter1_ignore_call6_assign_proc : process(dst_V_V_empty_n, dst1_V_V_empty_n, icmp_ln108_reg_165, call_ln113_write_r_fu_100_Mat_9_720_1280_1_data_V_addr_blk_n)
    begin
                ap_block_state4_pp0_stage0_iter1_ignore_call6 <= (((icmp_ln108_reg_165 = ap_const_lv1_1) and (dst1_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln108_reg_165 = ap_const_lv1_1) and (call_ln113_write_r_fu_100_Mat_9_720_1280_1_data_V_addr_blk_n = ap_const_logic_0)) or ((icmp_ln108_reg_165 = ap_const_lv1_1) and (dst_V_V_empty_n = ap_const_logic_0)));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln108_fu_134_p2)
    begin
        if ((icmp_ln108_fu_134_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, icmp_ln105_fu_119_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln105_fu_119_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln105_fu_119_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln105_fu_119_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    call_ln113_write_r_fu_100_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp37))) then 
            call_ln113_write_r_fu_100_ap_ce <= ap_const_logic_1;
        else 
            call_ln113_write_r_fu_100_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    call_ln113_write_r_fu_100_ap_start <= call_ln113_write_r_fu_100_ap_start_reg;

    call_ln114_write_r_fu_108_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp39)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp39))) then 
            call_ln114_write_r_fu_108_ap_ce <= ap_const_logic_1;
        else 
            call_ln114_write_r_fu_108_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    call_ln114_write_r_fu_108_ap_start <= call_ln114_write_r_fu_108_ap_start_reg;

    dst1_V_V_blk_n_assign_proc : process(dst1_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln108_reg_165)
    begin
        if (((icmp_ln108_reg_165 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst1_V_V_blk_n <= dst1_V_V_empty_n;
        else 
            dst1_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dst1_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln108_reg_165, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln108_reg_165 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dst1_V_V_read <= ap_const_logic_1;
        else 
            dst1_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    dst_V_V_blk_n_assign_proc : process(dst_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln108_reg_165)
    begin
        if (((icmp_ln108_reg_165 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_V_V_blk_n <= dst_V_V_empty_n;
        else 
            dst_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dst_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln108_reg_165, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln108_reg_165 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dst_V_V_read <= ap_const_logic_1;
        else 
            dst_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_125_p2 <= std_logic_vector(unsigned(i1_0_i_reg_78) + unsigned(ap_const_lv32_1));
    icmp_ln105_fu_119_p2 <= "1" when (signed(i1_0_i_reg_78) < signed(sext_ln105_fu_116_p1)) else "0";
    icmp_ln108_fu_134_p2 <= "1" when (signed(j2_0_i_reg_89) < signed(sext_ln108_fu_131_p1)) else "0";
    j_fu_140_p2 <= std_logic_vector(unsigned(j2_0_i_reg_89) + unsigned(ap_const_lv32_1));

    p_dst1_cols_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_dst1_cols_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_dst1_cols_blk_n <= p_dst1_cols_empty_n;
        else 
            p_dst1_cols_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_dst1_cols_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_dst1_rows_empty_n, p_dst1_cols_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (p_dst1_cols_empty_n = ap_const_logic_0) or (p_dst1_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_dst1_cols_read <= ap_const_logic_1;
        else 
            p_dst1_cols_read <= ap_const_logic_0;
        end if; 
    end process;


    p_dst1_data_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln108_reg_165, call_ln113_write_r_fu_100_Mat_9_720_1280_1_data_V_addr_blk_n)
    begin
        if (((icmp_ln108_reg_165 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_dst1_data_V_blk_n <= call_ln113_write_r_fu_100_Mat_9_720_1280_1_data_V_addr_blk_n;
        else 
            p_dst1_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_dst1_data_V_din <= call_ln113_write_r_fu_100_Mat_9_720_1280_1_data_V_addr_din;

    p_dst1_data_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln108_reg_165, call_ln113_write_r_fu_100_Mat_9_720_1280_1_data_V_addr_write)
    begin
        if (((icmp_ln108_reg_165 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_dst1_data_V_write <= call_ln113_write_r_fu_100_Mat_9_720_1280_1_data_V_addr_write;
        else 
            p_dst1_data_V_write <= ap_const_logic_0;
        end if; 
    end process;


    p_dst1_rows_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_dst1_rows_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_dst1_rows_blk_n <= p_dst1_rows_empty_n;
        else 
            p_dst1_rows_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_dst1_rows_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_dst1_rows_empty_n, p_dst1_cols_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (p_dst1_cols_empty_n = ap_const_logic_0) or (p_dst1_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_dst1_rows_read <= ap_const_logic_1;
        else 
            p_dst1_rows_read <= ap_const_logic_0;
        end if; 
    end process;


    p_dst2_data_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln108_reg_165, call_ln114_write_r_fu_108_Mat_9_720_1280_1_data_V_addr_blk_n)
    begin
        if (((icmp_ln108_reg_165 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_dst2_data_V_blk_n <= call_ln114_write_r_fu_108_Mat_9_720_1280_1_data_V_addr_blk_n;
        else 
            p_dst2_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_dst2_data_V_din <= call_ln114_write_r_fu_108_Mat_9_720_1280_1_data_V_addr_din;

    p_dst2_data_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln108_reg_165, call_ln114_write_r_fu_108_Mat_9_720_1280_1_data_V_addr_write)
    begin
        if (((icmp_ln108_reg_165 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_dst2_data_V_write <= call_ln114_write_r_fu_108_Mat_9_720_1280_1_data_V_addr_write;
        else 
            p_dst2_data_V_write <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln105_fu_116_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_dst1_rows_read_reg_146),32));

        sext_ln108_fu_131_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_dst1_cols_read_reg_151),32));

end behav;
