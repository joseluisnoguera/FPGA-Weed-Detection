-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity xfExtractPixels is
port (
    ap_ready : OUT STD_LOGIC;
    tmp_buf_0_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    tmp_buf_1_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    tmp_buf_2_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    tmp_buf_3_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    val1_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    pos_r : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (23 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (23 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (23 downto 0) );
end;


architecture behav of xfExtractPixels is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal zext_ln321_fu_60_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal write_flag_fu_64_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag4_fu_78_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag8_fu_106_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag1_fu_92_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln78_fu_120_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln78_1_fu_128_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln78_2_fu_136_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln78_3_fu_144_p3 : STD_LOGIC_VECTOR (23 downto 0);

    component ip_accel_app_mux_bbk IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    ip_accel_app_mux_bbk_U537 : component ip_accel_app_mux_bbk
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_1,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_0,
        din4 => zext_ln321_fu_60_p1,
        dout => write_flag_fu_64_p6);

    ip_accel_app_mux_bbk_U538 : component ip_accel_app_mux_bbk
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_1,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_0,
        din4 => zext_ln321_fu_60_p1,
        dout => write_flag4_fu_78_p6);

    ip_accel_app_mux_bbk_U539 : component ip_accel_app_mux_bbk
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_1,
        din4 => zext_ln321_fu_60_p1,
        dout => write_flag1_fu_92_p6);

    ip_accel_app_mux_bbk_U540 : component ip_accel_app_mux_bbk
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => zext_ln321_fu_60_p1,
        dout => write_flag8_fu_106_p6);




    ap_ready <= ap_const_logic_1;
    ap_return_0 <= select_ln78_fu_120_p3;
    ap_return_1 <= select_ln78_1_fu_128_p3;
    ap_return_2 <= select_ln78_2_fu_136_p3;
    ap_return_3 <= select_ln78_3_fu_144_p3;
    select_ln78_1_fu_128_p3 <= 
        val1_V_read when (write_flag4_fu_78_p6(0) = '1') else 
        tmp_buf_1_V_read;
    select_ln78_2_fu_136_p3 <= 
        val1_V_read when (write_flag8_fu_106_p6(0) = '1') else 
        tmp_buf_2_V_read;
    select_ln78_3_fu_144_p3 <= 
        val1_V_read when (write_flag1_fu_92_p6(0) = '1') else 
        tmp_buf_3_V_read;
    select_ln78_fu_120_p3 <= 
        val1_V_read when (write_flag_fu_64_p6(0) = '1') else 
        tmp_buf_0_V_read;
    zext_ln321_fu_60_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pos_r),2));
end behav;
