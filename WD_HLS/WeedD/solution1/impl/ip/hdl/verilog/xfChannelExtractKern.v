// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module xfChannelExtractKern (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_src_mat_data_V_dout,
        p_src_mat_data_V_empty_n,
        p_src_mat_data_V_read,
        p_dst_mat_data_V_din,
        p_dst_mat_data_V_full_n,
        p_dst_mat_data_V_write,
        p_channel
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] p_src_mat_data_V_dout;
input   p_src_mat_data_V_empty_n;
output   p_src_mat_data_V_read;
output  [7:0] p_dst_mat_data_V_din;
input   p_dst_mat_data_V_full_n;
output   p_dst_mat_data_V_write;
input  [3:0] p_channel;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_src_mat_data_V_read;
reg p_dst_mat_data_V_write;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_src_mat_data_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln88_reg_373;
reg    p_dst_mat_data_V_blk_n;
reg   [8:0] t_V_reg_114;
wire   [4:0] select_ln69_fu_223_p3;
reg   [4:0] select_ln69_reg_348;
wire   [4:0] or_ln100_fu_231_p2;
reg   [4:0] or_ln100_reg_357;
wire   [0:0] icmp_ln887_fu_237_p2;
wire    ap_CS_fsm_state2;
wire   [7:0] i_V_fu_243_p2;
reg   [7:0] i_V_reg_368;
wire   [0:0] icmp_ln88_fu_249_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [8:0] add_ln1597_fu_255_p2;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [7:0] t_V_3_reg_103;
wire    ap_CS_fsm_state5;
reg    ap_block_pp0_stage0_01001;
wire   [2:0] trunc_ln65_fu_125_p1;
wire   [0:0] icmp_ln65_fu_129_p2;
wire   [31:0] or_ln65_1_fu_135_p3;
wire   [0:0] icmp_ln69_fu_149_p2;
wire   [0:0] icmp_ln73_fu_163_p2;
wire   [31:0] or_ln69_1_fu_155_p3;
wire   [31:0] or_ln73_1_fu_169_p3;
wire   [31:0] or_ln73_fu_177_p2;
wire   [31:0] or_ln73_2_fu_183_p2;
wire   [0:0] icmp_ln73_1_fu_189_p2;
wire   [0:0] icmp_ln65_1_fu_143_p2;
wire   [4:0] select_ln73_fu_195_p3;
wire   [0:0] icmp_ln69_1_fu_211_p2;
wire   [0:0] and_ln69_fu_217_p2;
wire   [4:0] select_ln65_fu_203_p3;
wire   [0:0] icmp_ln647_fu_261_p2;
wire   [4:0] sub_ln647_fu_275_p2;
wire   [4:0] sub_ln647_2_fu_284_p2;
reg   [23:0] tmp_6_fu_265_p4;
wire   [4:0] sub_ln647_1_fu_279_p2;
wire   [4:0] select_ln647_fu_288_p3;
wire   [4:0] select_ln647_2_fu_304_p3;
wire   [4:0] sub_ln647_3_fu_311_p2;
wire   [23:0] select_ln647_1_fu_296_p3;
wire   [23:0] zext_ln647_fu_317_p1;
wire   [23:0] zext_ln647_1_fu_321_p1;
wire   [23:0] lshr_ln647_fu_325_p2;
wire   [23:0] lshr_ln647_1_fu_331_p2;
wire   [23:0] and_ln647_fu_337_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln887_fu_237_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln887_fu_237_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        t_V_3_reg_103 <= i_V_reg_368;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_3_reg_103 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln88_fu_249_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_V_reg_114 <= add_ln1597_fu_255_p2;
    end else if (((icmp_ln887_fu_237_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_reg_114 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_reg_368 <= i_V_fu_243_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln88_reg_373 <= icmp_ln88_fu_249_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        or_ln100_reg_357[4 : 3] <= or_ln100_fu_231_p2[4 : 3];
        select_ln69_reg_348[4 : 3] <= select_ln69_fu_223_p3[4 : 3];
    end
end

always @ (*) begin
    if ((icmp_ln88_fu_249_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln887_fu_237_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln887_fu_237_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln88_reg_373 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_dst_mat_data_V_blk_n = p_dst_mat_data_V_full_n;
    end else begin
        p_dst_mat_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln88_reg_373 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_dst_mat_data_V_write = 1'b1;
    end else begin
        p_dst_mat_data_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln88_reg_373 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_src_mat_data_V_blk_n = p_src_mat_data_V_empty_n;
    end else begin
        p_src_mat_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln88_reg_373 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_src_mat_data_V_read = 1'b1;
    end else begin
        p_src_mat_data_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln887_fu_237_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln88_fu_249_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln88_fu_249_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1597_fu_255_p2 = (t_V_reg_114 + 9'd1);

assign and_ln647_fu_337_p2 = (lshr_ln647_fu_325_p2 & lshr_ln647_1_fu_331_p2);

assign and_ln69_fu_217_p2 = (icmp_ln69_1_fu_211_p2 & icmp_ln65_1_fu_143_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln88_reg_373 == 1'd0) & (p_dst_mat_data_V_full_n == 1'b0)) | ((icmp_ln88_reg_373 == 1'd0) & (p_src_mat_data_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln88_reg_373 == 1'd0) & (p_dst_mat_data_V_full_n == 1'b0)) | ((icmp_ln88_reg_373 == 1'd0) & (p_src_mat_data_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln88_reg_373 == 1'd0) & (p_dst_mat_data_V_full_n == 1'b0)) | ((icmp_ln88_reg_373 == 1'd0) & (p_src_mat_data_V_empty_n == 1'b0))));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((icmp_ln88_reg_373 == 1'd0) & (p_dst_mat_data_V_full_n == 1'b0)) | ((icmp_ln88_reg_373 == 1'd0) & (p_src_mat_data_V_empty_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_V_fu_243_p2 = (t_V_3_reg_103 + 8'd1);

assign icmp_ln647_fu_261_p2 = ((select_ln69_reg_348 > or_ln100_reg_357) ? 1'b1 : 1'b0);

assign icmp_ln65_1_fu_143_p2 = ((or_ln65_1_fu_135_p3 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_129_p2 = ((trunc_ln65_fu_125_p1 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln69_1_fu_211_p2 = ((or_ln69_1_fu_155_p3 != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_149_p2 = ((trunc_ln65_fu_125_p1 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln73_1_fu_189_p2 = ((or_ln73_2_fu_183_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_163_p2 = ((trunc_ln65_fu_125_p1 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_237_p2 = ((t_V_3_reg_103 < 8'd180) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_249_p2 = ((t_V_reg_114 == 9'd320) ? 1'b1 : 1'b0);

assign lshr_ln647_1_fu_331_p2 = 24'd16777215 >> zext_ln647_1_fu_321_p1;

assign lshr_ln647_fu_325_p2 = select_ln647_1_fu_296_p3 >> zext_ln647_fu_317_p1;

assign or_ln100_fu_231_p2 = (select_ln69_fu_223_p3 | 5'd7);

assign or_ln65_1_fu_135_p3 = {{31'd0}, {icmp_ln65_fu_129_p2}};

assign or_ln69_1_fu_155_p3 = {{31'd0}, {icmp_ln69_fu_149_p2}};

assign or_ln73_1_fu_169_p3 = {{31'd0}, {icmp_ln73_fu_163_p2}};

assign or_ln73_2_fu_183_p2 = (or_ln73_fu_177_p2 | or_ln65_1_fu_135_p3);

assign or_ln73_fu_177_p2 = (or_ln73_1_fu_169_p3 | or_ln69_1_fu_155_p3);

assign p_dst_mat_data_V_din = and_ln647_fu_337_p2[7:0];

assign select_ln647_1_fu_296_p3 = ((icmp_ln647_fu_261_p2[0:0] === 1'b1) ? tmp_6_fu_265_p4 : p_src_mat_data_V_dout);

assign select_ln647_2_fu_304_p3 = ((icmp_ln647_fu_261_p2[0:0] === 1'b1) ? sub_ln647_1_fu_279_p2 : select_ln69_reg_348);

assign select_ln647_fu_288_p3 = ((icmp_ln647_fu_261_p2[0:0] === 1'b1) ? sub_ln647_fu_275_p2 : sub_ln647_2_fu_284_p2);

assign select_ln65_fu_203_p3 = ((icmp_ln65_1_fu_143_p2[0:0] === 1'b1) ? select_ln73_fu_195_p3 : 5'd0);

assign select_ln69_fu_223_p3 = ((and_ln69_fu_217_p2[0:0] === 1'b1) ? 5'd8 : select_ln65_fu_203_p3);

assign select_ln73_fu_195_p3 = ((icmp_ln73_1_fu_189_p2[0:0] === 1'b1) ? 5'd0 : 5'd16);

assign sub_ln647_1_fu_279_p2 = ($signed(5'd23) - $signed(select_ln69_reg_348));

assign sub_ln647_2_fu_284_p2 = (or_ln100_reg_357 - select_ln69_reg_348);

assign sub_ln647_3_fu_311_p2 = ($signed(5'd23) - $signed(select_ln647_fu_288_p3));

assign sub_ln647_fu_275_p2 = (select_ln69_reg_348 - or_ln100_reg_357);

integer ap_tvar_int_0;

always @ (p_src_mat_data_V_dout) begin
    for (ap_tvar_int_0 = 24 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 23 - 0) begin
            tmp_6_fu_265_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_6_fu_265_p4[ap_tvar_int_0] = p_src_mat_data_V_dout[23 - ap_tvar_int_0];
        end
    end
end

assign trunc_ln65_fu_125_p1 = p_channel[2:0];

assign zext_ln647_1_fu_321_p1 = sub_ln647_3_fu_311_p2;

assign zext_ln647_fu_317_p1 = select_ln647_2_fu_304_p3;

always @ (posedge ap_clk) begin
    select_ln69_reg_348[2:0] <= 3'b000;
    or_ln100_reg_357[2:0] <= 3'b111;
end

endmodule //xfChannelExtractKern
