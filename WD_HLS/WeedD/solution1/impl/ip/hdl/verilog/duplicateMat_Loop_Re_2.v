// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module duplicateMat_Loop_Re_2 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        p_src_data_V_dout,
        p_src_data_V_empty_n,
        p_src_data_V_read,
        src_V_V_din,
        src_V_V_full_n,
        src_V_V_write,
        p_src_rows_read_out_din,
        p_src_rows_read_out_full_n,
        p_src_rows_read_out_write,
        p_src_cols_read_out_din,
        p_src_cols_read_out_full_n,
        p_src_cols_read_out_write,
        p_dst2_cols_read_out_din,
        p_dst2_cols_read_out_full_n,
        p_dst2_cols_read_out_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] p_src_data_V_dout;
input   p_src_data_V_empty_n;
output   p_src_data_V_read;
output  [7:0] src_V_V_din;
input   src_V_V_full_n;
output   src_V_V_write;
output  [8:0] p_src_rows_read_out_din;
input   p_src_rows_read_out_full_n;
output   p_src_rows_read_out_write;
output  [9:0] p_src_cols_read_out_din;
input   p_src_cols_read_out_full_n;
output   p_src_cols_read_out_write;
output  [9:0] p_dst2_cols_read_out_din;
input   p_dst2_cols_read_out_full_n;
output   p_dst2_cols_read_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg p_src_data_V_read;
reg src_V_V_write;
reg p_src_rows_read_out_write;
reg p_src_cols_read_out_write;
reg p_dst2_cols_read_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire    tmp_V_read_r_fu_123_Mat_0_180_320_1_data_V_addr_blk_n;
reg    p_src_data_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln95_reg_163;
reg    src_V_V_blk_n;
reg    p_src_rows_read_out_blk_n;
reg    p_src_cols_read_out_blk_n;
reg    p_dst2_cols_read_out_blk_n;
reg   [8:0] j_0_i_i_reg_112;
wire   [0:0] icmp_ln92_fu_130_p2;
wire    ap_CS_fsm_state2;
wire   [7:0] i_fu_136_p2;
reg   [7:0] i_reg_158;
wire   [0:0] icmp_ln95_fu_142_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [8:0] j_fu_148_p2;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire    tmp_V_read_r_fu_123_ap_start;
wire    tmp_V_read_r_fu_123_ap_done;
wire    tmp_V_read_r_fu_123_ap_idle;
wire    tmp_V_read_r_fu_123_ap_ready;
wire    tmp_V_read_r_fu_123_Mat_0_180_320_1_data_V_addr_read;
wire   [7:0] tmp_V_read_r_fu_123_ap_return;
reg    tmp_V_read_r_fu_123_ap_ce;
wire    ap_block_state3_pp0_stage0_iter0_ignore_call2;
reg    ap_block_state4_pp0_stage0_iter1_ignore_call2;
reg    ap_block_pp0_stage0_11001_ignoreCallOp31;
reg   [7:0] i_0_i_i_reg_101;
reg    ap_block_state1;
wire    ap_CS_fsm_state5;
reg    tmp_V_read_r_fu_123_ap_start_reg;
reg    ap_block_pp0_stage0_01001;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 tmp_V_read_r_fu_123_ap_start_reg = 1'b0;
end

read_r tmp_V_read_r_fu_123(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(tmp_V_read_r_fu_123_ap_start),
    .ap_done(tmp_V_read_r_fu_123_ap_done),
    .ap_idle(tmp_V_read_r_fu_123_ap_idle),
    .ap_ready(tmp_V_read_r_fu_123_ap_ready),
    .Mat_0_180_320_1_data_V_addr_dout(p_src_data_V_dout),
    .Mat_0_180_320_1_data_V_addr_empty_n(p_src_data_V_empty_n),
    .Mat_0_180_320_1_data_V_addr_read(tmp_V_read_r_fu_123_Mat_0_180_320_1_data_V_addr_read),
    .ap_return(tmp_V_read_r_fu_123_ap_return),
    .Mat_0_180_320_1_data_V_addr_blk_n(tmp_V_read_r_fu_123_Mat_0_180_320_1_data_V_addr_blk_n),
    .ap_ce(tmp_V_read_r_fu_123_ap_ce)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln92_fu_130_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln92_fu_130_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln92_fu_130_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp_V_read_r_fu_123_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln95_fu_142_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            tmp_V_read_r_fu_123_ap_start_reg <= 1'b1;
        end else if ((tmp_V_read_r_fu_123_ap_ready == 1'b1)) begin
            tmp_V_read_r_fu_123_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_0_i_i_reg_101 <= i_reg_158;
    end else if ((~((p_dst2_cols_read_out_full_n == 1'b0) | (p_src_cols_read_out_full_n == 1'b0) | (p_src_rows_read_out_full_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_i_reg_101 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln95_fu_142_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_0_i_i_reg_112 <= j_fu_148_p2;
    end else if (((icmp_ln92_fu_130_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_i_i_reg_112 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_158 <= i_fu_136_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln95_reg_163 <= icmp_ln95_fu_142_p2;
    end
end

always @ (*) begin
    if ((icmp_ln95_fu_142_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln92_fu_130_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln92_fu_130_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_dst2_cols_read_out_blk_n = p_dst2_cols_read_out_full_n;
    end else begin
        p_dst2_cols_read_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_dst2_cols_read_out_full_n == 1'b0) | (p_src_cols_read_out_full_n == 1'b0) | (p_src_rows_read_out_full_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_dst2_cols_read_out_write = 1'b1;
    end else begin
        p_dst2_cols_read_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_cols_read_out_blk_n = p_src_cols_read_out_full_n;
    end else begin
        p_src_cols_read_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_dst2_cols_read_out_full_n == 1'b0) | (p_src_cols_read_out_full_n == 1'b0) | (p_src_rows_read_out_full_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_cols_read_out_write = 1'b1;
    end else begin
        p_src_cols_read_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln95_reg_163 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_src_data_V_blk_n = tmp_V_read_r_fu_123_Mat_0_180_320_1_data_V_addr_blk_n;
    end else begin
        p_src_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln95_reg_163 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_src_data_V_read = tmp_V_read_r_fu_123_Mat_0_180_320_1_data_V_addr_read;
    end else begin
        p_src_data_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_rows_read_out_blk_n = p_src_rows_read_out_full_n;
    end else begin
        p_src_rows_read_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_dst2_cols_read_out_full_n == 1'b0) | (p_src_cols_read_out_full_n == 1'b0) | (p_src_rows_read_out_full_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_rows_read_out_write = 1'b1;
    end else begin
        p_src_rows_read_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((icmp_ln95_reg_163 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_V_V_blk_n = src_V_V_full_n;
    end else begin
        src_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln95_reg_163 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src_V_V_write = 1'b1;
    end else begin
        src_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp31))) begin
        tmp_V_read_r_fu_123_ap_ce = 1'b1;
    end else begin
        tmp_V_read_r_fu_123_ap_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((p_dst2_cols_read_out_full_n == 1'b0) | (p_src_cols_read_out_full_n == 1'b0) | (p_src_rows_read_out_full_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln92_fu_130_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln95_fu_142_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln95_fu_142_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln95_reg_163 == 1'd1) & (src_V_V_full_n == 1'b0)) | ((icmp_ln95_reg_163 == 1'd1) & (tmp_V_read_r_fu_123_Mat_0_180_320_1_data_V_addr_blk_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln95_reg_163 == 1'd1) & (src_V_V_full_n == 1'b0)) | ((icmp_ln95_reg_163 == 1'd1) & (tmp_V_read_r_fu_123_Mat_0_180_320_1_data_V_addr_blk_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp31 = ((icmp_ln95_reg_163 == 1'd1) & (src_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln95_reg_163 == 1'd1) & (src_V_V_full_n == 1'b0)) | ((icmp_ln95_reg_163 == 1'd1) & (tmp_V_read_r_fu_123_Mat_0_180_320_1_data_V_addr_blk_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((p_dst2_cols_read_out_full_n == 1'b0) | (p_src_cols_read_out_full_n == 1'b0) | (p_src_rows_read_out_full_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0_ignore_call2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((icmp_ln95_reg_163 == 1'd1) & (src_V_V_full_n == 1'b0)) | ((icmp_ln95_reg_163 == 1'd1) & (tmp_V_read_r_fu_123_Mat_0_180_320_1_data_V_addr_blk_n == 1'b0)));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1_ignore_call2 = ((icmp_ln95_reg_163 == 1'd1) & (src_V_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign i_fu_136_p2 = (i_0_i_i_reg_101 + 8'd1);

assign icmp_ln92_fu_130_p2 = ((i_0_i_i_reg_101 < 8'd180) ? 1'b1 : 1'b0);

assign icmp_ln95_fu_142_p2 = ((j_0_i_i_reg_112 < 9'd320) ? 1'b1 : 1'b0);

assign j_fu_148_p2 = (j_0_i_i_reg_112 + 9'd1);

assign p_dst2_cols_read_out_din = 10'd320;

assign p_src_cols_read_out_din = 10'd320;

assign p_src_rows_read_out_din = 9'd180;

assign src_V_V_din = tmp_V_read_r_fu_123_ap_return;

assign start_out = real_start;

assign tmp_V_read_r_fu_123_ap_start = tmp_V_read_r_fu_123_ap_start_reg;

endmodule //duplicateMat_Loop_Re_2
