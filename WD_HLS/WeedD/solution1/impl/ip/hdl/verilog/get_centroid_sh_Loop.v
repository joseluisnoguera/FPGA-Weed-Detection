// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module get_centroid_sh_Loop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        micro_roi_data_V_address0,
        micro_roi_data_V_ce0,
        micro_roi_data_V_q0,
        v_limit,
        h_limit,
        h_offset,
        v_offset_read,
        possible_c_x,
        possible_c_y,
        c_read,
        h_offset_out_din,
        h_offset_out_full_n,
        h_offset_out_write,
        v_offset_read_out_din,
        v_offset_read_out_full_n,
        v_offset_read_out_write,
        possible_c_x_out_din,
        possible_c_x_out_full_n,
        possible_c_x_out_write,
        possible_c_y_out_din,
        possible_c_y_out_full_n,
        possible_c_y_out_write,
        c_read_out_din,
        c_read_out_full_n,
        c_read_out_write,
        ap_return_0,
        ap_return_1,
        ap_return_2
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [9:0] micro_roi_data_V_address0;
output   micro_roi_data_V_ce0;
input  [7:0] micro_roi_data_V_q0;
input  [7:0] v_limit;
input  [15:0] h_limit;
input  [15:0] h_offset;
input  [7:0] v_offset_read;
input  [7:0] possible_c_x;
input  [31:0] possible_c_y;
input  [47:0] c_read;
output  [15:0] h_offset_out_din;
input   h_offset_out_full_n;
output   h_offset_out_write;
output  [7:0] v_offset_read_out_din;
input   v_offset_read_out_full_n;
output   v_offset_read_out_write;
output  [7:0] possible_c_x_out_din;
input   possible_c_x_out_full_n;
output   possible_c_x_out_write;
output  [31:0] possible_c_y_out_din;
input   possible_c_y_out_full_n;
output   possible_c_y_out_write;
output  [47:0] c_read_out_din;
input   c_read_out_full_n;
output   c_read_out_write;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg micro_roi_data_V_ce0;
reg h_offset_out_write;
reg v_offset_read_out_write;
reg possible_c_x_out_write;
reg possible_c_y_out_write;
reg c_read_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    h_offset_out_blk_n;
reg    v_offset_read_out_blk_n;
reg    possible_c_x_out_blk_n;
reg    possible_c_y_out_blk_n;
reg    c_read_out_blk_n;
reg    ap_block_state1;
wire   [5:0] h_fu_254_p2;
reg   [5:0] h_reg_465;
wire    ap_CS_fsm_state2;
wire   [31:0] zext_ln126_fu_260_p1;
reg   [31:0] zext_ln126_reg_470;
wire   [0:0] icmp_ln124_fu_248_p2;
wire   [9:0] zext_ln126_1_fu_264_p1;
reg   [9:0] zext_ln126_1_reg_475;
wire   [0:0] icmp_ln126_fu_272_p2;
reg   [0:0] icmp_ln126_reg_480;
wire   [4:0] v_fu_305_p2;
reg   [4:0] v_reg_488;
wire    ap_CS_fsm_state3;
wire   [0:0] and_ln126_fu_316_p2;
reg   [0:0] and_ln126_reg_493;
wire   [0:0] icmp_ln125_fu_299_p2;
reg   [5:0] h_0_i_i_i_i_reg_201;
reg   [4:0] v_0_i_i_i_i_reg_212;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln127_1_fu_334_p1;
reg   [31:0] p_sum_3_fu_94;
wire   [31:0] p_sum_5_fu_408_p3;
reg   [31:0] h_sum_3_fu_98;
wire   [31:0] h_sum_5_fu_393_p3;
reg   [31:0] v_sum_3_fu_102;
wire   [31:0] v_sum_5_fu_378_p3;
wire   [15:0] zext_ln126_2_fu_268_p1;
wire   [7:0] zext_ln125_fu_295_p1;
wire   [0:0] icmp_ln126_1_fu_311_p2;
wire   [9:0] shl_ln_fu_321_p3;
wire   [9:0] add_ln127_fu_329_p2;
wire   [31:0] zext_ln127_fu_339_p1;
wire   [31:0] v_sum_fu_349_p2;
wire   [0:0] icmp_ln895_fu_343_p2;
wire   [0:0] and_ln895_fu_373_p2;
wire   [31:0] v_sum_4_fu_366_p3;
wire   [31:0] h_sum_fu_355_p2;
wire   [31:0] h_sum_4_fu_386_p3;
wire   [31:0] p_sum_fu_360_p2;
wire   [31:0] p_sum_4_fu_401_p3;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln124_fu_248_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln125_fu_299_p2 == 1'd1))) begin
        h_0_i_i_i_i_reg_201 <= h_reg_465;
    end else if ((~((ap_start == 1'b0) | (c_read_out_full_n == 1'b0) | (possible_c_y_out_full_n == 1'b0) | (possible_c_x_out_full_n == 1'b0) | (v_offset_read_out_full_n == 1'b0) | (h_offset_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        h_0_i_i_i_i_reg_201 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        h_sum_3_fu_98 <= h_sum_5_fu_393_p3;
    end else if ((~((ap_start == 1'b0) | (c_read_out_full_n == 1'b0) | (possible_c_y_out_full_n == 1'b0) | (possible_c_x_out_full_n == 1'b0) | (v_offset_read_out_full_n == 1'b0) | (h_offset_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        h_sum_3_fu_98 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_sum_3_fu_94 <= p_sum_5_fu_408_p3;
    end else if ((~((ap_start == 1'b0) | (c_read_out_full_n == 1'b0) | (possible_c_y_out_full_n == 1'b0) | (possible_c_x_out_full_n == 1'b0) | (v_offset_read_out_full_n == 1'b0) | (h_offset_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_sum_3_fu_94 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln124_fu_248_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        v_0_i_i_i_i_reg_212 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        v_0_i_i_i_i_reg_212 <= v_reg_488;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v_sum_3_fu_102 <= v_sum_5_fu_378_p3;
    end else if ((~((ap_start == 1'b0) | (c_read_out_full_n == 1'b0) | (possible_c_y_out_full_n == 1'b0) | (possible_c_x_out_full_n == 1'b0) | (v_offset_read_out_full_n == 1'b0) | (h_offset_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        v_sum_3_fu_102 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln125_fu_299_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        and_ln126_reg_493 <= and_ln126_fu_316_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        h_reg_465 <= h_fu_254_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln124_fu_248_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln126_reg_480 <= icmp_ln126_fu_272_p2;
        zext_ln126_1_reg_475[5 : 0] <= zext_ln126_1_fu_264_p1[5 : 0];
        zext_ln126_reg_470[5 : 0] <= zext_ln126_fu_260_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        v_reg_488 <= v_fu_305_p2;
    end
end

always @ (*) begin
    if (((icmp_ln124_fu_248_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln124_fu_248_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        c_read_out_blk_n = c_read_out_full_n;
    end else begin
        c_read_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (c_read_out_full_n == 1'b0) | (possible_c_y_out_full_n == 1'b0) | (possible_c_x_out_full_n == 1'b0) | (v_offset_read_out_full_n == 1'b0) | (h_offset_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        c_read_out_write = 1'b1;
    end else begin
        c_read_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        h_offset_out_blk_n = h_offset_out_full_n;
    end else begin
        h_offset_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (c_read_out_full_n == 1'b0) | (possible_c_y_out_full_n == 1'b0) | (possible_c_x_out_full_n == 1'b0) | (v_offset_read_out_full_n == 1'b0) | (h_offset_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        h_offset_out_write = 1'b1;
    end else begin
        h_offset_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        micro_roi_data_V_ce0 = 1'b1;
    end else begin
        micro_roi_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        possible_c_x_out_blk_n = possible_c_x_out_full_n;
    end else begin
        possible_c_x_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (c_read_out_full_n == 1'b0) | (possible_c_y_out_full_n == 1'b0) | (possible_c_x_out_full_n == 1'b0) | (v_offset_read_out_full_n == 1'b0) | (h_offset_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        possible_c_x_out_write = 1'b1;
    end else begin
        possible_c_x_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        possible_c_y_out_blk_n = possible_c_y_out_full_n;
    end else begin
        possible_c_y_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (c_read_out_full_n == 1'b0) | (possible_c_y_out_full_n == 1'b0) | (possible_c_x_out_full_n == 1'b0) | (v_offset_read_out_full_n == 1'b0) | (h_offset_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        possible_c_y_out_write = 1'b1;
    end else begin
        possible_c_y_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        v_offset_read_out_blk_n = v_offset_read_out_full_n;
    end else begin
        v_offset_read_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (c_read_out_full_n == 1'b0) | (possible_c_y_out_full_n == 1'b0) | (possible_c_x_out_full_n == 1'b0) | (v_offset_read_out_full_n == 1'b0) | (h_offset_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        v_offset_read_out_write = 1'b1;
    end else begin
        v_offset_read_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (c_read_out_full_n == 1'b0) | (possible_c_y_out_full_n == 1'b0) | (possible_c_x_out_full_n == 1'b0) | (v_offset_read_out_full_n == 1'b0) | (h_offset_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln124_fu_248_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln125_fu_299_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln127_fu_329_p2 = (zext_ln126_1_reg_475 + shl_ln_fu_321_p3);

assign and_ln126_fu_316_p2 = (icmp_ln126_reg_480 & icmp_ln126_1_fu_311_p2);

assign and_ln895_fu_373_p2 = (icmp_ln895_fu_343_p2 & and_ln126_reg_493);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (c_read_out_full_n == 1'b0) | (possible_c_y_out_full_n == 1'b0) | (possible_c_x_out_full_n == 1'b0) | (v_offset_read_out_full_n == 1'b0) | (h_offset_out_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_return_0 = v_sum_3_fu_102;

assign ap_return_1 = h_sum_3_fu_98;

assign ap_return_2 = p_sum_3_fu_94;

assign c_read_out_din = c_read;

assign h_fu_254_p2 = (h_0_i_i_i_i_reg_201 + 6'd1);

assign h_offset_out_din = h_offset;

assign h_sum_4_fu_386_p3 = ((and_ln126_reg_493[0:0] === 1'b1) ? h_sum_fu_355_p2 : h_sum_3_fu_98);

assign h_sum_5_fu_393_p3 = ((and_ln895_fu_373_p2[0:0] === 1'b1) ? h_sum_3_fu_98 : h_sum_4_fu_386_p3);

assign h_sum_fu_355_p2 = (zext_ln126_reg_470 + h_sum_3_fu_98);

assign icmp_ln124_fu_248_p2 = ((h_0_i_i_i_i_reg_201 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln125_fu_299_p2 = ((v_0_i_i_i_i_reg_212 == 5'd23) ? 1'b1 : 1'b0);

assign icmp_ln126_1_fu_311_p2 = ((zext_ln125_fu_295_p1 < v_limit) ? 1'b1 : 1'b0);

assign icmp_ln126_fu_272_p2 = ((zext_ln126_2_fu_268_p1 < h_limit) ? 1'b1 : 1'b0);

assign icmp_ln895_fu_343_p2 = ((micro_roi_data_V_q0 == 8'd0) ? 1'b1 : 1'b0);

assign micro_roi_data_V_address0 = zext_ln127_1_fu_334_p1;

assign p_sum_4_fu_401_p3 = ((and_ln126_reg_493[0:0] === 1'b1) ? p_sum_fu_360_p2 : p_sum_3_fu_94);

assign p_sum_5_fu_408_p3 = ((and_ln895_fu_373_p2[0:0] === 1'b1) ? p_sum_3_fu_94 : p_sum_4_fu_401_p3);

assign p_sum_fu_360_p2 = (p_sum_3_fu_94 + 32'd1);

assign possible_c_x_out_din = possible_c_x;

assign possible_c_y_out_din = possible_c_y;

assign shl_ln_fu_321_p3 = {{v_0_i_i_i_i_reg_212}, {5'd0}};

assign v_fu_305_p2 = (v_0_i_i_i_i_reg_212 + 5'd1);

assign v_offset_read_out_din = v_offset_read;

assign v_sum_4_fu_366_p3 = ((and_ln126_reg_493[0:0] === 1'b1) ? v_sum_fu_349_p2 : v_sum_3_fu_102);

assign v_sum_5_fu_378_p3 = ((and_ln895_fu_373_p2[0:0] === 1'b1) ? v_sum_3_fu_102 : v_sum_4_fu_366_p3);

assign v_sum_fu_349_p2 = (zext_ln127_fu_339_p1 + v_sum_3_fu_102);

assign zext_ln125_fu_295_p1 = v_0_i_i_i_i_reg_212;

assign zext_ln126_1_fu_264_p1 = h_0_i_i_i_i_reg_201;

assign zext_ln126_2_fu_268_p1 = h_0_i_i_i_i_reg_201;

assign zext_ln126_fu_260_p1 = h_0_i_i_i_i_reg_201;

assign zext_ln127_1_fu_334_p1 = add_ln127_fu_329_p2;

assign zext_ln127_fu_339_p1 = v_0_i_i_i_i_reg_212;

always @ (posedge ap_clk) begin
    zext_ln126_reg_470[31:6] <= 26'b00000000000000000000000000;
    zext_ln126_1_reg_475[9:6] <= 4'b0000;
end

endmodule //get_centroid_sh_Loop
