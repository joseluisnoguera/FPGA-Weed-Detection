-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity least_squares_line_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    centroids_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    centroids_2_ce0 : OUT STD_LOGIC;
    centroids_2_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of least_squares_line_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (72 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (72 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (72 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (72 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (72 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (72 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (72 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (72 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (72 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (72 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv42_155556 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000101010101010101010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv63_7FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (62 downto 0) := "111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv7_5A : STD_LOGIC_VECTOR (6 downto 0) := "1011010";
    constant ap_const_lv65_1FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (64 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_39 : STD_LOGIC_VECTOR (7 downto 0) := "00111001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv65_155555556 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000101010101010101010101010101010110";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sum_x_0_reg_159 : STD_LOGIC_VECTOR (19 downto 0);
    signal sum_y_0_reg_171 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_xy_0_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_xx_0_reg_195 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_207 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln185_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_988 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln185_reg_988_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_232_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_992 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal zext_ln187_1_fu_247_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal sum_x_fu_255_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sum_x_reg_1008 : STD_LOGIC_VECTOR (19 downto 0);
    signal sum_y_fu_271_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_y_reg_1013 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_xy_fu_283_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_xy_reg_1018 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_980_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_38_reg_1038 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln935_fu_779_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln935_reg_1043 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal grp_fu_222_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_phi_mux_sum_x_0_phi_fu_163_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_phi_mux_sum_y_0_phi_fu_175_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_sum_xy_0_phi_fu_187_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_i_0_phi_fu_211_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln187_fu_238_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_222_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln187_fu_243_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln187_2_fu_251_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal centroids_y_1_load_n_fu_261_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln189_fu_277_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln189_fu_277_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_289_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln731_2_fu_301_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln731_fu_297_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal zext_ln731_1_fu_309_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal sub_ln731_2_fu_313_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal mul_ln731_fu_335_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln731_fu_335_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln731_fu_319_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln731_fu_335_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal shl_ln731_3_fu_347_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln731_4_fu_359_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln731_5_fu_355_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal zext_ln731_6_fu_367_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal sub_ln731_3_fu_371_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal mul_ln731_1_fu_381_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln731_3_fu_327_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln731_1_fu_381_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln731_1_fu_381_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln731_1_fu_377_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal zext_ln731_7_fu_387_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal sub_ln731_1_fu_391_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal sub_ln731_fu_341_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_2_fu_397_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_417_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln195_1_fu_427_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln195_1_fu_427_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_417_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_11_fu_443_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal p_Result_12_fu_453_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_fu_461_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_V_12_fu_467_p3 : STD_LOGIC_VECTOR (64 downto 0);
    signal p_Result_s_fu_475_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_485_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1081_fu_503_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_13_fu_507_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_515_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1074_fu_493_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1083_fu_523_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1075_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal NZeros_fu_527_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_533_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_fu_541_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_547_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_fu_553_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_fu_569_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln947_fu_573_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln947_fu_579_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal lshr_ln947_fu_583_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal p_Result_5_fu_589_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal icmp_ln947_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln947_1_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_607_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_fu_621_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln949_fu_635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln954_fu_655_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln954_fu_661_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal sub_ln954_fu_671_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln954_1_fu_677_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal lshr_ln954_fu_665_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal shl_ln954_fu_681_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal icmp_ln954_fu_649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln954_fu_687_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln954_1_fu_691_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_fu_695_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_641_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_1_fu_703_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_4_fu_709_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_36_fu_723_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln943_fu_739_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln964_fu_731_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln964_fu_743_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_fu_749_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_5_fu_719_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_755_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_14_fu_763_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln935_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln739_fu_775_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln195_fu_787_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal mul_ln195_fu_799_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln195_fu_799_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_37_fu_805_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_218_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_19_fu_819_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_14_fu_841_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_V_fu_845_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_V_13_fu_831_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln339_fu_859_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln339_fu_863_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_877_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_869_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_883_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_887_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1311_1_fu_895_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1311_2_fu_899_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln682_fu_855_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1287_fu_903_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_907_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_41_fu_919_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_2_fu_913_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln662_fu_927_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_931_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_941_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_15_fu_823_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_1_fu_949_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln195_1_fu_815_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_21_fu_955_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln195_fu_963_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_980_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_980_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_417_ap_start : STD_LOGIC;
    signal grp_fu_417_ap_done : STD_LOGIC;
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (72 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln195_1_fu_427_p10 : STD_LOGIC_VECTOR (41 downto 0);
    signal mul_ln195_fu_799_p10 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_ln731_fu_335_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln731_fu_335_p10 : STD_LOGIC_VECTOR (47 downto 0);

    component ip_accel_app_fmulKfY IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ip_accel_app_uitoLf8 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ip_accel_app_sdivZio IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (48 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component ip_accel_app_mac_OgC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    ip_accel_app_fmulKfY_U479 : component ip_accel_app_fmulKfY
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_222_p1,
        din1 => select_ln935_reg_1043,
        ce => ap_const_logic_1,
        dout => grp_fu_218_p2);

    ip_accel_app_uitoLf8_U480 : component ip_accel_app_uitoLf8
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_222_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_222_p1);

    ip_accel_app_sdivZio_U481 : component ip_accel_app_sdivZio
    generic map (
        ID => 1,
        NUM_STAGE => 68,
        din0_WIDTH => 64,
        din1_WIDTH => 49,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_417_ap_start,
        done => grp_fu_417_ap_done,
        din0 => grp_fu_417_p0,
        din1 => tmp_2_fu_397_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_417_p2);

    ip_accel_app_mac_OgC_U482 : component ip_accel_app_mac_OgC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_980_p0,
        din1 => grp_fu_980_p1,
        din2 => sum_xx_0_reg_195,
        ce => ap_const_logic_1,
        dout => grp_fu_980_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
                    ap_return_0_preg <= select_ln935_reg_1043;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
                    ap_return_1_preg <= sub_ln195_fu_963_p2;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln185_reg_988 = ap_const_lv1_0))) then 
                i_0_reg_207 <= i_reg_992;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_207 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    sum_x_0_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln185_reg_988_pp0_iter1_reg = ap_const_lv1_0))) then 
                sum_x_0_reg_159 <= sum_x_reg_1008;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sum_x_0_reg_159 <= ap_const_lv20_0;
            end if; 
        end if;
    end process;

    sum_xx_0_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln185_reg_988_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                sum_xx_0_reg_195 <= grp_fu_980_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sum_xx_0_reg_195 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum_xy_0_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln185_reg_988_pp0_iter1_reg = ap_const_lv1_0))) then 
                sum_xy_0_reg_183 <= sum_xy_reg_1018;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sum_xy_0_reg_183 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum_y_0_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln185_reg_988_pp0_iter1_reg = ap_const_lv1_0))) then 
                sum_y_0_reg_171 <= sum_y_reg_1013;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sum_y_0_reg_171 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_reg_992 <= i_fu_232_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln185_reg_988 <= icmp_ln185_fu_226_p2;
                icmp_ln185_reg_988_pp0_iter1_reg <= icmp_ln185_reg_988;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then
                select_ln935_reg_1043 <= select_ln935_fu_779_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln185_reg_988 = ap_const_lv1_0))) then
                sum_x_reg_1008 <= sum_x_fu_255_p2;
                sum_xy_reg_1018 <= sum_xy_fu_283_p2;
                sum_y_reg_1013 <= sum_y_fu_271_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_38_reg_1038 <= mul_ln195_1_fu_427_p2(41 downto 24);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln185_fu_226_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln185_fu_226_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln185_fu_226_p2 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    NZeros_fu_527_p2 <= std_logic_vector(unsigned(trunc_ln1074_fu_493_p1) + unsigned(trunc_ln1083_fu_523_p1));
    a_fu_601_p2 <= (icmp_ln947_fu_563_p2 and icmp_ln947_1_fu_595_p2);
    add_ln339_fu_863_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(zext_ln339_fu_859_p1));
    add_ln954_fu_655_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE7) + signed(sub_ln944_fu_541_p2));
    add_ln964_fu_749_p2 <= std_logic_vector(unsigned(select_ln964_fu_731_p3) + unsigned(sub_ln964_fu_743_p2));
    and_ln949_fu_629_p2 <= (xor_ln949_fu_615_p2 and p_Result_3_fu_621_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state7 <= ap_CS_fsm(3);
    ap_CS_fsm_state74 <= ap_CS_fsm(70);
    ap_CS_fsm_state75 <= ap_CS_fsm(71);
    ap_CS_fsm_state76 <= ap_CS_fsm(72);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln185_fu_226_p2)
    begin
        if ((icmp_ln185_fu_226_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state76)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state76) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_211_p4_assign_proc : process(i_0_reg_207, icmp_ln185_reg_988, ap_CS_fsm_pp0_stage0, i_reg_992, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln185_reg_988 = ap_const_lv1_0))) then 
            ap_phi_mux_i_0_phi_fu_211_p4 <= i_reg_992;
        else 
            ap_phi_mux_i_0_phi_fu_211_p4 <= i_0_reg_207;
        end if; 
    end process;


    ap_phi_mux_sum_x_0_phi_fu_163_p4_assign_proc : process(sum_x_0_reg_159, icmp_ln185_reg_988_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, sum_x_reg_1008, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln185_reg_988_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_sum_x_0_phi_fu_163_p4 <= sum_x_reg_1008;
        else 
            ap_phi_mux_sum_x_0_phi_fu_163_p4 <= sum_x_0_reg_159;
        end if; 
    end process;


    ap_phi_mux_sum_xy_0_phi_fu_187_p4_assign_proc : process(sum_xy_0_reg_183, icmp_ln185_reg_988_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, sum_xy_reg_1018, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln185_reg_988_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_sum_xy_0_phi_fu_187_p4 <= sum_xy_reg_1018;
        else 
            ap_phi_mux_sum_xy_0_phi_fu_187_p4 <= sum_xy_0_reg_183;
        end if; 
    end process;


    ap_phi_mux_sum_y_0_phi_fu_175_p4_assign_proc : process(sum_y_0_reg_171, icmp_ln185_reg_988_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, sum_y_reg_1013, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln185_reg_988_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_sum_y_0_phi_fu_175_p4 <= sum_y_reg_1013;
        else 
            ap_phi_mux_sum_y_0_phi_fu_175_p4 <= sum_y_0_reg_171;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(select_ln935_reg_1043, ap_CS_fsm_state76, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            ap_return_0 <= select_ln935_reg_1043;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state76, sub_ln195_fu_963_p2, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            ap_return_1 <= sub_ln195_fu_963_p2;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;

    bitcast_ln739_fu_775_p1 <= p_Result_14_fu_763_p5;
    centroids_2_address0 <= zext_ln187_fu_238_p1(4 - 1 downto 0);

    centroids_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            centroids_2_ce0 <= ap_const_logic_1;
        else 
            centroids_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    centroids_y_1_load_n_fu_261_p4 <= centroids_2_q0(47 downto 16);
    grp_fu_222_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln195_fu_787_p1),32));

    grp_fu_417_ap_start_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_417_ap_start <= ap_const_logic_1;
        else 
            grp_fu_417_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_417_p0 <= (sub_ln731_fu_341_p2 & ap_const_lv16_0);
    grp_fu_980_p0 <= zext_ln187_1_fu_247_p1(16 - 1 downto 0);
    grp_fu_980_p1 <= zext_ln187_1_fu_247_p1(16 - 1 downto 0);
    i_fu_232_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_211_p4) + unsigned(ap_const_lv4_1));
    icmp_ln1075_fu_497_p2 <= "1" when (p_Result_s_fu_475_p4 = ap_const_lv64_0) else "0";
    icmp_ln185_fu_226_p2 <= "1" when (ap_phi_mux_i_0_phi_fu_211_p4 = ap_const_lv4_C) else "0";
    icmp_ln935_fu_447_p2 <= "1" when (grp_fu_417_p2 = ap_const_lv64_0) else "0";
    icmp_ln947_1_fu_595_p2 <= "0" when (p_Result_5_fu_589_p2 = ap_const_lv65_0) else "1";
    icmp_ln947_fu_563_p2 <= "1" when (signed(tmp_34_fu_553_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln954_fu_649_p2 <= "1" when (signed(lsb_index_fu_547_p2) > signed(ap_const_lv32_0)) else "0";
    isNeg_fu_869_p3 <= add_ln339_fu_863_p2(8 downto 8);
    l_fu_533_p3 <= 
        NZeros_fu_527_p2 when (icmp_ln1075_fu_497_p2(0) = '1') else 
        trunc_ln1074_fu_493_p1;
    lsb_index_fu_547_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE8) + signed(sub_ln944_fu_541_p2));
    lshr_ln947_fu_583_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv65_1FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln947_fu_579_p1(31-1 downto 0)))));
    lshr_ln954_fu_665_p2 <= std_logic_vector(shift_right(unsigned(tmp_V_12_fu_467_p3),to_integer(unsigned('0' & zext_ln954_fu_661_p1(31-1 downto 0)))));
    m_1_fu_703_p2 <= std_logic_vector(unsigned(m_fu_695_p3) + unsigned(or_ln_fu_641_p3));
    m_4_fu_709_p4 <= m_1_fu_703_p2(31 downto 1);
    m_5_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_4_fu_709_p4),32));
    m_fu_695_p3 <= 
        trunc_ln954_fu_687_p1 when (icmp_ln954_fu_649_p2(0) = '1') else 
        trunc_ln954_1_fu_691_p1;
    mantissa_V_fu_845_p4 <= ((ap_const_lv1_1 & tmp_V_14_fu_841_p1) & ap_const_lv1_0);
    mul_ln189_fu_277_p0 <= zext_ln187_1_fu_247_p1(16 - 1 downto 0);
    mul_ln189_fu_277_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln189_fu_277_p0) * signed(centroids_y_1_load_n_fu_261_p4))), 32));
    mul_ln195_1_fu_427_p1 <= mul_ln195_1_fu_427_p10(20 - 1 downto 0);
    mul_ln195_1_fu_427_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_x_0_reg_159),42));
    mul_ln195_1_fu_427_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv42_155556) * unsigned(mul_ln195_1_fu_427_p1), 42));
    mul_ln195_fu_799_p1 <= mul_ln195_fu_799_p10(32 - 1 downto 0);
    mul_ln195_fu_799_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_y_0_reg_171),65));
    mul_ln195_fu_799_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv65_155555556) * unsigned(mul_ln195_fu_799_p1), 65));
    mul_ln731_1_fu_381_p0 <= zext_ln731_3_fu_327_p1(20 - 1 downto 0);
    mul_ln731_1_fu_381_p1 <= zext_ln731_3_fu_327_p1(20 - 1 downto 0);
    mul_ln731_1_fu_381_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln731_1_fu_381_p0) * unsigned(mul_ln731_1_fu_381_p1), 40));
    mul_ln731_fu_335_p0 <= mul_ln731_fu_335_p00(32 - 1 downto 0);
    mul_ln731_fu_335_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_y_0_reg_171),48));
    mul_ln731_fu_335_p1 <= mul_ln731_fu_335_p10(20 - 1 downto 0);
    mul_ln731_fu_335_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_x_0_reg_159),48));
    mul_ln731_fu_335_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln731_fu_335_p0) * unsigned(mul_ln731_fu_335_p1), 48));
    or_ln949_fu_635_p2 <= (and_ln949_fu_629_p2 or a_fu_601_p2);
    or_ln_fu_641_p3 <= (ap_const_lv31_0 & or_ln949_fu_635_p2);
    p_Result_12_fu_453_p3 <= grp_fu_417_p2(63 downto 63);
    p_Result_13_fu_507_p3 <= (trunc_ln1081_fu_503_p1 & ap_const_lv63_7FFFFFFFFFFFFFFF);
    p_Result_14_fu_763_p5 <= (tmp_6_fu_755_p3 & m_5_fu_719_p1(22 downto 0));
    p_Result_15_fu_823_p3 <= p_Val2_19_fu_819_p1(31 downto 31);
    p_Result_3_fu_621_p3 <= tmp_V_12_fu_467_p3(to_integer(unsigned(lsb_index_fu_547_p2)) downto to_integer(unsigned(lsb_index_fu_547_p2))) when (to_integer(unsigned(lsb_index_fu_547_p2))>= 0 and to_integer(unsigned(lsb_index_fu_547_p2))<=64) else "-";
    p_Result_5_fu_589_p2 <= (tmp_V_12_fu_467_p3 and lshr_ln947_fu_583_p2);
    p_Result_s_fu_475_p4 <= tmp_V_12_fu_467_p3(64 downto 1);
    p_Val2_19_fu_819_p1 <= grp_fu_218_p2;
    p_Val2_21_fu_955_p3 <= 
        result_V_1_fu_949_p2 when (p_Result_15_fu_823_p3(0) = '1') else 
        p_Val2_s_fu_941_p3;
    p_Val2_s_fu_941_p3 <= 
        zext_ln662_fu_927_p1 when (isNeg_fu_869_p3(0) = '1') else 
        tmp_3_fu_931_p4;
    r_V_2_fu_913_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_fu_855_p1),to_integer(unsigned('0' & zext_ln1287_fu_903_p1(31-1 downto 0)))));
    r_V_fu_907_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_845_p4),to_integer(unsigned('0' & sext_ln1311_2_fu_899_p1(25-1 downto 0)))));
    result_V_1_fu_949_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_s_fu_941_p3));
    select_ln935_fu_779_p3 <= 
        ap_const_lv32_0 when (icmp_ln935_fu_447_p2(0) = '1') else 
        bitcast_ln739_fu_775_p1;
    select_ln964_fu_731_p3 <= 
        ap_const_lv8_7F when (tmp_36_fu_723_p3(0) = '1') else 
        ap_const_lv8_7E;
        sext_ln1311_1_fu_895_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_887_p3),32));

        sext_ln1311_2_fu_899_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_887_p3),25));

        sext_ln1311_fu_883_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_877_p2),9));

        sext_ln195_fu_787_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_38_reg_1038),20));

        sext_ln731_1_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln731_3_fu_371_p2),41));

        sext_ln731_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln731_2_fu_313_p2),48));

    shl_ln731_2_fu_301_p3 <= (sum_xy_0_reg_183 & ap_const_lv2_0);
    shl_ln731_3_fu_347_p3 <= (sum_xx_0_reg_195 & ap_const_lv4_0);
    shl_ln731_4_fu_359_p3 <= (sum_xx_0_reg_195 & ap_const_lv2_0);
    shl_ln954_fu_681_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_12_fu_467_p3),to_integer(unsigned('0' & zext_ln954_1_fu_677_p1(31-1 downto 0)))));
    shl_ln_fu_289_p3 <= (sum_xy_0_reg_183 & ap_const_lv4_0);
    sub_ln1311_fu_877_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_13_fu_831_p4));
    sub_ln195_fu_963_p2 <= std_logic_vector(unsigned(zext_ln195_1_fu_815_p1) - unsigned(p_Val2_21_fu_955_p3));
    sub_ln731_1_fu_391_p2 <= std_logic_vector(signed(sext_ln731_1_fu_377_p1) - signed(zext_ln731_7_fu_387_p1));
    sub_ln731_2_fu_313_p2 <= std_logic_vector(unsigned(zext_ln731_fu_297_p1) - unsigned(zext_ln731_1_fu_309_p1));
    sub_ln731_3_fu_371_p2 <= std_logic_vector(unsigned(zext_ln731_5_fu_355_p1) - unsigned(zext_ln731_6_fu_367_p1));
    sub_ln731_fu_341_p2 <= std_logic_vector(signed(sext_ln731_fu_319_p1) - signed(mul_ln731_fu_335_p2));
    sub_ln944_fu_541_p2 <= std_logic_vector(unsigned(ap_const_lv32_41) - unsigned(l_fu_533_p3));
    sub_ln947_fu_573_p2 <= std_logic_vector(signed(ap_const_lv7_5A) - signed(trunc_ln947_fu_569_p1));
    sub_ln954_fu_671_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_fu_541_p2));
    sub_ln964_fu_743_p2 <= std_logic_vector(unsigned(ap_const_lv8_39) - unsigned(trunc_ln943_fu_739_p1));
    sum_x_fu_255_p2 <= std_logic_vector(unsigned(ap_phi_mux_sum_x_0_phi_fu_163_p4) + unsigned(zext_ln187_2_fu_251_p1));
    sum_xy_fu_283_p2 <= std_logic_vector(unsigned(ap_phi_mux_sum_xy_0_phi_fu_187_p4) + unsigned(mul_ln189_fu_277_p2));
    sum_y_fu_271_p2 <= std_logic_vector(unsigned(ap_phi_mux_sum_y_0_phi_fu_175_p4) + unsigned(centroids_y_1_load_n_fu_261_p4));
    tmp_2_fu_397_p3 <= (sub_ln731_1_fu_391_p2 & ap_const_lv8_0);
    tmp_34_fu_553_p4 <= lsb_index_fu_547_p2(31 downto 1);
    tmp_35_fu_607_p3 <= lsb_index_fu_547_p2(31 downto 31);
    tmp_36_fu_723_p3 <= m_1_fu_703_p2(25 downto 25);
    tmp_37_fu_805_p4 <= mul_ln195_fu_799_p2(64 downto 36);
    tmp_3_fu_931_p4 <= r_V_2_fu_913_p2(55 downto 24);
    tmp_41_fu_919_p3 <= r_V_fu_907_p2(24 downto 24);
    tmp_6_fu_755_p3 <= (p_Result_12_fu_453_p3 & add_ln964_fu_749_p2);
        tmp_V_11_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_417_p2),65));

    tmp_V_12_fu_467_p3 <= 
        tmp_V_fu_461_p2 when (p_Result_12_fu_453_p3(0) = '1') else 
        tmp_V_11_fu_443_p1;
    tmp_V_13_fu_831_p4 <= p_Val2_19_fu_819_p1(30 downto 23);
    tmp_V_14_fu_841_p1 <= p_Val2_19_fu_819_p1(23 - 1 downto 0);
    tmp_V_fu_461_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(tmp_V_11_fu_443_p1));
    
    tmp_fu_515_p3_proc : process(p_Result_13_fu_507_p3)
    begin
        tmp_fu_515_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 64 - 1 downto 0 loop
            if p_Result_13_fu_507_p3(i) = '1' then
                tmp_fu_515_p3 <= std_logic_vector(to_unsigned(64-1-i,64));
                exit;
            end if;
        end loop;
    end process;

    
    tmp_s_fu_485_p3_proc : process(p_Result_s_fu_475_p4)
    begin
        tmp_s_fu_485_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 64 - 1 downto 0 loop
            if p_Result_s_fu_475_p4(i) = '1' then
                tmp_s_fu_485_p3 <= std_logic_vector(to_unsigned(64-1-i,64));
                exit;
            end if;
        end loop;
    end process;

    trunc_ln1074_fu_493_p1 <= tmp_s_fu_485_p3(32 - 1 downto 0);
    trunc_ln1081_fu_503_p1 <= tmp_V_12_fu_467_p3(1 - 1 downto 0);
    trunc_ln1083_fu_523_p1 <= tmp_fu_515_p3(32 - 1 downto 0);
    trunc_ln187_fu_243_p1 <= centroids_2_q0(16 - 1 downto 0);
    trunc_ln943_fu_739_p1 <= l_fu_533_p3(8 - 1 downto 0);
    trunc_ln947_fu_569_p1 <= sub_ln944_fu_541_p2(7 - 1 downto 0);
    trunc_ln954_1_fu_691_p1 <= shl_ln954_fu_681_p2(32 - 1 downto 0);
    trunc_ln954_fu_687_p1 <= lshr_ln954_fu_665_p2(32 - 1 downto 0);
    ush_fu_887_p3 <= 
        sext_ln1311_fu_883_p1 when (isNeg_fu_869_p3(0) = '1') else 
        add_ln339_fu_863_p2;
    xor_ln949_fu_615_p2 <= (tmp_35_fu_607_p3 xor ap_const_lv1_1);
    zext_ln1287_fu_903_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_1_fu_895_p1),79));
    zext_ln187_1_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln187_fu_243_p1),32));
    zext_ln187_2_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln187_fu_243_p1),20));
    zext_ln187_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_0_phi_fu_211_p4),64));
    zext_ln195_1_fu_815_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_fu_805_p4),32));
    zext_ln339_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_13_fu_831_p4),9));
    zext_ln662_fu_927_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_fu_919_p3),32));
    zext_ln682_fu_855_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_845_p4),79));
    zext_ln731_1_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln731_2_fu_301_p3),37));
    zext_ln731_3_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_x_0_reg_159),40));
    zext_ln731_5_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln731_3_fu_347_p3),37));
    zext_ln731_6_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln731_4_fu_359_p3),37));
    zext_ln731_7_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln731_1_fu_381_p2),41));
    zext_ln731_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_289_p3),37));
    zext_ln947_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_fu_573_p2),65));
    zext_ln954_1_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln954_fu_671_p2),65));
    zext_ln954_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln954_fu_655_p2),65));
end behav;
