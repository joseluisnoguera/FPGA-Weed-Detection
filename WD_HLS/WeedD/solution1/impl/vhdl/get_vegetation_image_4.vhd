-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity get_vegetation_image_4 is
port (
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    img_in_cols_dout : IN STD_LOGIC_VECTOR (9 downto 0);
    img_in_cols_empty_n : IN STD_LOGIC;
    img_in_cols_read : OUT STD_LOGIC;
    img_in_data_V_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    img_in_data_V_empty_n : IN STD_LOGIC;
    img_in_data_V_read : OUT STD_LOGIC;
    img_out_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_out_data_V_full_n : IN STD_LOGIC;
    img_out_data_V_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of get_vegetation_image_4 is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal internal_ap_ready : STD_LOGIC;
    signal get_vegetation_image_113_U0_ap_start : STD_LOGIC;
    signal get_vegetation_image_113_U0_ap_done : STD_LOGIC;
    signal get_vegetation_image_113_U0_ap_continue : STD_LOGIC;
    signal get_vegetation_image_113_U0_ap_idle : STD_LOGIC;
    signal get_vegetation_image_113_U0_ap_ready : STD_LOGIC;
    signal get_vegetation_image_113_U0_img_in_0_rows0 : STD_LOGIC_VECTOR (8 downto 0);
    signal get_vegetation_image_113_U0_img_in_0_rows0_ap_vld : STD_LOGIC;
    signal get_vegetation_image_113_U0_img_in_0_cols0 : STD_LOGIC_VECTOR (9 downto 0);
    signal get_vegetation_image_113_U0_img_in_0_cols0_ap_vld : STD_LOGIC;
    signal get_vegetation_image_113_U0_img_in_cols_read : STD_LOGIC;
    signal get_vegetation_image_113_U0_img_in_cols_out_din : STD_LOGIC_VECTOR (9 downto 0);
    signal get_vegetation_image_113_U0_img_in_cols_out_write : STD_LOGIC;
    signal ap_channel_done_img_in_0_cols_channe : STD_LOGIC;
    signal img_in_0_cols_channe_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_img_in_0_cols_channe : STD_LOGIC := '0';
    signal ap_sync_channel_write_img_in_0_cols_channe : STD_LOGIC;
    signal ap_channel_done_img_in_0_rows_channe : STD_LOGIC;
    signal img_in_0_rows_channe_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_img_in_0_rows_channe : STD_LOGIC := '0';
    signal ap_sync_channel_write_img_in_0_rows_channe : STD_LOGIC;
    signal duplicateMat636770_U0_ap_start : STD_LOGIC;
    signal duplicateMat636770_U0_start_full_n : STD_LOGIC;
    signal duplicateMat636770_U0_start_out : STD_LOGIC;
    signal duplicateMat636770_U0_start_write : STD_LOGIC;
    signal duplicateMat636770_U0_p_src_cols_read : STD_LOGIC;
    signal duplicateMat636770_U0_p_src_data_V_read : STD_LOGIC;
    signal duplicateMat636770_U0_p_dst1_data_V_din : STD_LOGIC_VECTOR (23 downto 0);
    signal duplicateMat636770_U0_p_dst1_data_V_write : STD_LOGIC;
    signal duplicateMat636770_U0_p_dst2_data_V_din : STD_LOGIC_VECTOR (23 downto 0);
    signal duplicateMat636770_U0_p_dst2_data_V_write : STD_LOGIC;
    signal duplicateMat636770_U0_ap_done : STD_LOGIC;
    signal duplicateMat636770_U0_ap_ready : STD_LOGIC;
    signal duplicateMat636770_U0_ap_idle : STD_LOGIC;
    signal duplicateMat636770_U0_ap_continue : STD_LOGIC;
    signal duplicateMat_U0_p_src_data_V_read : STD_LOGIC;
    signal duplicateMat_U0_p_dst1_data_V_din : STD_LOGIC_VECTOR (23 downto 0);
    signal duplicateMat_U0_p_dst1_data_V_write : STD_LOGIC;
    signal duplicateMat_U0_p_dst2_data_V_din : STD_LOGIC_VECTOR (23 downto 0);
    signal duplicateMat_U0_p_dst2_data_V_write : STD_LOGIC;
    signal duplicateMat_U0_ap_start : STD_LOGIC;
    signal duplicateMat_U0_ap_done : STD_LOGIC;
    signal duplicateMat_U0_ap_ready : STD_LOGIC;
    signal duplicateMat_U0_ap_idle : STD_LOGIC;
    signal duplicateMat_U0_ap_continue : STD_LOGIC;
    signal extract_channels_U0_img_in_0_data_V_read : STD_LOGIC;
    signal extract_channels_U0_img_in_1_data_V_read : STD_LOGIC;
    signal extract_channels_U0_img_in_2_data_V_read : STD_LOGIC;
    signal extract_channels_U0_r_channel_data_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal extract_channels_U0_r_channel_data_V_write : STD_LOGIC;
    signal extract_channels_U0_g_channel_data_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal extract_channels_U0_g_channel_data_V_write : STD_LOGIC;
    signal extract_channels_U0_b_channel_data_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal extract_channels_U0_b_channel_data_V_write : STD_LOGIC;
    signal extract_channels_U0_ap_start : STD_LOGIC;
    signal extract_channels_U0_ap_done : STD_LOGIC;
    signal extract_channels_U0_ap_ready : STD_LOGIC;
    signal extract_channels_U0_ap_idle : STD_LOGIC;
    signal extract_channels_U0_ap_continue : STD_LOGIC;
    signal get_max_from_channel_U0_r_channel_data_V_read : STD_LOGIC;
    signal get_max_from_channel_U0_g_channel_data_V_read : STD_LOGIC;
    signal get_max_from_channel_U0_b_channel_data_V_read : STD_LOGIC;
    signal get_max_from_channel_U0_max_r_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal get_max_from_channel_U0_max_r_out_write : STD_LOGIC;
    signal get_max_from_channel_U0_max_g_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal get_max_from_channel_U0_max_g_out_write : STD_LOGIC;
    signal get_max_from_channel_U0_max_b_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal get_max_from_channel_U0_max_b_out_write : STD_LOGIC;
    signal get_max_from_channel_U0_ap_start : STD_LOGIC;
    signal get_max_from_channel_U0_ap_done : STD_LOGIC;
    signal get_max_from_channel_U0_ap_ready : STD_LOGIC;
    signal get_max_from_channel_U0_ap_idle : STD_LOGIC;
    signal get_max_from_channel_U0_ap_continue : STD_LOGIC;
    signal ap_sync_reg_get_max_from_channel_U0_ap_start : STD_LOGIC := '0';
    signal get_vegetation_image_U0_ap_start : STD_LOGIC;
    signal get_vegetation_image_U0_ap_done : STD_LOGIC;
    signal get_vegetation_image_U0_ap_continue : STD_LOGIC;
    signal get_vegetation_image_U0_ap_idle : STD_LOGIC;
    signal get_vegetation_image_U0_ap_ready : STD_LOGIC;
    signal get_vegetation_image_U0_max_r_read : STD_LOGIC;
    signal get_vegetation_image_U0_max_g_read : STD_LOGIC;
    signal get_vegetation_image_U0_max_b_read : STD_LOGIC;
    signal get_vegetation_image_U0_max_r_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal get_vegetation_image_U0_max_r_out_write : STD_LOGIC;
    signal get_vegetation_image_U0_max_g_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal get_vegetation_image_U0_max_g_out_write : STD_LOGIC;
    signal get_vegetation_image_U0_max_b_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal get_vegetation_image_U0_max_b_out_write : STD_LOGIC;
    signal ap_sync_reg_get_vegetation_image_U0_ap_start : STD_LOGIC := '0';
    signal get_exg_image_U0_ap_start : STD_LOGIC;
    signal get_exg_image_U0_ap_done : STD_LOGIC;
    signal get_exg_image_U0_ap_continue : STD_LOGIC;
    signal get_exg_image_U0_ap_idle : STD_LOGIC;
    signal get_exg_image_U0_ap_ready : STD_LOGIC;
    signal get_exg_image_U0_r_channel_data_V_read : STD_LOGIC;
    signal get_exg_image_U0_g_channel_data_V_read : STD_LOGIC;
    signal get_exg_image_U0_b_channel_data_V_read : STD_LOGIC;
    signal get_exg_image_U0_max_r_read : STD_LOGIC;
    signal get_exg_image_U0_max_g_read : STD_LOGIC;
    signal get_exg_image_U0_max_b_read : STD_LOGIC;
    signal get_exg_image_U0_veg_img_data_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal get_exg_image_U0_veg_img_data_V_write : STD_LOGIC;
    signal get_exg_image_U0_min_value_V_out_din : STD_LOGIC_VECTOR (27 downto 0);
    signal get_exg_image_U0_min_value_V_out_write : STD_LOGIC;
    signal get_exg_image_U0_max_value_V_out_din : STD_LOGIC_VECTOR (28 downto 0);
    signal get_exg_image_U0_max_value_V_out_write : STD_LOGIC;
    signal ap_sync_reg_get_exg_image_U0_ap_start : STD_LOGIC := '0';
    signal get_vegetation_image_3_U0_ap_start : STD_LOGIC;
    signal get_vegetation_image_3_U0_ap_done : STD_LOGIC;
    signal get_vegetation_image_3_U0_ap_continue : STD_LOGIC;
    signal get_vegetation_image_3_U0_ap_idle : STD_LOGIC;
    signal get_vegetation_image_3_U0_ap_ready : STD_LOGIC;
    signal get_vegetation_image_3_U0_max_value_V_read : STD_LOGIC;
    signal get_vegetation_image_3_U0_ap_return : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_sync_reg_get_vegetation_image_3_U0_ap_start : STD_LOGIC := '0';
    signal ap_channel_done_extLd_cast_loc_chann : STD_LOGIC;
    signal extLd_cast_loc_chann_full_n : STD_LOGIC;
    signal get_vegetation_image_2_U0_ap_start : STD_LOGIC;
    signal get_vegetation_image_2_U0_ap_done : STD_LOGIC;
    signal get_vegetation_image_2_U0_ap_continue : STD_LOGIC;
    signal get_vegetation_image_2_U0_ap_idle : STD_LOGIC;
    signal get_vegetation_image_2_U0_ap_ready : STD_LOGIC;
    signal get_vegetation_image_2_U0_min_value_V_read : STD_LOGIC;
    signal get_vegetation_image_2_U0_min_value_V_out_din : STD_LOGIC_VECTOR (27 downto 0);
    signal get_vegetation_image_2_U0_min_value_V_out_write : STD_LOGIC;
    signal get_vegetation_image_2_U0_ap_return : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_channel_done_sub_ln703_cast_loc_c : STD_LOGIC;
    signal sub_ln703_cast_loc_c_full_n : STD_LOGIC;
    signal convert_fp_to_8b771_U0_ap_start : STD_LOGIC;
    signal convert_fp_to_8b771_U0_ap_done : STD_LOGIC;
    signal convert_fp_to_8b771_U0_ap_continue : STD_LOGIC;
    signal convert_fp_to_8b771_U0_ap_idle : STD_LOGIC;
    signal convert_fp_to_8b771_U0_ap_ready : STD_LOGIC;
    signal convert_fp_to_8b771_U0_min_value_V_c17_read : STD_LOGIC;
    signal convert_fp_to_8b771_U0_veg_temp_data_V_read : STD_LOGIC;
    signal convert_fp_to_8b771_U0_img_out_data_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal convert_fp_to_8b771_U0_img_out_data_V_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal img_in_0_rows_channe_dout : STD_LOGIC_VECTOR (8 downto 0);
    signal img_in_0_rows_channe_empty_n : STD_LOGIC;
    signal img_in_0_cols_channe_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal img_in_0_cols_channe_empty_n : STD_LOGIC;
    signal img_in_cols_c_i_full_n : STD_LOGIC;
    signal img_in_cols_c_i_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal img_in_cols_c_i_empty_n : STD_LOGIC;
    signal img_in_0_data_V_full_n : STD_LOGIC;
    signal img_in_0_data_V_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal img_in_0_data_V_empty_n : STD_LOGIC;
    signal img_in_1_data_V_full_n : STD_LOGIC;
    signal img_in_1_data_V_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal img_in_1_data_V_empty_n : STD_LOGIC;
    signal img_in_2_data_V_full_n : STD_LOGIC;
    signal img_in_2_data_V_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal img_in_2_data_V_empty_n : STD_LOGIC;
    signal img_in_3_data_V_full_n : STD_LOGIC;
    signal img_in_3_data_V_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal img_in_3_data_V_empty_n : STD_LOGIC;
    signal r_channel_data_V_full_n : STD_LOGIC;
    signal r_channel_data_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal r_channel_data_V_empty_n : STD_LOGIC;
    signal extract_channels_U0_r_channel_data_V_empty_n : STD_LOGIC;
    signal extract_channels_U0_r_channel_data_V_read : STD_LOGIC;
    signal extract_channels_U0_r_channel_data_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal g_channel_data_V_full_n : STD_LOGIC;
    signal g_channel_data_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal g_channel_data_V_empty_n : STD_LOGIC;
    signal extract_channels_U0_g_channel_data_V_empty_n : STD_LOGIC;
    signal extract_channels_U0_g_channel_data_V_read : STD_LOGIC;
    signal extract_channels_U0_g_channel_data_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal b_channel_data_V_full_n : STD_LOGIC;
    signal b_channel_data_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal b_channel_data_V_empty_n : STD_LOGIC;
    signal extract_channels_U0_b_channel_data_V_empty_n : STD_LOGIC;
    signal extract_channels_U0_b_channel_data_V_read : STD_LOGIC;
    signal extract_channels_U0_b_channel_data_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal max_r_c_i_full_n : STD_LOGIC;
    signal max_r_c_i_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal max_r_c_i_empty_n : STD_LOGIC;
    signal max_g_c_i_full_n : STD_LOGIC;
    signal max_g_c_i_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal max_g_c_i_empty_n : STD_LOGIC;
    signal max_b_c_i_full_n : STD_LOGIC;
    signal max_b_c_i_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal max_b_c_i_empty_n : STD_LOGIC;
    signal max_r_c14_i_full_n : STD_LOGIC;
    signal max_r_c14_i_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal max_r_c14_i_empty_n : STD_LOGIC;
    signal max_g_c15_i_full_n : STD_LOGIC;
    signal max_g_c15_i_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal max_g_c15_i_empty_n : STD_LOGIC;
    signal max_b_c16_i_full_n : STD_LOGIC;
    signal max_b_c16_i_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal max_b_c16_i_empty_n : STD_LOGIC;
    signal veg_temp_data_V_full_n : STD_LOGIC;
    signal veg_temp_data_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal veg_temp_data_V_empty_n : STD_LOGIC;
    signal min_value_V_c_i_full_n : STD_LOGIC;
    signal min_value_V_c_i_dout : STD_LOGIC_VECTOR (27 downto 0);
    signal min_value_V_c_i_empty_n : STD_LOGIC;
    signal max_value_V_c_i_full_n : STD_LOGIC;
    signal max_value_V_c_i_dout : STD_LOGIC_VECTOR (28 downto 0);
    signal max_value_V_c_i_empty_n : STD_LOGIC;
    signal extLd_cast_loc_chann_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal extLd_cast_loc_chann_empty_n : STD_LOGIC;
    signal min_value_V_c17_i_full_n : STD_LOGIC;
    signal min_value_V_c17_i_dout : STD_LOGIC_VECTOR (27 downto 0);
    signal min_value_V_c17_i_empty_n : STD_LOGIC;
    signal sub_ln703_cast_loc_c_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln703_cast_loc_c_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_get_vegetation_image_113_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_get_vegetation_image_113_U0_ap_ready : STD_LOGIC;
    signal get_vegetation_image_113_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_duplicateMat636770_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_duplicateMat636770_U0_ap_ready : STD_LOGIC;
    signal duplicateMat636770_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal get_vegetation_image_113_U0_start_full_n : STD_LOGIC;
    signal get_vegetation_image_113_U0_start_write : STD_LOGIC;
    signal start_for_duplicateMat_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_duplicateMat_U0_full_n : STD_LOGIC;
    signal start_for_duplicateMat_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_duplicateMat_U0_empty_n : STD_LOGIC;
    signal start_for_extract_channels_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_extract_channels_U0_full_n : STD_LOGIC;
    signal start_for_extract_channels_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_extract_channels_U0_empty_n : STD_LOGIC;
    signal duplicateMat_U0_start_full_n : STD_LOGIC;
    signal duplicateMat_U0_start_write : STD_LOGIC;
    signal extract_channels_U0_start_full_n : STD_LOGIC;
    signal extract_channels_U0_start_write : STD_LOGIC;
    signal get_max_from_channel_U0_start_full_n : STD_LOGIC;
    signal get_max_from_channel_U0_start_write : STD_LOGIC;
    signal get_vegetation_image_U0_start_full_n : STD_LOGIC;
    signal get_vegetation_image_U0_start_write : STD_LOGIC;
    signal get_exg_image_U0_start_full_n : STD_LOGIC;
    signal get_exg_image_U0_start_write : STD_LOGIC;
    signal get_vegetation_image_3_U0_start_full_n : STD_LOGIC;
    signal get_vegetation_image_3_U0_start_write : STD_LOGIC;
    signal get_vegetation_image_2_U0_start_full_n : STD_LOGIC;
    signal get_vegetation_image_2_U0_start_write : STD_LOGIC;
    signal convert_fp_to_8b771_U0_start_full_n : STD_LOGIC;
    signal convert_fp_to_8b771_U0_start_write : STD_LOGIC;

    component get_vegetation_image_113 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_in_0_rows0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        img_in_0_rows0_ap_vld : OUT STD_LOGIC;
        img_in_0_cols0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        img_in_0_cols0_ap_vld : OUT STD_LOGIC;
        img_in_cols_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        img_in_cols_empty_n : IN STD_LOGIC;
        img_in_cols_read : OUT STD_LOGIC;
        img_in_cols_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        img_in_cols_out_full_n : IN STD_LOGIC;
        img_in_cols_out_write : OUT STD_LOGIC );
    end component;


    component duplicateMat636770 IS
    port (
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_src_cols_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        p_src_cols_empty_n : IN STD_LOGIC;
        p_src_cols_read : OUT STD_LOGIC;
        p_src_data_V_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        p_src_data_V_empty_n : IN STD_LOGIC;
        p_src_data_V_read : OUT STD_LOGIC;
        p_dst1_rows : IN STD_LOGIC_VECTOR (8 downto 0);
        p_dst1_cols : IN STD_LOGIC_VECTOR (9 downto 0);
        p_dst1_data_V_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        p_dst1_data_V_full_n : IN STD_LOGIC;
        p_dst1_data_V_write : OUT STD_LOGIC;
        p_dst2_data_V_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        p_dst2_data_V_full_n : IN STD_LOGIC;
        p_dst2_data_V_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        p_dst1_rows_ap_vld : IN STD_LOGIC;
        p_dst1_cols_ap_vld : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component duplicateMat IS
    port (
        p_src_data_V_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        p_src_data_V_empty_n : IN STD_LOGIC;
        p_src_data_V_read : OUT STD_LOGIC;
        p_dst1_data_V_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        p_dst1_data_V_full_n : IN STD_LOGIC;
        p_dst1_data_V_write : OUT STD_LOGIC;
        p_dst2_data_V_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        p_dst2_data_V_full_n : IN STD_LOGIC;
        p_dst2_data_V_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component extract_channels IS
    port (
        img_in_0_data_V_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        img_in_0_data_V_empty_n : IN STD_LOGIC;
        img_in_0_data_V_read : OUT STD_LOGIC;
        img_in_1_data_V_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        img_in_1_data_V_empty_n : IN STD_LOGIC;
        img_in_1_data_V_read : OUT STD_LOGIC;
        img_in_2_data_V_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        img_in_2_data_V_empty_n : IN STD_LOGIC;
        img_in_2_data_V_read : OUT STD_LOGIC;
        r_channel_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        r_channel_data_V_full_n : IN STD_LOGIC;
        r_channel_data_V_write : OUT STD_LOGIC;
        g_channel_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        g_channel_data_V_full_n : IN STD_LOGIC;
        g_channel_data_V_write : OUT STD_LOGIC;
        b_channel_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        b_channel_data_V_full_n : IN STD_LOGIC;
        b_channel_data_V_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component get_max_from_channel IS
    port (
        r_channel_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        r_channel_data_V_empty_n : IN STD_LOGIC;
        r_channel_data_V_read : OUT STD_LOGIC;
        g_channel_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        g_channel_data_V_empty_n : IN STD_LOGIC;
        g_channel_data_V_read : OUT STD_LOGIC;
        b_channel_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        b_channel_data_V_empty_n : IN STD_LOGIC;
        b_channel_data_V_read : OUT STD_LOGIC;
        max_r_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        max_r_out_full_n : IN STD_LOGIC;
        max_r_out_write : OUT STD_LOGIC;
        max_g_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        max_g_out_full_n : IN STD_LOGIC;
        max_g_out_write : OUT STD_LOGIC;
        max_b_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        max_b_out_full_n : IN STD_LOGIC;
        max_b_out_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component get_vegetation_image IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        max_r_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        max_r_empty_n : IN STD_LOGIC;
        max_r_read : OUT STD_LOGIC;
        max_g_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        max_g_empty_n : IN STD_LOGIC;
        max_g_read : OUT STD_LOGIC;
        max_b_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        max_b_empty_n : IN STD_LOGIC;
        max_b_read : OUT STD_LOGIC;
        max_r_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        max_r_out_full_n : IN STD_LOGIC;
        max_r_out_write : OUT STD_LOGIC;
        max_g_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        max_g_out_full_n : IN STD_LOGIC;
        max_g_out_write : OUT STD_LOGIC;
        max_b_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        max_b_out_full_n : IN STD_LOGIC;
        max_b_out_write : OUT STD_LOGIC );
    end component;


    component get_exg_image IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_channel_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        r_channel_data_V_empty_n : IN STD_LOGIC;
        r_channel_data_V_read : OUT STD_LOGIC;
        g_channel_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        g_channel_data_V_empty_n : IN STD_LOGIC;
        g_channel_data_V_read : OUT STD_LOGIC;
        b_channel_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        b_channel_data_V_empty_n : IN STD_LOGIC;
        b_channel_data_V_read : OUT STD_LOGIC;
        max_r_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        max_r_empty_n : IN STD_LOGIC;
        max_r_read : OUT STD_LOGIC;
        max_g_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        max_g_empty_n : IN STD_LOGIC;
        max_g_read : OUT STD_LOGIC;
        max_b_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        max_b_empty_n : IN STD_LOGIC;
        max_b_read : OUT STD_LOGIC;
        veg_img_data_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        veg_img_data_V_full_n : IN STD_LOGIC;
        veg_img_data_V_write : OUT STD_LOGIC;
        min_value_V_out_din : OUT STD_LOGIC_VECTOR (27 downto 0);
        min_value_V_out_full_n : IN STD_LOGIC;
        min_value_V_out_write : OUT STD_LOGIC;
        max_value_V_out_din : OUT STD_LOGIC_VECTOR (28 downto 0);
        max_value_V_out_full_n : IN STD_LOGIC;
        max_value_V_out_write : OUT STD_LOGIC );
    end component;


    component get_vegetation_image_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        max_value_V_dout : IN STD_LOGIC_VECTOR (28 downto 0);
        max_value_V_empty_n : IN STD_LOGIC;
        max_value_V_read : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component get_vegetation_image_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        min_value_V_dout : IN STD_LOGIC_VECTOR (27 downto 0);
        min_value_V_empty_n : IN STD_LOGIC;
        min_value_V_read : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (23 downto 0);
        min_value_V_out_din : OUT STD_LOGIC_VECTOR (27 downto 0);
        min_value_V_out_full_n : IN STD_LOGIC;
        min_value_V_out_write : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component convert_fp_to_8b771 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        min_value_V_c17_dout : IN STD_LOGIC_VECTOR (27 downto 0);
        min_value_V_c17_empty_n : IN STD_LOGIC;
        min_value_V_c17_read : OUT STD_LOGIC;
        sub_ln703_cast_loc_c : IN STD_LOGIC_VECTOR (23 downto 0);
        veg_temp_data_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        veg_temp_data_V_empty_n : IN STD_LOGIC;
        veg_temp_data_V_read : OUT STD_LOGIC;
        img_out_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_out_data_V_full_n : IN STD_LOGIC;
        img_out_data_V_write : OUT STD_LOGIC );
    end component;


    component fifo_w9_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (8 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (8 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w10_d2_A_x0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (9 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w24_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (23 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (23 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w28_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (27 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (27 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w29_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (28 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (28 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w24_d2_A_x1 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (23 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (23 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w28_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (27 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (27 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_duplicasc4 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_extracttde IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    get_vegetation_image_113_U0 : component get_vegetation_image_113
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => get_vegetation_image_113_U0_ap_start,
        ap_done => get_vegetation_image_113_U0_ap_done,
        ap_continue => get_vegetation_image_113_U0_ap_continue,
        ap_idle => get_vegetation_image_113_U0_ap_idle,
        ap_ready => get_vegetation_image_113_U0_ap_ready,
        img_in_0_rows0 => get_vegetation_image_113_U0_img_in_0_rows0,
        img_in_0_rows0_ap_vld => get_vegetation_image_113_U0_img_in_0_rows0_ap_vld,
        img_in_0_cols0 => get_vegetation_image_113_U0_img_in_0_cols0,
        img_in_0_cols0_ap_vld => get_vegetation_image_113_U0_img_in_0_cols0_ap_vld,
        img_in_cols_dout => img_in_cols_dout,
        img_in_cols_empty_n => img_in_cols_empty_n,
        img_in_cols_read => get_vegetation_image_113_U0_img_in_cols_read,
        img_in_cols_out_din => get_vegetation_image_113_U0_img_in_cols_out_din,
        img_in_cols_out_full_n => img_in_cols_c_i_full_n,
        img_in_cols_out_write => get_vegetation_image_113_U0_img_in_cols_out_write);

    duplicateMat636770_U0 : component duplicateMat636770
    port map (
        ap_start => duplicateMat636770_U0_ap_start,
        start_full_n => duplicateMat636770_U0_start_full_n,
        start_out => duplicateMat636770_U0_start_out,
        start_write => duplicateMat636770_U0_start_write,
        p_src_cols_dout => img_in_cols_c_i_dout,
        p_src_cols_empty_n => img_in_cols_c_i_empty_n,
        p_src_cols_read => duplicateMat636770_U0_p_src_cols_read,
        p_src_data_V_dout => img_in_data_V_dout,
        p_src_data_V_empty_n => img_in_data_V_empty_n,
        p_src_data_V_read => duplicateMat636770_U0_p_src_data_V_read,
        p_dst1_rows => img_in_0_rows_channe_dout,
        p_dst1_cols => img_in_0_cols_channe_dout,
        p_dst1_data_V_din => duplicateMat636770_U0_p_dst1_data_V_din,
        p_dst1_data_V_full_n => img_in_0_data_V_full_n,
        p_dst1_data_V_write => duplicateMat636770_U0_p_dst1_data_V_write,
        p_dst2_data_V_din => duplicateMat636770_U0_p_dst2_data_V_din,
        p_dst2_data_V_full_n => img_in_1_data_V_full_n,
        p_dst2_data_V_write => duplicateMat636770_U0_p_dst2_data_V_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        p_dst1_rows_ap_vld => ap_const_logic_0,
        p_dst1_cols_ap_vld => ap_const_logic_0,
        ap_done => duplicateMat636770_U0_ap_done,
        ap_ready => duplicateMat636770_U0_ap_ready,
        ap_idle => duplicateMat636770_U0_ap_idle,
        ap_continue => duplicateMat636770_U0_ap_continue);

    duplicateMat_U0 : component duplicateMat
    port map (
        p_src_data_V_dout => img_in_0_data_V_dout,
        p_src_data_V_empty_n => img_in_0_data_V_empty_n,
        p_src_data_V_read => duplicateMat_U0_p_src_data_V_read,
        p_dst1_data_V_din => duplicateMat_U0_p_dst1_data_V_din,
        p_dst1_data_V_full_n => img_in_2_data_V_full_n,
        p_dst1_data_V_write => duplicateMat_U0_p_dst1_data_V_write,
        p_dst2_data_V_din => duplicateMat_U0_p_dst2_data_V_din,
        p_dst2_data_V_full_n => img_in_3_data_V_full_n,
        p_dst2_data_V_write => duplicateMat_U0_p_dst2_data_V_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => duplicateMat_U0_ap_start,
        ap_done => duplicateMat_U0_ap_done,
        ap_ready => duplicateMat_U0_ap_ready,
        ap_idle => duplicateMat_U0_ap_idle,
        ap_continue => duplicateMat_U0_ap_continue);

    extract_channels_U0 : component extract_channels
    port map (
        img_in_0_data_V_dout => img_in_1_data_V_dout,
        img_in_0_data_V_empty_n => img_in_1_data_V_empty_n,
        img_in_0_data_V_read => extract_channels_U0_img_in_0_data_V_read,
        img_in_1_data_V_dout => img_in_2_data_V_dout,
        img_in_1_data_V_empty_n => img_in_2_data_V_empty_n,
        img_in_1_data_V_read => extract_channels_U0_img_in_1_data_V_read,
        img_in_2_data_V_dout => img_in_3_data_V_dout,
        img_in_2_data_V_empty_n => img_in_3_data_V_empty_n,
        img_in_2_data_V_read => extract_channels_U0_img_in_2_data_V_read,
        r_channel_data_V_din => extract_channels_U0_r_channel_data_V_din,
        r_channel_data_V_full_n => r_channel_data_V_full_n,
        r_channel_data_V_write => extract_channels_U0_r_channel_data_V_write,
        g_channel_data_V_din => extract_channels_U0_g_channel_data_V_din,
        g_channel_data_V_full_n => g_channel_data_V_full_n,
        g_channel_data_V_write => extract_channels_U0_g_channel_data_V_write,
        b_channel_data_V_din => extract_channels_U0_b_channel_data_V_din,
        b_channel_data_V_full_n => b_channel_data_V_full_n,
        b_channel_data_V_write => extract_channels_U0_b_channel_data_V_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => extract_channels_U0_ap_start,
        ap_done => extract_channels_U0_ap_done,
        ap_ready => extract_channels_U0_ap_ready,
        ap_idle => extract_channels_U0_ap_idle,
        ap_continue => extract_channels_U0_ap_continue);

    get_max_from_channel_U0 : component get_max_from_channel
    port map (
        r_channel_data_V_dout => ap_const_lv8_0,
        r_channel_data_V_empty_n => ap_const_logic_1,
        r_channel_data_V_read => get_max_from_channel_U0_r_channel_data_V_read,
        g_channel_data_V_dout => ap_const_lv8_0,
        g_channel_data_V_empty_n => ap_const_logic_1,
        g_channel_data_V_read => get_max_from_channel_U0_g_channel_data_V_read,
        b_channel_data_V_dout => ap_const_lv8_0,
        b_channel_data_V_empty_n => ap_const_logic_1,
        b_channel_data_V_read => get_max_from_channel_U0_b_channel_data_V_read,
        max_r_out_din => get_max_from_channel_U0_max_r_out_din,
        max_r_out_full_n => max_r_c_i_full_n,
        max_r_out_write => get_max_from_channel_U0_max_r_out_write,
        max_g_out_din => get_max_from_channel_U0_max_g_out_din,
        max_g_out_full_n => max_g_c_i_full_n,
        max_g_out_write => get_max_from_channel_U0_max_g_out_write,
        max_b_out_din => get_max_from_channel_U0_max_b_out_din,
        max_b_out_full_n => max_b_c_i_full_n,
        max_b_out_write => get_max_from_channel_U0_max_b_out_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => get_max_from_channel_U0_ap_start,
        ap_done => get_max_from_channel_U0_ap_done,
        ap_ready => get_max_from_channel_U0_ap_ready,
        ap_idle => get_max_from_channel_U0_ap_idle,
        ap_continue => get_max_from_channel_U0_ap_continue);

    get_vegetation_image_U0 : component get_vegetation_image
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => get_vegetation_image_U0_ap_start,
        ap_done => get_vegetation_image_U0_ap_done,
        ap_continue => get_vegetation_image_U0_ap_continue,
        ap_idle => get_vegetation_image_U0_ap_idle,
        ap_ready => get_vegetation_image_U0_ap_ready,
        max_r_dout => max_r_c_i_dout,
        max_r_empty_n => max_r_c_i_empty_n,
        max_r_read => get_vegetation_image_U0_max_r_read,
        max_g_dout => max_g_c_i_dout,
        max_g_empty_n => max_g_c_i_empty_n,
        max_g_read => get_vegetation_image_U0_max_g_read,
        max_b_dout => max_b_c_i_dout,
        max_b_empty_n => max_b_c_i_empty_n,
        max_b_read => get_vegetation_image_U0_max_b_read,
        max_r_out_din => get_vegetation_image_U0_max_r_out_din,
        max_r_out_full_n => max_r_c14_i_full_n,
        max_r_out_write => get_vegetation_image_U0_max_r_out_write,
        max_g_out_din => get_vegetation_image_U0_max_g_out_din,
        max_g_out_full_n => max_g_c15_i_full_n,
        max_g_out_write => get_vegetation_image_U0_max_g_out_write,
        max_b_out_din => get_vegetation_image_U0_max_b_out_din,
        max_b_out_full_n => max_b_c16_i_full_n,
        max_b_out_write => get_vegetation_image_U0_max_b_out_write);

    get_exg_image_U0 : component get_exg_image
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => get_exg_image_U0_ap_start,
        ap_done => get_exg_image_U0_ap_done,
        ap_continue => get_exg_image_U0_ap_continue,
        ap_idle => get_exg_image_U0_ap_idle,
        ap_ready => get_exg_image_U0_ap_ready,
        r_channel_data_V_dout => ap_const_lv8_0,
        r_channel_data_V_empty_n => ap_const_logic_1,
        r_channel_data_V_read => get_exg_image_U0_r_channel_data_V_read,
        g_channel_data_V_dout => ap_const_lv8_0,
        g_channel_data_V_empty_n => ap_const_logic_1,
        g_channel_data_V_read => get_exg_image_U0_g_channel_data_V_read,
        b_channel_data_V_dout => ap_const_lv8_0,
        b_channel_data_V_empty_n => ap_const_logic_1,
        b_channel_data_V_read => get_exg_image_U0_b_channel_data_V_read,
        max_r_dout => max_r_c14_i_dout,
        max_r_empty_n => max_r_c14_i_empty_n,
        max_r_read => get_exg_image_U0_max_r_read,
        max_g_dout => max_g_c15_i_dout,
        max_g_empty_n => max_g_c15_i_empty_n,
        max_g_read => get_exg_image_U0_max_g_read,
        max_b_dout => max_b_c16_i_dout,
        max_b_empty_n => max_b_c16_i_empty_n,
        max_b_read => get_exg_image_U0_max_b_read,
        veg_img_data_V_din => get_exg_image_U0_veg_img_data_V_din,
        veg_img_data_V_full_n => veg_temp_data_V_full_n,
        veg_img_data_V_write => get_exg_image_U0_veg_img_data_V_write,
        min_value_V_out_din => get_exg_image_U0_min_value_V_out_din,
        min_value_V_out_full_n => min_value_V_c_i_full_n,
        min_value_V_out_write => get_exg_image_U0_min_value_V_out_write,
        max_value_V_out_din => get_exg_image_U0_max_value_V_out_din,
        max_value_V_out_full_n => max_value_V_c_i_full_n,
        max_value_V_out_write => get_exg_image_U0_max_value_V_out_write);

    get_vegetation_image_3_U0 : component get_vegetation_image_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => get_vegetation_image_3_U0_ap_start,
        ap_done => get_vegetation_image_3_U0_ap_done,
        ap_continue => get_vegetation_image_3_U0_ap_continue,
        ap_idle => get_vegetation_image_3_U0_ap_idle,
        ap_ready => get_vegetation_image_3_U0_ap_ready,
        max_value_V_dout => max_value_V_c_i_dout,
        max_value_V_empty_n => max_value_V_c_i_empty_n,
        max_value_V_read => get_vegetation_image_3_U0_max_value_V_read,
        ap_return => get_vegetation_image_3_U0_ap_return);

    get_vegetation_image_2_U0 : component get_vegetation_image_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => get_vegetation_image_2_U0_ap_start,
        ap_done => get_vegetation_image_2_U0_ap_done,
        ap_continue => get_vegetation_image_2_U0_ap_continue,
        ap_idle => get_vegetation_image_2_U0_ap_idle,
        ap_ready => get_vegetation_image_2_U0_ap_ready,
        min_value_V_dout => min_value_V_c_i_dout,
        min_value_V_empty_n => min_value_V_c_i_empty_n,
        min_value_V_read => get_vegetation_image_2_U0_min_value_V_read,
        p_read => extLd_cast_loc_chann_dout,
        min_value_V_out_din => get_vegetation_image_2_U0_min_value_V_out_din,
        min_value_V_out_full_n => min_value_V_c17_i_full_n,
        min_value_V_out_write => get_vegetation_image_2_U0_min_value_V_out_write,
        ap_return => get_vegetation_image_2_U0_ap_return);

    convert_fp_to_8b771_U0 : component convert_fp_to_8b771
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => convert_fp_to_8b771_U0_ap_start,
        ap_done => convert_fp_to_8b771_U0_ap_done,
        ap_continue => convert_fp_to_8b771_U0_ap_continue,
        ap_idle => convert_fp_to_8b771_U0_ap_idle,
        ap_ready => convert_fp_to_8b771_U0_ap_ready,
        min_value_V_c17_dout => min_value_V_c17_i_dout,
        min_value_V_c17_empty_n => min_value_V_c17_i_empty_n,
        min_value_V_c17_read => convert_fp_to_8b771_U0_min_value_V_c17_read,
        sub_ln703_cast_loc_c => sub_ln703_cast_loc_c_dout,
        veg_temp_data_V_dout => veg_temp_data_V_dout,
        veg_temp_data_V_empty_n => veg_temp_data_V_empty_n,
        veg_temp_data_V_read => convert_fp_to_8b771_U0_veg_temp_data_V_read,
        img_out_data_V_din => convert_fp_to_8b771_U0_img_out_data_V_din,
        img_out_data_V_full_n => img_out_data_V_full_n,
        img_out_data_V_write => convert_fp_to_8b771_U0_img_out_data_V_write);

    img_in_0_rows_channe_U : component fifo_w9_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => get_vegetation_image_113_U0_img_in_0_rows0,
        if_full_n => img_in_0_rows_channe_full_n,
        if_write => ap_channel_done_img_in_0_rows_channe,
        if_dout => img_in_0_rows_channe_dout,
        if_empty_n => img_in_0_rows_channe_empty_n,
        if_read => duplicateMat636770_U0_ap_ready);

    img_in_0_cols_channe_U : component fifo_w10_d2_A_x0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => get_vegetation_image_113_U0_img_in_0_cols0,
        if_full_n => img_in_0_cols_channe_full_n,
        if_write => ap_channel_done_img_in_0_cols_channe,
        if_dout => img_in_0_cols_channe_dout,
        if_empty_n => img_in_0_cols_channe_empty_n,
        if_read => duplicateMat636770_U0_ap_ready);

    img_in_cols_c_i_U : component fifo_w10_d2_A_x0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => get_vegetation_image_113_U0_img_in_cols_out_din,
        if_full_n => img_in_cols_c_i_full_n,
        if_write => get_vegetation_image_113_U0_img_in_cols_out_write,
        if_dout => img_in_cols_c_i_dout,
        if_empty_n => img_in_cols_c_i_empty_n,
        if_read => duplicateMat636770_U0_p_src_cols_read);

    img_in_0_data_V_U : component fifo_w24_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => duplicateMat636770_U0_p_dst1_data_V_din,
        if_full_n => img_in_0_data_V_full_n,
        if_write => duplicateMat636770_U0_p_dst1_data_V_write,
        if_dout => img_in_0_data_V_dout,
        if_empty_n => img_in_0_data_V_empty_n,
        if_read => duplicateMat_U0_p_src_data_V_read);

    img_in_1_data_V_U : component fifo_w24_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => duplicateMat636770_U0_p_dst2_data_V_din,
        if_full_n => img_in_1_data_V_full_n,
        if_write => duplicateMat636770_U0_p_dst2_data_V_write,
        if_dout => img_in_1_data_V_dout,
        if_empty_n => img_in_1_data_V_empty_n,
        if_read => extract_channels_U0_img_in_0_data_V_read);

    img_in_2_data_V_U : component fifo_w24_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => duplicateMat_U0_p_dst1_data_V_din,
        if_full_n => img_in_2_data_V_full_n,
        if_write => duplicateMat_U0_p_dst1_data_V_write,
        if_dout => img_in_2_data_V_dout,
        if_empty_n => img_in_2_data_V_empty_n,
        if_read => extract_channels_U0_img_in_1_data_V_read);

    img_in_3_data_V_U : component fifo_w24_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => duplicateMat_U0_p_dst2_data_V_din,
        if_full_n => img_in_3_data_V_full_n,
        if_write => duplicateMat_U0_p_dst2_data_V_write,
        if_dout => img_in_3_data_V_dout,
        if_empty_n => img_in_3_data_V_empty_n,
        if_read => extract_channels_U0_img_in_2_data_V_read);

    r_channel_data_V_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => extract_channels_U0_r_channel_data_V_din,
        if_full_n => r_channel_data_V_full_n,
        if_write => extract_channels_U0_r_channel_data_V_write,
        if_dout => r_channel_data_V_dout,
        if_empty_n => r_channel_data_V_empty_n,
        if_read => extract_channels_U0_r_channel_data_V_read);

    g_channel_data_V_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => extract_channels_U0_g_channel_data_V_din,
        if_full_n => g_channel_data_V_full_n,
        if_write => extract_channels_U0_g_channel_data_V_write,
        if_dout => g_channel_data_V_dout,
        if_empty_n => g_channel_data_V_empty_n,
        if_read => extract_channels_U0_g_channel_data_V_read);

    b_channel_data_V_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => extract_channels_U0_b_channel_data_V_din,
        if_full_n => b_channel_data_V_full_n,
        if_write => extract_channels_U0_b_channel_data_V_write,
        if_dout => b_channel_data_V_dout,
        if_empty_n => b_channel_data_V_empty_n,
        if_read => extract_channels_U0_b_channel_data_V_read);

    max_r_c_i_U : component fifo_w32_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => get_max_from_channel_U0_max_r_out_din,
        if_full_n => max_r_c_i_full_n,
        if_write => get_max_from_channel_U0_max_r_out_write,
        if_dout => max_r_c_i_dout,
        if_empty_n => max_r_c_i_empty_n,
        if_read => get_vegetation_image_U0_max_r_read);

    max_g_c_i_U : component fifo_w32_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => get_max_from_channel_U0_max_g_out_din,
        if_full_n => max_g_c_i_full_n,
        if_write => get_max_from_channel_U0_max_g_out_write,
        if_dout => max_g_c_i_dout,
        if_empty_n => max_g_c_i_empty_n,
        if_read => get_vegetation_image_U0_max_g_read);

    max_b_c_i_U : component fifo_w32_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => get_max_from_channel_U0_max_b_out_din,
        if_full_n => max_b_c_i_full_n,
        if_write => get_max_from_channel_U0_max_b_out_write,
        if_dout => max_b_c_i_dout,
        if_empty_n => max_b_c_i_empty_n,
        if_read => get_vegetation_image_U0_max_b_read);

    max_r_c14_i_U : component fifo_w32_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => get_vegetation_image_U0_max_r_out_din,
        if_full_n => max_r_c14_i_full_n,
        if_write => get_vegetation_image_U0_max_r_out_write,
        if_dout => max_r_c14_i_dout,
        if_empty_n => max_r_c14_i_empty_n,
        if_read => get_exg_image_U0_max_r_read);

    max_g_c15_i_U : component fifo_w32_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => get_vegetation_image_U0_max_g_out_din,
        if_full_n => max_g_c15_i_full_n,
        if_write => get_vegetation_image_U0_max_g_out_write,
        if_dout => max_g_c15_i_dout,
        if_empty_n => max_g_c15_i_empty_n,
        if_read => get_exg_image_U0_max_g_read);

    max_b_c16_i_U : component fifo_w32_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => get_vegetation_image_U0_max_b_out_din,
        if_full_n => max_b_c16_i_full_n,
        if_write => get_vegetation_image_U0_max_b_out_write,
        if_dout => max_b_c16_i_dout,
        if_empty_n => max_b_c16_i_empty_n,
        if_read => get_exg_image_U0_max_b_read);

    veg_temp_data_V_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => get_exg_image_U0_veg_img_data_V_din,
        if_full_n => veg_temp_data_V_full_n,
        if_write => get_exg_image_U0_veg_img_data_V_write,
        if_dout => veg_temp_data_V_dout,
        if_empty_n => veg_temp_data_V_empty_n,
        if_read => convert_fp_to_8b771_U0_veg_temp_data_V_read);

    min_value_V_c_i_U : component fifo_w28_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => get_exg_image_U0_min_value_V_out_din,
        if_full_n => min_value_V_c_i_full_n,
        if_write => get_exg_image_U0_min_value_V_out_write,
        if_dout => min_value_V_c_i_dout,
        if_empty_n => min_value_V_c_i_empty_n,
        if_read => get_vegetation_image_2_U0_min_value_V_read);

    max_value_V_c_i_U : component fifo_w29_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => get_exg_image_U0_max_value_V_out_din,
        if_full_n => max_value_V_c_i_full_n,
        if_write => get_exg_image_U0_max_value_V_out_write,
        if_dout => max_value_V_c_i_dout,
        if_empty_n => max_value_V_c_i_empty_n,
        if_read => get_vegetation_image_3_U0_max_value_V_read);

    extLd_cast_loc_chann_U : component fifo_w24_d2_A_x1
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => get_vegetation_image_3_U0_ap_return,
        if_full_n => extLd_cast_loc_chann_full_n,
        if_write => get_vegetation_image_3_U0_ap_done,
        if_dout => extLd_cast_loc_chann_dout,
        if_empty_n => extLd_cast_loc_chann_empty_n,
        if_read => get_vegetation_image_2_U0_ap_ready);

    min_value_V_c17_i_U : component fifo_w28_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => get_vegetation_image_2_U0_min_value_V_out_din,
        if_full_n => min_value_V_c17_i_full_n,
        if_write => get_vegetation_image_2_U0_min_value_V_out_write,
        if_dout => min_value_V_c17_i_dout,
        if_empty_n => min_value_V_c17_i_empty_n,
        if_read => convert_fp_to_8b771_U0_min_value_V_c17_read);

    sub_ln703_cast_loc_c_U : component fifo_w24_d2_A_x1
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => get_vegetation_image_2_U0_ap_return,
        if_full_n => sub_ln703_cast_loc_c_full_n,
        if_write => get_vegetation_image_2_U0_ap_done,
        if_dout => sub_ln703_cast_loc_c_dout,
        if_empty_n => sub_ln703_cast_loc_c_empty_n,
        if_read => convert_fp_to_8b771_U0_ap_ready);

    start_for_duplicasc4_U : component start_for_duplicasc4
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_duplicateMat_U0_din,
        if_full_n => start_for_duplicateMat_U0_full_n,
        if_write => duplicateMat636770_U0_start_write,
        if_dout => start_for_duplicateMat_U0_dout,
        if_empty_n => start_for_duplicateMat_U0_empty_n,
        if_read => duplicateMat_U0_ap_ready);

    start_for_extracttde_U : component start_for_extracttde
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_extract_channels_U0_din,
        if_full_n => start_for_extract_channels_U0_full_n,
        if_write => duplicateMat636770_U0_start_write,
        if_dout => start_for_extract_channels_U0_dout,
        if_empty_n => start_for_extract_channels_U0_empty_n,
        if_read => extract_channels_U0_ap_ready);





    ap_sync_reg_channel_write_img_in_0_cols_channe_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_img_in_0_cols_channe <= ap_const_logic_0;
            else
                if (((get_vegetation_image_113_U0_ap_done and get_vegetation_image_113_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_img_in_0_cols_channe <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_img_in_0_cols_channe <= ap_sync_channel_write_img_in_0_cols_channe;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_img_in_0_rows_channe_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_img_in_0_rows_channe <= ap_const_logic_0;
            else
                if (((get_vegetation_image_113_U0_ap_done and get_vegetation_image_113_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_img_in_0_rows_channe <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_img_in_0_rows_channe <= ap_sync_channel_write_img_in_0_rows_channe;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_duplicateMat636770_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_duplicateMat636770_U0_ap_ready <= ap_const_logic_0;
            else
                if (((real_start and ap_sync_ready) = ap_const_logic_1)) then 
                    ap_sync_reg_duplicateMat636770_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_duplicateMat636770_U0_ap_ready <= ap_sync_duplicateMat636770_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_get_exg_image_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_get_exg_image_U0_ap_start <= ap_const_logic_0;
            else
                if ((real_start = ap_const_logic_1)) then 
                    ap_sync_reg_get_exg_image_U0_ap_start <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_get_max_from_channel_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_get_max_from_channel_U0_ap_start <= ap_const_logic_0;
            else
                if ((real_start = ap_const_logic_1)) then 
                    ap_sync_reg_get_max_from_channel_U0_ap_start <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_get_vegetation_image_113_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_get_vegetation_image_113_U0_ap_ready <= ap_const_logic_0;
            else
                if (((real_start and ap_sync_ready) = ap_const_logic_1)) then 
                    ap_sync_reg_get_vegetation_image_113_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_get_vegetation_image_113_U0_ap_ready <= ap_sync_get_vegetation_image_113_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_get_vegetation_image_3_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_get_vegetation_image_3_U0_ap_start <= ap_const_logic_0;
            else
                if ((real_start = ap_const_logic_1)) then 
                    ap_sync_reg_get_vegetation_image_3_U0_ap_start <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_get_vegetation_image_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_get_vegetation_image_U0_ap_start <= ap_const_logic_0;
            else
                if ((real_start = ap_const_logic_1)) then 
                    ap_sync_reg_get_vegetation_image_U0_ap_start <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    duplicateMat636770_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((duplicateMat636770_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                duplicateMat636770_U0_ap_ready_count <= std_logic_vector(unsigned(duplicateMat636770_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (duplicateMat636770_U0_ap_ready = ap_const_logic_1))) then 
                duplicateMat636770_U0_ap_ready_count <= std_logic_vector(unsigned(duplicateMat636770_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    get_vegetation_image_113_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((get_vegetation_image_113_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                get_vegetation_image_113_U0_ap_ready_count <= std_logic_vector(unsigned(get_vegetation_image_113_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (get_vegetation_image_113_U0_ap_ready = ap_const_logic_1))) then 
                get_vegetation_image_113_U0_ap_ready_count <= std_logic_vector(unsigned(get_vegetation_image_113_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    ap_channel_done_extLd_cast_loc_chann <= get_vegetation_image_3_U0_ap_done;
    ap_channel_done_img_in_0_cols_channe <= (get_vegetation_image_113_U0_ap_done and (ap_sync_reg_channel_write_img_in_0_cols_channe xor ap_const_logic_1));
    ap_channel_done_img_in_0_rows_channe <= (get_vegetation_image_113_U0_ap_done and (ap_sync_reg_channel_write_img_in_0_rows_channe xor ap_const_logic_1));
    ap_channel_done_sub_ln703_cast_loc_c <= get_vegetation_image_2_U0_ap_done;
    ap_done <= convert_fp_to_8b771_U0_ap_done;
    ap_idle <= (get_vegetation_image_U0_ap_idle and get_vegetation_image_3_U0_ap_idle and get_vegetation_image_2_U0_ap_idle and get_vegetation_image_113_U0_ap_idle and get_max_from_channel_U0_ap_idle and get_exg_image_U0_ap_idle and extract_channels_U0_ap_idle and (sub_ln703_cast_loc_c_empty_n xor ap_const_logic_1) and (extLd_cast_loc_chann_empty_n xor ap_const_logic_1) and (img_in_0_cols_channe_empty_n xor ap_const_logic_1) and (img_in_0_rows_channe_empty_n xor ap_const_logic_1) and duplicateMat_U0_ap_idle and duplicateMat636770_U0_ap_idle and convert_fp_to_8b771_U0_ap_idle);
    ap_ready <= internal_ap_ready;
    ap_sync_channel_write_img_in_0_cols_channe <= ((img_in_0_cols_channe_full_n and ap_channel_done_img_in_0_cols_channe) or ap_sync_reg_channel_write_img_in_0_cols_channe);
    ap_sync_channel_write_img_in_0_rows_channe <= ((img_in_0_rows_channe_full_n and ap_channel_done_img_in_0_rows_channe) or ap_sync_reg_channel_write_img_in_0_rows_channe);
    ap_sync_continue <= ap_continue;
    ap_sync_done <= convert_fp_to_8b771_U0_ap_done;
    ap_sync_duplicateMat636770_U0_ap_ready <= (duplicateMat636770_U0_ap_ready or ap_sync_reg_duplicateMat636770_U0_ap_ready);
    ap_sync_get_vegetation_image_113_U0_ap_ready <= (get_vegetation_image_113_U0_ap_ready or ap_sync_reg_get_vegetation_image_113_U0_ap_ready);
    ap_sync_ready <= (ap_sync_get_vegetation_image_113_U0_ap_ready and ap_sync_duplicateMat636770_U0_ap_ready);
    convert_fp_to_8b771_U0_ap_continue <= ap_continue;
    convert_fp_to_8b771_U0_ap_start <= sub_ln703_cast_loc_c_empty_n;
    convert_fp_to_8b771_U0_start_full_n <= ap_const_logic_1;
    convert_fp_to_8b771_U0_start_write <= ap_const_logic_0;
    duplicateMat636770_U0_ap_continue <= ap_const_logic_1;
    duplicateMat636770_U0_ap_start <= (real_start and img_in_0_rows_channe_empty_n and img_in_0_cols_channe_empty_n and (ap_sync_reg_duplicateMat636770_U0_ap_ready xor ap_const_logic_1));
    duplicateMat636770_U0_start_full_n <= (start_for_extract_channels_U0_full_n and start_for_duplicateMat_U0_full_n);
    duplicateMat_U0_ap_continue <= ap_const_logic_1;
    duplicateMat_U0_ap_start <= start_for_duplicateMat_U0_empty_n;
    duplicateMat_U0_start_full_n <= ap_const_logic_1;
    duplicateMat_U0_start_write <= ap_const_logic_0;
    extract_channels_U0_ap_continue <= ap_const_logic_1;
    extract_channels_U0_ap_start <= start_for_extract_channels_U0_empty_n;
    extract_channels_U0_b_channel_data_V_dout <= b_channel_data_V_dout;
    extract_channels_U0_b_channel_data_V_empty_n <= b_channel_data_V_empty_n;
    extract_channels_U0_b_channel_data_V_read <= ap_const_logic_0;
    extract_channels_U0_g_channel_data_V_dout <= g_channel_data_V_dout;
    extract_channels_U0_g_channel_data_V_empty_n <= g_channel_data_V_empty_n;
    extract_channels_U0_g_channel_data_V_read <= ap_const_logic_0;
    extract_channels_U0_r_channel_data_V_dout <= r_channel_data_V_dout;
    extract_channels_U0_r_channel_data_V_empty_n <= r_channel_data_V_empty_n;
    extract_channels_U0_r_channel_data_V_read <= ap_const_logic_0;
    extract_channels_U0_start_full_n <= ap_const_logic_1;
    extract_channels_U0_start_write <= ap_const_logic_0;
    get_exg_image_U0_ap_continue <= ap_const_logic_1;
    get_exg_image_U0_ap_start <= (real_start or ap_sync_reg_get_exg_image_U0_ap_start);
    get_exg_image_U0_start_full_n <= ap_const_logic_1;
    get_exg_image_U0_start_write <= ap_const_logic_0;
    get_max_from_channel_U0_ap_continue <= ap_const_logic_1;
    get_max_from_channel_U0_ap_start <= (real_start or ap_sync_reg_get_max_from_channel_U0_ap_start);
    get_max_from_channel_U0_start_full_n <= ap_const_logic_1;
    get_max_from_channel_U0_start_write <= ap_const_logic_0;
    get_vegetation_image_113_U0_ap_continue <= (ap_sync_channel_write_img_in_0_rows_channe and ap_sync_channel_write_img_in_0_cols_channe);
    get_vegetation_image_113_U0_ap_start <= (real_start and (ap_sync_reg_get_vegetation_image_113_U0_ap_ready xor ap_const_logic_1));
    get_vegetation_image_113_U0_start_full_n <= ap_const_logic_1;
    get_vegetation_image_113_U0_start_write <= ap_const_logic_0;
    get_vegetation_image_2_U0_ap_continue <= sub_ln703_cast_loc_c_full_n;
    get_vegetation_image_2_U0_ap_start <= extLd_cast_loc_chann_empty_n;
    get_vegetation_image_2_U0_start_full_n <= ap_const_logic_1;
    get_vegetation_image_2_U0_start_write <= ap_const_logic_0;
    get_vegetation_image_3_U0_ap_continue <= extLd_cast_loc_chann_full_n;
    get_vegetation_image_3_U0_ap_start <= (real_start or ap_sync_reg_get_vegetation_image_3_U0_ap_start);
    get_vegetation_image_3_U0_start_full_n <= ap_const_logic_1;
    get_vegetation_image_3_U0_start_write <= ap_const_logic_0;
    get_vegetation_image_U0_ap_continue <= ap_const_logic_1;
    get_vegetation_image_U0_ap_start <= (real_start or ap_sync_reg_get_vegetation_image_U0_ap_start);
    get_vegetation_image_U0_start_full_n <= ap_const_logic_1;
    get_vegetation_image_U0_start_write <= ap_const_logic_0;
    img_in_cols_read <= get_vegetation_image_113_U0_img_in_cols_read;
    img_in_data_V_read <= duplicateMat636770_U0_p_src_data_V_read;
    img_out_data_V_din <= convert_fp_to_8b771_U0_img_out_data_V_din;
    img_out_data_V_write <= convert_fp_to_8b771_U0_img_out_data_V_write;
    internal_ap_ready <= ap_sync_ready;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_for_duplicateMat_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_extract_channels_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
