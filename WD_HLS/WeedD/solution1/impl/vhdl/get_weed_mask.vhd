-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity get_weed_mask is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weed_mask_tmp_data_V_din : OUT STD_LOGIC_VECTOR (1 downto 0);
    weed_mask_tmp_data_V_full_n : IN STD_LOGIC;
    weed_mask_tmp_data_V_write : OUT STD_LOGIC;
    lines_founded_read : IN STD_LOGIC;
    lines_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    lines_ce0 : OUT STD_LOGIC;
    lines_q0 : IN STD_LOGIC_VECTOR (64 downto 0) );
end;


architecture behav of get_weed_mask is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv14_3300 : STD_LOGIC_VECTOR (13 downto 0) := "11001100000000";
    constant ap_const_lv9_B3 : STD_LOGIC_VECTOR (8 downto 0) := "010110011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv9_140 : STD_LOGIC_VECTOR (8 downto 0) := "101000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv14_3FCF : STD_LOGIC_VECTOR (13 downto 0) := "11111111001111";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal weed_mask_tmp_data_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal lines_founded_read_1_read_fu_66_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln414_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_183 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_52_fu_128_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_2_fu_152_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal h_2_reg_191 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln703_fu_158_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln412_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v_2_fu_164_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_is_crop_or_furrow_fu_117_ap_start : STD_LOGIC;
    signal grp_is_crop_or_furrow_fu_117_ap_done : STD_LOGIC;
    signal grp_is_crop_or_furrow_fu_117_ap_idle : STD_LOGIC;
    signal grp_is_crop_or_furrow_fu_117_ap_ready : STD_LOGIC;
    signal grp_is_crop_or_furrow_fu_117_lines_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_is_crop_or_furrow_fu_117_lines_ce0 : STD_LOGIC;
    signal grp_is_crop_or_furrow_fu_117_ap_return : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_s_reg_81 : STD_LOGIC_VECTOR (13 downto 0);
    signal v_reg_93 : STD_LOGIC_VECTOR (8 downto 0);
    signal h_reg_105 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_predicate_op32_write_state4 : BOOLEAN;
    signal ap_predicate_op34_write_state4 : BOOLEAN;
    signal ap_block_state4 : BOOLEAN;
    signal ap_block_state4_on_subcall_done : BOOLEAN;
    signal grp_is_crop_or_furrow_fu_117_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_condition_118 : BOOLEAN;

    component is_crop_or_furrow IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        lines_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        lines_ce0 : OUT STD_LOGIC;
        lines_q0 : IN STD_LOGIC_VECTOR (64 downto 0);
        px_read : IN STD_LOGIC_VECTOR (8 downto 0);
        py_read : IN STD_LOGIC_VECTOR (8 downto 0);
        crop_width_read : IN STD_LOGIC_VECTOR (4 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;



begin
    grp_is_crop_or_furrow_fu_117 : component is_crop_or_furrow
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_is_crop_or_furrow_fu_117_ap_start,
        ap_done => grp_is_crop_or_furrow_fu_117_ap_done,
        ap_idle => grp_is_crop_or_furrow_fu_117_ap_idle,
        ap_ready => grp_is_crop_or_furrow_fu_117_ap_ready,
        lines_address0 => grp_is_crop_or_furrow_fu_117_lines_address0,
        lines_ce0 => grp_is_crop_or_furrow_fu_117_lines_ce0,
        lines_q0 => lines_q0,
        px_read => v_reg_93,
        py_read => h_reg_105,
        crop_width_read => tmp_6_reg_183,
        ap_return => grp_is_crop_or_furrow_fu_117_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_is_crop_or_furrow_fu_117_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_is_crop_or_furrow_fu_117_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln412_fu_146_p2 = ap_const_lv1_0) and (lines_founded_read_1_read_fu_66_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_is_crop_or_furrow_fu_117_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_is_crop_or_furrow_fu_117_ap_ready = ap_const_logic_1)) then 
                    grp_is_crop_or_furrow_fu_117_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    h_reg_105_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state4_on_subcall_done) or ((weed_mask_tmp_data_V_full_n = ap_const_logic_0) and (ap_predicate_op34_write_state4 = ap_const_boolean_1)) or ((weed_mask_tmp_data_V_full_n = ap_const_logic_0) and (ap_predicate_op32_write_state4 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                h_reg_105 <= h_2_reg_191;
            elsif (((tmp_52_fu_128_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                h_reg_105 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_81_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln412_fu_146_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_Val2_s_reg_81 <= add_ln703_fu_158_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_s_reg_81 <= ap_const_lv14_3300;
            end if; 
        end if;
    end process;

    v_reg_93_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln412_fu_146_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                v_reg_93 <= v_2_fu_164_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                v_reg_93 <= ap_const_lv9_B3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                h_2_reg_191 <= h_2_fu_152_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_52_fu_128_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_6_reg_183 <= p_Val2_s_reg_81(13 downto 9);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, weed_mask_tmp_data_V_full_n, ap_CS_fsm_state4, ap_CS_fsm_state2, tmp_52_fu_128_p3, ap_CS_fsm_state3, icmp_ln412_fu_146_p2, ap_predicate_op32_write_state4, ap_predicate_op34_write_state4, ap_block_state4_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_52_fu_128_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln412_fu_146_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((ap_const_boolean_1 = ap_block_state4_on_subcall_done) or ((weed_mask_tmp_data_V_full_n = ap_const_logic_0) and (ap_predicate_op34_write_state4 = ap_const_boolean_1)) or ((weed_mask_tmp_data_V_full_n = ap_const_logic_0) and (ap_predicate_op32_write_state4 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln703_fu_158_p2 <= std_logic_vector(unsigned(p_Val2_s_reg_81) + unsigned(ap_const_lv14_3FCF));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state4_assign_proc : process(weed_mask_tmp_data_V_full_n, ap_predicate_op32_write_state4, ap_predicate_op34_write_state4)
    begin
                ap_block_state4 <= (((weed_mask_tmp_data_V_full_n = ap_const_logic_0) and (ap_predicate_op34_write_state4 = ap_const_boolean_1)) or ((weed_mask_tmp_data_V_full_n = ap_const_logic_0) and (ap_predicate_op32_write_state4 = ap_const_boolean_1)));
    end process;


    ap_block_state4_on_subcall_done_assign_proc : process(lines_founded_read_1_read_fu_66_p2, grp_is_crop_or_furrow_fu_117_ap_done)
    begin
                ap_block_state4_on_subcall_done <= ((lines_founded_read_1_read_fu_66_p2 = ap_const_lv1_1) and (grp_is_crop_or_furrow_fu_117_ap_done = ap_const_logic_0));
    end process;


    ap_condition_118_assign_proc : process(weed_mask_tmp_data_V_full_n, ap_CS_fsm_state4, ap_predicate_op32_write_state4, ap_predicate_op34_write_state4, ap_block_state4_on_subcall_done)
    begin
                ap_condition_118 <= (not(((ap_const_boolean_1 = ap_block_state4_on_subcall_done) or ((weed_mask_tmp_data_V_full_n = ap_const_logic_0) and (ap_predicate_op34_write_state4 = ap_const_boolean_1)) or ((weed_mask_tmp_data_V_full_n = ap_const_logic_0) and (ap_predicate_op32_write_state4 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state4));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_52_fu_128_p3)
    begin
        if ((((tmp_52_fu_128_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op32_write_state4_assign_proc : process(lines_founded_read_1_read_fu_66_p2, icmp_ln414_fu_170_p2)
    begin
                ap_predicate_op32_write_state4 <= ((icmp_ln414_fu_170_p2 = ap_const_lv1_0) or (lines_founded_read_1_read_fu_66_p2 = ap_const_lv1_0));
    end process;


    ap_predicate_op34_write_state4_assign_proc : process(lines_founded_read_1_read_fu_66_p2, icmp_ln414_fu_170_p2)
    begin
                ap_predicate_op34_write_state4 <= ((icmp_ln414_fu_170_p2 = ap_const_lv1_1) and (lines_founded_read_1_read_fu_66_p2 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_52_fu_128_p3)
    begin
        if (((tmp_52_fu_128_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_is_crop_or_furrow_fu_117_ap_start <= grp_is_crop_or_furrow_fu_117_ap_start_reg;
    h_2_fu_152_p2 <= std_logic_vector(unsigned(h_reg_105) + unsigned(ap_const_lv9_1));
    icmp_ln412_fu_146_p2 <= "1" when (h_reg_105 = ap_const_lv9_140) else "0";
    icmp_ln414_fu_170_p2 <= "1" when (grp_is_crop_or_furrow_fu_117_ap_return = ap_const_lv2_3) else "0";
    lines_address0 <= grp_is_crop_or_furrow_fu_117_lines_address0;
    lines_ce0 <= grp_is_crop_or_furrow_fu_117_lines_ce0;
    lines_founded_read_1_read_fu_66_p2 <= (0=>lines_founded_read, others=>'-');
    tmp_52_fu_128_p3 <= v_reg_93(8 downto 8);
    v_2_fu_164_p2 <= std_logic_vector(unsigned(v_reg_93) + unsigned(ap_const_lv9_1FF));

    weed_mask_tmp_data_V_blk_n_assign_proc : process(weed_mask_tmp_data_V_full_n, ap_CS_fsm_state4, lines_founded_read_1_read_fu_66_p2, icmp_ln414_fu_170_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln414_fu_170_p2 = ap_const_lv1_0) or (lines_founded_read_1_read_fu_66_p2 = ap_const_lv1_0))) or ((icmp_ln414_fu_170_p2 = ap_const_lv1_1) and (lines_founded_read_1_read_fu_66_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            weed_mask_tmp_data_V_blk_n <= weed_mask_tmp_data_V_full_n;
        else 
            weed_mask_tmp_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    weed_mask_tmp_data_V_din_assign_proc : process(ap_predicate_op32_write_state4, ap_predicate_op34_write_state4, ap_condition_118)
    begin
        if ((ap_const_boolean_1 = ap_condition_118)) then
            if ((ap_predicate_op34_write_state4 = ap_const_boolean_1)) then 
                weed_mask_tmp_data_V_din <= ap_const_lv2_3;
            elsif ((ap_predicate_op32_write_state4 = ap_const_boolean_1)) then 
                weed_mask_tmp_data_V_din <= ap_const_lv2_0;
            else 
                weed_mask_tmp_data_V_din <= "XX";
            end if;
        else 
            weed_mask_tmp_data_V_din <= "XX";
        end if; 
    end process;


    weed_mask_tmp_data_V_write_assign_proc : process(weed_mask_tmp_data_V_full_n, ap_CS_fsm_state4, ap_predicate_op32_write_state4, ap_predicate_op34_write_state4, ap_block_state4_on_subcall_done)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state4_on_subcall_done) or ((weed_mask_tmp_data_V_full_n = ap_const_logic_0) and (ap_predicate_op34_write_state4 = ap_const_boolean_1)) or ((weed_mask_tmp_data_V_full_n = ap_const_logic_0) and (ap_predicate_op32_write_state4 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_predicate_op34_write_state4 = ap_const_boolean_1)) or (not(((ap_const_boolean_1 = ap_block_state4_on_subcall_done) or ((weed_mask_tmp_data_V_full_n = ap_const_logic_0) and (ap_predicate_op34_write_state4 = ap_const_boolean_1)) or ((weed_mask_tmp_data_V_full_n = ap_const_logic_0) and (ap_predicate_op32_write_state4 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_predicate_op32_write_state4 = ap_const_boolean_1)))) then 
            weed_mask_tmp_data_V_write <= ap_const_logic_1;
        else 
            weed_mask_tmp_data_V_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
