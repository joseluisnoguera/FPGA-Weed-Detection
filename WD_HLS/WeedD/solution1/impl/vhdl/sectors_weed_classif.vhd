-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sectors_weed_classif is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weed_mask_tmp_data_V_dout : IN STD_LOGIC_VECTOR (1 downto 0);
    weed_mask_tmp_data_V_empty_n : IN STD_LOGIC;
    weed_mask_tmp_data_V_read : OUT STD_LOGIC;
    weed_mask_out_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    weed_mask_out_data_V_empty_n : IN STD_LOGIC;
    weed_mask_out_data_V_read : OUT STD_LOGIC;
    weed_mask_out_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    weed_mask_out_data_V_full_n : IN STD_LOGIC;
    weed_mask_out_data_V_write : OUT STD_LOGIC;
    opened_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    opened_data_V_empty_n : IN STD_LOGIC;
    opened_data_V_read : OUT STD_LOGIC );
end;


architecture behav of sectors_weed_classif is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv9_140 : STD_LOGIC_VECTOR (8 downto 0) := "101000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv24_100 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal segments_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal segments_ce0 : STD_LOGIC;
    signal segments_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal segments_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal segments_ce1 : STD_LOGIC;
    signal segments_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal weed_mask_tmp_data_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln23_reg_717 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal icmp_ln51_reg_811 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weed_mask_out_data_V_i_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i1_0_reg_313 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln13_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal seg_index_fu_425_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal seg_index_reg_672 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_fu_437_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal v_limit_reg_696 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal segments_load_reg_702 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln21_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal p_v_fu_468_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_v_reg_712 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln23_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_fu_490_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal h_reg_724 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_predicate_op117_read_state8 : BOOLEAN;
    signal ap_block_state8 : BOOLEAN;
    signal zext_ln30_fu_502_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_reg_735 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal quadrant_space_addr_2_reg_740 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln34_fu_525_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln895_1_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_1_reg_750 : STD_LOGIC_VECTOR (0 downto 0);
    signal quadrant_weed_V_addr_2_reg_754 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln44_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state12_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state13_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state14_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state15_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state16_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state17_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_state18_pp1_stage0_iter6 : BOOLEAN;
    signal ap_block_state19_pp1_stage0_iter7 : BOOLEAN;
    signal ap_block_state20_pp1_stage0_iter8 : BOOLEAN;
    signal ap_block_state21_pp1_stage0_iter9 : BOOLEAN;
    signal ap_block_state22_pp1_stage0_iter10 : BOOLEAN;
    signal ap_block_state23_pp1_stage0_iter11 : BOOLEAN;
    signal ap_block_state24_pp1_stage0_iter12 : BOOLEAN;
    signal ap_block_state25_pp1_stage0_iter13 : BOOLEAN;
    signal ap_block_state26_pp1_stage0_iter14 : BOOLEAN;
    signal ap_block_state27_pp1_stage0_iter15 : BOOLEAN;
    signal ap_block_state28_pp1_stage0_iter16 : BOOLEAN;
    signal ap_block_state29_pp1_stage0_iter17 : BOOLEAN;
    signal ap_block_state30_pp1_stage0_iter18 : BOOLEAN;
    signal ap_block_state31_pp1_stage0_iter19 : BOOLEAN;
    signal ap_block_state32_pp1_stage0_iter20 : BOOLEAN;
    signal ap_block_state33_pp1_stage0_iter21 : BOOLEAN;
    signal ap_block_state34_pp1_stage0_iter22 : BOOLEAN;
    signal ap_block_state35_pp1_stage0_iter23 : BOOLEAN;
    signal ap_block_state36_pp1_stage0_iter24 : BOOLEAN;
    signal ap_block_state37_pp1_stage0_iter25 : BOOLEAN;
    signal ap_block_state38_pp1_stage0_iter26 : BOOLEAN;
    signal ap_block_state39_pp1_stage0_iter27 : BOOLEAN;
    signal ap_block_state40_pp1_stage0_iter28 : BOOLEAN;
    signal ap_block_state41_pp1_stage0_iter29 : BOOLEAN;
    signal ap_block_state42_pp1_stage0_iter30 : BOOLEAN;
    signal ap_block_state43_pp1_stage0_iter31 : BOOLEAN;
    signal ap_block_state44_pp1_stage0_iter32 : BOOLEAN;
    signal ap_block_state45_pp1_stage0_iter33 : BOOLEAN;
    signal ap_block_state46_pp1_stage0_iter34 : BOOLEAN;
    signal ap_block_state47_pp1_stage0_iter35 : BOOLEAN;
    signal ap_block_state48_pp1_stage0_iter36 : BOOLEAN;
    signal ap_block_state49_pp1_stage0_iter37 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal i_3_fu_555_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal zext_ln45_fu_561_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_reg_768 : STD_LOGIC_VECTOR (63 downto 0);
    signal quadrant_space_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_reg_778 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal icmp_ln45_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_783 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_783_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_783_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_783_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_783_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_783_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_783_pp1_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_783_pp1_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_783_pp1_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_783_pp1_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_783_pp1_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_783_pp1_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_783_pp1_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_783_pp1_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_783_pp1_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_783_pp1_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_783_pp1_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_783_pp1_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_783_pp1_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_783_pp1_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_783_pp1_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_783_pp1_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_783_pp1_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_783_pp1_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_783_pp1_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_783_pp1_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_783_pp1_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_783_pp1_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_783_pp1_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_783_pp1_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_783_pp1_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_783_pp1_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_783_pp1_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_783_pp1_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_783_pp1_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_783_pp1_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal quadrant_weed_V_addr_1_reg_787 : STD_LOGIC_VECTOR (2 downto 0);
    signal quadrant_weed_V_addr_1_reg_787_pp1_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal quadrant_weed_V_addr_1_reg_787_pp1_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal quadrant_weed_V_addr_1_reg_787_pp1_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal quadrant_weed_V_addr_1_reg_787_pp1_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal quadrant_weed_V_addr_1_reg_787_pp1_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal quadrant_weed_V_addr_1_reg_787_pp1_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal quadrant_weed_V_addr_1_reg_787_pp1_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal quadrant_weed_V_addr_1_reg_787_pp1_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal quadrant_weed_V_addr_1_reg_787_pp1_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal quadrant_weed_V_addr_1_reg_787_pp1_iter11_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal quadrant_weed_V_addr_1_reg_787_pp1_iter12_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal quadrant_weed_V_addr_1_reg_787_pp1_iter13_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal quadrant_weed_V_addr_1_reg_787_pp1_iter14_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal quadrant_weed_V_addr_1_reg_787_pp1_iter15_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal quadrant_weed_V_addr_1_reg_787_pp1_iter16_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal quadrant_weed_V_addr_1_reg_787_pp1_iter17_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal quadrant_weed_V_addr_1_reg_787_pp1_iter18_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal quadrant_weed_V_addr_1_reg_787_pp1_iter19_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal quadrant_weed_V_addr_1_reg_787_pp1_iter20_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal quadrant_weed_V_addr_1_reg_787_pp1_iter21_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal quadrant_weed_V_addr_1_reg_787_pp1_iter22_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal quadrant_weed_V_addr_1_reg_787_pp1_iter23_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal quadrant_weed_V_addr_1_reg_787_pp1_iter24_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal quadrant_weed_V_addr_1_reg_787_pp1_iter25_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal quadrant_weed_V_addr_1_reg_787_pp1_iter26_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal quadrant_weed_V_addr_1_reg_787_pp1_iter27_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal quadrant_weed_V_addr_1_reg_787_pp1_iter28_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal quadrant_weed_V_addr_1_reg_787_pp1_iter29_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal quadrant_weed_V_addr_1_reg_787_pp1_iter30_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal quadrant_weed_V_addr_1_reg_787_pp1_iter31_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal quadrant_weed_V_addr_1_reg_787_pp1_iter32_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal quadrant_weed_V_addr_1_reg_787_pp1_iter33_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal quadrant_weed_V_addr_1_reg_787_pp1_iter34_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal quadrant_weed_V_addr_1_reg_787_pp1_iter35_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal quadrant_weed_V_addr_1_reg_787_pp1_iter36_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal p_v_1_fu_612_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_v_1_reg_806 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal icmp_ln51_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_1_fu_634_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal h_1_reg_818 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_predicate_op232_read_state52 : BOOLEAN;
    signal ap_block_state52 : BOOLEAN;
    signal zext_ln61_fu_664_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state12 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter37 : STD_LOGIC := '0';
    signal quadrant_space_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal quadrant_space_ce0 : STD_LOGIC;
    signal quadrant_space_we0 : STD_LOGIC;
    signal quadrant_space_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal quadrant_weed_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal quadrant_weed_V_ce0 : STD_LOGIC;
    signal quadrant_weed_V_we0 : STD_LOGIC;
    signal quadrant_weed_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal quadrant_weed_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal quadrant_weed_V_ce1 : STD_LOGIC;
    signal quadrant_weed_V_we1 : STD_LOGIC;
    signal quadrant_weed_V_d1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bitwise_and_fu_403_ap_start : STD_LOGIC;
    signal grp_bitwise_and_fu_403_ap_done : STD_LOGIC;
    signal grp_bitwise_and_fu_403_ap_idle : STD_LOGIC;
    signal grp_bitwise_and_fu_403_ap_ready : STD_LOGIC;
    signal grp_bitwise_and_fu_403_p_src1_data_V_read : STD_LOGIC;
    signal grp_bitwise_and_fu_403_p_src2_data_V_read : STD_LOGIC;
    signal grp_bitwise_and_fu_403_p_dst_data_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_bitwise_and_fu_403_p_dst_data_V_write : STD_LOGIC;
    signal seg_index_0_reg_211 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_0_reg_223 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln16_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_v_0_reg_234 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_quadrant_index_0_phi_fu_249_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal quadrant_index_0_reg_245 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal flag_quadrant_0_reg_257 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_0_reg_269 : STD_LOGIC_VECTOR (8 downto 0);
    signal quadrant_index_0_be_reg_280 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal flag_quadrant_0_be_reg_295 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_v2_0_reg_324 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal quadrant_index4_0_reg_335 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal flag_quadrant5_0_reg_347 : STD_LOGIC_VECTOR (0 downto 0);
    signal h6_0_reg_359 : STD_LOGIC_VECTOR (8 downto 0);
    signal quadrant_index4_0_be_reg_370 : STD_LOGIC_VECTOR (7 downto 0);
    signal flag_quadrant5_0_be_reg_385 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_bitwise_and_fu_403_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call5 : BOOLEAN;
    signal zext_ln17_fu_443_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_fu_454_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal add_ln30_fu_529_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_fu_542_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln21_fu_458_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal v_fu_474_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln26_fu_507_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln35_fu_511_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln34_fu_517_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_572_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_591_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_591_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_591_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln49_fu_602_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal v_1_fu_618_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln54_fu_646_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln62_fu_650_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln61_fu_656_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal grp_fu_591_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_842 : BOOLEAN;

    component bitwise_and IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src1_data_V_dout : IN STD_LOGIC_VECTOR (1 downto 0);
        p_src1_data_V_empty_n : IN STD_LOGIC;
        p_src1_data_V_read : OUT STD_LOGIC;
        p_src2_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src2_data_V_empty_n : IN STD_LOGIC;
        p_src2_data_V_read : OUT STD_LOGIC;
        p_dst_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_V_full_n : IN STD_LOGIC;
        p_dst_data_V_write : OUT STD_LOGIC );
    end component;


    component ip_accel_app_udiv8jQ IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component sectors_weed_clas5jm IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sectors_weed_clas6jw IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component sectors_weed_clas7jG IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (23 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (23 downto 0) );
    end component;



begin
    segments_U : component sectors_weed_clas5jm
    generic map (
        DataWidth => 8,
        AddressRange => 13,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => segments_address0,
        ce0 => segments_ce0,
        q0 => segments_q0,
        address1 => segments_address1,
        ce1 => segments_ce1,
        q1 => segments_q1);

    quadrant_space_U : component sectors_weed_clas6jw
    generic map (
        DataWidth => 16,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => quadrant_space_address0,
        ce0 => quadrant_space_ce0,
        we0 => quadrant_space_we0,
        d0 => quadrant_space_d0,
        q0 => quadrant_space_q0);

    quadrant_weed_V_U : component sectors_weed_clas7jG
    generic map (
        DataWidth => 24,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => quadrant_weed_V_address0,
        ce0 => quadrant_weed_V_ce0,
        we0 => quadrant_weed_V_we0,
        d0 => quadrant_weed_V_d0,
        q0 => quadrant_weed_V_q0,
        address1 => quadrant_weed_V_addr_1_reg_787_pp1_iter36_reg,
        ce1 => quadrant_weed_V_ce1,
        we1 => quadrant_weed_V_we1,
        d1 => quadrant_weed_V_d1);

    grp_bitwise_and_fu_403 : component bitwise_and
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_bitwise_and_fu_403_ap_start,
        ap_done => grp_bitwise_and_fu_403_ap_done,
        ap_idle => grp_bitwise_and_fu_403_ap_idle,
        ap_ready => grp_bitwise_and_fu_403_ap_ready,
        p_src1_data_V_dout => weed_mask_tmp_data_V_dout,
        p_src1_data_V_empty_n => weed_mask_tmp_data_V_empty_n,
        p_src1_data_V_read => grp_bitwise_and_fu_403_p_src1_data_V_read,
        p_src2_data_V_dout => opened_data_V_dout,
        p_src2_data_V_empty_n => opened_data_V_empty_n,
        p_src2_data_V_read => grp_bitwise_and_fu_403_p_src2_data_V_read,
        p_dst_data_V_din => grp_bitwise_and_fu_403_p_dst_data_V_din,
        p_dst_data_V_full_n => weed_mask_out_data_V_full_n,
        p_dst_data_V_write => grp_bitwise_and_fu_403_p_dst_data_V_write);

    ip_accel_app_udiv8jQ_U518 : component ip_accel_app_udiv8jQ
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_591_p0,
        din1 => grp_fu_591_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_591_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln13_fu_419_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state12) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln21_fu_462_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state12)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state12);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter13 <= ap_enable_reg_pp1_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter14 <= ap_enable_reg_pp1_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter15 <= ap_enable_reg_pp1_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter16 <= ap_enable_reg_pp1_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter17 <= ap_enable_reg_pp1_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter18 <= ap_enable_reg_pp1_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter19 <= ap_enable_reg_pp1_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter20 <= ap_enable_reg_pp1_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter21 <= ap_enable_reg_pp1_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter22 <= ap_enable_reg_pp1_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter23 <= ap_enable_reg_pp1_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter24 <= ap_enable_reg_pp1_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter25 <= ap_enable_reg_pp1_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter26 <= ap_enable_reg_pp1_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter27 <= ap_enable_reg_pp1_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter28 <= ap_enable_reg_pp1_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter29 <= ap_enable_reg_pp1_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter30 <= ap_enable_reg_pp1_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter31 <= ap_enable_reg_pp1_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter32 <= ap_enable_reg_pp1_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter33 <= ap_enable_reg_pp1_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter34 <= ap_enable_reg_pp1_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter35 <= ap_enable_reg_pp1_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter36 <= ap_enable_reg_pp1_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter37 <= ap_enable_reg_pp1_iter36;
                elsif (((icmp_ln21_fu_462_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_enable_reg_pp1_iter37 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
                end if; 
            end if;
        end if;
    end process;


    grp_bitwise_and_fu_403_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_bitwise_and_fu_403_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_bitwise_and_fu_403_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_bitwise_and_fu_403_ap_ready = ap_const_logic_1)) then 
                    grp_bitwise_and_fu_403_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    flag_quadrant5_0_be_reg_385_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_842)) then
                if (((grp_fu_413_p2 = ap_const_lv1_0) and (icmp_ln55_fu_640_p2 = ap_const_lv1_1))) then 
                    flag_quadrant5_0_be_reg_385 <= ap_const_lv1_1;
                elsif ((icmp_ln55_fu_640_p2 = ap_const_lv1_0)) then 
                    flag_quadrant5_0_be_reg_385 <= flag_quadrant5_0_reg_347;
                elsif (((icmp_ln55_fu_640_p2 = ap_const_lv1_1) and (grp_fu_413_p2 = ap_const_lv1_1))) then 
                    flag_quadrant5_0_be_reg_385 <= ap_const_lv1_0;
                end if;
            end if; 
        end if;
    end process;

    flag_quadrant5_0_reg_347_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                flag_quadrant5_0_reg_347 <= flag_quadrant5_0_be_reg_385;
            elsif (((icmp_ln49_fu_606_p2 = ap_const_lv1_0) and (icmp_ln51_fu_623_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                flag_quadrant5_0_reg_347 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    flag_quadrant_0_be_reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op117_read_state8 = ap_const_boolean_1) and (weed_mask_tmp_data_V_empty_n = ap_const_logic_0))) and (icmp_ln27_fu_496_p2 = ap_const_lv1_0) and (icmp_ln26_fu_484_p2 = ap_const_lv1_0) and (icmp_ln23_reg_717 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                flag_quadrant_0_be_reg_295 <= flag_quadrant_0_reg_257;
            elsif ((not(((ap_predicate_op117_read_state8 = ap_const_boolean_1) and (weed_mask_tmp_data_V_empty_n = ap_const_logic_0))) and (icmp_ln26_fu_484_p2 = ap_const_lv1_0) and (icmp_ln27_fu_496_p2 = ap_const_lv1_1) and (grp_fu_413_p2 = ap_const_lv1_1) and (icmp_ln23_reg_717 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                flag_quadrant_0_be_reg_295 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                flag_quadrant_0_be_reg_295 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    flag_quadrant_0_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                flag_quadrant_0_reg_257 <= flag_quadrant_0_be_reg_295;
            elsif (((icmp_ln21_fu_462_p2 = ap_const_lv1_0) and (icmp_ln23_fu_479_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                flag_quadrant_0_reg_257 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    h6_0_reg_359_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                h6_0_reg_359 <= h_1_reg_818;
            elsif (((icmp_ln49_fu_606_p2 = ap_const_lv1_0) and (icmp_ln51_fu_623_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                h6_0_reg_359 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    h_0_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                h_0_reg_269 <= h_reg_724;
            elsif (((icmp_ln21_fu_462_p2 = ap_const_lv1_0) and (icmp_ln23_fu_479_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                h_0_reg_269 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i1_0_reg_313_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_462_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i1_0_reg_313 <= ap_const_lv3_0;
            elsif (((icmp_ln44_fu_549_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                i1_0_reg_313 <= i_3_fu_555_p2;
            end if; 
        end if;
    end process;

    i_0_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_419_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_223 <= ap_const_lv3_0;
            elsif (((icmp_ln16_fu_431_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_0_reg_223 <= i_fu_437_p2;
            end if; 
        end if;
    end process;

    p_v2_0_reg_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                p_v2_0_reg_324 <= ap_const_lv5_0;
            elsif ((not(((ap_predicate_op232_read_state52 = ap_const_boolean_1) and (weed_mask_tmp_data_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state52) and ((icmp_ln51_reg_811 = ap_const_lv1_0) or (icmp_ln54_fu_628_p2 = ap_const_lv1_1)))) then 
                p_v2_0_reg_324 <= p_v_1_reg_806;
            end if; 
        end if;
    end process;

    p_v_0_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op117_read_state8 = ap_const_boolean_1) and (weed_mask_tmp_data_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8) and ((icmp_ln26_fu_484_p2 = ap_const_lv1_1) or (icmp_ln23_reg_717 = ap_const_lv1_0)))) then 
                p_v_0_reg_234 <= p_v_reg_712;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_v_0_reg_234 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    quadrant_index4_0_be_reg_370_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_predicate_op232_read_state52 = ap_const_boolean_1) and (weed_mask_tmp_data_V_empty_n = ap_const_logic_0))) and (icmp_ln54_fu_628_p2 = ap_const_lv1_0) and (grp_fu_413_p2 = ap_const_lv1_0) and (icmp_ln55_fu_640_p2 = ap_const_lv1_1) and (icmp_ln51_reg_811 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state52)) or (not(((ap_predicate_op232_read_state52 = ap_const_boolean_1) and (weed_mask_tmp_data_V_empty_n = ap_const_logic_0))) and (icmp_ln55_fu_640_p2 = ap_const_lv1_0) and (icmp_ln54_fu_628_p2 = ap_const_lv1_0) and (icmp_ln51_reg_811 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state52)))) then 
                quadrant_index4_0_be_reg_370 <= quadrant_index4_0_reg_335;
            elsif ((not(((ap_predicate_op232_read_state52 = ap_const_boolean_1) and (weed_mask_tmp_data_V_empty_n = ap_const_logic_0))) and (icmp_ln54_fu_628_p2 = ap_const_lv1_0) and (icmp_ln55_fu_640_p2 = ap_const_lv1_1) and (icmp_ln51_reg_811 = ap_const_lv1_1) and (grp_fu_413_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                quadrant_index4_0_be_reg_370 <= zext_ln61_fu_664_p1;
            end if; 
        end if;
    end process;

    quadrant_index4_0_reg_335_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                quadrant_index4_0_reg_335 <= quadrant_index4_0_be_reg_370;
            elsif (((icmp_ln49_fu_606_p2 = ap_const_lv1_0) and (icmp_ln51_fu_623_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                quadrant_index4_0_reg_335 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    quadrant_index_0_be_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op117_read_state8 = ap_const_boolean_1) and (weed_mask_tmp_data_V_empty_n = ap_const_logic_0))) and (icmp_ln27_fu_496_p2 = ap_const_lv1_0) and (icmp_ln26_fu_484_p2 = ap_const_lv1_0) and (icmp_ln23_reg_717 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                quadrant_index_0_be_reg_280 <= ap_phi_mux_quadrant_index_0_phi_fu_249_p4;
            elsif ((not(((ap_predicate_op117_read_state8 = ap_const_boolean_1) and (weed_mask_tmp_data_V_empty_n = ap_const_logic_0))) and (icmp_ln26_fu_484_p2 = ap_const_lv1_0) and (icmp_ln27_fu_496_p2 = ap_const_lv1_1) and (grp_fu_413_p2 = ap_const_lv1_1) and (icmp_ln23_reg_717 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                quadrant_index_0_be_reg_280 <= zext_ln34_fu_525_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                quadrant_index_0_be_reg_280 <= quadrant_index_0_reg_245;
            end if; 
        end if;
    end process;

    quadrant_index_0_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                quadrant_index_0_reg_245 <= quadrant_index_0_be_reg_280;
            elsif (((icmp_ln21_fu_462_p2 = ap_const_lv1_0) and (icmp_ln23_fu_479_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                quadrant_index_0_reg_245 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    seg_index_0_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_fu_606_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                seg_index_0_reg_211 <= seg_index_reg_672;
            elsif (((grp_bitwise_and_fu_403_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                seg_index_0_reg_211 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op232_read_state52 = ap_const_boolean_1) and (weed_mask_tmp_data_V_empty_n = ap_const_logic_0))) and (icmp_ln51_reg_811 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                h_1_reg_818 <= h_1_fu_634_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op117_read_state8 = ap_const_boolean_1) and (weed_mask_tmp_data_V_empty_n = ap_const_logic_0))) and (icmp_ln23_reg_717 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                h_reg_724 <= h_fu_490_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_462_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                icmp_ln23_reg_717 <= icmp_ln23_fu_479_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln45_reg_783 <= icmp_ln45_fu_566_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                icmp_ln45_reg_783_pp1_iter10_reg <= icmp_ln45_reg_783_pp1_iter9_reg;
                icmp_ln45_reg_783_pp1_iter11_reg <= icmp_ln45_reg_783_pp1_iter10_reg;
                icmp_ln45_reg_783_pp1_iter12_reg <= icmp_ln45_reg_783_pp1_iter11_reg;
                icmp_ln45_reg_783_pp1_iter13_reg <= icmp_ln45_reg_783_pp1_iter12_reg;
                icmp_ln45_reg_783_pp1_iter14_reg <= icmp_ln45_reg_783_pp1_iter13_reg;
                icmp_ln45_reg_783_pp1_iter15_reg <= icmp_ln45_reg_783_pp1_iter14_reg;
                icmp_ln45_reg_783_pp1_iter16_reg <= icmp_ln45_reg_783_pp1_iter15_reg;
                icmp_ln45_reg_783_pp1_iter17_reg <= icmp_ln45_reg_783_pp1_iter16_reg;
                icmp_ln45_reg_783_pp1_iter18_reg <= icmp_ln45_reg_783_pp1_iter17_reg;
                icmp_ln45_reg_783_pp1_iter19_reg <= icmp_ln45_reg_783_pp1_iter18_reg;
                icmp_ln45_reg_783_pp1_iter20_reg <= icmp_ln45_reg_783_pp1_iter19_reg;
                icmp_ln45_reg_783_pp1_iter21_reg <= icmp_ln45_reg_783_pp1_iter20_reg;
                icmp_ln45_reg_783_pp1_iter22_reg <= icmp_ln45_reg_783_pp1_iter21_reg;
                icmp_ln45_reg_783_pp1_iter23_reg <= icmp_ln45_reg_783_pp1_iter22_reg;
                icmp_ln45_reg_783_pp1_iter24_reg <= icmp_ln45_reg_783_pp1_iter23_reg;
                icmp_ln45_reg_783_pp1_iter25_reg <= icmp_ln45_reg_783_pp1_iter24_reg;
                icmp_ln45_reg_783_pp1_iter26_reg <= icmp_ln45_reg_783_pp1_iter25_reg;
                icmp_ln45_reg_783_pp1_iter27_reg <= icmp_ln45_reg_783_pp1_iter26_reg;
                icmp_ln45_reg_783_pp1_iter28_reg <= icmp_ln45_reg_783_pp1_iter27_reg;
                icmp_ln45_reg_783_pp1_iter29_reg <= icmp_ln45_reg_783_pp1_iter28_reg;
                icmp_ln45_reg_783_pp1_iter2_reg <= icmp_ln45_reg_783;
                icmp_ln45_reg_783_pp1_iter30_reg <= icmp_ln45_reg_783_pp1_iter29_reg;
                icmp_ln45_reg_783_pp1_iter31_reg <= icmp_ln45_reg_783_pp1_iter30_reg;
                icmp_ln45_reg_783_pp1_iter32_reg <= icmp_ln45_reg_783_pp1_iter31_reg;
                icmp_ln45_reg_783_pp1_iter33_reg <= icmp_ln45_reg_783_pp1_iter32_reg;
                icmp_ln45_reg_783_pp1_iter34_reg <= icmp_ln45_reg_783_pp1_iter33_reg;
                icmp_ln45_reg_783_pp1_iter35_reg <= icmp_ln45_reg_783_pp1_iter34_reg;
                icmp_ln45_reg_783_pp1_iter36_reg <= icmp_ln45_reg_783_pp1_iter35_reg;
                icmp_ln45_reg_783_pp1_iter3_reg <= icmp_ln45_reg_783_pp1_iter2_reg;
                icmp_ln45_reg_783_pp1_iter4_reg <= icmp_ln45_reg_783_pp1_iter3_reg;
                icmp_ln45_reg_783_pp1_iter5_reg <= icmp_ln45_reg_783_pp1_iter4_reg;
                icmp_ln45_reg_783_pp1_iter6_reg <= icmp_ln45_reg_783_pp1_iter5_reg;
                icmp_ln45_reg_783_pp1_iter7_reg <= icmp_ln45_reg_783_pp1_iter6_reg;
                icmp_ln45_reg_783_pp1_iter8_reg <= icmp_ln45_reg_783_pp1_iter7_reg;
                icmp_ln45_reg_783_pp1_iter9_reg <= icmp_ln45_reg_783_pp1_iter8_reg;
                quadrant_weed_V_addr_1_reg_787_pp1_iter10_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter9_reg;
                quadrant_weed_V_addr_1_reg_787_pp1_iter11_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter10_reg;
                quadrant_weed_V_addr_1_reg_787_pp1_iter12_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter11_reg;
                quadrant_weed_V_addr_1_reg_787_pp1_iter13_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter12_reg;
                quadrant_weed_V_addr_1_reg_787_pp1_iter14_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter13_reg;
                quadrant_weed_V_addr_1_reg_787_pp1_iter15_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter14_reg;
                quadrant_weed_V_addr_1_reg_787_pp1_iter16_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter15_reg;
                quadrant_weed_V_addr_1_reg_787_pp1_iter17_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter16_reg;
                quadrant_weed_V_addr_1_reg_787_pp1_iter18_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter17_reg;
                quadrant_weed_V_addr_1_reg_787_pp1_iter19_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter18_reg;
                quadrant_weed_V_addr_1_reg_787_pp1_iter20_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter19_reg;
                quadrant_weed_V_addr_1_reg_787_pp1_iter21_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter20_reg;
                quadrant_weed_V_addr_1_reg_787_pp1_iter22_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter21_reg;
                quadrant_weed_V_addr_1_reg_787_pp1_iter23_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter22_reg;
                quadrant_weed_V_addr_1_reg_787_pp1_iter24_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter23_reg;
                quadrant_weed_V_addr_1_reg_787_pp1_iter25_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter24_reg;
                quadrant_weed_V_addr_1_reg_787_pp1_iter26_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter25_reg;
                quadrant_weed_V_addr_1_reg_787_pp1_iter27_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter26_reg;
                quadrant_weed_V_addr_1_reg_787_pp1_iter28_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter27_reg;
                quadrant_weed_V_addr_1_reg_787_pp1_iter29_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter28_reg;
                quadrant_weed_V_addr_1_reg_787_pp1_iter2_reg <= quadrant_weed_V_addr_1_reg_787;
                quadrant_weed_V_addr_1_reg_787_pp1_iter30_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter29_reg;
                quadrant_weed_V_addr_1_reg_787_pp1_iter31_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter30_reg;
                quadrant_weed_V_addr_1_reg_787_pp1_iter32_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter31_reg;
                quadrant_weed_V_addr_1_reg_787_pp1_iter33_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter32_reg;
                quadrant_weed_V_addr_1_reg_787_pp1_iter34_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter33_reg;
                quadrant_weed_V_addr_1_reg_787_pp1_iter35_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter34_reg;
                quadrant_weed_V_addr_1_reg_787_pp1_iter36_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter35_reg;
                quadrant_weed_V_addr_1_reg_787_pp1_iter3_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter2_reg;
                quadrant_weed_V_addr_1_reg_787_pp1_iter4_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter3_reg;
                quadrant_weed_V_addr_1_reg_787_pp1_iter5_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter4_reg;
                quadrant_weed_V_addr_1_reg_787_pp1_iter6_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter5_reg;
                quadrant_weed_V_addr_1_reg_787_pp1_iter7_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter6_reg;
                quadrant_weed_V_addr_1_reg_787_pp1_iter8_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter7_reg;
                quadrant_weed_V_addr_1_reg_787_pp1_iter9_reg <= quadrant_weed_V_addr_1_reg_787_pp1_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_fu_606_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                icmp_ln51_reg_811 <= icmp_ln51_fu_623_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((weed_mask_out_data_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                icmp_ln895_1_reg_750 <= icmp_ln895_1_fu_536_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                p_Val2_s_reg_778 <= quadrant_space_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                p_v_1_reg_806 <= p_v_1_fu_612_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                p_v_reg_712 <= p_v_fu_468_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op117_read_state8 = ap_const_boolean_1) and (weed_mask_tmp_data_V_empty_n = ap_const_logic_0))) and (grp_fu_413_p2 = ap_const_lv1_0) and (icmp_ln26_fu_484_p2 = ap_const_lv1_0) and (icmp_ln27_fu_496_p2 = ap_const_lv1_1) and (icmp_ln23_reg_717 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                quadrant_space_addr_2_reg_740 <= zext_ln30_fu_502_p1(3 - 1 downto 0);
                    zext_ln30_reg_735(7 downto 0) <= zext_ln30_fu_502_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_fu_566_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                quadrant_weed_V_addr_1_reg_787 <= zext_ln45_reg_768(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln895_1_fu_536_p2 = ap_const_lv1_0) and (weed_mask_out_data_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                quadrant_weed_V_addr_2_reg_754 <= zext_ln30_reg_735(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                seg_index_reg_672 <= seg_index_fu_425_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                segments_load_reg_702 <= segments_q1;
                v_limit_reg_696 <= segments_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln44_fu_549_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                    zext_ln45_reg_768(2 downto 0) <= zext_ln45_fu_561_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln30_reg_735(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln45_reg_768(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, weed_mask_tmp_data_V_empty_n, weed_mask_out_data_V_empty_n, ap_CS_fsm_state8, icmp_ln23_reg_717, icmp_ln26_fu_484_p2, icmp_ln27_fu_496_p2, ap_CS_fsm_state52, icmp_ln51_reg_811, icmp_ln54_fu_628_p2, ap_CS_fsm_state9, icmp_ln13_fu_419_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln21_fu_462_p2, ap_CS_fsm_state7, ap_predicate_op117_read_state8, grp_fu_413_p2, icmp_ln44_fu_549_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state51, icmp_ln49_fu_606_p2, ap_predicate_op232_read_state52, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter36, ap_enable_reg_pp1_iter37, grp_bitwise_and_fu_403_ap_done, ap_CS_fsm_state2, icmp_ln16_fu_431_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_bitwise_and_fu_403_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln13_fu_419_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln16_fu_431_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln21_fu_462_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if ((not(((ap_predicate_op117_read_state8 = ap_const_boolean_1) and (weed_mask_tmp_data_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8) and ((icmp_ln26_fu_484_p2 = ap_const_lv1_1) or (icmp_ln23_reg_717 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif ((not(((ap_predicate_op117_read_state8 = ap_const_boolean_1) and (weed_mask_tmp_data_V_empty_n = ap_const_logic_0))) and (grp_fu_413_p2 = ap_const_lv1_0) and (icmp_ln26_fu_484_p2 = ap_const_lv1_0) and (icmp_ln27_fu_496_p2 = ap_const_lv1_1) and (icmp_ln23_reg_717 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                elsif ((not(((ap_predicate_op117_read_state8 = ap_const_boolean_1) and (weed_mask_tmp_data_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8) and (((icmp_ln27_fu_496_p2 = ap_const_lv1_0) and (icmp_ln26_fu_484_p2 = ap_const_lv1_0) and (icmp_ln23_reg_717 = ap_const_lv1_1)) or ((icmp_ln26_fu_484_p2 = ap_const_lv1_0) and (grp_fu_413_p2 = ap_const_lv1_1) and (icmp_ln23_reg_717 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((weed_mask_out_data_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((icmp_ln44_fu_549_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp1_iter36 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter37 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter36 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter37 = ap_const_logic_1)) or ((icmp_ln44_fu_549_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                if (((icmp_ln49_fu_606_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state52 => 
                if ((not(((ap_predicate_op232_read_state52 = ap_const_boolean_1) and (weed_mask_tmp_data_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state52) and ((icmp_ln51_reg_811 = ap_const_lv1_0) or (icmp_ln54_fu_628_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                elsif ((not(((ap_predicate_op232_read_state52 = ap_const_boolean_1) and (weed_mask_tmp_data_V_empty_n = ap_const_logic_0))) and (icmp_ln54_fu_628_p2 = ap_const_lv1_0) and (icmp_ln51_reg_811 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln30_fu_529_p2 <= std_logic_vector(unsigned(quadrant_space_q0) + unsigned(ap_const_lv16_1));
    add_ln35_fu_511_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(trunc_ln26_fu_507_p1));
    add_ln62_fu_650_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(trunc_ln54_fu_646_p1));
    add_ln703_fu_542_p2 <= std_logic_vector(unsigned(quadrant_weed_V_q0) + unsigned(ap_const_lv24_100));
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(11);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(12);
    ap_CS_fsm_state51 <= ap_CS_fsm(13);
    ap_CS_fsm_state52 <= ap_CS_fsm(14);
    ap_CS_fsm_state53 <= ap_CS_fsm(15);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state12_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_ignore_call5_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1_ignore_call5 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state20_pp1_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp1_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp1_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp1_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp1_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp1_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp1_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp1_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp1_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp1_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp1_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp1_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp1_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp1_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp1_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp1_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp1_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp1_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp1_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp1_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp1_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp1_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp1_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp1_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp1_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp1_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp1_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp1_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp1_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state52_assign_proc : process(weed_mask_tmp_data_V_empty_n, ap_predicate_op232_read_state52)
    begin
                ap_block_state52 <= ((ap_predicate_op232_read_state52 = ap_const_boolean_1) and (weed_mask_tmp_data_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state8_assign_proc : process(weed_mask_tmp_data_V_empty_n, ap_predicate_op117_read_state8)
    begin
                ap_block_state8 <= ((ap_predicate_op117_read_state8 = ap_const_boolean_1) and (weed_mask_tmp_data_V_empty_n = ap_const_logic_0));
    end process;


    ap_condition_842_assign_proc : process(weed_mask_tmp_data_V_empty_n, ap_CS_fsm_state52, icmp_ln51_reg_811, icmp_ln54_fu_628_p2, ap_predicate_op232_read_state52)
    begin
                ap_condition_842 <= (not(((ap_predicate_op232_read_state52 = ap_const_boolean_1) and (weed_mask_tmp_data_V_empty_n = ap_const_logic_0))) and (icmp_ln54_fu_628_p2 = ap_const_lv1_0) and (icmp_ln51_reg_811 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state52));
    end process;


    ap_condition_pp1_exit_iter0_state12_assign_proc : process(icmp_ln44_fu_549_p2)
    begin
        if ((icmp_ln44_fu_549_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state12 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, icmp_ln13_fu_419_p2, ap_CS_fsm_state3)
    begin
        if (((icmp_ln13_fu_419_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter6, ap_enable_reg_pp1_iter7, ap_enable_reg_pp1_iter8, ap_enable_reg_pp1_iter9, ap_enable_reg_pp1_iter10, ap_enable_reg_pp1_iter11, ap_enable_reg_pp1_iter12, ap_enable_reg_pp1_iter13, ap_enable_reg_pp1_iter14, ap_enable_reg_pp1_iter15, ap_enable_reg_pp1_iter16, ap_enable_reg_pp1_iter17, ap_enable_reg_pp1_iter18, ap_enable_reg_pp1_iter19, ap_enable_reg_pp1_iter20, ap_enable_reg_pp1_iter21, ap_enable_reg_pp1_iter22, ap_enable_reg_pp1_iter23, ap_enable_reg_pp1_iter24, ap_enable_reg_pp1_iter25, ap_enable_reg_pp1_iter26, ap_enable_reg_pp1_iter27, ap_enable_reg_pp1_iter28, ap_enable_reg_pp1_iter29, ap_enable_reg_pp1_iter30, ap_enable_reg_pp1_iter31, ap_enable_reg_pp1_iter32, ap_enable_reg_pp1_iter33, ap_enable_reg_pp1_iter34, ap_enable_reg_pp1_iter35, ap_enable_reg_pp1_iter36, ap_enable_reg_pp1_iter37)
    begin
        if (((ap_enable_reg_pp1_iter37 = ap_const_logic_0) and (ap_enable_reg_pp1_iter36 = ap_const_logic_0) and (ap_enable_reg_pp1_iter35 = ap_const_logic_0) and (ap_enable_reg_pp1_iter34 = ap_const_logic_0) and (ap_enable_reg_pp1_iter33 = ap_const_logic_0) and (ap_enable_reg_pp1_iter32 = ap_const_logic_0) and (ap_enable_reg_pp1_iter31 = ap_const_logic_0) and (ap_enable_reg_pp1_iter30 = ap_const_logic_0) and (ap_enable_reg_pp1_iter29 = ap_const_logic_0) and (ap_enable_reg_pp1_iter28 = ap_const_logic_0) and (ap_enable_reg_pp1_iter27 = ap_const_logic_0) and (ap_enable_reg_pp1_iter26 = ap_const_logic_0) and (ap_enable_reg_pp1_iter25 = ap_const_logic_0) and (ap_enable_reg_pp1_iter24 = ap_const_logic_0) and (ap_enable_reg_pp1_iter23 = ap_const_logic_0) and (ap_enable_reg_pp1_iter22 = ap_const_logic_0) and (ap_enable_reg_pp1_iter21 = ap_const_logic_0) and (ap_enable_reg_pp1_iter20 = ap_const_logic_0) and (ap_enable_reg_pp1_iter19 = ap_const_logic_0) and (ap_enable_reg_pp1_iter18 = ap_const_logic_0) and (ap_enable_reg_pp1_iter17 = ap_const_logic_0) and (ap_enable_reg_pp1_iter16 = ap_const_logic_0) and (ap_enable_reg_pp1_iter15 = ap_const_logic_0) and (ap_enable_reg_pp1_iter14 = ap_const_logic_0) and (ap_enable_reg_pp1_iter13 = ap_const_logic_0) and (ap_enable_reg_pp1_iter12 = ap_const_logic_0) and (ap_enable_reg_pp1_iter11 = ap_const_logic_0) and (ap_enable_reg_pp1_iter10 = ap_const_logic_0) and (ap_enable_reg_pp1_iter9 = ap_const_logic_0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_0) and (ap_enable_reg_pp1_iter7 = ap_const_logic_0) and (ap_enable_reg_pp1_iter6 = ap_const_logic_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_quadrant_index_0_phi_fu_249_p4 <= quadrant_index_0_reg_245;

    ap_predicate_op117_read_state8_assign_proc : process(icmp_ln23_reg_717, icmp_ln26_fu_484_p2, icmp_ln27_fu_496_p2)
    begin
                ap_predicate_op117_read_state8 <= ((icmp_ln26_fu_484_p2 = ap_const_lv1_0) and (icmp_ln27_fu_496_p2 = ap_const_lv1_1) and (icmp_ln23_reg_717 = ap_const_lv1_1));
    end process;


    ap_predicate_op232_read_state52_assign_proc : process(icmp_ln51_reg_811, icmp_ln54_fu_628_p2, icmp_ln55_fu_640_p2)
    begin
                ap_predicate_op232_read_state52 <= ((icmp_ln54_fu_628_p2 = ap_const_lv1_0) and (icmp_ln55_fu_640_p2 = ap_const_lv1_1) and (icmp_ln51_reg_811 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(icmp_ln13_fu_419_p2, ap_CS_fsm_state3)
    begin
        if (((icmp_ln13_fu_419_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_bitwise_and_fu_403_ap_start <= grp_bitwise_and_fu_403_ap_start_reg;
    grp_fu_413_p2 <= "1" when (weed_mask_tmp_data_V_dout = ap_const_lv2_0) else "0";
    grp_fu_591_p0 <= (quadrant_weed_V_q0 & ap_const_lv8_0);
    grp_fu_591_p1 <= grp_fu_591_p10(24 - 1 downto 0);
    grp_fu_591_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_572_p3),32));
    h_1_fu_634_p2 <= std_logic_vector(unsigned(h6_0_reg_359) + unsigned(ap_const_lv9_1));
    h_fu_490_p2 <= std_logic_vector(unsigned(h_0_reg_269) + unsigned(ap_const_lv9_1));
    i_3_fu_555_p2 <= std_logic_vector(unsigned(i1_0_reg_313) + unsigned(ap_const_lv3_1));
    i_fu_437_p2 <= std_logic_vector(unsigned(i_0_reg_223) + unsigned(ap_const_lv3_1));
    icmp_ln13_fu_419_p2 <= "1" when (seg_index_0_reg_211 = ap_const_lv4_C) else "0";
    icmp_ln16_fu_431_p2 <= "1" when (i_0_reg_223 = ap_const_lv3_5) else "0";
    icmp_ln21_fu_462_p2 <= "1" when (p_v_0_reg_234 = ap_const_lv5_13) else "0";
    icmp_ln23_fu_479_p2 <= "1" when (unsigned(v_fu_474_p2) < unsigned(v_limit_reg_696)) else "0";
    icmp_ln26_fu_484_p2 <= "1" when (h_0_reg_269 = ap_const_lv9_140) else "0";
    icmp_ln27_fu_496_p2 <= "1" when (unsigned(quadrant_index_0_reg_245) < unsigned(ap_const_lv8_5)) else "0";
    icmp_ln44_fu_549_p2 <= "1" when (i1_0_reg_313 = ap_const_lv3_5) else "0";
    icmp_ln45_fu_566_p2 <= "1" when (quadrant_space_q0 = ap_const_lv16_0) else "0";
    icmp_ln49_fu_606_p2 <= "1" when (p_v2_0_reg_324 = ap_const_lv5_13) else "0";
    icmp_ln51_fu_623_p2 <= "1" when (unsigned(v_1_fu_618_p2) < unsigned(v_limit_reg_696)) else "0";
    icmp_ln54_fu_628_p2 <= "1" when (h6_0_reg_359 = ap_const_lv9_140) else "0";
    icmp_ln55_fu_640_p2 <= "1" when (unsigned(quadrant_index4_0_reg_335) < unsigned(ap_const_lv8_5)) else "0";
    icmp_ln895_1_fu_536_p2 <= "1" when (weed_mask_out_data_V_dout = ap_const_lv8_0) else "0";

    opened_data_V_read_assign_proc : process(grp_bitwise_and_fu_403_p_src2_data_V_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            opened_data_V_read <= grp_bitwise_and_fu_403_p_src2_data_V_read;
        else 
            opened_data_V_read <= ap_const_logic_0;
        end if; 
    end process;

    p_v_1_fu_612_p2 <= std_logic_vector(unsigned(p_v2_0_reg_324) + unsigned(ap_const_lv5_1));
    p_v_fu_468_p2 <= std_logic_vector(unsigned(p_v_0_reg_234) + unsigned(ap_const_lv5_1));

    quadrant_space_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state4, zext_ln30_fu_502_p1, quadrant_space_addr_2_reg_740, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, zext_ln45_fu_561_p1, zext_ln17_fu_443_p1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            quadrant_space_address0 <= zext_ln45_fu_561_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            quadrant_space_address0 <= quadrant_space_addr_2_reg_740;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            quadrant_space_address0 <= zext_ln30_fu_502_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            quadrant_space_address0 <= zext_ln17_fu_443_p1(3 - 1 downto 0);
        else 
            quadrant_space_address0 <= "XXX";
        end if; 
    end process;


    quadrant_space_ce0_assign_proc : process(weed_mask_tmp_data_V_empty_n, weed_mask_out_data_V_empty_n, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_predicate_op117_read_state8, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (not(((ap_predicate_op117_read_state8 = ap_const_boolean_1) and (weed_mask_tmp_data_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((weed_mask_out_data_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            quadrant_space_ce0 <= ap_const_logic_1;
        else 
            quadrant_space_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    quadrant_space_d0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state4, add_ln30_fu_529_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            quadrant_space_d0 <= add_ln30_fu_529_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            quadrant_space_d0 <= ap_const_lv16_0;
        else 
            quadrant_space_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    quadrant_space_we0_assign_proc : process(weed_mask_out_data_V_empty_n, ap_CS_fsm_state9, ap_CS_fsm_state4, icmp_ln16_fu_431_p2)
    begin
        if ((((icmp_ln16_fu_431_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((weed_mask_out_data_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            quadrant_space_we0 <= ap_const_logic_1;
        else 
            quadrant_space_we0 <= ap_const_logic_0;
        end if; 
    end process;


    quadrant_weed_V_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state4, zext_ln30_reg_735, quadrant_weed_V_addr_2_reg_754, ap_CS_fsm_pp1_stage0, zext_ln45_reg_768, ap_enable_reg_pp1_iter1, ap_CS_fsm_state10, zext_ln17_fu_443_p1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            quadrant_weed_V_address0 <= zext_ln45_reg_768(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            quadrant_weed_V_address0 <= quadrant_weed_V_addr_2_reg_754;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            quadrant_weed_V_address0 <= zext_ln30_reg_735(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            quadrant_weed_V_address0 <= zext_ln17_fu_443_p1(3 - 1 downto 0);
        else 
            quadrant_weed_V_address0 <= "XXX";
        end if; 
    end process;


    quadrant_weed_V_ce0_assign_proc : process(weed_mask_out_data_V_empty_n, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((weed_mask_out_data_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            quadrant_weed_V_ce0 <= ap_const_logic_1;
        else 
            quadrant_weed_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    quadrant_weed_V_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter37)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter37 = ap_const_logic_1))) then 
            quadrant_weed_V_ce1 <= ap_const_logic_1;
        else 
            quadrant_weed_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    quadrant_weed_V_d0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state10, add_ln703_fu_542_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            quadrant_weed_V_d0 <= add_ln703_fu_542_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            quadrant_weed_V_d0 <= ap_const_lv24_0;
        else 
            quadrant_weed_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    quadrant_weed_V_d1 <= grp_fu_591_p2(24 - 1 downto 0);

    quadrant_weed_V_we0_assign_proc : process(ap_CS_fsm_state4, icmp_ln895_1_reg_750, icmp_ln16_fu_431_p2, ap_CS_fsm_state10)
    begin
        if ((((icmp_ln895_1_reg_750 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((icmp_ln16_fu_431_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            quadrant_weed_V_we0 <= ap_const_logic_1;
        else 
            quadrant_weed_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    quadrant_weed_V_we1_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln45_reg_783_pp1_iter36_reg, ap_enable_reg_pp1_iter37)
    begin
        if (((icmp_ln45_reg_783_pp1_iter36_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter37 = ap_const_logic_1))) then 
            quadrant_weed_V_we1 <= ap_const_logic_1;
        else 
            quadrant_weed_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    seg_index_fu_425_p2 <= std_logic_vector(unsigned(seg_index_0_reg_211) + unsigned(ap_const_lv4_1));
    segments_address0 <= zext_ln20_fu_449_p1(4 - 1 downto 0);
    segments_address1 <= zext_ln22_fu_454_p1(4 - 1 downto 0);

    segments_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            segments_ce0 <= ap_const_logic_1;
        else 
            segments_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    segments_ce1_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            segments_ce1 <= ap_const_logic_1;
        else 
            segments_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln34_fu_517_p3 <= 
        add_ln35_fu_511_p2 when (flag_quadrant_0_reg_257(0) = '1') else 
        trunc_ln26_fu_507_p1;
    select_ln61_fu_656_p3 <= 
        add_ln62_fu_650_p2 when (flag_quadrant5_0_reg_347(0) = '1') else 
        trunc_ln54_fu_646_p1;
    shl_ln_fu_572_p3 <= (p_Val2_s_reg_778 & ap_const_lv8_0);
    trunc_ln26_fu_507_p1 <= quadrant_index_0_reg_245(3 - 1 downto 0);
    trunc_ln54_fu_646_p1 <= quadrant_index4_0_reg_335(3 - 1 downto 0);
    v_1_fu_618_p2 <= std_logic_vector(unsigned(segments_load_reg_702) + unsigned(zext_ln49_fu_602_p1));
    v_fu_474_p2 <= std_logic_vector(unsigned(segments_load_reg_702) + unsigned(zext_ln21_fu_458_p1));
    weed_mask_out_data_V_din <= grp_bitwise_and_fu_403_p_dst_data_V_din;

    weed_mask_out_data_V_i_blk_n_assign_proc : process(weed_mask_out_data_V_empty_n, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            weed_mask_out_data_V_i_blk_n <= weed_mask_out_data_V_empty_n;
        else 
            weed_mask_out_data_V_i_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    weed_mask_out_data_V_read_assign_proc : process(weed_mask_out_data_V_empty_n, ap_CS_fsm_state9)
    begin
        if (((weed_mask_out_data_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            weed_mask_out_data_V_read <= ap_const_logic_1;
        else 
            weed_mask_out_data_V_read <= ap_const_logic_0;
        end if; 
    end process;


    weed_mask_out_data_V_write_assign_proc : process(grp_bitwise_and_fu_403_p_dst_data_V_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            weed_mask_out_data_V_write <= grp_bitwise_and_fu_403_p_dst_data_V_write;
        else 
            weed_mask_out_data_V_write <= ap_const_logic_0;
        end if; 
    end process;


    weed_mask_tmp_data_V_blk_n_assign_proc : process(weed_mask_tmp_data_V_empty_n, ap_CS_fsm_state8, icmp_ln23_reg_717, icmp_ln26_fu_484_p2, icmp_ln27_fu_496_p2, ap_CS_fsm_state52, icmp_ln51_reg_811, icmp_ln54_fu_628_p2, icmp_ln55_fu_640_p2)
    begin
        if ((((icmp_ln54_fu_628_p2 = ap_const_lv1_0) and (icmp_ln55_fu_640_p2 = ap_const_lv1_1) and (icmp_ln51_reg_811 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state52)) or ((icmp_ln26_fu_484_p2 = ap_const_lv1_0) and (icmp_ln27_fu_496_p2 = ap_const_lv1_1) and (icmp_ln23_reg_717 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            weed_mask_tmp_data_V_blk_n <= weed_mask_tmp_data_V_empty_n;
        else 
            weed_mask_tmp_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    weed_mask_tmp_data_V_read_assign_proc : process(weed_mask_tmp_data_V_empty_n, ap_CS_fsm_state8, ap_CS_fsm_state52, ap_predicate_op117_read_state8, ap_predicate_op232_read_state52, grp_bitwise_and_fu_403_p_src1_data_V_read, ap_CS_fsm_state2)
    begin
        if (((not(((ap_predicate_op232_read_state52 = ap_const_boolean_1) and (weed_mask_tmp_data_V_empty_n = ap_const_logic_0))) and (ap_predicate_op232_read_state52 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state52)) or (not(((ap_predicate_op117_read_state8 = ap_const_boolean_1) and (weed_mask_tmp_data_V_empty_n = ap_const_logic_0))) and (ap_predicate_op117_read_state8 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            weed_mask_tmp_data_V_read <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            weed_mask_tmp_data_V_read <= grp_bitwise_and_fu_403_p_src1_data_V_read;
        else 
            weed_mask_tmp_data_V_read <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln17_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_223),64));
    zext_ln20_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(seg_index_0_reg_211),64));
    zext_ln21_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_v_0_reg_234),8));
    zext_ln22_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(seg_index_reg_672),64));
    zext_ln30_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(quadrant_index_0_reg_245),64));
    zext_ln34_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_fu_517_p3),8));
    zext_ln45_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_313),64));
    zext_ln49_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_v2_0_reg_324),8));
    zext_ln61_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln61_fu_656_p3),8));
end behav;
