-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity least_squares_line is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    centroids_4_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    centroids_4_ce0 : OUT STD_LOGIC;
    centroids_4_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    size : IN STD_LOGIC_VECTOR (3 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of least_squares_line is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (71 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (71 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (71 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (71 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (71 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (71 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (71 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (71 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (71 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (71 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (71 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (71 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv63_7FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (62 downto 0) := "111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv7_5A : STD_LOGIC_VECTOR (6 downto 0) := "1011010";
    constant ap_const_lv65_1FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (64 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_39 : STD_LOGIC_VECTOR (7 downto 0) := "00111001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sum_x_0_reg_149 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_y_0_reg_161 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_xy_0_reg_173 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_xx_0_reg_185 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_197 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln185_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_931 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln185_reg_931_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_931_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_931_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_222_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln186_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_940 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_940_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_940_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_940_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln187_1_fu_242_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_x_1_fu_280_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_x_1_reg_959 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal sum_y_1_fu_287_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_y_1_reg_964 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_xy_1_fu_294_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_xy_1_reg_969 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_xx_1_fu_301_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln195_fu_396_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_399_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal udiv_ln195_reg_995 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal grp_fu_405_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal udiv_ln195_1_reg_1000 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln935_fu_747_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln935_reg_1005 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal grp_fu_212_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_phi_mux_sum_x_0_phi_fu_153_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_sum_y_0_phi_fu_165_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_sum_xy_0_phi_fu_177_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_sum_xx_0_phi_fu_189_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln187_fu_233_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln187_fu_238_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal centroids_y_1_load_n_fu_252_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln189_fu_268_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln189_fu_268_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_x_fu_246_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_y_fu_262_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_xy_fu_274_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_915_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln731_fu_314_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln731_fu_314_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln731_fu_307_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln731_fu_314_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln731_3_fu_332_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln731_9_fu_320_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln731_3_fu_332_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln731_2_fu_342_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln731_2_fu_342_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln731_2_fu_342_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln731_4_fu_352_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln731_4_fu_352_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln731_11_fu_328_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln731_3_fu_332_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln731_13_fu_348_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln731_4_fu_352_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal sub_ln731_4_fu_364_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal sub_ln731_fu_358_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal shl_ln731_1_fu_370_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_390_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_399_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_405_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_390_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_20_fu_411_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal p_Result_25_fu_421_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_fu_429_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_V_21_fu_435_p3 : STD_LOGIC_VECTOR (64 downto 0);
    signal p_Result_s_fu_443_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_453_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1081_fu_471_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_26_fu_475_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_483_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1074_fu_461_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1083_fu_491_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1075_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal NZeros_fu_495_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_501_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_fu_509_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_515_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_fu_521_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_fu_537_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln947_fu_541_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln947_fu_547_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal lshr_ln947_fu_551_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal p_Result_18_fu_557_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal icmp_ln947_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln947_1_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_fu_575_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_9_fu_589_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln949_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln954_fu_623_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln954_fu_629_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal sub_ln954_fu_639_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln954_1_fu_645_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal lshr_ln954_fu_633_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal shl_ln954_fu_649_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal icmp_ln954_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln954_fu_655_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln954_2_fu_659_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_fu_663_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_609_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_6_fu_671_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_8_fu_677_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_45_fu_691_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln943_fu_707_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln964_fu_699_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln964_fu_711_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_fu_717_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_10_fu_687_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_723_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_27_fu_731_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln935_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln739_fu_743_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_208_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal p_Val2_25_fu_755_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_23_fu_777_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_V_fu_781_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_V_22_fu_767_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln339_fu_795_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln339_fu_799_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_813_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_805_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_819_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_823_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1311_2_fu_831_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1311_3_fu_835_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln682_fu_791_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1287_fu_839_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_843_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_48_fu_855_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_4_fu_849_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln662_fu_863_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_867_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_877_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_28_fu_759_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_2_fu_885_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_27_fu_891_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln195_fu_899_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_915_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_915_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_390_ap_start : STD_LOGIC;
    signal grp_fu_390_ap_done : STD_LOGIC;
    signal grp_fu_399_ap_start : STD_LOGIC;
    signal grp_fu_399_ap_done : STD_LOGIC;
    signal grp_fu_405_ap_start : STD_LOGIC;
    signal grp_fu_405_ap_done : STD_LOGIC;
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (71 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln731_2_fu_342_p00 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln731_3_fu_332_p10 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln731_fu_314_p00 : STD_LOGIC_VECTOR (35 downto 0);

    component ip_accel_app_fmulKfY IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ip_accel_app_uitoLf8 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ip_accel_app_sdivMgi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (55 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component ip_accel_app_udivNgs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ip_accel_app_mac_OgC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    ip_accel_app_fmulKfY_U402 : component ip_accel_app_fmulKfY
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_212_p1,
        din1 => select_ln935_reg_1005,
        ce => ap_const_logic_1,
        dout => grp_fu_208_p2);

    ip_accel_app_uitoLf8_U403 : component ip_accel_app_uitoLf8
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => udiv_ln195_1_reg_1000,
        ce => ap_const_logic_1,
        dout => grp_fu_212_p1);

    ip_accel_app_sdivMgi_U404 : component ip_accel_app_sdivMgi
    generic map (
        ID => 1,
        NUM_STAGE => 68,
        din0_WIDTH => 64,
        din1_WIDTH => 56,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_390_ap_start,
        done => grp_fu_390_ap_done,
        din0 => grp_fu_390_p0,
        din1 => shl_ln731_1_fu_370_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_390_p2);

    ip_accel_app_udivNgs_U405 : component ip_accel_app_udivNgs
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_399_ap_start,
        done => grp_fu_399_ap_done,
        din0 => sum_y_0_reg_161,
        din1 => grp_fu_399_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_399_p2);

    ip_accel_app_udivNgs_U406 : component ip_accel_app_udivNgs
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_405_ap_start,
        done => grp_fu_405_ap_done,
        din0 => sum_x_0_reg_149,
        din1 => grp_fu_405_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_405_p2);

    ip_accel_app_mac_OgC_U407 : component ip_accel_app_mac_OgC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_915_p0,
        din1 => grp_fu_915_p1,
        din2 => ap_phi_mux_sum_xx_0_phi_fu_189_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_915_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
                    ap_return_0_preg <= select_ln935_reg_1005;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
                    ap_return_1_preg <= sub_ln195_fu_899_p2;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln185_fu_216_p2 = ap_const_lv1_0))) then 
                i_0_reg_197 <= i_fu_222_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_197 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    sum_x_0_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln185_reg_931_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                sum_x_0_reg_149 <= sum_x_1_reg_959;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sum_x_0_reg_149 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum_xx_0_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln185_reg_931_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                sum_xx_0_reg_185 <= sum_xx_1_fu_301_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sum_xx_0_reg_185 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum_xy_0_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln185_reg_931_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                sum_xy_0_reg_173 <= sum_xy_1_reg_969;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sum_xy_0_reg_173 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum_y_0_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln185_reg_931_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                sum_y_0_reg_161 <= sum_y_1_reg_964;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sum_y_0_reg_161 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln185_reg_931 <= icmp_ln185_fu_216_p2;
                icmp_ln185_reg_931_pp0_iter1_reg <= icmp_ln185_reg_931;
                icmp_ln186_reg_940_pp0_iter1_reg <= icmp_ln186_reg_940;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln185_reg_931_pp0_iter2_reg <= icmp_ln185_reg_931_pp0_iter1_reg;
                icmp_ln185_reg_931_pp0_iter3_reg <= icmp_ln185_reg_931_pp0_iter2_reg;
                icmp_ln186_reg_940_pp0_iter2_reg <= icmp_ln186_reg_940_pp0_iter1_reg;
                icmp_ln186_reg_940_pp0_iter3_reg <= icmp_ln186_reg_940_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln185_fu_216_p2 = ap_const_lv1_0))) then
                icmp_ln186_reg_940 <= icmp_ln186_fu_228_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then
                select_ln935_reg_1005 <= select_ln935_fu_747_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln185_reg_931 = ap_const_lv1_0))) then
                sum_x_1_reg_959 <= sum_x_1_fu_280_p3;
                sum_xy_1_reg_969 <= sum_xy_1_fu_294_p3;
                sum_y_1_reg_964 <= sum_y_1_fu_287_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                udiv_ln195_1_reg_1000 <= grp_fu_405_p2;
                udiv_ln195_reg_995 <= grp_fu_399_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln185_fu_216_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln185_fu_216_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln185_fu_216_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    NZeros_fu_495_p2 <= std_logic_vector(unsigned(trunc_ln1074_fu_461_p1) + unsigned(trunc_ln1083_fu_491_p1));
    a_fu_569_p2 <= (icmp_ln947_fu_531_p2 and icmp_ln947_1_fu_563_p2);
    add_ln339_fu_799_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(zext_ln339_fu_795_p1));
    add_ln954_fu_623_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE7) + signed(sub_ln944_fu_509_p2));
    add_ln964_fu_717_p2 <= std_logic_vector(unsigned(select_ln964_fu_699_p3) + unsigned(sub_ln964_fu_711_p2));
    and_ln949_fu_597_p2 <= (xor_ln949_fu_583_p2 and p_Result_9_fu_589_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state42 <= ap_CS_fsm(37);
    ap_CS_fsm_state7 <= ap_CS_fsm(2);
    ap_CS_fsm_state74 <= ap_CS_fsm(69);
    ap_CS_fsm_state75 <= ap_CS_fsm(70);
    ap_CS_fsm_state76 <= ap_CS_fsm(71);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln185_fu_216_p2)
    begin
        if ((icmp_ln185_fu_216_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state76)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state76) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_sum_x_0_phi_fu_153_p4_assign_proc : process(sum_x_0_reg_149, icmp_ln185_reg_931_pp0_iter1_reg, sum_x_1_reg_959, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln185_reg_931_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_sum_x_0_phi_fu_153_p4 <= sum_x_1_reg_959;
        else 
            ap_phi_mux_sum_x_0_phi_fu_153_p4 <= sum_x_0_reg_149;
        end if; 
    end process;


    ap_phi_mux_sum_xx_0_phi_fu_189_p4_assign_proc : process(sum_xx_0_reg_185, icmp_ln185_reg_931_pp0_iter3_reg, sum_xx_1_fu_301_p3, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln185_reg_931_pp0_iter3_reg = ap_const_lv1_0))) then 
            ap_phi_mux_sum_xx_0_phi_fu_189_p4 <= sum_xx_1_fu_301_p3;
        else 
            ap_phi_mux_sum_xx_0_phi_fu_189_p4 <= sum_xx_0_reg_185;
        end if; 
    end process;


    ap_phi_mux_sum_xy_0_phi_fu_177_p4_assign_proc : process(sum_xy_0_reg_173, icmp_ln185_reg_931_pp0_iter1_reg, sum_xy_1_reg_969, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln185_reg_931_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_sum_xy_0_phi_fu_177_p4 <= sum_xy_1_reg_969;
        else 
            ap_phi_mux_sum_xy_0_phi_fu_177_p4 <= sum_xy_0_reg_173;
        end if; 
    end process;


    ap_phi_mux_sum_y_0_phi_fu_165_p4_assign_proc : process(sum_y_0_reg_161, icmp_ln185_reg_931_pp0_iter1_reg, sum_y_1_reg_964, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln185_reg_931_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_sum_y_0_phi_fu_165_p4 <= sum_y_1_reg_964;
        else 
            ap_phi_mux_sum_y_0_phi_fu_165_p4 <= sum_y_0_reg_161;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(select_ln935_reg_1005, ap_CS_fsm_state76, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            ap_return_0 <= select_ln935_reg_1005;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state76, sub_ln195_fu_899_p2, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            ap_return_1 <= sub_ln195_fu_899_p2;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;

    bitcast_ln739_fu_743_p1 <= p_Result_27_fu_731_p5;
    centroids_4_address0 <= zext_ln187_fu_233_p1(2 - 1 downto 0);

    centroids_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            centroids_4_ce0 <= ap_const_logic_1;
        else 
            centroids_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    centroids_y_1_load_n_fu_252_p4 <= centroids_4_q0(47 downto 16);

    grp_fu_390_ap_start_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_390_ap_start <= ap_const_logic_1;
        else 
            grp_fu_390_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_390_p0 <= (sub_ln731_fu_358_p2 & ap_const_lv16_0);

    grp_fu_399_ap_start_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_399_ap_start <= ap_const_logic_1;
        else 
            grp_fu_399_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_399_p1 <= zext_ln195_fu_396_p1(4 - 1 downto 0);

    grp_fu_405_ap_start_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_405_ap_start <= ap_const_logic_1;
        else 
            grp_fu_405_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_405_p1 <= zext_ln195_fu_396_p1(4 - 1 downto 0);
    grp_fu_915_p0 <= zext_ln187_1_fu_242_p1(16 - 1 downto 0);
    grp_fu_915_p1 <= zext_ln187_1_fu_242_p1(16 - 1 downto 0);
    i_fu_222_p2 <= std_logic_vector(unsigned(i_0_reg_197) + unsigned(ap_const_lv4_1));
    icmp_ln1075_fu_465_p2 <= "1" when (p_Result_s_fu_443_p4 = ap_const_lv64_0) else "0";
    icmp_ln185_fu_216_p2 <= "1" when (i_0_reg_197 = ap_const_lv4_C) else "0";
    icmp_ln186_fu_228_p2 <= "1" when (unsigned(i_0_reg_197) < unsigned(size)) else "0";
    icmp_ln935_fu_415_p2 <= "1" when (grp_fu_390_p2 = ap_const_lv64_0) else "0";
    icmp_ln947_1_fu_563_p2 <= "0" when (p_Result_18_fu_557_p2 = ap_const_lv65_0) else "1";
    icmp_ln947_fu_531_p2 <= "1" when (signed(tmp_43_fu_521_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln954_fu_617_p2 <= "1" when (signed(lsb_index_fu_515_p2) > signed(ap_const_lv32_0)) else "0";
    isNeg_fu_805_p3 <= add_ln339_fu_799_p2(8 downto 8);
    l_fu_501_p3 <= 
        NZeros_fu_495_p2 when (icmp_ln1075_fu_465_p2(0) = '1') else 
        trunc_ln1074_fu_461_p1;
    lsb_index_fu_515_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE8) + signed(sub_ln944_fu_509_p2));
    lshr_ln947_fu_551_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv65_1FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln947_fu_547_p1(31-1 downto 0)))));
    lshr_ln954_fu_633_p2 <= std_logic_vector(shift_right(unsigned(tmp_V_21_fu_435_p3),to_integer(unsigned('0' & zext_ln954_fu_629_p1(31-1 downto 0)))));
    m_10_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_8_fu_677_p4),32));
    m_6_fu_671_p2 <= std_logic_vector(unsigned(m_fu_663_p3) + unsigned(or_ln_fu_609_p3));
    m_8_fu_677_p4 <= m_6_fu_671_p2(31 downto 1);
    m_fu_663_p3 <= 
        trunc_ln954_fu_655_p1 when (icmp_ln954_fu_617_p2(0) = '1') else 
        trunc_ln954_2_fu_659_p1;
    mantissa_V_fu_781_p4 <= ((ap_const_lv1_1 & tmp_V_23_fu_777_p1) & ap_const_lv1_0);
    mul_ln189_fu_268_p0 <= zext_ln187_1_fu_242_p1(16 - 1 downto 0);
    mul_ln189_fu_268_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln189_fu_268_p0) * signed(centroids_y_1_load_n_fu_252_p4))), 32));
    mul_ln731_2_fu_342_p0 <= mul_ln731_2_fu_342_p00(32 - 1 downto 0);
    mul_ln731_2_fu_342_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_xx_0_reg_185),36));
    mul_ln731_2_fu_342_p1 <= zext_ln731_fu_307_p1(4 - 1 downto 0);
    mul_ln731_2_fu_342_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln731_2_fu_342_p0) * unsigned(mul_ln731_2_fu_342_p1), 36));
    mul_ln731_3_fu_332_p0 <= zext_ln731_9_fu_320_p1(32 - 1 downto 0);
    mul_ln731_3_fu_332_p1 <= mul_ln731_3_fu_332_p10(32 - 1 downto 0);
    mul_ln731_3_fu_332_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_y_0_reg_161),48));
    mul_ln731_3_fu_332_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln731_3_fu_332_p0) * unsigned(mul_ln731_3_fu_332_p1), 48));
    mul_ln731_4_fu_352_p0 <= zext_ln731_9_fu_320_p1(32 - 1 downto 0);
    mul_ln731_4_fu_352_p1 <= zext_ln731_9_fu_320_p1(32 - 1 downto 0);
    mul_ln731_4_fu_352_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln731_4_fu_352_p0) * unsigned(mul_ln731_4_fu_352_p1), 48));
    mul_ln731_fu_314_p0 <= mul_ln731_fu_314_p00(32 - 1 downto 0);
    mul_ln731_fu_314_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_xy_0_reg_173),36));
    mul_ln731_fu_314_p1 <= zext_ln731_fu_307_p1(4 - 1 downto 0);
    mul_ln731_fu_314_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln731_fu_314_p0) * unsigned(mul_ln731_fu_314_p1), 36));
    or_ln949_fu_603_p2 <= (and_ln949_fu_597_p2 or a_fu_569_p2);
    or_ln_fu_609_p3 <= (ap_const_lv31_0 & or_ln949_fu_603_p2);
    p_Result_18_fu_557_p2 <= (tmp_V_21_fu_435_p3 and lshr_ln947_fu_551_p2);
    p_Result_25_fu_421_p3 <= grp_fu_390_p2(63 downto 63);
    p_Result_26_fu_475_p3 <= (trunc_ln1081_fu_471_p1 & ap_const_lv63_7FFFFFFFFFFFFFFF);
    p_Result_27_fu_731_p5 <= (tmp_8_fu_723_p3 & m_10_fu_687_p1(22 downto 0));
    p_Result_28_fu_759_p3 <= p_Val2_25_fu_755_p1(31 downto 31);
    p_Result_9_fu_589_p3 <= tmp_V_21_fu_435_p3(to_integer(unsigned(lsb_index_fu_515_p2)) downto to_integer(unsigned(lsb_index_fu_515_p2))) when (to_integer(unsigned(lsb_index_fu_515_p2))>= 0 and to_integer(unsigned(lsb_index_fu_515_p2))<=64) else "-";
    p_Result_s_fu_443_p4 <= tmp_V_21_fu_435_p3(64 downto 1);
    p_Val2_25_fu_755_p1 <= grp_fu_208_p2;
    p_Val2_27_fu_891_p3 <= 
        result_V_2_fu_885_p2 when (p_Result_28_fu_759_p3(0) = '1') else 
        p_Val2_s_fu_877_p3;
    p_Val2_s_fu_877_p3 <= 
        zext_ln662_fu_863_p1 when (isNeg_fu_805_p3(0) = '1') else 
        tmp_4_fu_867_p4;
    r_V_4_fu_849_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_fu_791_p1),to_integer(unsigned('0' & zext_ln1287_fu_839_p1(31-1 downto 0)))));
    r_V_fu_843_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_781_p4),to_integer(unsigned('0' & sext_ln1311_3_fu_835_p1(25-1 downto 0)))));
    result_V_2_fu_885_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_s_fu_877_p3));
    select_ln935_fu_747_p3 <= 
        ap_const_lv32_0 when (icmp_ln935_fu_415_p2(0) = '1') else 
        bitcast_ln739_fu_743_p1;
    select_ln964_fu_699_p3 <= 
        ap_const_lv8_7F when (tmp_45_fu_691_p3(0) = '1') else 
        ap_const_lv8_7E;
        sext_ln1311_2_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_823_p3),32));

        sext_ln1311_3_fu_835_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_823_p3),25));

        sext_ln1311_fu_819_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_813_p2),9));

    shl_ln731_1_fu_370_p3 <= (sub_ln731_4_fu_364_p2 & ap_const_lv8_0);
    shl_ln954_fu_649_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_21_fu_435_p3),to_integer(unsigned('0' & zext_ln954_1_fu_645_p1(31-1 downto 0)))));
    sub_ln1311_fu_813_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_22_fu_767_p4));
    sub_ln195_fu_899_p2 <= std_logic_vector(unsigned(udiv_ln195_reg_995) - unsigned(p_Val2_27_fu_891_p3));
    sub_ln731_4_fu_364_p2 <= std_logic_vector(unsigned(zext_ln731_13_fu_348_p1) - unsigned(mul_ln731_4_fu_352_p2));
    sub_ln731_fu_358_p2 <= std_logic_vector(unsigned(zext_ln731_11_fu_328_p1) - unsigned(mul_ln731_3_fu_332_p2));
    sub_ln944_fu_509_p2 <= std_logic_vector(unsigned(ap_const_lv32_41) - unsigned(l_fu_501_p3));
    sub_ln947_fu_541_p2 <= std_logic_vector(signed(ap_const_lv7_5A) - signed(trunc_ln947_fu_537_p1));
    sub_ln954_fu_639_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_fu_509_p2));
    sub_ln964_fu_711_p2 <= std_logic_vector(unsigned(ap_const_lv8_39) - unsigned(trunc_ln943_fu_707_p1));
    sum_x_1_fu_280_p3 <= 
        sum_x_fu_246_p2 when (icmp_ln186_reg_940(0) = '1') else 
        ap_phi_mux_sum_x_0_phi_fu_153_p4;
    sum_x_fu_246_p2 <= std_logic_vector(unsigned(zext_ln187_1_fu_242_p1) + unsigned(ap_phi_mux_sum_x_0_phi_fu_153_p4));
    sum_xx_1_fu_301_p3 <= 
        grp_fu_915_p3 when (icmp_ln186_reg_940_pp0_iter3_reg(0) = '1') else 
        sum_xx_0_reg_185;
    sum_xy_1_fu_294_p3 <= 
        sum_xy_fu_274_p2 when (icmp_ln186_reg_940(0) = '1') else 
        ap_phi_mux_sum_xy_0_phi_fu_177_p4;
    sum_xy_fu_274_p2 <= std_logic_vector(unsigned(ap_phi_mux_sum_xy_0_phi_fu_177_p4) + unsigned(mul_ln189_fu_268_p2));
    sum_y_1_fu_287_p3 <= 
        sum_y_fu_262_p2 when (icmp_ln186_reg_940(0) = '1') else 
        ap_phi_mux_sum_y_0_phi_fu_165_p4;
    sum_y_fu_262_p2 <= std_logic_vector(unsigned(ap_phi_mux_sum_y_0_phi_fu_165_p4) + unsigned(centroids_y_1_load_n_fu_252_p4));
    tmp_43_fu_521_p4 <= lsb_index_fu_515_p2(31 downto 1);
    tmp_44_fu_575_p3 <= lsb_index_fu_515_p2(31 downto 31);
    tmp_45_fu_691_p3 <= m_6_fu_671_p2(25 downto 25);
    tmp_48_fu_855_p3 <= r_V_fu_843_p2(24 downto 24);
    tmp_4_fu_867_p4 <= r_V_4_fu_849_p2(55 downto 24);
    tmp_8_fu_723_p3 <= (p_Result_25_fu_421_p3 & add_ln964_fu_717_p2);
        tmp_V_20_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_390_p2),65));

    tmp_V_21_fu_435_p3 <= 
        tmp_V_fu_429_p2 when (p_Result_25_fu_421_p3(0) = '1') else 
        tmp_V_20_fu_411_p1;
    tmp_V_22_fu_767_p4 <= p_Val2_25_fu_755_p1(30 downto 23);
    tmp_V_23_fu_777_p1 <= p_Val2_25_fu_755_p1(23 - 1 downto 0);
    tmp_V_fu_429_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(tmp_V_20_fu_411_p1));
    
    tmp_fu_483_p3_proc : process(p_Result_26_fu_475_p3)
    begin
        tmp_fu_483_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 64 - 1 downto 0 loop
            if p_Result_26_fu_475_p3(i) = '1' then
                tmp_fu_483_p3 <= std_logic_vector(to_unsigned(64-1-i,64));
                exit;
            end if;
        end loop;
    end process;

    
    tmp_s_fu_453_p3_proc : process(p_Result_s_fu_443_p4)
    begin
        tmp_s_fu_453_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 64 - 1 downto 0 loop
            if p_Result_s_fu_443_p4(i) = '1' then
                tmp_s_fu_453_p3 <= std_logic_vector(to_unsigned(64-1-i,64));
                exit;
            end if;
        end loop;
    end process;

    trunc_ln1074_fu_461_p1 <= tmp_s_fu_453_p3(32 - 1 downto 0);
    trunc_ln1081_fu_471_p1 <= tmp_V_21_fu_435_p3(1 - 1 downto 0);
    trunc_ln1083_fu_491_p1 <= tmp_fu_483_p3(32 - 1 downto 0);
    trunc_ln187_fu_238_p1 <= centroids_4_q0(16 - 1 downto 0);
    trunc_ln943_fu_707_p1 <= l_fu_501_p3(8 - 1 downto 0);
    trunc_ln947_fu_537_p1 <= sub_ln944_fu_509_p2(7 - 1 downto 0);
    trunc_ln954_2_fu_659_p1 <= shl_ln954_fu_649_p2(32 - 1 downto 0);
    trunc_ln954_fu_655_p1 <= lshr_ln954_fu_633_p2(32 - 1 downto 0);
    ush_fu_823_p3 <= 
        sext_ln1311_fu_819_p1 when (isNeg_fu_805_p3(0) = '1') else 
        add_ln339_fu_799_p2;
    xor_ln949_fu_583_p2 <= (tmp_44_fu_575_p3 xor ap_const_lv1_1);
    zext_ln1287_fu_839_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_2_fu_831_p1),79));
    zext_ln187_1_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln187_fu_238_p1),32));
    zext_ln187_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_197),64));
    zext_ln195_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(size),32));
    zext_ln339_fu_795_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_22_fu_767_p4),9));
    zext_ln662_fu_863_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_48_fu_855_p3),32));
    zext_ln682_fu_791_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_781_p4),79));
    zext_ln731_11_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln731_fu_314_p2),48));
    zext_ln731_13_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln731_2_fu_342_p2),48));
    zext_ln731_9_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_x_0_reg_149),48));
    zext_ln731_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(size),36));
    zext_ln947_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_fu_541_p2),65));
    zext_ln954_1_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln954_fu_639_p2),65));
    zext_ln954_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln954_fu_623_p2),65));
end behav;
