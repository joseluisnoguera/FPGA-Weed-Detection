-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity get_total_vegetation_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (23 downto 0);
    agg_result_V : OUT STD_LOGIC_VECTOR (23 downto 0);
    agg_result_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of get_total_vegetation_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv67_2468ACF14 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000001001000110100010101100111100010100";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal zext_ln703_2_fu_83_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal agg_result_V_preg : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    signal zext_ln703_1_fu_45_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln703_fu_41_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal ret_V_fu_49_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal t_V_fu_55_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln1148_fu_67_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln1148_fu_67_p2 : STD_LOGIC_VECTOR (66 downto 0);
    signal tmp_fu_73_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln1148_fu_67_p00 : STD_LOGIC_VECTOR (66 downto 0);


begin




    agg_result_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                agg_result_V_preg(0) <= '0';
                agg_result_V_preg(1) <= '0';
                agg_result_V_preg(2) <= '0';
                agg_result_V_preg(3) <= '0';
                agg_result_V_preg(4) <= '0';
                agg_result_V_preg(5) <= '0';
                agg_result_V_preg(6) <= '0';
                agg_result_V_preg(7) <= '0';
                agg_result_V_preg(8) <= '0';
                agg_result_V_preg(9) <= '0';
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                                        agg_result_V_preg(9 downto 0) <= zext_ln703_2_fu_83_p1(9 downto 0);
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    agg_result_V_preg(23 downto 10) <= "00000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    agg_result_V_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, zext_ln703_2_fu_83_p1, agg_result_V_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            agg_result_V <= zext_ln703_2_fu_83_p1;
        else 
            agg_result_V <= agg_result_V_preg;
        end if; 
    end process;


    agg_result_V_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            agg_result_V_ap_vld <= ap_const_logic_1;
        else 
            agg_result_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1148_fu_67_p0 <= mul_ln1148_fu_67_p00(33 - 1 downto 0);
    mul_ln1148_fu_67_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_fu_55_p3),67));
    mul_ln1148_fu_67_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1148_fu_67_p0) * unsigned(ap_const_lv67_2468ACF14), 67));
    ret_V_fu_49_p2 <= std_logic_vector(unsigned(zext_ln703_1_fu_45_p1) + unsigned(zext_ln703_fu_41_p1));
    t_V_fu_55_p3 <= (ret_V_fu_49_p2 & ap_const_lv8_0);
    tmp_fu_73_p4 <= mul_ln1148_fu_67_p2(66 downto 57);
    zext_ln703_1_fu_45_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read1),25));
    zext_ln703_2_fu_83_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_73_p4),24));
    zext_ln703_fu_41_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read),25));
end behav;
