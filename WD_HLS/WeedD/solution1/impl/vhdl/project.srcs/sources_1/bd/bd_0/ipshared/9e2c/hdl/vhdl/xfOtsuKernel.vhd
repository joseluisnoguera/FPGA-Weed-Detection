-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity xfOtsuKernel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_hist_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_hist_ce0 : OUT STD_LOGIC;
    p_hist_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of xfOtsuKernel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp2_stage1 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv16_140 : STD_LOGIC_VECTOR (15 downto 0) := "0000000101000000";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_B4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010110100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv8_18 : STD_LOGIC_VECTOR (7 downto 0) := "00011000";
    constant ap_const_lv7_68 : STD_LOGIC_VECTOR (6 downto 0) := "1101000";
    constant ap_const_lv7_C : STD_LOGIC_VECTOR (6 downto 0) := "0001100";
    constant ap_const_lv32_B4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110100";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_A : STD_LOGIC_VECTOR (7 downto 0) := "00001010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_0_reg_168 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_op_assign_1_reg_179 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_reg_191 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_op_assign_2_reg_203 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_3_reg_215 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln88_1_fu_497_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln88_1_reg_1072 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sext_ln89_1_fu_517_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln89_1_reg_1078 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln89_2_fu_521_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln89_2_reg_1083 : STD_LOGIC_VECTOR (7 downto 0);
    signal total_V_fu_539_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal total_V_reg_1088 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln1500_fu_545_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1500_reg_1094 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_reg_1099 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln215_fu_557_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_reg_1104 : STD_LOGIC_VECTOR (63 downto 0);
    signal rhs_V_fu_561_p1 : STD_LOGIC_VECTOR (76 downto 0);
    signal rhs_V_reg_1109 : STD_LOGIC_VECTOR (76 downto 0);
    signal tmp_4_reg_1114 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1500_1_fu_573_p1 : STD_LOGIC_VECTOR (76 downto 0);
    signal zext_ln1500_1_reg_1119 : STD_LOGIC_VECTOR (76 downto 0);
    signal zext_ln1500_2_fu_587_p1 : STD_LOGIC_VECTOR (76 downto 0);
    signal zext_ln1500_2_reg_1124 : STD_LOGIC_VECTOR (76 downto 0);
    signal zext_ln1500_3_fu_601_p1 : STD_LOGIC_VECTOR (76 downto 0);
    signal zext_ln1500_3_reg_1129 : STD_LOGIC_VECTOR (76 downto 0);
    signal icmp_ln93_fu_605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_1134 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_611_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal zext_ln96_fu_617_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln96_reg_1143 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln101_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln101_reg_1153 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state6_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal i_1_fu_701_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_1_reg_1157 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal sum_fu_726_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal sext_ln115_fu_736_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln115_reg_1205 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln121_fu_740_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln121_reg_1210 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln121_1_fu_743_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln121_1_reg_1215 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln123_fu_747_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln123_reg_1221 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln127_fu_769_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln127_reg_1226 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln108_fu_788_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln108_reg_1231 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state9_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state13_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln108_reg_1231_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_794_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_2_reg_1235 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal wB_fu_817_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal wB_reg_1245 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp2_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage1 : signal is "none";
    signal ap_block_state10_pp2_stage1_iter0 : BOOLEAN;
    signal ap_block_state12_pp2_stage1_iter1 : BOOLEAN;
    signal ap_block_pp2_stage1_11001 : BOOLEAN;
    signal add_ln112_1_fu_823_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln112_1_reg_1250 : STD_LOGIC_VECTOR (24 downto 0);
    signal icmp_ln113_fu_829_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln113_reg_1256 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln113_reg_1256_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_fu_840_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_reg_1260 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_reg_1260_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal d_1_fu_917_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal d_1_reg_1264 : STD_LOGIC_VECTOR (63 downto 0);
    signal max_val_fu_925_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_val_reg_1270 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_val_reg_1270_pp2_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal res_fu_951_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_reg_1275 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_inv2_reg_1280 : STD_LOGIC_VECTOR (15 downto 0);
    signal val1_reg_1285 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal n1_reg_1290 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state6 : STD_LOGIC;
    signal ap_block_pp2_stage1_subdone : BOOLEAN;
    signal ap_predicate_tran12to14_state10 : BOOLEAN;
    signal ap_condition_pp2_exit_iter1_state12 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal HistArray_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal HistArray_V_ce0 : STD_LOGIC;
    signal HistArray_V_we0 : STD_LOGIC;
    signal HistArray_V_d0 : STD_LOGIC_VECTOR (32 downto 0);
    signal HistArray_V_q0 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_Inverse_fu_227_ap_start : STD_LOGIC;
    signal grp_Inverse_fu_227_ap_done : STD_LOGIC;
    signal grp_Inverse_fu_227_ap_idle : STD_LOGIC;
    signal grp_Inverse_fu_227_ap_ready : STD_LOGIC;
    signal grp_Inverse_fu_227_x : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Inverse_fu_227_M : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_Inverse_fu_227_N_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Inverse_fu_227_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Inverse_fu_227_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Inverse_fu_239_ap_start : STD_LOGIC;
    signal grp_Inverse_fu_239_ap_done : STD_LOGIC;
    signal grp_Inverse_fu_239_ap_idle : STD_LOGIC;
    signal grp_Inverse_fu_239_ap_ready : STD_LOGIC;
    signal grp_Inverse_fu_239_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Inverse_fu_239_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_i_op_assign_phi_fu_195_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_i_op_assign_2_phi_fu_207_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp2_stage1 : BOOLEAN;
    signal ap_phi_mux_i_op_assign_3_phi_fu_219_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal grp_Inverse_fu_227_ap_start_reg : STD_LOGIC := '0';
    signal ap_predicate_op198_call_state11_state10 : BOOLEAN;
    signal ap_predicate_op208_call_state12_state11 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln104_fu_707_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln112_fu_800_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal varMax_0_fu_100 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln138_1_fu_1049_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_op_assign_4_fu_104 : STD_LOGIC_VECTOR (63 downto 0);
    signal sumB_fu_867_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal thresh_write_assign_fu_108 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln138_fu_1042_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal n2_1_fu_112 : STD_LOGIC_VECTOR (7 downto 0);
    signal n1_1_fu_116 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1500_fu_687_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln67_fu_277_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln67_fu_281_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln67_fu_287_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_297_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal and_ln_fu_307_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln72_fu_321_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln72_fu_327_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln65_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln65_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wdt_1_fu_291_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal wdt_2_fu_331_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln70_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wdt_3_fu_349_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln77_fu_371_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln77_fu_375_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln77_fu_381_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_391_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal and_ln1_fu_401_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln82_fu_415_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln82_fu_421_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln75_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln75_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal hgt_1_fu_385_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal hgt_2_fu_425_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln80_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal hgt_3_fu_443_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal wdt_4_fu_357_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln88_fu_475_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln88_1_fu_481_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln70_fu_459_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln88_fu_487_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln88_fu_493_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal hgt_4_fu_451_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln80_fu_467_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln89_fu_507_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln89_fu_513_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln88_fu_501_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln89_fu_525_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln209_1_fu_535_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln209_fu_531_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sub_ln1500_fu_577_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1500_fu_583_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1500_1_fu_591_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1500_1_fu_597_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_fu_626_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_fu_626_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_fu_626_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1352_fu_631_p1 : STD_LOGIC_VECTOR (76 downto 0);
    signal lshr_ln1500_fu_635_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln1500_fu_640_p2 : STD_LOGIC_VECTOR (76 downto 0);
    signal trunc_ln1500_1_fu_649_p1 : STD_LOGIC_VECTOR (44 downto 0);
    signal trunc_ln1500_fu_645_p1 : STD_LOGIC_VECTOR (44 downto 0);
    signal tmp2_V_fu_653_p3 : STD_LOGIC_VECTOR (44 downto 0);
    signal ret_V_1_fu_664_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_1_fu_664_p1 : STD_LOGIC_VECTOR (44 downto 0);
    signal ret_V_1_fu_664_p2 : STD_LOGIC_VECTOR (76 downto 0);
    signal shl_ln1500_1_fu_674_p2 : STD_LOGIC_VECTOR (76 downto 0);
    signal lshr_ln1500_1_fu_669_p2 : STD_LOGIC_VECTOR (76 downto 0);
    signal trunc_ln1500_2_fu_679_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln1500_3_fu_683_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln104_fu_716_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln104_fu_720_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln104_fu_720_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln115_fu_732_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln127_fu_751_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln127_fu_756_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln127_1_fu_760_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln127_1_fu_765_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln112_fu_805_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln112_2_fu_813_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln112_1_fu_809_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal lshr_ln115_fu_835_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_2_fu_857_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_2_fu_857_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_2_fu_857_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal zext_ln544_fu_863_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln121_fu_873_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln121_fu_873_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln123_fu_887_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln123_fu_887_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln123_fu_887_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal a1_fu_878_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal c1_fu_892_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal d_fu_897_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_903_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln125_fu_911_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln127_fu_942_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ashr_ln127_fu_946_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal wF_fu_938_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln135_fu_993_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln135_fu_993_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln135_fu_999_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln135_fu_993_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln135_2_fu_1002_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln136_fu_1016_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal maxtmp_fu_1006_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln136_fu_1022_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln136_fu_1022_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln136_fu_1016_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln136_1_fu_1026_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal varMax_fu_1030_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln138_fu_1036_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal mul_ln104_fu_720_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln123_fu_887_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln135_fu_993_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln135_fu_993_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln136_fu_1016_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_1_fu_664_p10 : STD_LOGIC_VECTOR (76 downto 0);
    signal ret_V_2_fu_857_p00 : STD_LOGIC_VECTOR (41 downto 0);
    signal ret_V_2_fu_857_p10 : STD_LOGIC_VECTOR (41 downto 0);
    signal ret_V_fu_626_p10 : STD_LOGIC_VECTOR (63 downto 0);

    component Inverse IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (15 downto 0);
        M : IN STD_LOGIC_VECTOR (5 downto 0);
        N_read : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component xfOtsuKernel_HistxdS IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (32 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;



begin
    HistArray_V_U : component xfOtsuKernel_HistxdS
    generic map (
        DataWidth => 33,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => HistArray_V_address0,
        ce0 => HistArray_V_ce0,
        we0 => HistArray_V_we0,
        d0 => HistArray_V_d0,
        q0 => HistArray_V_q0);

    grp_Inverse_fu_227 : component Inverse
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Inverse_fu_227_ap_start,
        ap_done => grp_Inverse_fu_227_ap_done,
        ap_idle => grp_Inverse_fu_227_ap_idle,
        ap_ready => grp_Inverse_fu_227_ap_ready,
        ap_ce => ap_const_logic_1,
        x => grp_Inverse_fu_227_x,
        M => grp_Inverse_fu_227_M,
        N_read => grp_Inverse_fu_227_N_read,
        ap_return_0 => grp_Inverse_fu_227_ap_return_0,
        ap_return_1 => grp_Inverse_fu_227_ap_return_1);

    grp_Inverse_fu_239 : component Inverse
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Inverse_fu_239_ap_start,
        ap_done => grp_Inverse_fu_239_ap_done,
        ap_idle => grp_Inverse_fu_239_ap_idle,
        ap_ready => grp_Inverse_fu_239_ap_ready,
        ap_ce => ap_const_logic_1,
        x => ap_const_lv16_B4,
        M => ap_const_lv6_10,
        N_read => ap_const_lv8_0,
        ap_return_0 => grp_Inverse_fu_239_ap_return_0,
        ap_return_1 => grp_Inverse_fu_239_ap_return_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state6);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_predicate_tran12to14_state10 = ap_const_boolean_1))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter1_state12) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter1_state12) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Inverse_fu_227_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Inverse_fu_227_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_predicate_op198_call_state11_state10 = ap_const_boolean_1)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_predicate_op208_call_state12_state11 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
                    grp_Inverse_fu_227_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Inverse_fu_227_ap_ready = ap_const_logic_1)) then 
                    grp_Inverse_fu_227_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln93_fu_605_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_0_reg_168 <= i_fu_611_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_0_reg_168 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_op_assign_1_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_op_assign_1_reg_179 <= ap_const_lv32_0;
            elsif (((icmp_ln101_reg_1153 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_op_assign_1_reg_179 <= sum_fu_726_p2;
            end if; 
        end if;
    end process;

    i_op_assign_2_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (((icmp_ln108_reg_1231_pp2_iter1_reg = ap_const_lv1_0) and (icmp_ln113_reg_1256 = ap_const_lv1_1)) or ((icmp_ln115_reg_1260 = ap_const_lv1_0) and (icmp_ln108_reg_1231_pp2_iter1_reg = ap_const_lv1_0))))) then 
                i_op_assign_2_reg_203 <= wB_reg_1245;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_op_assign_2_reg_203 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_op_assign_3_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (((icmp_ln108_reg_1231 = ap_const_lv1_0) and (icmp_ln113_reg_1256 = ap_const_lv1_1)) or ((icmp_ln115_reg_1260 = ap_const_lv1_0) and (icmp_ln108_reg_1231 = ap_const_lv1_0))))) then 
                i_op_assign_3_reg_215 <= i_2_reg_1235;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_op_assign_3_reg_215 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_op_assign_4_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln115_fu_840_p2 = ap_const_lv1_0) and (icmp_ln113_fu_829_p2 = ap_const_lv1_0) and (icmp_ln108_reg_1231 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then 
                i_op_assign_4_fu_104 <= sumB_fu_867_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_op_assign_4_fu_104 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    i_op_assign_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_op_assign_reg_191 <= ap_const_lv9_0;
            elsif (((icmp_ln101_reg_1153 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_op_assign_reg_191 <= i_1_reg_1157;
            end if; 
        end if;
    end process;

    thresh_write_assign_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln115_reg_1260_pp2_iter1_reg = ap_const_lv1_0) and (icmp_ln113_reg_1256_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                thresh_write_assign_fu_108 <= select_ln138_fu_1042_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                thresh_write_assign_fu_108 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    varMax_0_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln115_reg_1260_pp2_iter1_reg = ap_const_lv1_0) and (icmp_ln113_reg_1256_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                varMax_0_fu_100 <= select_ln138_1_fu_1049_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                varMax_0_fu_100 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln108_reg_1231 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then
                add_ln112_1_reg_1250 <= add_ln112_1_fu_823_p2;
                icmp_ln113_reg_1256 <= icmp_ln113_fu_829_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln115_fu_840_p2 = ap_const_lv1_0) and (icmp_ln113_fu_829_p2 = ap_const_lv1_0) and (icmp_ln108_reg_1231 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then
                d_1_reg_1264 <= d_1_fu_917_p3;
                max_val_reg_1270 <= max_val_fu_925_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                i_1_reg_1157 <= i_1_fu_701_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                i_2_reg_1235 <= i_2_fu_794_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln101_reg_1153 <= icmp_ln101_fu_695_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln108_reg_1231 <= icmp_ln108_fu_788_p2;
                icmp_ln108_reg_1231_pp2_iter1_reg <= icmp_ln108_reg_1231;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then
                icmp_ln113_reg_1256_pp2_iter1_reg <= icmp_ln113_reg_1256;
                icmp_ln115_reg_1260_pp2_iter1_reg <= icmp_ln115_reg_1260;
                max_val_reg_1270_pp2_iter1_reg <= max_val_reg_1270;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln113_fu_829_p2 = ap_const_lv1_0) and (icmp_ln108_reg_1231 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then
                icmp_ln115_reg_1260 <= icmp_ln115_fu_840_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln93_reg_1134 <= icmp_ln93_fu_605_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln115_reg_1260 = ap_const_lv1_0) and (icmp_ln113_reg_1256 = ap_const_lv1_0) and (icmp_ln108_reg_1231_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then
                n1_1_fu_116 <= grp_Inverse_fu_227_ap_return_1;
                n1_reg_1290 <= grp_Inverse_fu_227_ap_return_1;
                val1_reg_1285 <= grp_Inverse_fu_227_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln115_reg_1260_pp2_iter1_reg = ap_const_lv1_0) and (icmp_ln113_reg_1256_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                n2_1_fu_112 <= grp_Inverse_fu_227_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln115_reg_1260 = ap_const_lv1_0) and (icmp_ln113_reg_1256 = ap_const_lv1_0) and (icmp_ln108_reg_1231 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                res_reg_1275 <= res_fu_951_p1;
                x_inv2_reg_1280 <= wF_fu_938_p2(24 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    rhs_V_reg_1109(31 downto 0) <= rhs_V_fu_561_p1(31 downto 0);
                sext_ln88_1_reg_1072 <= sext_ln88_1_fu_497_p1;
                sext_ln89_1_reg_1078 <= sext_ln89_1_fu_517_p1;
                sext_ln89_2_reg_1083 <= sext_ln89_2_fu_521_p1;
                tmp_3_reg_1099 <= select_ln70_fu_459_p3(6 downto 6);
                tmp_4_reg_1114 <= select_ln80_fu_467_p3(6 downto 6);
                total_V_reg_1088 <= total_V_fu_539_p2;
                    zext_ln1500_1_reg_1119(31 downto 0) <= zext_ln1500_1_fu_573_p1(31 downto 0);
                    zext_ln1500_2_reg_1124(31 downto 0) <= zext_ln1500_2_fu_587_p1(31 downto 0);
                    zext_ln1500_3_reg_1129(31 downto 0) <= zext_ln1500_3_fu_601_p1(31 downto 0);
                    zext_ln1500_reg_1094(31 downto 0) <= zext_ln1500_fu_545_p1(31 downto 0);
                    zext_ln215_reg_1104(31 downto 0) <= zext_ln215_fu_557_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                sext_ln115_reg_1205 <= sext_ln115_fu_736_p1;
                    zext_ln121_1_reg_1215(31 downto 0) <= zext_ln121_1_fu_743_p1(31 downto 0);
                    zext_ln121_reg_1210(24 downto 0) <= zext_ln121_fu_740_p1(24 downto 0);
                    zext_ln123_reg_1221(31 downto 0) <= zext_ln123_fu_747_p1(31 downto 0);
                    zext_ln127_reg_1226(31 downto 0) <= zext_ln127_fu_769_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln108_reg_1231 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then
                wB_reg_1245 <= wB_fu_817_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln93_fu_605_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln96_reg_1143(8 downto 0) <= zext_ln96_fu_617_p1(8 downto 0);
            end if;
        end if;
    end process;
    zext_ln1500_reg_1094(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln215_reg_1104(63 downto 32) <= "00000000000000000000000000000000";
    rhs_V_reg_1109(76 downto 32) <= "000000000000000000000000000000000000000000000";
    zext_ln1500_1_reg_1119(76 downto 32) <= "000000000000000000000000000000000000000000000";
    zext_ln1500_2_reg_1124(76 downto 32) <= "000000000000000000000000000000000000000000000";
    zext_ln1500_3_reg_1129(76 downto 32) <= "000000000000000000000000000000000000000000000";
    zext_ln96_reg_1143(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln121_reg_1210(63 downto 25) <= "000000000000000000000000000000000000000";
    zext_ln121_1_reg_1215(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln123_reg_1221(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln127_reg_1226(63 downto 32) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln93_fu_605_p2, ap_enable_reg_pp0_iter0, icmp_ln101_fu_695_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter1, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_block_pp2_stage1_subdone, ap_block_pp2_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln93_fu_605_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln93_fu_605_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln101_fu_695_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln101_fu_695_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp2_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;

    HistArray_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, zext_ln96_reg_1143, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp0_iter1, ap_block_pp1_stage0, ap_block_pp2_stage0, ap_block_pp0_stage0, zext_ln104_fu_707_p1, zext_ln112_fu_800_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            HistArray_V_address0 <= zext_ln112_fu_800_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            HistArray_V_address0 <= zext_ln104_fu_707_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            HistArray_V_address0 <= zext_ln96_reg_1143(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            HistArray_V_address0 <= ap_const_lv64_0(8 - 1 downto 0);
        else 
            HistArray_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    HistArray_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            HistArray_V_ce0 <= ap_const_logic_1;
        else 
            HistArray_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    HistArray_V_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, select_ln1500_fu_687_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            HistArray_V_d0 <= select_ln1500_fu_687_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            HistArray_V_d0 <= ap_const_lv33_0;
        else 
            HistArray_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    HistArray_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln93_reg_1134, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln93_reg_1134 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            HistArray_V_we0 <= ap_const_logic_1;
        else 
            HistArray_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    a1_fu_878_p2 <= std_logic_vector(shift_right(unsigned(mul_ln121_fu_873_p2),to_integer(unsigned('0' & zext_ln121_1_reg_1215(31-1 downto 0)))));
    add_ln112_1_fu_823_p2 <= std_logic_vector(unsigned(trunc_ln112_2_fu_813_p1) + unsigned(trunc_ln112_1_fu_809_p1));
    add_ln115_fu_732_p2 <= std_logic_vector(signed(sext_ln89_2_reg_1083) + signed(sext_ln88_1_reg_1072));
    add_ln127_1_fu_760_p2 <= std_logic_vector(signed(sext_ln127_fu_756_p1) + signed(sext_ln89_1_reg_1078));
    add_ln127_fu_751_p2 <= std_logic_vector(signed(sext_ln88_1_reg_1072) + signed(ap_const_lv8_A));
    add_ln67_fu_281_p2 <= std_logic_vector(signed(ap_const_lv7_68) + signed(trunc_ln67_fu_277_p1));
    add_ln77_fu_375_p2 <= std_logic_vector(signed(ap_const_lv7_68) + signed(trunc_ln77_fu_371_p1));
    add_ln88_fu_487_p2 <= std_logic_vector(unsigned(shl_ln88_fu_475_p2) + unsigned(shl_ln88_1_fu_481_p2));
    and_ln1_fu_401_p3 <= (tmp_2_fu_391_p4 & ap_const_lv1_0);
    and_ln70_fu_343_p2 <= (xor_ln65_fu_337_p2 and icmp_ln70_fu_315_p2);
    and_ln80_fu_437_p2 <= (xor_ln75_fu_431_p2 and icmp_ln80_fu_409_p2);
    and_ln_fu_307_p3 <= (tmp_1_fu_297_p4 & ap_const_lv1_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_pp2_stage1 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(8);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp2_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp2_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln93_fu_605_p2)
    begin
        if ((icmp_ln93_fu_605_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state6_assign_proc : process(icmp_ln101_fu_695_p2)
    begin
        if ((icmp_ln101_fu_695_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter1_state12_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_condition_pp2_exit_iter1_state12 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter1_state12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_op_assign_2_phi_fu_207_p4_assign_proc : process(i_op_assign_2_reg_203, icmp_ln108_reg_1231_pp2_iter1_reg, wB_reg_1245, ap_CS_fsm_pp2_stage1, icmp_ln113_reg_1256, icmp_ln115_reg_1260, ap_enable_reg_pp2_iter1, ap_block_pp2_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (((icmp_ln108_reg_1231_pp2_iter1_reg = ap_const_lv1_0) and (icmp_ln113_reg_1256 = ap_const_lv1_1)) or ((icmp_ln115_reg_1260 = ap_const_lv1_0) and (icmp_ln108_reg_1231_pp2_iter1_reg = ap_const_lv1_0))))) then 
            ap_phi_mux_i_op_assign_2_phi_fu_207_p4 <= wB_reg_1245;
        else 
            ap_phi_mux_i_op_assign_2_phi_fu_207_p4 <= i_op_assign_2_reg_203;
        end if; 
    end process;


    ap_phi_mux_i_op_assign_3_phi_fu_219_p4_assign_proc : process(i_op_assign_3_reg_215, icmp_ln108_reg_1231, ap_CS_fsm_pp2_stage0, i_2_reg_1235, icmp_ln113_reg_1256, icmp_ln115_reg_1260, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (((icmp_ln108_reg_1231 = ap_const_lv1_0) and (icmp_ln113_reg_1256 = ap_const_lv1_1)) or ((icmp_ln115_reg_1260 = ap_const_lv1_0) and (icmp_ln108_reg_1231 = ap_const_lv1_0))))) then 
            ap_phi_mux_i_op_assign_3_phi_fu_219_p4 <= i_2_reg_1235;
        else 
            ap_phi_mux_i_op_assign_3_phi_fu_219_p4 <= i_op_assign_3_reg_215;
        end if; 
    end process;


    ap_phi_mux_i_op_assign_phi_fu_195_p4_assign_proc : process(i_op_assign_reg_191, icmp_ln101_reg_1153, ap_CS_fsm_pp1_stage0, i_1_reg_1157, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((icmp_ln101_reg_1153 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_i_op_assign_phi_fu_195_p4 <= i_1_reg_1157;
        else 
            ap_phi_mux_i_op_assign_phi_fu_195_p4 <= i_op_assign_reg_191;
        end if; 
    end process;


    ap_predicate_op198_call_state11_state10_assign_proc : process(icmp_ln108_reg_1231, icmp_ln113_fu_829_p2, icmp_ln115_fu_840_p2)
    begin
                ap_predicate_op198_call_state11_state10 <= ((icmp_ln115_fu_840_p2 = ap_const_lv1_0) and (icmp_ln113_fu_829_p2 = ap_const_lv1_0) and (icmp_ln108_reg_1231 = ap_const_lv1_0));
    end process;


    ap_predicate_op208_call_state12_state11_assign_proc : process(icmp_ln108_reg_1231, icmp_ln113_reg_1256, icmp_ln115_reg_1260)
    begin
                ap_predicate_op208_call_state12_state11 <= ((icmp_ln115_reg_1260 = ap_const_lv1_0) and (icmp_ln113_reg_1256 = ap_const_lv1_0) and (icmp_ln108_reg_1231 = ap_const_lv1_0));
    end process;


    ap_predicate_tran12to14_state10_assign_proc : process(icmp_ln108_reg_1231, icmp_ln113_fu_829_p2, icmp_ln115_fu_840_p2)
    begin
                ap_predicate_tran12to14_state10 <= ((icmp_ln108_reg_1231 = ap_const_lv1_1) or ((icmp_ln113_fu_829_p2 = ap_const_lv1_0) and (icmp_ln115_fu_840_p2 = ap_const_lv1_1)));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= thresh_write_assign_fu_108;
    ashr_ln127_fu_946_p2 <= std_logic_vector(shift_right(signed(mul_ln127_fu_942_p2),to_integer(unsigned('0' & zext_ln127_reg_1226(31-1 downto 0)))));
    c1_fu_892_p2 <= std_logic_vector(shift_right(unsigned(mul_ln123_fu_887_p2),to_integer(unsigned('0' & zext_ln121_1_reg_1215(31-1 downto 0)))));
    d_1_fu_917_p3 <= 
        sub_ln125_fu_911_p2 when (tmp_5_fu_903_p3(0) = '1') else 
        d_fu_897_p2;
    d_fu_897_p2 <= std_logic_vector(unsigned(a1_fu_878_p2) - unsigned(c1_fu_892_p2));

    grp_Inverse_fu_227_M_assign_proc : process(ap_CS_fsm_state1, icmp_ln108_reg_1231, ap_CS_fsm_pp2_stage0, icmp_ln108_reg_1231_pp2_iter1_reg, ap_CS_fsm_pp2_stage1, icmp_ln113_reg_1256, icmp_ln115_reg_1260, ap_enable_reg_pp2_iter1, ap_block_pp2_stage1, ap_block_pp2_stage0)
    begin
        if ((((icmp_ln115_reg_1260 = ap_const_lv1_0) and (icmp_ln113_reg_1256 = ap_const_lv1_0) and (icmp_ln108_reg_1231_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((icmp_ln115_reg_1260 = ap_const_lv1_0) and (icmp_ln113_reg_1256 = ap_const_lv1_0) and (icmp_ln108_reg_1231 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            grp_Inverse_fu_227_M <= ap_const_lv6_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_Inverse_fu_227_M <= ap_const_lv6_10;
        else 
            grp_Inverse_fu_227_M <= "XXXXXX";
        end if; 
    end process;


    grp_Inverse_fu_227_N_read_assign_proc : process(ap_CS_fsm_state1, icmp_ln108_reg_1231, ap_CS_fsm_pp2_stage0, icmp_ln108_reg_1231_pp2_iter1_reg, ap_CS_fsm_pp2_stage1, icmp_ln113_reg_1256, icmp_ln115_reg_1260, ap_enable_reg_pp2_iter1, ap_block_pp2_stage1, ap_block_pp2_stage0, n2_1_fu_112, n1_1_fu_116)
    begin
        if (((icmp_ln115_reg_1260 = ap_const_lv1_0) and (icmp_ln113_reg_1256 = ap_const_lv1_0) and (icmp_ln108_reg_1231_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            grp_Inverse_fu_227_N_read <= n2_1_fu_112;
        elsif (((icmp_ln115_reg_1260 = ap_const_lv1_0) and (icmp_ln113_reg_1256 = ap_const_lv1_0) and (icmp_ln108_reg_1231 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            grp_Inverse_fu_227_N_read <= n1_1_fu_116;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_Inverse_fu_227_N_read <= ap_const_lv8_0;
        else 
            grp_Inverse_fu_227_N_read <= "XXXXXXXX";
        end if; 
    end process;


    grp_Inverse_fu_227_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_Inverse_fu_227_ap_start_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            grp_Inverse_fu_227_ap_start <= ap_const_logic_1;
        else 
            grp_Inverse_fu_227_ap_start <= grp_Inverse_fu_227_ap_start_reg;
        end if; 
    end process;


    grp_Inverse_fu_227_x_assign_proc : process(ap_CS_fsm_state1, icmp_ln108_reg_1231, ap_CS_fsm_pp2_stage0, icmp_ln108_reg_1231_pp2_iter1_reg, ap_CS_fsm_pp2_stage1, add_ln112_1_reg_1250, icmp_ln113_reg_1256, icmp_ln115_reg_1260, x_inv2_reg_1280, ap_enable_reg_pp2_iter1, ap_block_pp2_stage1, ap_block_pp2_stage0)
    begin
        if (((icmp_ln115_reg_1260 = ap_const_lv1_0) and (icmp_ln113_reg_1256 = ap_const_lv1_0) and (icmp_ln108_reg_1231_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            grp_Inverse_fu_227_x <= x_inv2_reg_1280;
        elsif (((icmp_ln115_reg_1260 = ap_const_lv1_0) and (icmp_ln113_reg_1256 = ap_const_lv1_0) and (icmp_ln108_reg_1231 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            grp_Inverse_fu_227_x <= add_ln112_1_reg_1250(24 downto 9);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_Inverse_fu_227_x <= ap_const_lv16_140;
        else 
            grp_Inverse_fu_227_x <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_Inverse_fu_239_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            grp_Inverse_fu_239_ap_start <= ap_const_logic_1;
        else 
            grp_Inverse_fu_239_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    hgt_1_fu_385_p2 <= std_logic_vector(shift_right(unsigned(grp_Inverse_fu_239_ap_return_0),to_integer(unsigned('0' & zext_ln77_fu_381_p1(31-1 downto 0)))));
    hgt_2_fu_425_p2 <= std_logic_vector(shift_left(unsigned(grp_Inverse_fu_239_ap_return_0),to_integer(unsigned('0' & zext_ln82_fu_421_p1(31-1 downto 0)))));
    hgt_3_fu_443_p3 <= 
        hgt_1_fu_385_p2 when (icmp_ln75_fu_365_p2(0) = '1') else 
        hgt_2_fu_425_p2;
    hgt_4_fu_451_p3 <= 
        grp_Inverse_fu_239_ap_return_0 when (and_ln80_fu_437_p2(0) = '1') else 
        hgt_3_fu_443_p3;
    i_1_fu_701_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_op_assign_phi_fu_195_p4) + unsigned(ap_const_lv9_1));
    i_2_fu_794_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_op_assign_3_phi_fu_219_p4) + unsigned(ap_const_lv9_1));
    i_fu_611_p2 <= std_logic_vector(unsigned(i_0_reg_168) + unsigned(ap_const_lv9_1));
    icmp_ln101_fu_695_p2 <= "1" when (ap_phi_mux_i_op_assign_phi_fu_195_p4 = ap_const_lv9_100) else "0";
    icmp_ln108_fu_788_p2 <= "1" when (ap_phi_mux_i_op_assign_3_phi_fu_219_p4 = ap_const_lv9_100) else "0";
    icmp_ln113_fu_829_p2 <= "1" when (wB_fu_817_p2 = ap_const_lv32_0) else "0";
    icmp_ln115_fu_840_p2 <= "1" when (lshr_ln115_fu_835_p2 = ap_const_lv32_1) else "0";
    icmp_ln138_fu_1036_p2 <= "1" when (unsigned(varMax_fu_1030_p2) > unsigned(varMax_0_fu_100)) else "0";
    icmp_ln65_fu_271_p2 <= "1" when (signed(grp_Inverse_fu_227_ap_return_1) > signed(ap_const_lv8_18)) else "0";
    icmp_ln70_fu_315_p2 <= "1" when (and_ln_fu_307_p3 = grp_Inverse_fu_227_ap_return_1) else "0";
    icmp_ln75_fu_365_p2 <= "1" when (signed(grp_Inverse_fu_239_ap_return_1) > signed(ap_const_lv8_18)) else "0";
    icmp_ln80_fu_409_p2 <= "1" when (and_ln1_fu_401_p3 = grp_Inverse_fu_239_ap_return_1) else "0";
    icmp_ln93_fu_605_p2 <= "1" when (i_0_reg_168 = ap_const_lv9_100) else "0";
    lshr_ln115_fu_835_p2 <= std_logic_vector(shift_right(unsigned(wB_fu_817_p2),to_integer(unsigned('0' & sext_ln115_reg_1205(31-1 downto 0)))));
    lshr_ln1500_1_fu_669_p2 <= std_logic_vector(shift_right(unsigned(ret_V_1_fu_664_p2),to_integer(unsigned('0' & zext_ln1500_1_reg_1119(31-1 downto 0)))));
    lshr_ln1500_fu_635_p2 <= std_logic_vector(shift_right(unsigned(ret_V_fu_626_p2),to_integer(unsigned('0' & zext_ln215_reg_1104(31-1 downto 0)))));
    lshr_ln88_fu_501_p2 <= std_logic_vector(shift_right(unsigned(add_ln88_fu_487_p2),to_integer(unsigned('0' & sext_ln88_fu_493_p1(31-1 downto 0)))));
    lshr_ln89_fu_525_p2 <= std_logic_vector(shift_right(unsigned(mul_ln89_fu_507_p2),to_integer(unsigned('0' & sext_ln89_fu_513_p1(31-1 downto 0)))));
    max_val_fu_925_p1 <= i_op_assign_3_reg_215(8 - 1 downto 0);
    maxtmp_fu_1006_p2 <= std_logic_vector(shift_right(unsigned(mul_ln135_fu_993_p2),to_integer(unsigned('0' & zext_ln135_2_fu_1002_p1(31-1 downto 0)))));
    mul_ln104_fu_720_p1 <= mul_ln104_fu_720_p10(9 - 1 downto 0);
    mul_ln104_fu_720_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_reg_191),32));
    mul_ln104_fu_720_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(trunc_ln104_fu_716_p1) * signed('0' &mul_ln104_fu_720_p1))), 32));
    mul_ln121_fu_873_p0 <= zext_ln121_reg_1210(25 - 1 downto 0);
    mul_ln121_fu_873_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln121_fu_873_p0) * signed(sumB_fu_867_p2))), 64));
    mul_ln123_fu_887_p0 <= zext_ln123_reg_1221(32 - 1 downto 0);
    mul_ln123_fu_887_p1 <= mul_ln123_fu_887_p10(32 - 1 downto 0);
    mul_ln123_fu_887_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wB_fu_817_p2),64));
    mul_ln123_fu_887_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln123_fu_887_p0) * unsigned(mul_ln123_fu_887_p1), 64));
    mul_ln127_fu_942_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(d_1_reg_1264) * signed(d_1_reg_1264))), 64));
    mul_ln135_fu_993_p0 <= mul_ln135_fu_993_p00(32 - 1 downto 0);
    mul_ln135_fu_993_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(res_reg_1275),64));
    mul_ln135_fu_993_p1 <= mul_ln135_fu_993_p10(32 - 1 downto 0);
    mul_ln135_fu_993_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val1_reg_1285),64));
    mul_ln135_fu_993_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln135_fu_993_p0) * unsigned(mul_ln135_fu_993_p1), 64));
    mul_ln136_fu_1016_p0 <= mul_ln136_fu_1016_p00(32 - 1 downto 0);
    mul_ln136_fu_1016_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_Inverse_fu_227_ap_return_0),64));
    mul_ln136_fu_1016_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln136_fu_1016_p0) * signed(maxtmp_fu_1006_p2))), 64));
    mul_ln89_fu_507_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_B4) * signed(hgt_4_fu_451_p3))), 32));
    p_hist_address0 <= zext_ln96_fu_617_p1(8 - 1 downto 0);

    p_hist_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_hist_ce0 <= ap_const_logic_1;
        else 
            p_hist_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_fu_951_p1 <= ashr_ln127_fu_946_p2(32 - 1 downto 0);
    ret_V_1_fu_664_p0 <= rhs_V_reg_1109(32 - 1 downto 0);
    ret_V_1_fu_664_p1 <= ret_V_1_fu_664_p10(45 - 1 downto 0);
    ret_V_1_fu_664_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_V_fu_653_p3),77));
    ret_V_1_fu_664_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_1_fu_664_p0) * unsigned(ret_V_1_fu_664_p1), 77));
    ret_V_2_fu_857_p0 <= ret_V_2_fu_857_p00(9 - 1 downto 0);
    ret_V_2_fu_857_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_3_reg_215),42));
    ret_V_2_fu_857_p1 <= ret_V_2_fu_857_p10(33 - 1 downto 0);
    ret_V_2_fu_857_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(HistArray_V_q0),42));
    ret_V_2_fu_857_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_2_fu_857_p0) * unsigned(ret_V_2_fu_857_p1), 42));
    ret_V_fu_626_p0 <= zext_ln1500_reg_1094(32 - 1 downto 0);
    ret_V_fu_626_p1 <= ret_V_fu_626_p10(32 - 1 downto 0);
    ret_V_fu_626_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_hist_q0),64));
    ret_V_fu_626_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_626_p0) * unsigned(ret_V_fu_626_p1), 64));
    rhs_V_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hgt_4_fu_451_p3),77));
    select_ln138_1_fu_1049_p3 <= 
        varMax_fu_1030_p2 when (icmp_ln138_fu_1036_p2(0) = '1') else 
        varMax_0_fu_100;
    select_ln138_fu_1042_p3 <= 
        max_val_reg_1270_pp2_iter1_reg when (icmp_ln138_fu_1036_p2(0) = '1') else 
        thresh_write_assign_fu_108;
    select_ln1500_fu_687_p3 <= 
        trunc_ln1500_2_fu_679_p1 when (tmp_4_reg_1114(0) = '1') else 
        trunc_ln1500_3_fu_683_p1;
    select_ln70_fu_459_p3 <= 
        tmp_1_fu_297_p4 when (and_ln70_fu_343_p2(0) = '1') else 
        ap_const_lv7_C;
    select_ln80_fu_467_p3 <= 
        tmp_2_fu_391_p4 when (and_ln80_fu_437_p2(0) = '1') else 
        ap_const_lv7_C;
        sext_ln115_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln115_fu_732_p2),32));

        sext_ln127_1_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln127_1_fu_760_p2),32));

        sext_ln127_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln127_fu_751_p2),9));

        sext_ln135_fu_999_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(n1_reg_1290),32));

    sext_ln136_fu_1022_p0 <= grp_Inverse_fu_227_ap_return_1;
        sext_ln136_fu_1022_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln136_fu_1022_p0),32));

        sext_ln1500_1_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1500_1_fu_591_p2),32));

        sext_ln1500_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1500_fu_577_p2),32));

        sext_ln88_1_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln70_fu_459_p3),8));

        sext_ln88_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln70_fu_459_p3),32));

        sext_ln89_1_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln80_fu_467_p3),9));

        sext_ln89_2_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln80_fu_467_p3),8));

        sext_ln89_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln80_fu_467_p3),32));

    shl_ln1500_1_fu_674_p2 <= std_logic_vector(shift_left(unsigned(ret_V_1_fu_664_p2),to_integer(unsigned('0' & zext_ln1500_2_reg_1124(31-1 downto 0)))));
    shl_ln1500_fu_640_p2 <= std_logic_vector(shift_left(unsigned(zext_ln1352_fu_631_p1),to_integer(unsigned('0' & zext_ln1500_3_reg_1129(31-1 downto 0)))));
    shl_ln88_1_fu_481_p2 <= std_logic_vector(shift_left(unsigned(wdt_4_fu_357_p3),to_integer(unsigned('0' & ap_const_lv32_6(31-1 downto 0)))));
    shl_ln88_fu_475_p2 <= std_logic_vector(shift_left(unsigned(wdt_4_fu_357_p3),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    sub_ln125_fu_911_p2 <= std_logic_vector(unsigned(ap_const_lv64_0) - unsigned(d_fu_897_p2));
    sub_ln1500_1_fu_591_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(sext_ln88_1_fu_497_p1));
    sub_ln1500_fu_577_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(sext_ln89_2_fu_521_p1));
    sub_ln72_fu_321_p2 <= std_logic_vector(unsigned(ap_const_lv8_18) - unsigned(grp_Inverse_fu_227_ap_return_1));
    sub_ln82_fu_415_p2 <= std_logic_vector(unsigned(ap_const_lv8_18) - unsigned(grp_Inverse_fu_239_ap_return_1));
    sumB_fu_867_p2 <= std_logic_vector(unsigned(zext_ln544_fu_863_p1) + unsigned(i_op_assign_4_fu_104));
    sum_fu_726_p2 <= std_logic_vector(unsigned(mul_ln104_fu_720_p2) + unsigned(i_op_assign_1_reg_179));
    tmp2_V_fu_653_p3 <= 
        trunc_ln1500_1_fu_649_p1 when (tmp_3_reg_1099(0) = '1') else 
        trunc_ln1500_fu_645_p1;
    tmp_1_fu_297_p4 <= grp_Inverse_fu_227_ap_return_1(7 downto 1);
    tmp_2_fu_391_p4 <= grp_Inverse_fu_239_ap_return_1(7 downto 1);
    tmp_5_fu_903_p3 <= d_fu_897_p2(63 downto 63);
    total_V_fu_539_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(trunc_ln209_1_fu_535_p1) * signed(trunc_ln209_fu_531_p1))), 25));
    trunc_ln104_fu_716_p1 <= HistArray_V_q0(32 - 1 downto 0);
    trunc_ln112_1_fu_809_p1 <= HistArray_V_q0(25 - 1 downto 0);
    trunc_ln112_2_fu_813_p1 <= ap_phi_mux_i_op_assign_2_phi_fu_207_p4(25 - 1 downto 0);
    trunc_ln112_fu_805_p1 <= HistArray_V_q0(32 - 1 downto 0);
    trunc_ln1500_1_fu_649_p1 <= shl_ln1500_fu_640_p2(45 - 1 downto 0);
    trunc_ln1500_2_fu_679_p1 <= shl_ln1500_1_fu_674_p2(33 - 1 downto 0);
    trunc_ln1500_3_fu_683_p1 <= lshr_ln1500_1_fu_669_p2(33 - 1 downto 0);
    trunc_ln1500_fu_645_p1 <= lshr_ln1500_fu_635_p2(45 - 1 downto 0);
    trunc_ln209_1_fu_535_p1 <= lshr_ln89_fu_525_p2(25 - 1 downto 0);
    trunc_ln209_fu_531_p1 <= lshr_ln88_fu_501_p2(25 - 1 downto 0);
    trunc_ln67_fu_277_p1 <= grp_Inverse_fu_227_ap_return_1(7 - 1 downto 0);
    trunc_ln77_fu_371_p1 <= grp_Inverse_fu_239_ap_return_1(7 - 1 downto 0);
    varMax_fu_1030_p2 <= std_logic_vector(shift_right(unsigned(mul_ln136_fu_1016_p2),to_integer(unsigned('0' & zext_ln136_1_fu_1026_p1(31-1 downto 0)))));
    wB_fu_817_p2 <= std_logic_vector(unsigned(trunc_ln112_fu_805_p1) + unsigned(ap_phi_mux_i_op_assign_2_phi_fu_207_p4));
    wF_fu_938_p2 <= std_logic_vector(unsigned(total_V_reg_1088) - unsigned(add_ln112_1_reg_1250));
    wdt_1_fu_291_p2 <= std_logic_vector(shift_right(unsigned(grp_Inverse_fu_227_ap_return_0),to_integer(unsigned('0' & zext_ln67_fu_287_p1(31-1 downto 0)))));
    wdt_2_fu_331_p2 <= std_logic_vector(shift_left(unsigned(grp_Inverse_fu_227_ap_return_0),to_integer(unsigned('0' & zext_ln72_fu_327_p1(31-1 downto 0)))));
    wdt_3_fu_349_p3 <= 
        wdt_1_fu_291_p2 when (icmp_ln65_fu_271_p2(0) = '1') else 
        wdt_2_fu_331_p2;
    wdt_4_fu_357_p3 <= 
        grp_Inverse_fu_227_ap_return_0 when (and_ln70_fu_343_p2(0) = '1') else 
        wdt_3_fu_349_p3;
    xor_ln65_fu_337_p2 <= (icmp_ln65_fu_271_p2 xor ap_const_lv1_1);
    xor_ln75_fu_431_p2 <= (icmp_ln75_fu_365_p2 xor ap_const_lv1_1);
    zext_ln104_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_op_assign_phi_fu_195_p4),64));
    zext_ln112_fu_800_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_op_assign_3_phi_fu_219_p4),64));
    zext_ln121_1_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln115_fu_736_p1),64));
    zext_ln121_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(total_V_reg_1088),64));
    zext_ln123_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_1_reg_179),64));
    zext_ln127_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln127_1_fu_765_p1),64));
    zext_ln1352_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_626_p2),77));
    zext_ln135_2_fu_1002_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln135_fu_999_p1),64));
    zext_ln136_1_fu_1026_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln136_fu_1022_p1),64));
    zext_ln1500_1_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln89_fu_513_p1),77));
    zext_ln1500_2_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1500_fu_583_p1),77));
    zext_ln1500_3_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1500_1_fu_597_p1),77));
    zext_ln1500_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wdt_4_fu_357_p3),64));
    zext_ln215_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln88_fu_493_p1),64));
    zext_ln544_fu_863_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_2_fu_857_p2),64));
    zext_ln67_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln67_fu_281_p2),32));
    zext_ln72_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln72_fu_321_p2),32));
    zext_ln77_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln77_fu_375_p2),32));
    zext_ln82_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln82_fu_415_p2),32));
    zext_ln96_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_168),64));
end behav;
