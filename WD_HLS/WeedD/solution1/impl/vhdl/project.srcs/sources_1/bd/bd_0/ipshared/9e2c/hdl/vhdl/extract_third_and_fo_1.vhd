-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity extract_third_and_fo_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    line_bases_active_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    line_bases_active_ce0 : OUT STD_LOGIC;
    line_bases_active_q0 : IN STD_LOGIC_VECTOR (16 downto 0);
    eroded_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    eroded_data_V_empty_n : IN STD_LOGIC;
    eroded_data_V_read : OUT STD_LOGIC;
    centroids_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    centroids_ce0 : OUT STD_LOGIC;
    centroids_we0 : OUT STD_LOGIC;
    centroids_d0 : OUT STD_LOGIC_VECTOR (47 downto 0);
    centroids_q0 : IN STD_LOGIC_VECTOR (47 downto 0) );
end;


architecture behav of extract_third_and_fo_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (83 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (83 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (83 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (83 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (83 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (83 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (83 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (83 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (83 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (83 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (83 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (83 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv12_C9E : STD_LOGIC_VECTOR (11 downto 0) := "110010011110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv12_E4F : STD_LOGIC_VECTOR (11 downto 0) := "111001001111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv16_13F : STD_LOGIC_VECTOR (15 downto 0) := "0000000100111111";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal segments647_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal segments647_ce0 : STD_LOGIC;
    signal segments647_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal segments647_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal segments647_ce1 : STD_LOGIC;
    signal segments647_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal segments647_address2 : STD_LOGIC_VECTOR (3 downto 0);
    signal segments647_ce2 : STD_LOGIC;
    signal segments647_q2 : STD_LOGIC_VECTOR (7 downto 0);
    signal segments647_address3 : STD_LOGIC_VECTOR (3 downto 0);
    signal segments647_ce3 : STD_LOGIC;
    signal segments647_q3 : STD_LOGIC_VECTOR (7 downto 0);
    signal segments647_address4 : STD_LOGIC_VECTOR (3 downto 0);
    signal segments647_ce4 : STD_LOGIC;
    signal segments647_q4 : STD_LOGIC_VECTOR (7 downto 0);
    signal last_c_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal last_c_ce0 : STD_LOGIC;
    signal last_c_we0 : STD_LOGIC;
    signal last_c_q0 : STD_LOGIC_VECTOR (47 downto 0);
    signal reg_383 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal trunc_ln254_fu_388_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln254_reg_1098 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln256_fu_392_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln256_reg_1103 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln256_fu_398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln256_reg_1108 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln256_1_fu_403_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln256_1_reg_1118 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln271_fu_433_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln271_reg_1129 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln253_fu_445_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln253_reg_1137 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln258_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln258_reg_1142 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln253_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln253_fu_469_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln253_reg_1147 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln253_1_fu_507_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln253_1_reg_1154 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln253_2_fu_520_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln253_2_reg_1164 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln253_3_fu_553_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln253_3_reg_1174 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln253_5_fu_561_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln253_5_reg_1179 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln253_8_fu_588_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln253_8_reg_1201 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln253_fu_604_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln253_reg_1211 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln253_4_fu_614_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln253_4_reg_1217 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln253_1_fu_620_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln253_1_reg_1222 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln253_8_fu_624_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln253_8_reg_1227 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln253_9_fu_628_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln253_9_reg_1232 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln253_2_fu_632_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln253_2_reg_1237 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln253_3_fu_636_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal zext_ln253_3_reg_1243 : STD_LOGIC_VECTOR (34 downto 0);
    signal zext_ln253_4_fu_639_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln253_4_reg_1249 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln253_5_fu_642_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln253_5_reg_1255 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_646_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1260 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_660_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_1267 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln187_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln187_reg_1272 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln188_3_fu_764_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal sum_x_1_fu_802_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_x_1_reg_1301 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_y_1_fu_809_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_y_1_reg_1306 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_xy_1_fu_816_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_xy_1_reg_1311 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_xx_1_fu_823_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_829_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal udiv_ln196_reg_1321 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal grp_fu_834_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_reg_1326 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_30_fu_906_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_30_reg_1331 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal select_ln268_fu_1016_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln268_reg_1341 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal select_ln268_1_fu_1030_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln268_1_reg_1348 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln271_1_fu_1039_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln271_1_reg_1354 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal line_index_fu_1071_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal micro_roi_2_data_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal micro_roi_2_data_V_ce0 : STD_LOGIC;
    signal micro_roi_2_data_V_we0 : STD_LOGIC;
    signal micro_roi_2_data_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_get_centroid_fh_fu_350_micro_roi_data_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_get_centroid_fh_fu_350_micro_roi_data_V_ce0 : STD_LOGIC;
    signal grp_get_centroid_fh_fu_350_micro_roi_data_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_get_centroid_fh_fu_350_micro_roi_data_V_we0 : STD_LOGIC;
    signal grp_get_centroid_fh_fu_350_micro_roi_data_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_get_centroid_fh_fu_350_micro_roi_data_V_ce1 : STD_LOGIC;
    signal grp_get_centroid_fh_fu_350_micro_roi_data_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_get_centroid_fh_fu_350_micro_roi_data_V_we1 : STD_LOGIC;
    signal grp_get_centroid_fh_fu_350_c : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_get_centroid_fh_fu_350_ap_start : STD_LOGIC;
    signal grp_get_centroid_fh_fu_350_c_ap_vld : STD_LOGIC;
    signal grp_get_centroid_fh_fu_350_ap_done : STD_LOGIC;
    signal grp_get_centroid_fh_fu_350_ap_ready : STD_LOGIC;
    signal grp_get_centroid_fh_fu_350_ap_idle : STD_LOGIC;
    signal grp_get_centroid_fh_fu_350_ap_continue : STD_LOGIC;
    signal grp_extract_micro_roi_fu_360_ap_start : STD_LOGIC;
    signal grp_extract_micro_roi_fu_360_ap_done : STD_LOGIC;
    signal grp_extract_micro_roi_fu_360_ap_idle : STD_LOGIC;
    signal grp_extract_micro_roi_fu_360_ap_ready : STD_LOGIC;
    signal grp_extract_micro_roi_fu_360_img_in_mr_data_V_read : STD_LOGIC;
    signal grp_extract_micro_roi_fu_360_micro_roi_data_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_extract_micro_roi_fu_360_micro_roi_data_V_ce0 : STD_LOGIC;
    signal grp_extract_micro_roi_fu_360_micro_roi_data_V_we0 : STD_LOGIC;
    signal grp_extract_micro_roi_fu_360_micro_roi_data_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_get_last_centroids_fu_371_centroids_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_get_last_centroids_fu_371_centroids_ce0 : STD_LOGIC;
    signal grp_get_last_centroids_fu_371_centroids_d0 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_get_last_centroids_fu_371_centroids_we0 : STD_LOGIC;
    signal grp_get_last_centroids_fu_371_centroids_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_get_last_centroids_fu_371_centroids_ce1 : STD_LOGIC;
    signal grp_get_last_centroids_fu_371_centroids_d1 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_get_last_centroids_fu_371_centroids_we1 : STD_LOGIC;
    signal grp_get_last_centroids_fu_371_last_c_2_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_get_last_centroids_fu_371_last_c_2_ce0 : STD_LOGIC;
    signal grp_get_last_centroids_fu_371_last_c_2_d0 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_get_last_centroids_fu_371_last_c_2_we0 : STD_LOGIC;
    signal grp_get_last_centroids_fu_371_last_c_2_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_get_last_centroids_fu_371_last_c_2_ce1 : STD_LOGIC;
    signal grp_get_last_centroids_fu_371_last_c_2_d1 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_get_last_centroids_fu_371_last_c_2_we1 : STD_LOGIC;
    signal grp_get_last_centroids_fu_371_ap_start : STD_LOGIC;
    signal grp_get_last_centroids_fu_371_ap_done : STD_LOGIC;
    signal grp_get_last_centroids_fu_371_ap_ready : STD_LOGIC;
    signal grp_get_last_centroids_fu_371_ap_idle : STD_LOGIC;
    signal grp_get_last_centroids_fu_371_ap_continue : STD_LOGIC;
    signal seg_index_0_reg_246 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_258 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Val2_s_reg_269 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_index_0_reg_280 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_x_0_i_reg_291 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_sync_grp_get_last_centroids_fu_371_ap_ready : STD_LOGIC;
    signal ap_sync_grp_get_last_centroids_fu_371_ap_done : STD_LOGIC;
    signal ap_block_state5_on_subcall_done : BOOLEAN;
    signal sum_y_0_i_reg_303 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_xy_0_i_reg_315 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_xx_0_i_reg_327 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i_reg_339 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_get_centroid_fh_fu_350_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_sync_grp_get_centroid_fh_fu_350_ap_ready : STD_LOGIC;
    signal ap_sync_grp_get_centroid_fh_fu_350_ap_done : STD_LOGIC;
    signal ap_block_state83_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_get_centroid_fh_fu_350_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_get_centroid_fh_fu_350_ap_done : STD_LOGIC := '0';
    signal c_fu_122 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_extract_micro_roi_fu_360_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal grp_get_last_centroids_fu_371_ap_start_reg : STD_LOGIC := '0';
    signal ap_sync_reg_grp_get_last_centroids_fu_371_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_get_last_centroids_fu_371_ap_done : STD_LOGIC := '0';
    signal zext_ln256_2_fu_515_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln253_6_fu_528_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln253_7_fu_568_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln253_6_fu_573_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln253_7_fu_581_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln259_fu_596_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln188_fu_671_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln272_1_fu_1062_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln254_1_fu_415_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_408_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln254_fu_423_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal seg_index_fu_457_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln254_1_fu_477_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln254_1_mid1_fu_489_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln254_mid1_fu_481_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln254_1_fu_497_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln254_1_fu_501_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln254_fu_427_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln703_fu_451_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_fu_533_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_543_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln253_fu_601_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln271_2_fu_608_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln731_fu_680_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln731_fu_680_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln731_fu_680_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal mul_ln731_2_fu_697_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln731_2_fu_697_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln731_9_fu_689_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln731_3_fu_707_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln731_3_fu_707_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln731_3_fu_707_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal mul_ln731_4_fu_716_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln731_4_fu_716_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln731_10_fu_693_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln731_2_fu_697_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln731_12_fu_712_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln731_4_fu_716_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal sub_ln731_4_fu_728_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal sub_ln731_fu_722_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal shl_ln731_6_fu_734_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_754_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln188_fu_760_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal centroids_y_1_load_n_fu_774_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln190_fu_790_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln190_fu_790_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_x_fu_768_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_y_fu_784_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_xy_fu_796_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1076_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_829_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_834_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_754_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal m_V_fu_839_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_fu_850_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_fu_850_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_fu_850_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal trunc_ln851_fu_864_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_874_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln851_7_fu_868_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln851_fu_884_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_856_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln851_fu_890_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln850_fu_898_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1085_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_fu_918_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln728_fu_925_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal lhs_V_fu_915_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal ret_V_fu_929_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln851_9_fu_943_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_952_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln851_fu_946_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln851_6_fu_962_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_13_fu_935_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln851_6_fu_968_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_temp_fu_976_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_left_fu_988_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_right_fu_993_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_fu_998_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln268_fu_1012_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln265_fu_984_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln267_fu_1006_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln268_fu_1025_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln272_fu_1044_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln272_1_fu_1047_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln272_fu_1053_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln272_fu_1057_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1076_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1076_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_1085_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_754_ap_start : STD_LOGIC;
    signal grp_fu_754_ap_done : STD_LOGIC;
    signal grp_fu_829_ap_start : STD_LOGIC;
    signal grp_fu_829_ap_done : STD_LOGIC;
    signal grp_fu_834_ap_start : STD_LOGIC;
    signal grp_fu_834_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (83 downto 0);
    signal mul_ln731_2_fu_697_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln731_3_fu_707_p00 : STD_LOGIC_VECTOR (34 downto 0);
    signal mul_ln731_fu_680_p00 : STD_LOGIC_VECTOR (34 downto 0);
    signal r_V_fu_850_p00 : STD_LOGIC_VECTOR (55 downto 0);

    component get_centroid_fh IS
    port (
        micro_roi_data_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        micro_roi_data_V_ce0 : OUT STD_LOGIC;
        micro_roi_data_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        micro_roi_data_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        micro_roi_data_V_we0 : OUT STD_LOGIC;
        micro_roi_data_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        micro_roi_data_V_ce1 : OUT STD_LOGIC;
        micro_roi_data_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        micro_roi_data_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        micro_roi_data_V_we1 : OUT STD_LOGIC;
        h_offset : IN STD_LOGIC_VECTOR (15 downto 0);
        v_offset : IN STD_LOGIC_VECTOR (7 downto 0);
        v_limit : IN STD_LOGIC_VECTOR (7 downto 0);
        h_limit : IN STD_LOGIC_VECTOR (15 downto 0);
        c : OUT STD_LOGIC_VECTOR (47 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        h_offset_ap_vld : IN STD_LOGIC;
        v_offset_ap_vld : IN STD_LOGIC;
        v_limit_ap_vld : IN STD_LOGIC;
        h_limit_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        c_ap_vld : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component extract_micro_roi IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_in_mr_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_in_mr_data_V_empty_n : IN STD_LOGIC;
        img_in_mr_data_V_read : OUT STD_LOGIC;
        x_top : IN STD_LOGIC_VECTOR (9 downto 0);
        x_bottom : IN STD_LOGIC_VECTOR (9 downto 0);
        y_left : IN STD_LOGIC_VECTOR (15 downto 0);
        y_right : IN STD_LOGIC_VECTOR (15 downto 0);
        micro_roi_data_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        micro_roi_data_V_ce0 : OUT STD_LOGIC;
        micro_roi_data_V_we0 : OUT STD_LOGIC;
        micro_roi_data_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component get_last_centroids IS
    port (
        centroids_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        centroids_ce0 : OUT STD_LOGIC;
        centroids_d0 : OUT STD_LOGIC_VECTOR (47 downto 0);
        centroids_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
        centroids_we0 : OUT STD_LOGIC;
        centroids_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        centroids_ce1 : OUT STD_LOGIC;
        centroids_d1 : OUT STD_LOGIC_VECTOR (47 downto 0);
        centroids_q1 : IN STD_LOGIC_VECTOR (47 downto 0);
        centroids_we1 : OUT STD_LOGIC;
        selected_line : IN STD_LOGIC_VECTOR (2 downto 0);
        last_c_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        last_c_2_ce0 : OUT STD_LOGIC;
        last_c_2_d0 : OUT STD_LOGIC_VECTOR (47 downto 0);
        last_c_2_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
        last_c_2_we0 : OUT STD_LOGIC;
        last_c_2_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
        last_c_2_ce1 : OUT STD_LOGIC;
        last_c_2_d1 : OUT STD_LOGIC_VECTOR (47 downto 0);
        last_c_2_q1 : IN STD_LOGIC_VECTOR (47 downto 0);
        last_c_2_we1 : OUT STD_LOGIC;
        seg_index_start : IN STD_LOGIC_VECTOR (3 downto 0);
        size : IN STD_LOGIC_VECTOR (3 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        size_ap_vld : IN STD_LOGIC;
        seg_index_start_ap_vld : IN STD_LOGIC;
        selected_line_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component ip_accel_app_sdivNgs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (55 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component ip_accel_app_udivOgC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ip_accel_app_mac_PgM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ip_accel_app_mul_QgW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component extract_third_andKfY IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address2 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address3 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address4 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component extract_third_andLf8 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (47 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component extract_third_andMgi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    segments647_U : component extract_third_andKfY
    generic map (
        DataWidth => 8,
        AddressRange => 13,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => segments647_address0,
        ce0 => segments647_ce0,
        q0 => segments647_q0,
        address1 => segments647_address1,
        ce1 => segments647_ce1,
        q1 => segments647_q1,
        address2 => segments647_address2,
        ce2 => segments647_ce2,
        q2 => segments647_q2,
        address3 => segments647_address3,
        ce3 => segments647_ce3,
        q3 => segments647_q3,
        address4 => segments647_address4,
        ce4 => segments647_ce4,
        q4 => segments647_q4);

    last_c_U : component extract_third_andLf8
    generic map (
        DataWidth => 48,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => last_c_address0,
        ce0 => last_c_ce0,
        we0 => last_c_we0,
        d0 => grp_get_last_centroids_fu_371_last_c_2_d0,
        q0 => last_c_q0);

    micro_roi_2_data_V_U : component extract_third_andMgi
    generic map (
        DataWidth => 8,
        AddressRange => 736,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => micro_roi_2_data_V_address0,
        ce0 => micro_roi_2_data_V_ce0,
        we0 => micro_roi_2_data_V_we0,
        d0 => grp_extract_micro_roi_fu_360_micro_roi_data_V_d0,
        q0 => micro_roi_2_data_V_q0);

    grp_get_centroid_fh_fu_350 : component get_centroid_fh
    port map (
        micro_roi_data_V_address0 => grp_get_centroid_fh_fu_350_micro_roi_data_V_address0,
        micro_roi_data_V_ce0 => grp_get_centroid_fh_fu_350_micro_roi_data_V_ce0,
        micro_roi_data_V_d0 => grp_get_centroid_fh_fu_350_micro_roi_data_V_d0,
        micro_roi_data_V_q0 => micro_roi_2_data_V_q0,
        micro_roi_data_V_we0 => grp_get_centroid_fh_fu_350_micro_roi_data_V_we0,
        micro_roi_data_V_address1 => grp_get_centroid_fh_fu_350_micro_roi_data_V_address1,
        micro_roi_data_V_ce1 => grp_get_centroid_fh_fu_350_micro_roi_data_V_ce1,
        micro_roi_data_V_d1 => grp_get_centroid_fh_fu_350_micro_roi_data_V_d1,
        micro_roi_data_V_q1 => ap_const_lv8_0,
        micro_roi_data_V_we1 => grp_get_centroid_fh_fu_350_micro_roi_data_V_we1,
        h_offset => select_ln268_reg_1341,
        v_offset => reg_383,
        v_limit => select_ln253_4_reg_1217,
        h_limit => sub_ln271_1_reg_1354,
        c => grp_get_centroid_fh_fu_350_c,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        h_offset_ap_vld => ap_const_logic_1,
        v_offset_ap_vld => ap_const_logic_1,
        v_limit_ap_vld => ap_const_logic_1,
        h_limit_ap_vld => ap_const_logic_1,
        ap_start => grp_get_centroid_fh_fu_350_ap_start,
        c_ap_vld => grp_get_centroid_fh_fu_350_c_ap_vld,
        ap_done => grp_get_centroid_fh_fu_350_ap_done,
        ap_ready => grp_get_centroid_fh_fu_350_ap_ready,
        ap_idle => grp_get_centroid_fh_fu_350_ap_idle,
        ap_continue => grp_get_centroid_fh_fu_350_ap_continue);

    grp_extract_micro_roi_fu_360 : component extract_micro_roi
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_extract_micro_roi_fu_360_ap_start,
        ap_done => grp_extract_micro_roi_fu_360_ap_done,
        ap_idle => grp_extract_micro_roi_fu_360_ap_idle,
        ap_ready => grp_extract_micro_roi_fu_360_ap_ready,
        img_in_mr_data_V_dout => eroded_data_V_dout,
        img_in_mr_data_V_empty_n => eroded_data_V_empty_n,
        img_in_mr_data_V_read => grp_extract_micro_roi_fu_360_img_in_mr_data_V_read,
        x_top => zext_ln253_8_reg_1227,
        x_bottom => zext_ln253_9_reg_1232,
        y_left => select_ln268_reg_1341,
        y_right => select_ln268_1_reg_1348,
        micro_roi_data_V_address0 => grp_extract_micro_roi_fu_360_micro_roi_data_V_address0,
        micro_roi_data_V_ce0 => grp_extract_micro_roi_fu_360_micro_roi_data_V_ce0,
        micro_roi_data_V_we0 => grp_extract_micro_roi_fu_360_micro_roi_data_V_we0,
        micro_roi_data_V_d0 => grp_extract_micro_roi_fu_360_micro_roi_data_V_d0);

    grp_get_last_centroids_fu_371 : component get_last_centroids
    port map (
        centroids_address0 => grp_get_last_centroids_fu_371_centroids_address0,
        centroids_ce0 => grp_get_last_centroids_fu_371_centroids_ce0,
        centroids_d0 => grp_get_last_centroids_fu_371_centroids_d0,
        centroids_q0 => centroids_q0,
        centroids_we0 => grp_get_last_centroids_fu_371_centroids_we0,
        centroids_address1 => grp_get_last_centroids_fu_371_centroids_address1,
        centroids_ce1 => grp_get_last_centroids_fu_371_centroids_ce1,
        centroids_d1 => grp_get_last_centroids_fu_371_centroids_d1,
        centroids_q1 => ap_const_lv48_0,
        centroids_we1 => grp_get_last_centroids_fu_371_centroids_we1,
        selected_line => select_ln253_reg_1147,
        last_c_2_address0 => grp_get_last_centroids_fu_371_last_c_2_address0,
        last_c_2_ce0 => grp_get_last_centroids_fu_371_last_c_2_ce0,
        last_c_2_d0 => grp_get_last_centroids_fu_371_last_c_2_d0,
        last_c_2_q0 => ap_const_lv48_0,
        last_c_2_we0 => grp_get_last_centroids_fu_371_last_c_2_we0,
        last_c_2_address1 => grp_get_last_centroids_fu_371_last_c_2_address1,
        last_c_2_ce1 => grp_get_last_centroids_fu_371_last_c_2_ce1,
        last_c_2_d1 => grp_get_last_centroids_fu_371_last_c_2_d1,
        last_c_2_q1 => ap_const_lv48_0,
        last_c_2_we1 => grp_get_last_centroids_fu_371_last_c_2_we1,
        seg_index_start => ap_const_lv4_0,
        size => zext_ln253_2_reg_1237,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        size_ap_vld => ap_const_logic_1,
        seg_index_start_ap_vld => ap_const_logic_1,
        selected_line_ap_vld => ap_const_logic_1,
        ap_start => grp_get_last_centroids_fu_371_ap_start,
        ap_done => grp_get_last_centroids_fu_371_ap_done,
        ap_ready => grp_get_last_centroids_fu_371_ap_ready,
        ap_idle => grp_get_last_centroids_fu_371_ap_idle,
        ap_continue => grp_get_last_centroids_fu_371_ap_continue);

    ip_accel_app_sdivNgs_U402 : component ip_accel_app_sdivNgs
    generic map (
        ID => 1,
        NUM_STAGE => 68,
        din0_WIDTH => 64,
        din1_WIDTH => 56,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_754_ap_start,
        done => grp_fu_754_ap_done,
        din0 => grp_fu_754_p0,
        din1 => shl_ln731_6_fu_734_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_754_p2);

    ip_accel_app_udivOgC_U403 : component ip_accel_app_udivOgC
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_829_ap_start,
        done => grp_fu_829_ap_done,
        din0 => sum_y_0_i_reg_303,
        din1 => grp_fu_829_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_829_p2);

    ip_accel_app_udivOgC_U404 : component ip_accel_app_udivOgC
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_834_ap_start,
        done => grp_fu_834_ap_done,
        din0 => sum_x_0_i_reg_291,
        din1 => grp_fu_834_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_834_p2);

    ip_accel_app_mac_PgM_U405 : component ip_accel_app_mac_PgM
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1076_p0,
        din1 => grp_fu_1076_p1,
        din2 => sum_xx_0_i_reg_327,
        ce => ap_const_logic_1,
        dout => grp_fu_1076_p3);

    ip_accel_app_mul_QgW_U406 : component ip_accel_app_mul_QgW
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 8,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => m_V_fu_839_p1,
        din1 => grp_fu_1085_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1085_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_sync_reg_grp_get_centroid_fh_fu_350_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_get_centroid_fh_fu_350_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state83_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state83))) then 
                    ap_sync_reg_grp_get_centroid_fh_fu_350_ap_done <= ap_const_logic_0;
                elsif ((grp_get_centroid_fh_fu_350_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_get_centroid_fh_fu_350_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_get_centroid_fh_fu_350_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_get_centroid_fh_fu_350_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state83_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state83))) then 
                    ap_sync_reg_grp_get_centroid_fh_fu_350_ap_ready <= ap_const_logic_0;
                elsif ((grp_get_centroid_fh_fu_350_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_get_centroid_fh_fu_350_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_get_last_centroids_fu_371_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_get_last_centroids_fu_371_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_sync_reg_grp_get_last_centroids_fu_371_ap_done <= ap_const_logic_0;
                elsif ((grp_get_last_centroids_fu_371_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_get_last_centroids_fu_371_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_get_last_centroids_fu_371_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_get_last_centroids_fu_371_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_sync_reg_grp_get_last_centroids_fu_371_ap_ready <= ap_const_logic_0;
                elsif ((grp_get_last_centroids_fu_371_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_get_last_centroids_fu_371_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_extract_micro_roi_fu_360_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_extract_micro_roi_fu_360_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
                    grp_extract_micro_roi_fu_360_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_extract_micro_roi_fu_360_ap_ready = ap_const_logic_1)) then 
                    grp_extract_micro_roi_fu_360_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_get_centroid_fh_fu_350_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_get_centroid_fh_fu_350_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state82) or ((ap_sync_grp_get_centroid_fh_fu_350_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state83)))) then 
                    grp_get_centroid_fh_fu_350_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_get_centroid_fh_fu_350_ap_ready = ap_const_logic_1)) then 
                    grp_get_centroid_fh_fu_350_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_get_last_centroids_fu_371_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_get_last_centroids_fu_371_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_sync_grp_get_last_centroids_fu_371_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((tmp_fu_646_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
                    grp_get_last_centroids_fu_371_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_get_last_centroids_fu_371_ap_ready = ap_const_logic_1)) then 
                    grp_get_last_centroids_fu_371_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_reg_339_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_0_i_reg_339 <= i_reg_1267;
            elsif (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_0_i_reg_339 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
                indvar_flatten_reg_258 <= add_ln253_reg_1137;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_258 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    line_index_0_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
                line_index_0_reg_280 <= line_index_fu_1071_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                line_index_0_reg_280 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
                p_Val2_s_reg_269 <= select_ln253_8_reg_1201;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_s_reg_269 <= ap_const_lv12_C9E;
            end if; 
        end if;
    end process;

    seg_index_0_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
                seg_index_0_reg_246 <= select_ln253_2_reg_1164;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                seg_index_0_reg_246 <= ap_const_lv3_3;
            end if; 
        end if;
    end process;

    sum_x_0_i_reg_291_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                sum_x_0_i_reg_291 <= sum_x_1_reg_1301;
            elsif (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                sum_x_0_i_reg_291 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum_xx_0_i_reg_327_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                sum_xx_0_i_reg_327 <= sum_xx_1_fu_823_p3;
            elsif (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                sum_xx_0_i_reg_327 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum_xy_0_i_reg_315_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                sum_xy_0_i_reg_315 <= sum_xy_1_reg_1311;
            elsif (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                sum_xy_0_i_reg_315 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum_y_0_i_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                sum_y_0_i_reg_303 <= sum_y_1_reg_1306;
            elsif (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                sum_y_0_i_reg_303 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln253_reg_1137 <= add_ln253_fu_445_p2;
                sub_ln271_reg_1129 <= sub_ln271_fu_433_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln256_reg_1103 <= add_ln256_fu_392_p2;
                trunc_ln254_reg_1098 <= trunc_ln254_fu_388_p1;
                    zext_ln256_1_reg_1118(2 downto 0) <= zext_ln256_1_fu_403_p1(2 downto 0);
                    zext_ln256_reg_1108(2 downto 0) <= zext_ln256_fu_398_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state83) and (grp_get_centroid_fh_fu_350_c_ap_vld = ap_const_logic_1))) then
                c_fu_122 <= grp_get_centroid_fh_fu_350_c;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_reg_1267 <= i_fu_660_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln186_fu_654_p2 = ap_const_lv1_0))) then
                icmp_ln187_reg_1272 <= icmp_ln187_fu_666_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln253_fu_439_p2 = ap_const_lv1_0))) then
                icmp_ln258_reg_1142 <= icmp_ln258_fu_463_p2;
                    select_ln253_1_reg_1154(4 downto 1) <= select_ln253_1_fu_507_p3(4 downto 1);
                select_ln253_2_reg_1164 <= select_ln253_2_fu_520_p3;
                select_ln253_3_reg_1174 <= select_ln253_3_fu_553_p3;
                select_ln253_5_reg_1179 <= select_ln253_5_fu_561_p3;
                select_ln253_8_reg_1201 <= select_ln253_8_fu_588_p3;
                select_ln253_reg_1147 <= select_ln253_fu_469_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then
                p_Val2_30_reg_1331 <= p_Val2_30_fu_906_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_383 <= segments647_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                select_ln253_4_reg_1217 <= select_ln253_4_fu_614_p3;
                tmp_reg_1260 <= line_bases_active_q0(16 downto 16);
                    zext_ln253_1_reg_1222(7 downto 0) <= zext_ln253_1_fu_620_p1(7 downto 0);
                    zext_ln253_2_reg_1237(2 downto 0) <= zext_ln253_2_fu_632_p1(2 downto 0);
                    zext_ln253_3_reg_1243(2 downto 0) <= zext_ln253_3_fu_636_p1(2 downto 0);
                    zext_ln253_4_reg_1249(2 downto 0) <= zext_ln253_4_fu_639_p1(2 downto 0);
                    zext_ln253_5_reg_1255(3 downto 0) <= zext_ln253_5_fu_642_p1(3 downto 0);
                    zext_ln253_8_reg_1227(7 downto 0) <= zext_ln253_8_fu_624_p1(7 downto 0);
                    zext_ln253_9_reg_1232(7 downto 0) <= zext_ln253_9_fu_628_p1(7 downto 0);
                    zext_ln253_reg_1211(3 downto 0) <= zext_ln253_fu_604_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state80)) then
                select_ln268_1_reg_1348 <= select_ln268_1_fu_1030_p3;
                select_ln268_reg_1341 <= select_ln268_fu_1016_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state82)) then
                sub_ln271_1_reg_1354 <= sub_ln271_1_fu_1039_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                sum_x_1_reg_1301 <= sum_x_1_fu_802_p3;
                sum_xy_1_reg_1311 <= sum_xy_1_fu_816_p3;
                sum_y_1_reg_1306 <= sum_y_1_fu_809_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                tmp_V_reg_1326 <= grp_fu_834_p2;
                udiv_ln196_reg_1321 <= grp_fu_829_p2;
            end if;
        end if;
    end process;
    zext_ln256_reg_1108(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln256_1_reg_1118(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    select_ln253_1_reg_1154(0) <= '0';
    zext_ln253_reg_1211(31 downto 4) <= "0000000000000000000000000000";
    zext_ln253_1_reg_1222(31 downto 8) <= "000000000000000000000000";
    zext_ln253_8_reg_1227(9 downto 8) <= "00";
    zext_ln253_9_reg_1232(9 downto 8) <= "00";
    zext_ln253_2_reg_1237(3) <= '0';
    zext_ln253_3_reg_1243(34 downto 3) <= "00000000000000000000000000000000";
    zext_ln253_4_reg_1249(31 downto 3) <= "00000000000000000000000000000";
    zext_ln253_5_reg_1255(15 downto 4) <= "000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln253_fu_439_p2, tmp_fu_646_p3, ap_CS_fsm_state6, icmp_ln186_fu_654_p2, grp_extract_micro_roi_fu_360_ap_done, ap_CS_fsm_state5, ap_block_state5_on_subcall_done, ap_CS_fsm_state83, ap_block_state83_on_subcall_done, ap_CS_fsm_state81)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln253_fu_439_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_fu_646_p3 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state84;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln186_fu_654_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                if (((grp_extract_micro_roi_fu_360_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state81))) then
                    ap_NS_fsm <= ap_ST_fsm_state82;
                else
                    ap_NS_fsm <= ap_ST_fsm_state81;
                end if;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                if (((ap_const_boolean_0 = ap_block_state83_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state83))) then
                    ap_NS_fsm <= ap_ST_fsm_state84;
                else
                    ap_NS_fsm <= ap_ST_fsm_state83;
                end if;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln253_fu_445_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(indvar_flatten_reg_258));
    add_ln256_fu_392_p2 <= std_logic_vector(signed(ap_const_lv3_7) + signed(seg_index_0_reg_246));
    add_ln268_fu_1025_p2 <= std_logic_vector(unsigned(trunc_ln265_fu_984_p1) + unsigned(zext_ln253_5_reg_1255));
    add_ln272_1_fu_1047_p2 <= std_logic_vector(signed(ap_const_lv4_A) + signed(zext_ln272_fu_1044_p1));
    add_ln272_fu_1057_p2 <= std_logic_vector(signed(sext_ln272_fu_1053_p1) + signed(select_ln253_1_reg_1154));
    add_ln703_fu_451_p2 <= std_logic_vector(signed(ap_const_lv12_E4F) + signed(p_Val2_s_reg_269));
    add_ln851_6_fu_962_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(tmp_8_fu_952_p4));
    add_ln851_fu_884_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(tmp_s_fu_874_p4));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state5_on_subcall_done_assign_proc : process(ap_sync_grp_get_last_centroids_fu_371_ap_ready, ap_sync_grp_get_last_centroids_fu_371_ap_done)
    begin
                ap_block_state5_on_subcall_done <= ((ap_sync_grp_get_last_centroids_fu_371_ap_ready and ap_sync_grp_get_last_centroids_fu_371_ap_done) = ap_const_logic_0);
    end process;


    ap_block_state83_on_subcall_done_assign_proc : process(ap_sync_grp_get_centroid_fh_fu_350_ap_ready, ap_sync_grp_get_centroid_fh_fu_350_ap_done)
    begin
                ap_block_state83_on_subcall_done <= ((ap_sync_grp_get_centroid_fh_fu_350_ap_ready and ap_sync_grp_get_centroid_fh_fu_350_ap_done) = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln253_fu_439_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln253_fu_439_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln253_fu_439_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln253_fu_439_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_sync_grp_get_centroid_fh_fu_350_ap_done <= (grp_get_centroid_fh_fu_350_ap_done or ap_sync_reg_grp_get_centroid_fh_fu_350_ap_done);
    ap_sync_grp_get_centroid_fh_fu_350_ap_ready <= (grp_get_centroid_fh_fu_350_ap_ready or ap_sync_reg_grp_get_centroid_fh_fu_350_ap_ready);
    ap_sync_grp_get_last_centroids_fu_371_ap_done <= (grp_get_last_centroids_fu_371_ap_done or ap_sync_reg_grp_get_last_centroids_fu_371_ap_done);
    ap_sync_grp_get_last_centroids_fu_371_ap_ready <= (grp_get_last_centroids_fu_371_ap_ready or ap_sync_reg_grp_get_last_centroids_fu_371_ap_ready);

    centroids_address0_assign_proc : process(ap_CS_fsm_state84, grp_get_last_centroids_fu_371_centroids_address0, ap_CS_fsm_state5, zext_ln272_1_fu_1062_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            centroids_address0 <= zext_ln272_1_fu_1062_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            centroids_address0 <= grp_get_last_centroids_fu_371_centroids_address0;
        else 
            centroids_address0 <= "XXXXXXX";
        end if; 
    end process;


    centroids_ce0_assign_proc : process(ap_CS_fsm_state84, grp_get_last_centroids_fu_371_centroids_ce0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            centroids_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            centroids_ce0 <= grp_get_last_centroids_fu_371_centroids_ce0;
        else 
            centroids_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    centroids_d0 <= c_fu_122;

    centroids_we0_assign_proc : process(tmp_reg_1260, ap_CS_fsm_state84)
    begin
        if (((tmp_reg_1260 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state84))) then 
            centroids_we0 <= ap_const_logic_1;
        else 
            centroids_we0 <= ap_const_logic_0;
        end if; 
    end process;

    centroids_y_1_load_n_fu_774_p4 <= last_c_q0(47 downto 16);

    eroded_data_V_read_assign_proc : process(grp_extract_micro_roi_fu_360_img_in_mr_data_V_read, ap_CS_fsm_state81)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            eroded_data_V_read <= grp_extract_micro_roi_fu_360_img_in_mr_data_V_read;
        else 
            eroded_data_V_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_extract_micro_roi_fu_360_ap_start <= grp_extract_micro_roi_fu_360_ap_start_reg;
    grp_fu_1076_p0 <= zext_ln188_3_fu_764_p1(16 - 1 downto 0);
    grp_fu_1076_p1 <= zext_ln188_3_fu_764_p1(16 - 1 downto 0);
    grp_fu_1085_p1 <= zext_ln253_1_reg_1222(8 - 1 downto 0);

    grp_fu_754_ap_start_assign_proc : process(ap_CS_fsm_state6, icmp_ln186_fu_654_p2)
    begin
        if (((icmp_ln186_fu_654_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_fu_754_ap_start <= ap_const_logic_1;
        else 
            grp_fu_754_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_754_p0 <= (sub_ln731_fu_722_p2 & ap_const_lv16_0);

    grp_fu_829_ap_start_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_829_ap_start <= ap_const_logic_1;
        else 
            grp_fu_829_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_829_p1 <= zext_ln253_4_reg_1249(3 - 1 downto 0);

    grp_fu_834_ap_start_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_834_ap_start <= ap_const_logic_1;
        else 
            grp_fu_834_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_834_p1 <= zext_ln253_4_reg_1249(3 - 1 downto 0);

    grp_get_centroid_fh_fu_350_ap_continue_assign_proc : process(ap_CS_fsm_state83, ap_block_state83_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state83_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state83))) then 
            grp_get_centroid_fh_fu_350_ap_continue <= ap_const_logic_1;
        else 
            grp_get_centroid_fh_fu_350_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_get_centroid_fh_fu_350_ap_start <= grp_get_centroid_fh_fu_350_ap_start_reg;

    grp_get_last_centroids_fu_371_ap_continue_assign_proc : process(ap_CS_fsm_state5, ap_block_state5_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_get_last_centroids_fu_371_ap_continue <= ap_const_logic_1;
        else 
            grp_get_last_centroids_fu_371_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_get_last_centroids_fu_371_ap_start <= grp_get_last_centroids_fu_371_ap_start_reg;
    i_fu_660_p2 <= std_logic_vector(unsigned(i_0_i_reg_339) + unsigned(ap_const_lv4_1));
    icmp_ln186_fu_654_p2 <= "1" when (i_0_i_reg_339 = ap_const_lv4_C) else "0";
    icmp_ln187_fu_666_p2 <= "1" when (unsigned(i_0_i_reg_339) < unsigned(zext_ln253_2_reg_1237)) else "0";
    icmp_ln253_fu_439_p2 <= "1" when (indvar_flatten_reg_258 = ap_const_lv4_C) else "0";
    icmp_ln258_fu_463_p2 <= "1" when (line_index_0_reg_280 = ap_const_lv3_6) else "0";
    icmp_ln267_fu_1006_p2 <= "1" when (signed(y_right_fu_993_p2) > signed(ap_const_lv32_13F)) else "0";
    icmp_ln851_7_fu_868_p2 <= "1" when (trunc_ln851_fu_864_p1 = ap_const_lv8_0) else "0";
    icmp_ln851_fu_946_p2 <= "1" when (trunc_ln851_9_fu_943_p1 = ap_const_lv8_0) else "0";

    last_c_address0_assign_proc : process(ap_CS_fsm_state6, grp_get_last_centroids_fu_371_last_c_2_address0, ap_CS_fsm_state5, zext_ln188_fu_671_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            last_c_address0 <= zext_ln188_fu_671_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            last_c_address0 <= grp_get_last_centroids_fu_371_last_c_2_address0;
        else 
            last_c_address0 <= "XX";
        end if; 
    end process;


    last_c_ce0_assign_proc : process(ap_CS_fsm_state6, grp_get_last_centroids_fu_371_last_c_2_ce0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            last_c_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            last_c_ce0 <= grp_get_last_centroids_fu_371_last_c_2_ce0;
        else 
            last_c_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    last_c_we0_assign_proc : process(grp_get_last_centroids_fu_371_last_c_2_we0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            last_c_we0 <= grp_get_last_centroids_fu_371_last_c_2_we0;
        else 
            last_c_we0 <= ap_const_logic_0;
        end if; 
    end process;

        lhs_V_fu_915_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1085_p2),41));

    line_bases_active_address0 <= zext_ln259_fu_596_p1(3 - 1 downto 0);

    line_bases_active_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            line_bases_active_ce0 <= ap_const_logic_1;
        else 
            line_bases_active_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    line_index_fu_1071_p2 <= std_logic_vector(unsigned(select_ln253_reg_1147) + unsigned(ap_const_lv3_1));
    m_V_fu_839_p1 <= grp_fu_754_p2(24 - 1 downto 0);

    micro_roi_2_data_V_address0_assign_proc : process(grp_get_centroid_fh_fu_350_micro_roi_data_V_address0, grp_extract_micro_roi_fu_360_micro_roi_data_V_address0, ap_CS_fsm_state83, ap_CS_fsm_state81)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            micro_roi_2_data_V_address0 <= grp_extract_micro_roi_fu_360_micro_roi_data_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            micro_roi_2_data_V_address0 <= grp_get_centroid_fh_fu_350_micro_roi_data_V_address0;
        else 
            micro_roi_2_data_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    micro_roi_2_data_V_ce0_assign_proc : process(grp_get_centroid_fh_fu_350_micro_roi_data_V_ce0, grp_extract_micro_roi_fu_360_micro_roi_data_V_ce0, ap_CS_fsm_state83, ap_CS_fsm_state81)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            micro_roi_2_data_V_ce0 <= grp_extract_micro_roi_fu_360_micro_roi_data_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            micro_roi_2_data_V_ce0 <= grp_get_centroid_fh_fu_350_micro_roi_data_V_ce0;
        else 
            micro_roi_2_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    micro_roi_2_data_V_we0_assign_proc : process(grp_extract_micro_roi_fu_360_micro_roi_data_V_we0, ap_CS_fsm_state81)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            micro_roi_2_data_V_we0 <= grp_extract_micro_roi_fu_360_micro_roi_data_V_we0;
        else 
            micro_roi_2_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln190_fu_790_p0 <= zext_ln188_3_fu_764_p1(16 - 1 downto 0);
    mul_ln190_fu_790_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln190_fu_790_p0) * signed(centroids_y_1_load_n_fu_774_p4))), 32));
    mul_ln731_2_fu_697_p0 <= mul_ln731_2_fu_697_p00(32 - 1 downto 0);
    mul_ln731_2_fu_697_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_y_0_i_reg_303),48));
    mul_ln731_2_fu_697_p1 <= zext_ln731_9_fu_689_p1(32 - 1 downto 0);
    mul_ln731_2_fu_697_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln731_2_fu_697_p0) * unsigned(mul_ln731_2_fu_697_p1), 48));
    mul_ln731_3_fu_707_p0 <= mul_ln731_3_fu_707_p00(32 - 1 downto 0);
    mul_ln731_3_fu_707_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_xx_0_i_reg_327),35));
    mul_ln731_3_fu_707_p1 <= zext_ln253_3_reg_1243(3 - 1 downto 0);
    mul_ln731_3_fu_707_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln731_3_fu_707_p0) * unsigned(mul_ln731_3_fu_707_p1), 35));
    mul_ln731_4_fu_716_p0 <= zext_ln731_9_fu_689_p1(32 - 1 downto 0);
    mul_ln731_4_fu_716_p1 <= zext_ln731_9_fu_689_p1(32 - 1 downto 0);
    mul_ln731_4_fu_716_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln731_4_fu_716_p0) * unsigned(mul_ln731_4_fu_716_p1), 48));
    mul_ln731_fu_680_p0 <= mul_ln731_fu_680_p00(32 - 1 downto 0);
    mul_ln731_fu_680_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_xy_0_i_reg_315),35));
    mul_ln731_fu_680_p1 <= zext_ln253_3_reg_1243(3 - 1 downto 0);
    mul_ln731_fu_680_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln731_fu_680_p0) * unsigned(mul_ln731_fu_680_p1), 35));
    p_Result_13_fu_935_p3 <= ret_V_fu_929_p2(40 downto 40);
    p_Result_s_fu_856_p3 <= r_V_fu_850_p2(55 downto 55);
    p_Val2_30_fu_906_p2 <= std_logic_vector(unsigned(udiv_ln196_reg_1321) - unsigned(select_ln850_fu_898_p3));
    r_V_fu_850_p0 <= r_V_fu_850_p00(32 - 1 downto 0);
    r_V_fu_850_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_reg_1326),56));
    r_V_fu_850_p1 <= m_V_fu_839_p1;
    r_V_fu_850_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &r_V_fu_850_p0) * signed(r_V_fu_850_p1))), 56));
    ret_V_fu_929_p2 <= std_logic_vector(signed(sext_ln728_fu_925_p1) + signed(lhs_V_fu_915_p1));
    rhs_V_fu_918_p3 <= (p_Val2_30_reg_1331 & ap_const_lv8_0);
    seg_index_fu_457_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(seg_index_0_reg_246));

    segments647_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2, zext_ln256_fu_398_p1, zext_ln256_2_fu_515_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            segments647_address0 <= zext_ln256_2_fu_515_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            segments647_address0 <= zext_ln256_fu_398_p1(4 - 1 downto 0);
        else 
            segments647_address0 <= "XXXX";
        end if; 
    end process;


    segments647_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2, zext_ln256_1_fu_403_p1, zext_ln253_6_fu_528_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            segments647_address1 <= zext_ln253_6_fu_528_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            segments647_address1 <= zext_ln256_1_fu_403_p1(4 - 1 downto 0);
        else 
            segments647_address1 <= "XXXX";
        end if; 
    end process;

    segments647_address2 <= zext_ln253_7_fu_568_p1(4 - 1 downto 0);
    segments647_address3 <= select_ln253_6_fu_573_p3(4 - 1 downto 0);
    segments647_address4 <= select_ln253_7_fu_581_p3(4 - 1 downto 0);

    segments647_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            segments647_ce0 <= ap_const_logic_1;
        else 
            segments647_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    segments647_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            segments647_ce1 <= ap_const_logic_1;
        else 
            segments647_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    segments647_ce2_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            segments647_ce2 <= ap_const_logic_1;
        else 
            segments647_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    segments647_ce3_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            segments647_ce3 <= ap_const_logic_1;
        else 
            segments647_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    segments647_ce4_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            segments647_ce4 <= ap_const_logic_1;
        else 
            segments647_ce4 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln253_1_fu_507_p3 <= 
        sub_ln254_1_fu_501_p2 when (icmp_ln258_fu_463_p2(0) = '1') else 
        sub_ln254_fu_427_p2;
    select_ln253_2_fu_520_p3 <= 
        seg_index_fu_457_p2 when (icmp_ln258_fu_463_p2(0) = '1') else 
        seg_index_0_reg_246;
    select_ln253_3_fu_553_p3 <= 
        tmp_1_fu_533_p4 when (icmp_ln258_fu_463_p2(0) = '1') else 
        tmp_2_fu_543_p4;
    select_ln253_4_fu_614_p3 <= 
        sub_ln271_2_fu_608_p2 when (icmp_ln258_reg_1142(0) = '1') else 
        sub_ln271_reg_1129;
    select_ln253_5_fu_561_p3 <= 
        seg_index_0_reg_246 when (icmp_ln258_fu_463_p2(0) = '1') else 
        add_ln256_reg_1103;
    select_ln253_6_fu_573_p3 <= 
        zext_ln256_2_fu_515_p1 when (icmp_ln258_fu_463_p2(0) = '1') else 
        zext_ln256_1_reg_1118;
    select_ln253_7_fu_581_p3 <= 
        zext_ln256_1_reg_1118 when (icmp_ln258_fu_463_p2(0) = '1') else 
        zext_ln256_reg_1108;
    select_ln253_8_fu_588_p3 <= 
        add_ln703_fu_451_p2 when (icmp_ln258_fu_463_p2(0) = '1') else 
        p_Val2_s_reg_269;
    select_ln253_fu_469_p3 <= 
        ap_const_lv3_0 when (icmp_ln258_fu_463_p2(0) = '1') else 
        line_index_0_reg_280;
    select_ln268_1_fu_1030_p3 <= 
        ap_const_lv16_13F when (icmp_ln267_fu_1006_p2(0) = '1') else 
        add_ln268_fu_1025_p2;
    select_ln268_fu_1016_p3 <= 
        ap_const_lv16_0 when (tmp_52_fu_998_p3(0) = '1') else 
        trunc_ln268_fu_1012_p1;
    select_ln850_fu_898_p3 <= 
        select_ln851_fu_890_p3 when (p_Result_s_fu_856_p3(0) = '1') else 
        tmp_s_fu_874_p4;
    select_ln851_6_fu_968_p3 <= 
        tmp_8_fu_952_p4 when (icmp_ln851_fu_946_p2(0) = '1') else 
        add_ln851_6_fu_962_p2;
    select_ln851_fu_890_p3 <= 
        tmp_s_fu_874_p4 when (icmp_ln851_7_fu_868_p2(0) = '1') else 
        add_ln851_fu_884_p2;
        sext_ln253_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln253_3_reg_1174),4));

        sext_ln272_fu_1053_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln272_1_fu_1047_p2),5));

        sext_ln728_fu_925_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_fu_918_p3),41));

    shl_ln254_1_fu_415_p3 <= (seg_index_0_reg_246 & ap_const_lv1_0);
    shl_ln254_1_mid1_fu_489_p3 <= (seg_index_fu_457_p2 & ap_const_lv1_0);
    shl_ln254_mid1_fu_481_p3 <= (trunc_ln254_1_fu_477_p1 & ap_const_lv3_0);
    shl_ln731_6_fu_734_p3 <= (sub_ln731_4_fu_728_p2 & ap_const_lv8_0);
    shl_ln_fu_408_p3 <= (trunc_ln254_reg_1098 & ap_const_lv3_0);
    sub_ln254_1_fu_501_p2 <= std_logic_vector(unsigned(shl_ln254_mid1_fu_481_p3) - unsigned(zext_ln254_1_fu_497_p1));
    sub_ln254_fu_427_p2 <= std_logic_vector(unsigned(shl_ln_fu_408_p3) - unsigned(zext_ln254_fu_423_p1));
    sub_ln271_1_fu_1039_p2 <= std_logic_vector(unsigned(select_ln268_1_reg_1348) - unsigned(select_ln268_reg_1341));
    sub_ln271_2_fu_608_p2 <= std_logic_vector(unsigned(reg_383) - unsigned(segments647_q0));
    sub_ln271_fu_433_p2 <= std_logic_vector(unsigned(segments647_q0) - unsigned(segments647_q1));
    sub_ln731_4_fu_728_p2 <= std_logic_vector(unsigned(zext_ln731_12_fu_712_p1) - unsigned(mul_ln731_4_fu_716_p2));
    sub_ln731_fu_722_p2 <= std_logic_vector(unsigned(zext_ln731_10_fu_693_p1) - unsigned(mul_ln731_2_fu_697_p2));
    sum_x_1_fu_802_p3 <= 
        sum_x_fu_768_p2 when (icmp_ln187_reg_1272(0) = '1') else 
        sum_x_0_i_reg_291;
    sum_x_fu_768_p2 <= std_logic_vector(unsigned(zext_ln188_3_fu_764_p1) + unsigned(sum_x_0_i_reg_291));
    sum_xx_1_fu_823_p3 <= 
        grp_fu_1076_p3 when (icmp_ln187_reg_1272(0) = '1') else 
        sum_xx_0_i_reg_327;
    sum_xy_1_fu_816_p3 <= 
        sum_xy_fu_796_p2 when (icmp_ln187_reg_1272(0) = '1') else 
        sum_xy_0_i_reg_315;
    sum_xy_fu_796_p2 <= std_logic_vector(unsigned(sum_xy_0_i_reg_315) + unsigned(mul_ln190_fu_790_p2));
    sum_y_1_fu_809_p3 <= 
        sum_y_fu_784_p2 when (icmp_ln187_reg_1272(0) = '1') else 
        sum_y_0_i_reg_303;
    sum_y_fu_784_p2 <= std_logic_vector(unsigned(sum_y_0_i_reg_303) + unsigned(centroids_y_1_load_n_fu_774_p4));
    tmp_1_fu_533_p4 <= add_ln703_fu_451_p2(11 downto 9);
    tmp_2_fu_543_p4 <= p_Val2_s_reg_269(11 downto 9);
    tmp_52_fu_998_p3 <= y_left_fu_988_p2(31 downto 31);
    tmp_8_fu_952_p4 <= ret_V_fu_929_p2(39 downto 8);
    tmp_fu_646_p3 <= line_bases_active_q0(16 downto 16);
    tmp_s_fu_874_p4 <= r_V_fu_850_p2(39 downto 8);
    trunc_ln188_fu_760_p1 <= last_c_q0(16 - 1 downto 0);
    trunc_ln254_1_fu_477_p1 <= seg_index_fu_457_p2(2 - 1 downto 0);
    trunc_ln254_fu_388_p1 <= seg_index_0_reg_246(2 - 1 downto 0);
    trunc_ln265_fu_984_p1 <= y_temp_fu_976_p3(16 - 1 downto 0);
    trunc_ln268_fu_1012_p1 <= y_left_fu_988_p2(16 - 1 downto 0);
    trunc_ln851_9_fu_943_p1 <= grp_fu_1085_p2(8 - 1 downto 0);
    trunc_ln851_fu_864_p1 <= r_V_fu_850_p2(8 - 1 downto 0);
    y_left_fu_988_p2 <= std_logic_vector(unsigned(y_temp_fu_976_p3) - unsigned(zext_ln253_reg_1211));
    y_right_fu_993_p2 <= std_logic_vector(unsigned(y_temp_fu_976_p3) + unsigned(zext_ln253_reg_1211));
    y_temp_fu_976_p3 <= 
        select_ln851_6_fu_968_p3 when (p_Result_13_fu_935_p3(0) = '1') else 
        tmp_8_fu_952_p4;
    zext_ln188_3_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln188_fu_760_p1),32));
    zext_ln188_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_339),64));
    zext_ln253_1_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(segments647_q2),32));
    zext_ln253_2_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln253_5_reg_1179),4));
    zext_ln253_3_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln253_5_reg_1179),35));
    zext_ln253_4_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln253_5_reg_1179),32));
    zext_ln253_5_fu_642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln253_fu_601_p1),16));
    zext_ln253_6_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln253_2_fu_520_p3),64));
    zext_ln253_7_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln253_5_fu_561_p3),64));
    zext_ln253_8_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(segments647_q3),10));
    zext_ln253_9_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(segments647_q4),10));
    zext_ln253_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln253_fu_601_p1),32));
    zext_ln254_1_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln254_1_mid1_fu_489_p3),5));
    zext_ln254_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln254_1_fu_415_p3),5));
    zext_ln256_1_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(seg_index_0_reg_246),64));
    zext_ln256_2_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(seg_index_fu_457_p2),64));
    zext_ln256_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln256_fu_392_p2),64));
    zext_ln259_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln253_fu_469_p3),64));
    zext_ln272_1_fu_1062_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln272_fu_1057_p2),64));
    zext_ln272_fu_1044_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln253_reg_1147),4));
    zext_ln731_10_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln731_fu_680_p2),48));
    zext_ln731_12_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln731_3_fu_707_p2),48));
    zext_ln731_9_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_x_0_i_reg_291),48));
end behav;
