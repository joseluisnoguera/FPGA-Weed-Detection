-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AXIvideo2xfMat is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    stream_in_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    stream_in_TVALID : IN STD_LOGIC;
    stream_in_TREADY : OUT STD_LOGIC;
    stream_in_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    stream_in_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    stream_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    img_data_V_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    img_data_V_full_n : IN STD_LOGIC;
    img_data_V_write : OUT STD_LOGIC );
end;


architecture behav of AXIvideo2xfMat is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv10_2D0 : STD_LOGIC_VECTOR (9 downto 0) := "1011010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv11_500 : STD_LOGIC_VECTOR (10 downto 0) := "10100000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal stream_in_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln129_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln132_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_phi_mux_eol_2_phi_fu_233_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal img_data_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal icmp_ln129_reg_330 : STD_LOGIC_VECTOR (0 downto 0);
    signal eol_reg_136 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_data_V_1_reg_147 : STD_LOGIC_VECTOR (31 downto 0);
    signal eol_0_reg_158 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_0_reg_170 : STD_LOGIC_VECTOR (10 downto 0);
    signal axi_last_V_2_reg_181 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_reg_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_301 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_last_V_reg_309 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln127_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_fu_265_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_325 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_predicate_op48_read_state5 : BOOLEAN;
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal j_fu_277_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln647_fu_292_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln647_reg_343 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_state8 : BOOLEAN;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state5 : STD_LOGIC;
    signal axi_last_V_3_reg_206 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V_0_reg_105 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal axi_data_V_3_reg_218 : STD_LOGIC_VECTOR (31 downto 0);
    signal axi_data_V_0_reg_115 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_125 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_eol_phi_fu_139_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_axi_data_V_1_phi_fu_150_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_eol_0_phi_fu_162_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp1_iter0_axi_last_V_2_reg_181 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_p_Val2_s_phi_fu_198_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter0_p_Val2_s_reg_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal eol_2_reg_230 : STD_LOGIC_VECTOR (0 downto 0);
    signal sof_1_fu_76 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal tmp_user_V_fu_250_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_data_V_U_apdone_blk : STD_LOGIC;
    signal stream_in_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal stream_in_TVALID_int : STD_LOGIC;
    signal stream_in_TREADY_int : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal stream_in_TKEEP_int : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_AXI_video_strm_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal stream_in_TSTRB_int : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_AXI_video_strm_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_user_V_U_apdone_blk : STD_LOGIC;
    signal stream_in_TUSER_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_AXI_video_strm_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_last_V_U_apdone_blk : STD_LOGIC;
    signal stream_in_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_AXI_video_strm_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_id_V_U_apdone_blk : STD_LOGIC;
    signal stream_in_TID_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_AXI_video_strm_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal stream_in_TDEST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_AXI_video_strm_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_dest_V_U_ack_in : STD_LOGIC;
    signal ap_condition_132 : BOOLEAN;

    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_AXI_video_strm_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => stream_in_TDATA,
        vld_in => stream_in_TVALID,
        ack_in => regslice_both_AXI_video_strm_V_data_V_U_ack_in,
        data_out => stream_in_TDATA_int,
        vld_out => stream_in_TVALID_int,
        ack_out => stream_in_TREADY_int,
        apdone_blk => regslice_both_AXI_video_strm_V_data_V_U_apdone_blk);

    regslice_both_AXI_video_strm_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => stream_in_TKEEP,
        vld_in => stream_in_TVALID,
        ack_in => regslice_both_AXI_video_strm_V_keep_V_U_ack_in,
        data_out => stream_in_TKEEP_int,
        vld_out => regslice_both_AXI_video_strm_V_keep_V_U_vld_out,
        ack_out => stream_in_TREADY_int,
        apdone_blk => regslice_both_AXI_video_strm_V_keep_V_U_apdone_blk);

    regslice_both_AXI_video_strm_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => stream_in_TSTRB,
        vld_in => stream_in_TVALID,
        ack_in => regslice_both_AXI_video_strm_V_strb_V_U_ack_in,
        data_out => stream_in_TSTRB_int,
        vld_out => regslice_both_AXI_video_strm_V_strb_V_U_vld_out,
        ack_out => stream_in_TREADY_int,
        apdone_blk => regslice_both_AXI_video_strm_V_strb_V_U_apdone_blk);

    regslice_both_AXI_video_strm_V_user_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => stream_in_TUSER,
        vld_in => stream_in_TVALID,
        ack_in => regslice_both_AXI_video_strm_V_user_V_U_ack_in,
        data_out => stream_in_TUSER_int,
        vld_out => regslice_both_AXI_video_strm_V_user_V_U_vld_out,
        ack_out => stream_in_TREADY_int,
        apdone_blk => regslice_both_AXI_video_strm_V_user_V_U_apdone_blk);

    regslice_both_AXI_video_strm_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => stream_in_TLAST,
        vld_in => stream_in_TVALID,
        ack_in => regslice_both_AXI_video_strm_V_last_V_U_ack_in,
        data_out => stream_in_TLAST_int,
        vld_out => regslice_both_AXI_video_strm_V_last_V_U_vld_out,
        ack_out => stream_in_TREADY_int,
        apdone_blk => regslice_both_AXI_video_strm_V_last_V_U_apdone_blk);

    regslice_both_AXI_video_strm_V_id_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => stream_in_TID,
        vld_in => stream_in_TVALID,
        ack_in => regslice_both_AXI_video_strm_V_id_V_U_ack_in,
        data_out => stream_in_TID_int,
        vld_out => regslice_both_AXI_video_strm_V_id_V_U_vld_out,
        ack_out => stream_in_TREADY_int,
        apdone_blk => regslice_both_AXI_video_strm_V_id_V_U_apdone_blk);

    regslice_both_AXI_video_strm_V_dest_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => stream_in_TDEST,
        vld_in => stream_in_TVALID,
        ack_in => regslice_both_AXI_video_strm_V_dest_V_U_ack_in,
        data_out => stream_in_TDEST_int,
        vld_out => regslice_both_AXI_video_strm_V_dest_V_U_vld_out,
        ack_out => stream_in_TREADY_int,
        apdone_blk => regslice_both_AXI_video_strm_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln127_fu_259_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln127_fu_259_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state5);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((icmp_ln127_fu_259_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    axi_data_V_0_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                axi_data_V_0_reg_115 <= tmp_data_V_reg_301;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                axi_data_V_0_reg_115 <= axi_data_V_3_reg_218;
            end if; 
        end if;
    end process;

    axi_data_V_1_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln129_reg_330 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                axi_data_V_1_reg_147 <= p_Val2_s_reg_194;
            elsif (((icmp_ln127_fu_259_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                axi_data_V_1_reg_147 <= axi_data_V_0_reg_115;
            end if; 
        end if;
    end process;

    axi_data_V_3_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                axi_data_V_3_reg_218 <= axi_data_V_1_reg_147;
            elsif ((not(((eol_2_reg_230 = ap_const_lv1_0) and (stream_in_TVALID_int = ap_const_logic_0))) and (eol_2_reg_230 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                axi_data_V_3_reg_218 <= stream_in_TDATA_int;
            end if; 
        end if;
    end process;

    axi_last_V_0_reg_105_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                axi_last_V_0_reg_105 <= tmp_last_V_reg_309;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                axi_last_V_0_reg_105 <= axi_last_V_3_reg_206;
            end if; 
        end if;
    end process;

    axi_last_V_2_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_132)) then
                if (((or_ln132_fu_286_p2 = ap_const_lv1_1) and (icmp_ln129_fu_271_p2 = ap_const_lv1_1))) then 
                    axi_last_V_2_reg_181 <= ap_phi_mux_eol_phi_fu_139_p4;
                elsif (((or_ln132_fu_286_p2 = ap_const_lv1_0) and (icmp_ln129_fu_271_p2 = ap_const_lv1_1))) then 
                    axi_last_V_2_reg_181 <= stream_in_TLAST_int;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    axi_last_V_2_reg_181 <= ap_phi_reg_pp1_iter0_axi_last_V_2_reg_181;
                end if;
            end if; 
        end if;
    end process;

    axi_last_V_3_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                axi_last_V_3_reg_206 <= eol_reg_136;
            elsif ((not(((eol_2_reg_230 = ap_const_lv1_0) and (stream_in_TVALID_int = ap_const_logic_0))) and (eol_2_reg_230 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                axi_last_V_3_reg_206 <= stream_in_TLAST_int;
            end if; 
        end if;
    end process;

    eol_0_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln129_reg_330 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                eol_0_reg_158 <= axi_last_V_2_reg_181;
            elsif (((icmp_ln127_fu_259_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                eol_0_reg_158 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    eol_2_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                eol_2_reg_230 <= eol_0_reg_158;
            elsif ((not(((eol_2_reg_230 = ap_const_lv1_0) and (stream_in_TVALID_int = ap_const_logic_0))) and (eol_2_reg_230 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                eol_2_reg_230 <= stream_in_TLAST_int;
            end if; 
        end if;
    end process;

    eol_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln129_reg_330 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                eol_reg_136 <= axi_last_V_2_reg_181;
            elsif (((icmp_ln127_fu_259_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                eol_reg_136 <= axi_last_V_0_reg_105;
            end if; 
        end if;
    end process;

    i_0_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_125 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_0_reg_125 <= i_reg_325;
            end if; 
        end if;
    end process;

    j_0_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln129_fu_271_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                j_0_reg_170 <= j_fu_277_p2;
            elsif (((icmp_ln127_fu_259_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_0_reg_170 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_132)) then
                if (((or_ln132_fu_286_p2 = ap_const_lv1_1) and (icmp_ln129_fu_271_p2 = ap_const_lv1_1))) then 
                    p_Val2_s_reg_194 <= ap_phi_mux_axi_data_V_1_phi_fu_150_p4;
                elsif (((or_ln132_fu_286_p2 = ap_const_lv1_0) and (icmp_ln129_fu_271_p2 = ap_const_lv1_1))) then 
                    p_Val2_s_reg_194 <= stream_in_TDATA_int;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    p_Val2_s_reg_194 <= ap_phi_reg_pp1_iter0_p_Val2_s_reg_194;
                end if;
            end if; 
        end if;
    end process;

    sof_1_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln129_fu_271_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                sof_1_fu_76 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                sof_1_fu_76 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_reg_325 <= i_fu_265_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln129_reg_330 <= icmp_ln129_fu_271_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((stream_in_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_data_V_reg_301 <= stream_in_TDATA_int;
                tmp_last_V_reg_309 <= stream_in_TLAST_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln129_fu_271_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                trunc_ln647_reg_343 <= trunc_ln647_fu_292_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_enable_reg_pp1_iter0, icmp_ln129_fu_271_p2, ap_CS_fsm_state8, ap_phi_mux_eol_2_phi_fu_233_p4, icmp_ln127_fu_259_p2, ap_CS_fsm_state4, ap_block_pp1_stage0_subdone, eol_2_reg_230, tmp_user_V_fu_250_p1, stream_in_TVALID_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_user_V_fu_250_p1 = ap_const_lv1_0) and (stream_in_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((tmp_user_V_fu_250_p1 = ap_const_lv1_1) and (stream_in_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln127_fu_259_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((icmp_ln129_fu_271_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((icmp_ln129_fu_271_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if ((not(((eol_2_reg_230 = ap_const_lv1_0) and (stream_in_TVALID_int = ap_const_logic_0))) and (eol_2_reg_230 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif ((not(((eol_2_reg_230 = ap_const_lv1_0) and (stream_in_TVALID_int = ap_const_logic_0))) and (ap_phi_mux_eol_2_phi_fu_233_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_01001_assign_proc : process(img_data_V_full_n, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, icmp_ln129_reg_330, ap_predicate_op48_read_state5, stream_in_TVALID_int)
    begin
                ap_block_pp1_stage0_01001 <= (((icmp_ln129_reg_330 = ap_const_lv1_1) and (img_data_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((stream_in_TVALID_int = ap_const_logic_0) and (ap_predicate_op48_read_state5 = ap_const_boolean_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp1_stage0_11001_assign_proc : process(img_data_V_full_n, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, icmp_ln129_reg_330, ap_predicate_op48_read_state5, stream_in_TVALID_int)
    begin
                ap_block_pp1_stage0_11001 <= (((icmp_ln129_reg_330 = ap_const_lv1_1) and (img_data_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((stream_in_TVALID_int = ap_const_logic_0) and (ap_predicate_op48_read_state5 = ap_const_boolean_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(img_data_V_full_n, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, icmp_ln129_reg_330, ap_predicate_op48_read_state5, stream_in_TVALID_int)
    begin
                ap_block_pp1_stage0_subdone <= (((icmp_ln129_reg_330 = ap_const_lv1_1) and (img_data_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((stream_in_TVALID_int = ap_const_logic_0) and (ap_predicate_op48_read_state5 = ap_const_boolean_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state5_pp1_stage0_iter0_assign_proc : process(ap_predicate_op48_read_state5, stream_in_TVALID_int)
    begin
                ap_block_state5_pp1_stage0_iter0 <= ((stream_in_TVALID_int = ap_const_logic_0) and (ap_predicate_op48_read_state5 = ap_const_boolean_1));
    end process;


    ap_block_state6_pp1_stage0_iter1_assign_proc : process(img_data_V_full_n, icmp_ln129_reg_330)
    begin
                ap_block_state6_pp1_stage0_iter1 <= ((icmp_ln129_reg_330 = ap_const_lv1_1) and (img_data_V_full_n = ap_const_logic_0));
    end process;


    ap_block_state8_assign_proc : process(eol_2_reg_230, stream_in_TVALID_int)
    begin
                ap_block_state8 <= ((eol_2_reg_230 = ap_const_lv1_0) and (stream_in_TVALID_int = ap_const_logic_0));
    end process;


    ap_condition_132_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001)
    begin
                ap_condition_132 <= ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001));
    end process;


    ap_condition_pp1_exit_iter0_state5_assign_proc : process(icmp_ln129_fu_271_p2)
    begin
        if ((icmp_ln129_fu_271_p2 = ap_const_lv1_0)) then 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, icmp_ln127_fu_259_p2, ap_CS_fsm_state4)
    begin
        if (((icmp_ln127_fu_259_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_axi_data_V_1_phi_fu_150_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln129_reg_330, axi_data_V_1_reg_147, p_Val2_s_reg_194)
    begin
        if (((icmp_ln129_reg_330 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_axi_data_V_1_phi_fu_150_p4 <= p_Val2_s_reg_194;
        else 
            ap_phi_mux_axi_data_V_1_phi_fu_150_p4 <= axi_data_V_1_reg_147;
        end if; 
    end process;


    ap_phi_mux_eol_0_phi_fu_162_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln129_reg_330, eol_0_reg_158, axi_last_V_2_reg_181)
    begin
        if (((icmp_ln129_reg_330 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_eol_0_phi_fu_162_p4 <= axi_last_V_2_reg_181;
        else 
            ap_phi_mux_eol_0_phi_fu_162_p4 <= eol_0_reg_158;
        end if; 
    end process;

    ap_phi_mux_eol_2_phi_fu_233_p4 <= eol_2_reg_230;

    ap_phi_mux_eol_phi_fu_139_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln129_reg_330, eol_reg_136, axi_last_V_2_reg_181)
    begin
        if (((icmp_ln129_reg_330 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_eol_phi_fu_139_p4 <= axi_last_V_2_reg_181;
        else 
            ap_phi_mux_eol_phi_fu_139_p4 <= eol_reg_136;
        end if; 
    end process;


    ap_phi_mux_p_Val2_s_phi_fu_198_p4_assign_proc : process(icmp_ln129_fu_271_p2, or_ln132_fu_286_p2, ap_phi_mux_axi_data_V_1_phi_fu_150_p4, ap_phi_reg_pp1_iter0_p_Val2_s_reg_194, stream_in_TDATA_int)
    begin
        if ((icmp_ln129_fu_271_p2 = ap_const_lv1_1)) then
            if ((or_ln132_fu_286_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_p_Val2_s_phi_fu_198_p4 <= ap_phi_mux_axi_data_V_1_phi_fu_150_p4;
            elsif ((or_ln132_fu_286_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_p_Val2_s_phi_fu_198_p4 <= stream_in_TDATA_int;
            else 
                ap_phi_mux_p_Val2_s_phi_fu_198_p4 <= ap_phi_reg_pp1_iter0_p_Val2_s_reg_194;
            end if;
        else 
            ap_phi_mux_p_Val2_s_phi_fu_198_p4 <= ap_phi_reg_pp1_iter0_p_Val2_s_reg_194;
        end if; 
    end process;

    ap_phi_reg_pp1_iter0_axi_last_V_2_reg_181 <= "X";
    ap_phi_reg_pp1_iter0_p_Val2_s_reg_194 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op48_read_state5_assign_proc : process(icmp_ln129_fu_271_p2, or_ln132_fu_286_p2)
    begin
                ap_predicate_op48_read_state5 <= ((or_ln132_fu_286_p2 = ap_const_lv1_0) and (icmp_ln129_fu_271_p2 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(icmp_ln127_fu_259_p2, ap_CS_fsm_state4)
    begin
        if (((icmp_ln127_fu_259_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_265_p2 <= std_logic_vector(unsigned(i_0_reg_125) + unsigned(ap_const_lv10_1));
    icmp_ln127_fu_259_p2 <= "1" when (unsigned(i_0_reg_125) < unsigned(ap_const_lv10_2D0)) else "0";
    icmp_ln129_fu_271_p2 <= "1" when (unsigned(j_0_reg_170) < unsigned(ap_const_lv11_500)) else "0";

    img_data_V_blk_n_assign_proc : process(img_data_V_full_n, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln129_reg_330)
    begin
        if (((icmp_ln129_reg_330 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            img_data_V_blk_n <= img_data_V_full_n;
        else 
            img_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_data_V_din <= trunc_ln647_reg_343;

    img_data_V_write_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln129_reg_330, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln129_reg_330 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            img_data_V_write <= ap_const_logic_1;
        else 
            img_data_V_write <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_277_p2 <= std_logic_vector(unsigned(j_0_reg_170) + unsigned(ap_const_lv11_1));
    or_ln132_fu_286_p2 <= (sof_1_fu_76 or ap_phi_mux_eol_0_phi_fu_162_p4);

    stream_in_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, icmp_ln129_fu_271_p2, or_ln132_fu_286_p2, ap_CS_fsm_state8, eol_2_reg_230, stream_in_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((eol_2_reg_230 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((or_ln132_fu_286_p2 = ap_const_lv1_0) and (icmp_ln129_fu_271_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            stream_in_TDATA_blk_n <= stream_in_TVALID_int;
        else 
            stream_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    stream_in_TREADY_assign_proc : process(stream_in_TVALID, regslice_both_AXI_video_strm_V_data_V_U_ack_in)
    begin
        if (((regslice_both_AXI_video_strm_V_data_V_U_ack_in = ap_const_logic_1) and (stream_in_TVALID = ap_const_logic_1))) then 
            stream_in_TREADY <= ap_const_logic_1;
        else 
            stream_in_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_TREADY_int_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state8, ap_predicate_op48_read_state5, ap_block_pp1_stage0_11001, eol_2_reg_230, stream_in_TVALID_int)
    begin
        if (((not(((eol_2_reg_230 = ap_const_lv1_0) and (stream_in_TVALID_int = ap_const_logic_0))) and (eol_2_reg_230 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_predicate_op48_read_state5 = ap_const_boolean_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((stream_in_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            stream_in_TREADY_int <= ap_const_logic_1;
        else 
            stream_in_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    tmp_user_V_fu_250_p1 <= stream_in_TUSER_int;
    trunc_ln647_fu_292_p1 <= ap_phi_mux_p_Val2_s_phi_fu_198_p4(24 - 1 downto 0);
end behav;
