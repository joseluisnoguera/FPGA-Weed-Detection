-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity extract_third_and_fo is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    line_bases_active_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    line_bases_active_ce0 : OUT STD_LOGIC;
    line_bases_active_q0 : IN STD_LOGIC_VECTOR (16 downto 0);
    eroded_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    eroded_data_V_empty_n : IN STD_LOGIC;
    eroded_data_V_read : OUT STD_LOGIC;
    centroids_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    centroids_ce0 : OUT STD_LOGIC;
    centroids_we0 : OUT STD_LOGIC;
    centroids_d0 : OUT STD_LOGIC_VECTOR (47 downto 0);
    centroids_q0 : IN STD_LOGIC_VECTOR (47 downto 0) );
end;


architecture behav of extract_third_and_fo is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv12_C9E : STD_LOGIC_VECTOR (11 downto 0) := "110010011110";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv12_E4F : STD_LOGIC_VECTOR (11 downto 0) := "111001001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_13F : STD_LOGIC_VECTOR (15 downto 0) := "0000000100111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal segments648_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal segments648_ce0 : STD_LOGIC;
    signal segments648_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal last_c_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal last_c_ce0 : STD_LOGIC;
    signal last_c_we0 : STD_LOGIC;
    signal last_c_q0 : STD_LOGIC_VECTOR (47 downto 0);
    signal reg_263 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln255_fu_274_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln255_reg_651 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln252_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln177_fu_290_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln253_fu_319_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln253_reg_671 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln264_fu_339_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln264_reg_676 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln270_fu_343_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln270_reg_682 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_259_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_reg_687 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln267_fu_349_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln267_reg_692 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln267_1_fu_353_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln267_1_reg_697 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln259_fu_357_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln259_reg_702 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln264_1_fu_360_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln264_1_reg_708 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_index_fu_370_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal line_index_reg_716 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln257_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln703_fu_381_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal seg_index_fu_387_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_65_fu_393_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_65_reg_736 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln271_fu_415_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln271_reg_740 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_least_squares_line_fu_209_ap_ready : STD_LOGIC;
    signal grp_least_squares_line_fu_209_ap_done : STD_LOGIC;
    signal grp_fu_254_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal select_ln267_fu_606_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln267_reg_765 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal select_ln267_1_fu_620_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln267_1_reg_772 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln270_1_fu_629_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln270_1_reg_778 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal micro_roi_2_data_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal micro_roi_2_data_V_ce0 : STD_LOGIC;
    signal micro_roi_2_data_V_we0 : STD_LOGIC;
    signal micro_roi_2_data_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_least_squares_line_fu_209_ap_start : STD_LOGIC;
    signal grp_least_squares_line_fu_209_ap_idle : STD_LOGIC;
    signal grp_least_squares_line_fu_209_centroids_4_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_least_squares_line_fu_209_centroids_4_ce0 : STD_LOGIC;
    signal grp_least_squares_line_fu_209_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_least_squares_line_fu_209_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_get_centroid_fh_fu_216_micro_roi_data_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_get_centroid_fh_fu_216_micro_roi_data_V_ce0 : STD_LOGIC;
    signal grp_get_centroid_fh_fu_216_micro_roi_data_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_get_centroid_fh_fu_216_micro_roi_data_V_we0 : STD_LOGIC;
    signal grp_get_centroid_fh_fu_216_micro_roi_data_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_get_centroid_fh_fu_216_micro_roi_data_V_ce1 : STD_LOGIC;
    signal grp_get_centroid_fh_fu_216_micro_roi_data_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_get_centroid_fh_fu_216_micro_roi_data_V_we1 : STD_LOGIC;
    signal grp_get_centroid_fh_fu_216_c : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_get_centroid_fh_fu_216_ap_start : STD_LOGIC;
    signal grp_get_centroid_fh_fu_216_c_ap_vld : STD_LOGIC;
    signal grp_get_centroid_fh_fu_216_ap_done : STD_LOGIC;
    signal grp_get_centroid_fh_fu_216_ap_ready : STD_LOGIC;
    signal grp_get_centroid_fh_fu_216_ap_idle : STD_LOGIC;
    signal grp_get_centroid_fh_fu_216_ap_continue : STD_LOGIC;
    signal grp_extract_micro_roi_fu_226_ap_start : STD_LOGIC;
    signal grp_extract_micro_roi_fu_226_ap_done : STD_LOGIC;
    signal grp_extract_micro_roi_fu_226_ap_idle : STD_LOGIC;
    signal grp_extract_micro_roi_fu_226_ap_ready : STD_LOGIC;
    signal grp_extract_micro_roi_fu_226_img_in_mr_data_V_read : STD_LOGIC;
    signal grp_extract_micro_roi_fu_226_micro_roi_data_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_extract_micro_roi_fu_226_micro_roi_data_V_ce0 : STD_LOGIC;
    signal grp_extract_micro_roi_fu_226_micro_roi_data_V_we0 : STD_LOGIC;
    signal grp_extract_micro_roi_fu_226_micro_roi_data_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_get_last_centroids_fu_237_centroids_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_get_last_centroids_fu_237_centroids_ce0 : STD_LOGIC;
    signal grp_get_last_centroids_fu_237_centroids_d0 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_get_last_centroids_fu_237_centroids_we0 : STD_LOGIC;
    signal grp_get_last_centroids_fu_237_centroids_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_get_last_centroids_fu_237_centroids_ce1 : STD_LOGIC;
    signal grp_get_last_centroids_fu_237_centroids_d1 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_get_last_centroids_fu_237_centroids_we1 : STD_LOGIC;
    signal grp_get_last_centroids_fu_237_last_c_2_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_get_last_centroids_fu_237_last_c_2_ce0 : STD_LOGIC;
    signal grp_get_last_centroids_fu_237_last_c_2_d0 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_get_last_centroids_fu_237_last_c_2_we0 : STD_LOGIC;
    signal grp_get_last_centroids_fu_237_last_c_2_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_get_last_centroids_fu_237_last_c_2_ce1 : STD_LOGIC;
    signal grp_get_last_centroids_fu_237_last_c_2_d1 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_get_last_centroids_fu_237_last_c_2_we1 : STD_LOGIC;
    signal grp_get_last_centroids_fu_237_ap_start : STD_LOGIC;
    signal grp_get_last_centroids_fu_237_ap_done : STD_LOGIC;
    signal grp_get_last_centroids_fu_237_ap_ready : STD_LOGIC;
    signal grp_get_last_centroids_fu_237_ap_idle : STD_LOGIC;
    signal grp_get_last_centroids_fu_237_ap_continue : STD_LOGIC;
    signal p_Val2_s_reg_173 : STD_LOGIC_VECTOR (11 downto 0);
    signal seg_index_0_reg_185 : STD_LOGIC_VECTOR (2 downto 0);
    signal line_index_0_reg_197 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_least_squares_line_fu_209_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_get_centroid_fh_fu_216_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_sync_grp_get_centroid_fh_fu_216_ap_ready : STD_LOGIC;
    signal ap_sync_grp_get_centroid_fh_fu_216_ap_done : STD_LOGIC;
    signal ap_block_state14_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_get_centroid_fh_fu_216_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_get_centroid_fh_fu_216_ap_done : STD_LOGIC := '0';
    signal c_fu_118 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_extract_micro_roi_fu_226_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_get_last_centroids_fu_237_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_sync_grp_get_last_centroids_fu_237_ap_ready : STD_LOGIC;
    signal ap_sync_grp_get_last_centroids_fu_237_ap_done : STD_LOGIC;
    signal ap_block_state7_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_get_last_centroids_fu_237_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_get_last_centroids_fu_237_ap_done : STD_LOGIC := '0';
    signal zext_ln255_fu_280_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_1_fu_285_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln258_fu_376_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln271_1_fu_634_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_259_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln253_fu_295_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln253_1_fu_307_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_299_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln253_fu_315_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln_fu_325_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln254_fu_335_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln271_fu_401_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln271_1_fu_405_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln271_fu_411_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_250_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_47_fu_430_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_30_fu_452_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_V_fu_456_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_V_fu_442_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln339_fu_470_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln339_fu_474_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_488_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_480_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_494_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_498_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1311_5_fu_506_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1311_6_fu_510_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln682_fu_466_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1287_fu_514_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_518_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_68_fu_530_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_7_fu_524_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln662_fu_538_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_542_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_52_fu_552_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_434_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_5_fu_560_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_53_fu_566_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_left_fu_574_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_right_fu_583_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_69_fu_588_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln267_fu_602_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln264_fu_579_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln266_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln267_fu_615_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_254_ce : STD_LOGIC;
    signal grp_fu_259_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);

    component least_squares_line IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        centroids_4_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        centroids_4_ce0 : OUT STD_LOGIC;
        centroids_4_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
        size : IN STD_LOGIC_VECTOR (3 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component get_centroid_fh IS
    port (
        micro_roi_data_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        micro_roi_data_V_ce0 : OUT STD_LOGIC;
        micro_roi_data_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        micro_roi_data_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        micro_roi_data_V_we0 : OUT STD_LOGIC;
        micro_roi_data_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        micro_roi_data_V_ce1 : OUT STD_LOGIC;
        micro_roi_data_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        micro_roi_data_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        micro_roi_data_V_we1 : OUT STD_LOGIC;
        h_offset : IN STD_LOGIC_VECTOR (15 downto 0);
        v_offset : IN STD_LOGIC_VECTOR (7 downto 0);
        v_limit : IN STD_LOGIC_VECTOR (7 downto 0);
        h_limit : IN STD_LOGIC_VECTOR (15 downto 0);
        c : OUT STD_LOGIC_VECTOR (47 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        h_offset_ap_vld : IN STD_LOGIC;
        v_offset_ap_vld : IN STD_LOGIC;
        v_limit_ap_vld : IN STD_LOGIC;
        h_limit_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        c_ap_vld : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component extract_micro_roi IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_in_mr_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_in_mr_data_V_empty_n : IN STD_LOGIC;
        img_in_mr_data_V_read : OUT STD_LOGIC;
        x_top : IN STD_LOGIC_VECTOR (9 downto 0);
        x_bottom : IN STD_LOGIC_VECTOR (9 downto 0);
        y_left : IN STD_LOGIC_VECTOR (15 downto 0);
        y_right : IN STD_LOGIC_VECTOR (15 downto 0);
        micro_roi_data_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        micro_roi_data_V_ce0 : OUT STD_LOGIC;
        micro_roi_data_V_we0 : OUT STD_LOGIC;
        micro_roi_data_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component get_last_centroids IS
    port (
        centroids_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        centroids_ce0 : OUT STD_LOGIC;
        centroids_d0 : OUT STD_LOGIC_VECTOR (47 downto 0);
        centroids_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
        centroids_we0 : OUT STD_LOGIC;
        centroids_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        centroids_ce1 : OUT STD_LOGIC;
        centroids_d1 : OUT STD_LOGIC_VECTOR (47 downto 0);
        centroids_q1 : IN STD_LOGIC_VECTOR (47 downto 0);
        centroids_we1 : OUT STD_LOGIC;
        selected_line : IN STD_LOGIC_VECTOR (2 downto 0);
        last_c_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        last_c_2_ce0 : OUT STD_LOGIC;
        last_c_2_d0 : OUT STD_LOGIC_VECTOR (47 downto 0);
        last_c_2_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
        last_c_2_we0 : OUT STD_LOGIC;
        last_c_2_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
        last_c_2_ce1 : OUT STD_LOGIC;
        last_c_2_d1 : OUT STD_LOGIC_VECTOR (47 downto 0);
        last_c_2_q1 : IN STD_LOGIC_VECTOR (47 downto 0);
        last_c_2_we1 : OUT STD_LOGIC;
        seg_index_start : IN STD_LOGIC_VECTOR (3 downto 0);
        size : IN STD_LOGIC_VECTOR (3 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        size_ap_vld : IN STD_LOGIC;
        seg_index_start_ap_vld : IN STD_LOGIC;
        selected_line_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component ip_accel_app_faddShg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ip_accel_app_fmulKfY IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ip_accel_app_sitoThq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component extract_third_andPgM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component extract_third_andQgW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (47 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component extract_third_andRg6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    segments648_U : component extract_third_andPgM
    generic map (
        DataWidth => 8,
        AddressRange => 13,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => segments648_address0,
        ce0 => segments648_ce0,
        q0 => segments648_q0);

    last_c_U : component extract_third_andQgW
    generic map (
        DataWidth => 48,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => last_c_address0,
        ce0 => last_c_ce0,
        we0 => last_c_we0,
        d0 => grp_get_last_centroids_fu_237_last_c_2_d0,
        q0 => last_c_q0);

    micro_roi_2_data_V_U : component extract_third_andRg6
    generic map (
        DataWidth => 8,
        AddressRange => 736,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => micro_roi_2_data_V_address0,
        ce0 => micro_roi_2_data_V_ce0,
        we0 => micro_roi_2_data_V_we0,
        d0 => grp_extract_micro_roi_fu_226_micro_roi_data_V_d0,
        q0 => micro_roi_2_data_V_q0);

    grp_least_squares_line_fu_209 : component least_squares_line
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_least_squares_line_fu_209_ap_start,
        ap_done => grp_least_squares_line_fu_209_ap_done,
        ap_idle => grp_least_squares_line_fu_209_ap_idle,
        ap_ready => grp_least_squares_line_fu_209_ap_ready,
        centroids_4_address0 => grp_least_squares_line_fu_209_centroids_4_address0,
        centroids_4_ce0 => grp_least_squares_line_fu_209_centroids_4_ce0,
        centroids_4_q0 => last_c_q0,
        size => zext_ln259_reg_702,
        ap_return_0 => grp_least_squares_line_fu_209_ap_return_0,
        ap_return_1 => grp_least_squares_line_fu_209_ap_return_1);

    grp_get_centroid_fh_fu_216 : component get_centroid_fh
    port map (
        micro_roi_data_V_address0 => grp_get_centroid_fh_fu_216_micro_roi_data_V_address0,
        micro_roi_data_V_ce0 => grp_get_centroid_fh_fu_216_micro_roi_data_V_ce0,
        micro_roi_data_V_d0 => grp_get_centroid_fh_fu_216_micro_roi_data_V_d0,
        micro_roi_data_V_q0 => micro_roi_2_data_V_q0,
        micro_roi_data_V_we0 => grp_get_centroid_fh_fu_216_micro_roi_data_V_we0,
        micro_roi_data_V_address1 => grp_get_centroid_fh_fu_216_micro_roi_data_V_address1,
        micro_roi_data_V_ce1 => grp_get_centroid_fh_fu_216_micro_roi_data_V_ce1,
        micro_roi_data_V_d1 => grp_get_centroid_fh_fu_216_micro_roi_data_V_d1,
        micro_roi_data_V_q1 => ap_const_lv8_0,
        micro_roi_data_V_we1 => grp_get_centroid_fh_fu_216_micro_roi_data_V_we1,
        h_offset => select_ln267_reg_765,
        v_offset => reg_263,
        v_limit => sub_ln270_reg_682,
        h_limit => sub_ln270_1_reg_778,
        c => grp_get_centroid_fh_fu_216_c,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        h_offset_ap_vld => ap_const_logic_1,
        v_offset_ap_vld => ap_const_logic_1,
        v_limit_ap_vld => ap_const_logic_1,
        h_limit_ap_vld => ap_const_logic_1,
        ap_start => grp_get_centroid_fh_fu_216_ap_start,
        c_ap_vld => grp_get_centroid_fh_fu_216_c_ap_vld,
        ap_done => grp_get_centroid_fh_fu_216_ap_done,
        ap_ready => grp_get_centroid_fh_fu_216_ap_ready,
        ap_idle => grp_get_centroid_fh_fu_216_ap_idle,
        ap_continue => grp_get_centroid_fh_fu_216_ap_continue);

    grp_extract_micro_roi_fu_226 : component extract_micro_roi
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_extract_micro_roi_fu_226_ap_start,
        ap_done => grp_extract_micro_roi_fu_226_ap_done,
        ap_idle => grp_extract_micro_roi_fu_226_ap_idle,
        ap_ready => grp_extract_micro_roi_fu_226_ap_ready,
        img_in_mr_data_V_dout => eroded_data_V_dout,
        img_in_mr_data_V_empty_n => eroded_data_V_empty_n,
        img_in_mr_data_V_read => grp_extract_micro_roi_fu_226_img_in_mr_data_V_read,
        x_top => zext_ln267_reg_692,
        x_bottom => zext_ln267_1_reg_697,
        y_left => select_ln267_reg_765,
        y_right => select_ln267_1_reg_772,
        micro_roi_data_V_address0 => grp_extract_micro_roi_fu_226_micro_roi_data_V_address0,
        micro_roi_data_V_ce0 => grp_extract_micro_roi_fu_226_micro_roi_data_V_ce0,
        micro_roi_data_V_we0 => grp_extract_micro_roi_fu_226_micro_roi_data_V_we0,
        micro_roi_data_V_d0 => grp_extract_micro_roi_fu_226_micro_roi_data_V_d0);

    grp_get_last_centroids_fu_237 : component get_last_centroids
    port map (
        centroids_address0 => grp_get_last_centroids_fu_237_centroids_address0,
        centroids_ce0 => grp_get_last_centroids_fu_237_centroids_ce0,
        centroids_d0 => grp_get_last_centroids_fu_237_centroids_d0,
        centroids_q0 => centroids_q0,
        centroids_we0 => grp_get_last_centroids_fu_237_centroids_we0,
        centroids_address1 => grp_get_last_centroids_fu_237_centroids_address1,
        centroids_ce1 => grp_get_last_centroids_fu_237_centroids_ce1,
        centroids_d1 => grp_get_last_centroids_fu_237_centroids_d1,
        centroids_q1 => ap_const_lv48_0,
        centroids_we1 => grp_get_last_centroids_fu_237_centroids_we1,
        selected_line => line_index_0_reg_197,
        last_c_2_address0 => grp_get_last_centroids_fu_237_last_c_2_address0,
        last_c_2_ce0 => grp_get_last_centroids_fu_237_last_c_2_ce0,
        last_c_2_d0 => grp_get_last_centroids_fu_237_last_c_2_d0,
        last_c_2_q0 => ap_const_lv48_0,
        last_c_2_we0 => grp_get_last_centroids_fu_237_last_c_2_we0,
        last_c_2_address1 => grp_get_last_centroids_fu_237_last_c_2_address1,
        last_c_2_ce1 => grp_get_last_centroids_fu_237_last_c_2_ce1,
        last_c_2_d1 => grp_get_last_centroids_fu_237_last_c_2_d1,
        last_c_2_q1 => ap_const_lv48_0,
        last_c_2_we1 => grp_get_last_centroids_fu_237_last_c_2_we1,
        seg_index_start => ap_const_lv4_0,
        size => zext_ln259_reg_702,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        size_ap_vld => ap_const_logic_1,
        seg_index_start_ap_vld => ap_const_logic_1,
        selected_line_ap_vld => ap_const_logic_1,
        ap_start => grp_get_last_centroids_fu_237_ap_start,
        ap_done => grp_get_last_centroids_fu_237_ap_done,
        ap_ready => grp_get_last_centroids_fu_237_ap_ready,
        ap_idle => grp_get_last_centroids_fu_237_ap_idle,
        ap_continue => grp_get_last_centroids_fu_237_ap_continue);

    ip_accel_app_faddShg_U415 : component ip_accel_app_faddShg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_254_p2,
        din1 => grp_fu_259_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_250_p2);

    ip_accel_app_fmulKfY_U416 : component ip_accel_app_fmulKfY
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_reg_687,
        din1 => grp_least_squares_line_fu_209_ap_return_0,
        ce => grp_fu_254_ce,
        dout => grp_fu_254_p2);

    ip_accel_app_sitoThq_U417 : component ip_accel_app_sitoThq
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_259_p0,
        ce => grp_fu_259_ce,
        dout => grp_fu_259_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_sync_reg_grp_get_centroid_fh_fu_216_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_get_centroid_fh_fu_216_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                    ap_sync_reg_grp_get_centroid_fh_fu_216_ap_done <= ap_const_logic_0;
                elsif ((grp_get_centroid_fh_fu_216_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_get_centroid_fh_fu_216_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_get_centroid_fh_fu_216_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_get_centroid_fh_fu_216_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                    ap_sync_reg_grp_get_centroid_fh_fu_216_ap_ready <= ap_const_logic_0;
                elsif ((grp_get_centroid_fh_fu_216_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_get_centroid_fh_fu_216_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_get_last_centroids_fu_237_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_get_last_centroids_fu_237_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_sync_reg_grp_get_last_centroids_fu_237_ap_done <= ap_const_logic_0;
                elsif ((grp_get_last_centroids_fu_237_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_get_last_centroids_fu_237_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_get_last_centroids_fu_237_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_get_last_centroids_fu_237_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_sync_reg_grp_get_last_centroids_fu_237_ap_ready <= ap_const_logic_0;
                elsif ((grp_get_last_centroids_fu_237_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_get_last_centroids_fu_237_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_extract_micro_roi_fu_226_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_extract_micro_roi_fu_226_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_extract_micro_roi_fu_226_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_extract_micro_roi_fu_226_ap_ready = ap_const_logic_1)) then 
                    grp_extract_micro_roi_fu_226_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_get_centroid_fh_fu_216_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_get_centroid_fh_fu_216_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_sync_grp_get_centroid_fh_fu_216_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
                    grp_get_centroid_fh_fu_216_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_get_centroid_fh_fu_216_ap_ready = ap_const_logic_1)) then 
                    grp_get_centroid_fh_fu_216_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_get_last_centroids_fu_237_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_get_last_centroids_fu_237_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_sync_grp_get_last_centroids_fu_237_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_65_fu_393_p3 = ap_const_lv1_1)))) then 
                    grp_get_last_centroids_fu_237_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_get_last_centroids_fu_237_ap_ready = ap_const_logic_1)) then 
                    grp_get_last_centroids_fu_237_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_least_squares_line_fu_209_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_least_squares_line_fu_209_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    grp_least_squares_line_fu_209_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_least_squares_line_fu_209_ap_ready = ap_const_logic_1)) then 
                    grp_least_squares_line_fu_209_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    line_index_0_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                line_index_0_reg_197 <= line_index_reg_716;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                line_index_0_reg_197 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln257_fu_364_p2 = ap_const_lv1_1))) then 
                p_Val2_s_reg_173 <= add_ln703_fu_381_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_s_reg_173 <= ap_const_lv12_C9E;
            end if; 
        end if;
    end process;

    seg_index_0_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln257_fu_364_p2 = ap_const_lv1_1))) then 
                seg_index_0_reg_185 <= seg_index_fu_387_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                seg_index_0_reg_185 <= ap_const_lv3_3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln252_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln255_reg_651 <= add_ln255_fu_274_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_65_fu_393_p3 = ap_const_lv1_1))) then
                add_ln271_reg_740 <= add_ln271_fu_415_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_get_centroid_fh_fu_216_c_ap_vld = ap_const_logic_1))) then
                c_fu_118 <= grp_get_centroid_fh_fu_216_c;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                line_index_reg_716 <= line_index_fu_370_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_263 <= segments648_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                select_ln267_1_reg_772 <= select_ln267_1_fu_620_p3;
                select_ln267_reg_765 <= select_ln267_fu_606_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    sub_ln253_reg_671(4 downto 1) <= sub_ln253_fu_319_p2(4 downto 1);
                sub_ln270_reg_682 <= sub_ln270_fu_343_p2;
                tmp_i_reg_687 <= grp_fu_259_p1;
                    zext_ln259_reg_702(2 downto 0) <= zext_ln259_fu_357_p1(2 downto 0);
                    zext_ln264_1_reg_708(3 downto 0) <= zext_ln264_1_fu_360_p1(3 downto 0);
                    zext_ln264_reg_676(3 downto 0) <= zext_ln264_fu_339_p1(3 downto 0);
                    zext_ln267_1_reg_697(7 downto 0) <= zext_ln267_1_fu_353_p1(7 downto 0);
                    zext_ln267_reg_692(7 downto 0) <= zext_ln267_fu_349_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                sub_ln270_1_reg_778 <= sub_ln270_1_fu_629_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_65_reg_736 <= line_bases_active_q0(16 downto 16);
            end if;
        end if;
    end process;
    sub_ln253_reg_671(0) <= '0';
    zext_ln264_reg_676(31 downto 4) <= "0000000000000000000000000000";
    zext_ln267_reg_692(9 downto 8) <= "00";
    zext_ln267_1_reg_697(9 downto 8) <= "00";
    zext_ln259_reg_702(3) <= '0';
    zext_ln264_1_reg_708(15 downto 4) <= "000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln252_fu_268_p2, ap_CS_fsm_state5, icmp_ln257_fu_364_p2, tmp_65_fu_393_p3, ap_CS_fsm_state6, ap_CS_fsm_state9, grp_least_squares_line_fu_209_ap_done, grp_extract_micro_roi_fu_226_ap_done, ap_CS_fsm_state14, ap_block_state14_on_subcall_done, ap_CS_fsm_state12, ap_CS_fsm_state7, ap_block_state7_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln252_fu_268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln257_fu_364_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((tmp_65_fu_393_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_least_squares_line_fu_209_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((grp_extract_micro_roi_fu_226_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln255_fu_274_p2 <= std_logic_vector(signed(ap_const_lv3_7) + signed(seg_index_0_reg_185));
    add_ln267_fu_615_p2 <= std_logic_vector(unsigned(zext_ln264_1_reg_708) + unsigned(trunc_ln264_fu_579_p1));
    add_ln271_1_fu_405_p2 <= std_logic_vector(signed(ap_const_lv4_A) + signed(zext_ln271_fu_401_p1));
    add_ln271_fu_415_p2 <= std_logic_vector(unsigned(sub_ln253_reg_671) + unsigned(sext_ln271_fu_411_p1));
    add_ln339_fu_474_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(zext_ln339_fu_470_p1));
    add_ln703_fu_381_p2 <= std_logic_vector(unsigned(p_Val2_s_reg_173) + unsigned(ap_const_lv12_E4F));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state14_on_subcall_done_assign_proc : process(ap_sync_grp_get_centroid_fh_fu_216_ap_ready, ap_sync_grp_get_centroid_fh_fu_216_ap_done)
    begin
                ap_block_state14_on_subcall_done <= ((ap_sync_grp_get_centroid_fh_fu_216_ap_ready and ap_sync_grp_get_centroid_fh_fu_216_ap_done) = ap_const_logic_0);
    end process;


    ap_block_state7_on_subcall_done_assign_proc : process(ap_sync_grp_get_last_centroids_fu_237_ap_ready, ap_sync_grp_get_last_centroids_fu_237_ap_done)
    begin
                ap_block_state7_on_subcall_done <= ((ap_sync_grp_get_last_centroids_fu_237_ap_ready and ap_sync_grp_get_last_centroids_fu_237_ap_done) = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln252_fu_268_p2)
    begin
        if ((((icmp_ln252_fu_268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln252_fu_268_p2)
    begin
        if (((icmp_ln252_fu_268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_sync_grp_get_centroid_fh_fu_216_ap_done <= (grp_get_centroid_fh_fu_216_ap_done or ap_sync_reg_grp_get_centroid_fh_fu_216_ap_done);
    ap_sync_grp_get_centroid_fh_fu_216_ap_ready <= (grp_get_centroid_fh_fu_216_ap_ready or ap_sync_reg_grp_get_centroid_fh_fu_216_ap_ready);
    ap_sync_grp_get_last_centroids_fu_237_ap_done <= (grp_get_last_centroids_fu_237_ap_done or ap_sync_reg_grp_get_last_centroids_fu_237_ap_done);
    ap_sync_grp_get_last_centroids_fu_237_ap_ready <= (grp_get_last_centroids_fu_237_ap_ready or ap_sync_reg_grp_get_last_centroids_fu_237_ap_ready);

    centroids_address0_assign_proc : process(grp_get_last_centroids_fu_237_centroids_address0, ap_CS_fsm_state15, ap_CS_fsm_state7, zext_ln271_1_fu_634_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            centroids_address0 <= zext_ln271_1_fu_634_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            centroids_address0 <= grp_get_last_centroids_fu_237_centroids_address0;
        else 
            centroids_address0 <= "XXXXXXX";
        end if; 
    end process;


    centroids_ce0_assign_proc : process(grp_get_last_centroids_fu_237_centroids_ce0, ap_CS_fsm_state15, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            centroids_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            centroids_ce0 <= grp_get_last_centroids_fu_237_centroids_ce0;
        else 
            centroids_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    centroids_d0 <= c_fu_118;

    centroids_we0_assign_proc : process(tmp_65_reg_736, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_65_reg_736 = ap_const_lv1_1))) then 
            centroids_we0 <= ap_const_logic_1;
        else 
            centroids_we0 <= ap_const_logic_0;
        end if; 
    end process;


    eroded_data_V_read_assign_proc : process(grp_extract_micro_roi_fu_226_img_in_mr_data_V_read, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            eroded_data_V_read <= grp_extract_micro_roi_fu_226_img_in_mr_data_V_read;
        else 
            eroded_data_V_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_extract_micro_roi_fu_226_ap_start <= grp_extract_micro_roi_fu_226_ap_start_reg;

    grp_fu_254_ce_assign_proc : process(ap_CS_fsm_state9, grp_least_squares_line_fu_209_ap_done, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_least_squares_line_fu_209_ap_done = ap_const_logic_1)))) then 
            grp_fu_254_ce <= ap_const_logic_1;
        else 
            grp_fu_254_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_259_ce_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state9, grp_least_squares_line_fu_209_ap_done, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_least_squares_line_fu_209_ap_done = ap_const_logic_1)))) then 
            grp_fu_259_ce <= ap_const_logic_1;
        else 
            grp_fu_259_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_259_p0_assign_proc : process(ap_CS_fsm_state3, zext_ln177_fu_290_p1, ap_CS_fsm_state9, grp_least_squares_line_fu_209_ap_return_1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_259_p0 <= grp_least_squares_line_fu_209_ap_return_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_259_p0 <= zext_ln177_fu_290_p1;
        else 
            grp_fu_259_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_get_centroid_fh_fu_216_ap_continue_assign_proc : process(ap_CS_fsm_state14, ap_block_state14_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            grp_get_centroid_fh_fu_216_ap_continue <= ap_const_logic_1;
        else 
            grp_get_centroid_fh_fu_216_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_get_centroid_fh_fu_216_ap_start <= grp_get_centroid_fh_fu_216_ap_start_reg;

    grp_get_last_centroids_fu_237_ap_continue_assign_proc : process(ap_CS_fsm_state7, ap_block_state7_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_get_last_centroids_fu_237_ap_continue <= ap_const_logic_1;
        else 
            grp_get_last_centroids_fu_237_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_get_last_centroids_fu_237_ap_start <= grp_get_last_centroids_fu_237_ap_start_reg;
    grp_least_squares_line_fu_209_ap_start <= grp_least_squares_line_fu_209_ap_start_reg;
    icmp_ln252_fu_268_p2 <= "1" when (seg_index_0_reg_185 = ap_const_lv3_5) else "0";
    icmp_ln257_fu_364_p2 <= "1" when (line_index_0_reg_197 = ap_const_lv3_6) else "0";
    icmp_ln266_fu_596_p2 <= "1" when (signed(y_right_fu_583_p2) > signed(ap_const_lv32_13F)) else "0";
    isNeg_fu_480_p3 <= add_ln339_fu_474_p2(8 downto 8);

    last_c_address0_assign_proc : process(ap_CS_fsm_state9, grp_least_squares_line_fu_209_centroids_4_address0, grp_get_last_centroids_fu_237_last_c_2_address0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            last_c_address0 <= grp_get_last_centroids_fu_237_last_c_2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            last_c_address0 <= grp_least_squares_line_fu_209_centroids_4_address0;
        else 
            last_c_address0 <= "XX";
        end if; 
    end process;


    last_c_ce0_assign_proc : process(ap_CS_fsm_state9, grp_least_squares_line_fu_209_centroids_4_ce0, grp_get_last_centroids_fu_237_last_c_2_ce0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            last_c_ce0 <= grp_get_last_centroids_fu_237_last_c_2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            last_c_ce0 <= grp_least_squares_line_fu_209_centroids_4_ce0;
        else 
            last_c_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    last_c_we0_assign_proc : process(grp_get_last_centroids_fu_237_last_c_2_we0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            last_c_we0 <= grp_get_last_centroids_fu_237_last_c_2_we0;
        else 
            last_c_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_bases_active_address0 <= zext_ln258_fu_376_p1(3 - 1 downto 0);

    line_bases_active_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            line_bases_active_ce0 <= ap_const_logic_1;
        else 
            line_bases_active_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    line_index_fu_370_p2 <= std_logic_vector(unsigned(line_index_0_reg_197) + unsigned(ap_const_lv3_1));
    mantissa_V_fu_456_p4 <= ((ap_const_lv1_1 & tmp_V_30_fu_452_p1) & ap_const_lv1_0);

    micro_roi_2_data_V_address0_assign_proc : process(grp_get_centroid_fh_fu_216_micro_roi_data_V_address0, grp_extract_micro_roi_fu_226_micro_roi_data_V_address0, ap_CS_fsm_state14, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            micro_roi_2_data_V_address0 <= grp_extract_micro_roi_fu_226_micro_roi_data_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            micro_roi_2_data_V_address0 <= grp_get_centroid_fh_fu_216_micro_roi_data_V_address0;
        else 
            micro_roi_2_data_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    micro_roi_2_data_V_ce0_assign_proc : process(grp_get_centroid_fh_fu_216_micro_roi_data_V_ce0, grp_extract_micro_roi_fu_226_micro_roi_data_V_ce0, ap_CS_fsm_state14, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            micro_roi_2_data_V_ce0 <= grp_extract_micro_roi_fu_226_micro_roi_data_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            micro_roi_2_data_V_ce0 <= grp_get_centroid_fh_fu_216_micro_roi_data_V_ce0;
        else 
            micro_roi_2_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    micro_roi_2_data_V_we0_assign_proc : process(grp_extract_micro_roi_fu_226_micro_roi_data_V_we0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            micro_roi_2_data_V_we0 <= grp_extract_micro_roi_fu_226_micro_roi_data_V_we0;
        else 
            micro_roi_2_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_s_fu_434_p3 <= p_Val2_47_fu_430_p1(31 downto 31);
    p_Val2_47_fu_430_p1 <= grp_fu_250_p2;
    p_Val2_52_fu_552_p3 <= 
        zext_ln662_fu_538_p1 when (isNeg_fu_480_p3(0) = '1') else 
        tmp_s_fu_542_p4;
    p_Val2_53_fu_566_p3 <= 
        result_V_5_fu_560_p2 when (p_Result_s_fu_434_p3(0) = '1') else 
        p_Val2_52_fu_552_p3;
    r_V_7_fu_524_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_fu_466_p1),to_integer(unsigned('0' & zext_ln1287_fu_514_p1(31-1 downto 0)))));
    r_V_fu_518_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_456_p4),to_integer(unsigned('0' & sext_ln1311_6_fu_510_p1(25-1 downto 0)))));
    result_V_5_fu_560_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_52_fu_552_p3));
    seg_index_fu_387_p2 <= std_logic_vector(unsigned(seg_index_0_reg_185) + unsigned(ap_const_lv3_1));

    segments648_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2, zext_ln255_fu_280_p1, zext_ln255_1_fu_285_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            segments648_address0 <= zext_ln255_1_fu_285_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            segments648_address0 <= zext_ln255_fu_280_p1(4 - 1 downto 0);
        else 
            segments648_address0 <= "XXXX";
        end if; 
    end process;


    segments648_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            segments648_ce0 <= ap_const_logic_1;
        else 
            segments648_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln267_1_fu_620_p3 <= 
        ap_const_lv16_13F when (icmp_ln266_fu_596_p2(0) = '1') else 
        add_ln267_fu_615_p2;
    select_ln267_fu_606_p3 <= 
        ap_const_lv16_0 when (tmp_69_fu_588_p3(0) = '1') else 
        trunc_ln267_fu_602_p1;
        sext_ln1311_5_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_498_p3),32));

        sext_ln1311_6_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_498_p3),25));

        sext_ln1311_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_488_p2),9));

        sext_ln254_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_325_p4),4));

        sext_ln271_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln271_1_fu_405_p2),5));

    shl_ln253_1_fu_307_p3 <= (seg_index_0_reg_185 & ap_const_lv1_0);
    shl_ln_fu_299_p3 <= (trunc_ln253_fu_295_p1 & ap_const_lv3_0);
    sub_ln1311_fu_488_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_fu_442_p4));
    sub_ln253_fu_319_p2 <= std_logic_vector(unsigned(shl_ln_fu_299_p3) - unsigned(zext_ln253_fu_315_p1));
    sub_ln270_1_fu_629_p2 <= std_logic_vector(unsigned(select_ln267_1_reg_772) - unsigned(select_ln267_reg_765));
    sub_ln270_fu_343_p2 <= std_logic_vector(unsigned(reg_263) - unsigned(segments648_q0));
    tmp_65_fu_393_p3 <= line_bases_active_q0(16 downto 16);
    tmp_68_fu_530_p3 <= r_V_fu_518_p2(24 downto 24);
    tmp_69_fu_588_p3 <= y_left_fu_574_p2(31 downto 31);
    tmp_V_30_fu_452_p1 <= p_Val2_47_fu_430_p1(23 - 1 downto 0);
    tmp_V_fu_442_p4 <= p_Val2_47_fu_430_p1(30 downto 23);
    tmp_s_fu_542_p4 <= r_V_7_fu_524_p2(55 downto 24);
    trunc_ln253_fu_295_p1 <= seg_index_0_reg_185(2 - 1 downto 0);
    trunc_ln264_fu_579_p1 <= p_Val2_53_fu_566_p3(16 - 1 downto 0);
    trunc_ln267_fu_602_p1 <= y_left_fu_574_p2(16 - 1 downto 0);
    trunc_ln_fu_325_p4 <= p_Val2_s_reg_173(11 downto 9);
    ush_fu_498_p3 <= 
        sext_ln1311_fu_494_p1 when (isNeg_fu_480_p3(0) = '1') else 
        add_ln339_fu_474_p2;
    y_left_fu_574_p2 <= std_logic_vector(unsigned(p_Val2_53_fu_566_p3) - unsigned(zext_ln264_reg_676));
    y_right_fu_583_p2 <= std_logic_vector(unsigned(zext_ln264_reg_676) + unsigned(p_Val2_53_fu_566_p3));
    zext_ln1287_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_5_fu_506_p1),79));
    zext_ln177_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(segments648_q0),32));
    zext_ln253_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln253_1_fu_307_p3),5));
    zext_ln255_1_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(seg_index_0_reg_185),64));
    zext_ln255_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln255_fu_274_p2),64));
    zext_ln258_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(line_index_0_reg_197),64));
    zext_ln259_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln255_reg_651),4));
    zext_ln264_1_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln254_fu_335_p1),16));
    zext_ln264_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln254_fu_335_p1),32));
    zext_ln267_1_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_263),10));
    zext_ln267_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(segments648_q0),10));
    zext_ln271_1_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln271_reg_740),64));
    zext_ln271_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(line_index_0_reg_197),4));
    zext_ln339_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_442_p4),9));
    zext_ln662_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_68_fu_530_p3),32));
    zext_ln682_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_456_p4),79));
end behav;
