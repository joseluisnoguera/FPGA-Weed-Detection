-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity weed_detection is
port (
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    img_in_cols : IN STD_LOGIC_VECTOR (11 downto 0);
    img_in_data_V_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    img_in_data_V_empty_n : IN STD_LOGIC;
    img_in_data_V_read : OUT STD_LOGIC;
    img_out_data_V_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    img_out_data_V_full_n : IN STD_LOGIC;
    img_out_data_V_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    img_in_cols_ap_vld : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of weed_detection is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal internal_ap_ready : STD_LOGIC;
    signal weed_detection_entry_U0_ap_start : STD_LOGIC;
    signal weed_detection_entry_U0_ap_done : STD_LOGIC;
    signal weed_detection_entry_U0_ap_continue : STD_LOGIC;
    signal weed_detection_entry_U0_ap_idle : STD_LOGIC;
    signal weed_detection_entry_U0_ap_ready : STD_LOGIC;
    signal weed_detection_entry_U0_img_in_cols_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal weed_detection_entry_U0_img_in_cols_out_write : STD_LOGIC;
    signal weed_detection_Block_U0_ap_start : STD_LOGIC;
    signal weed_detection_Block_U0_ap_done : STD_LOGIC;
    signal weed_detection_Block_U0_ap_continue : STD_LOGIC;
    signal weed_detection_Block_U0_ap_idle : STD_LOGIC;
    signal weed_detection_Block_U0_ap_ready : STD_LOGIC;
    signal weed_detection_Block_U0_start_out : STD_LOGIC;
    signal weed_detection_Block_U0_start_write : STD_LOGIC;
    signal weed_detection_Block_U0_img_in_0_rows0 : STD_LOGIC_VECTOR (10 downto 0);
    signal weed_detection_Block_U0_img_in_0_rows0_ap_vld : STD_LOGIC;
    signal weed_detection_Block_U0_img_in_0_cols0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weed_detection_Block_U0_img_in_0_cols0_ap_vld : STD_LOGIC;
    signal weed_detection_Block_U0_resized_cols_out_din : STD_LOGIC_VECTOR (9 downto 0);
    signal weed_detection_Block_U0_resized_cols_out_write : STD_LOGIC;
    signal ap_channel_done_img_in_0_cols_channe : STD_LOGIC;
    signal img_in_0_cols_channe_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_img_in_0_cols_channe : STD_LOGIC := '0';
    signal ap_sync_channel_write_img_in_0_cols_channe : STD_LOGIC;
    signal ap_channel_done_img_in_0_rows_channe : STD_LOGIC;
    signal img_in_0_rows_channe_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_img_in_0_rows_channe : STD_LOGIC := '0';
    signal ap_sync_channel_write_img_in_0_rows_channe : STD_LOGIC;
    signal duplicateMat_2763_U0_ap_start : STD_LOGIC;
    signal duplicateMat_2763_U0_start_full_n : STD_LOGIC;
    signal duplicateMat_2763_U0_start_out : STD_LOGIC;
    signal duplicateMat_2763_U0_start_write : STD_LOGIC;
    signal duplicateMat_2763_U0_p_src_cols_read : STD_LOGIC;
    signal duplicateMat_2763_U0_p_src_data_V_read : STD_LOGIC;
    signal duplicateMat_2763_U0_p_dst1_data_V_din : STD_LOGIC_VECTOR (23 downto 0);
    signal duplicateMat_2763_U0_p_dst1_data_V_write : STD_LOGIC;
    signal duplicateMat_2763_U0_p_dst2_data_V_din : STD_LOGIC_VECTOR (23 downto 0);
    signal duplicateMat_2763_U0_p_dst2_data_V_write : STD_LOGIC;
    signal duplicateMat_2763_U0_ap_done : STD_LOGIC;
    signal duplicateMat_2763_U0_ap_ready : STD_LOGIC;
    signal duplicateMat_2763_U0_ap_idle : STD_LOGIC;
    signal duplicateMat_2763_U0_ap_continue : STD_LOGIC;
    signal resizeNNBilinear_U0_ap_start : STD_LOGIC;
    signal resizeNNBilinear_U0_ap_done : STD_LOGIC;
    signal resizeNNBilinear_U0_ap_continue : STD_LOGIC;
    signal resizeNNBilinear_U0_ap_idle : STD_LOGIC;
    signal resizeNNBilinear_U0_ap_ready : STD_LOGIC;
    signal resizeNNBilinear_U0_imgInput_data_V_read : STD_LOGIC;
    signal resizeNNBilinear_U0_imgOutput_data_V_din : STD_LOGIC_VECTOR (23 downto 0);
    signal resizeNNBilinear_U0_imgOutput_data_V_write : STD_LOGIC;
    signal get_vegetation_image_4_U0_ap_start : STD_LOGIC;
    signal get_vegetation_image_4_U0_start_out : STD_LOGIC;
    signal get_vegetation_image_4_U0_start_write : STD_LOGIC;
    signal get_vegetation_image_4_U0_img_in_cols_read : STD_LOGIC;
    signal get_vegetation_image_4_U0_img_in_data_V_read : STD_LOGIC;
    signal get_vegetation_image_4_U0_img_out_data_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal get_vegetation_image_4_U0_img_out_data_V_write : STD_LOGIC;
    signal get_vegetation_image_4_U0_ap_done : STD_LOGIC;
    signal get_vegetation_image_4_U0_ap_ready : STD_LOGIC;
    signal get_vegetation_image_4_U0_ap_idle : STD_LOGIC;
    signal get_vegetation_image_4_U0_ap_continue : STD_LOGIC;
    signal segment_image_U0_ap_start : STD_LOGIC;
    signal segment_image_U0_ap_done : STD_LOGIC;
    signal segment_image_U0_ap_continue : STD_LOGIC;
    signal segment_image_U0_ap_idle : STD_LOGIC;
    signal segment_image_U0_ap_ready : STD_LOGIC;
    signal segment_image_U0_start_out : STD_LOGIC;
    signal segment_image_U0_start_write : STD_LOGIC;
    signal segment_image_U0_img_in_data_V_read : STD_LOGIC;
    signal segment_image_U0_img_out_data_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal segment_image_U0_img_out_data_V_write : STD_LOGIC;
    signal erode438_U0_ap_start : STD_LOGIC;
    signal erode438_U0_ap_done : STD_LOGIC;
    signal erode438_U0_ap_continue : STD_LOGIC;
    signal erode438_U0_ap_idle : STD_LOGIC;
    signal erode438_U0_ap_ready : STD_LOGIC;
    signal erode438_U0_start_out : STD_LOGIC;
    signal erode438_U0_start_write : STD_LOGIC;
    signal erode438_U0_p_src_data_V_read : STD_LOGIC;
    signal erode438_U0_p_dst_data_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal erode438_U0_p_dst_data_V_write : STD_LOGIC;
    signal remark_crop_lines_U0_ap_start : STD_LOGIC;
    signal remark_crop_lines_U0_ap_done : STD_LOGIC;
    signal remark_crop_lines_U0_ap_continue : STD_LOGIC;
    signal remark_crop_lines_U0_ap_idle : STD_LOGIC;
    signal remark_crop_lines_U0_ap_ready : STD_LOGIC;
    signal remark_crop_lines_U0_eroded_0_data_V_read : STD_LOGIC;
    signal remark_crop_lines_U0_eroded_1_data_V_read : STD_LOGIC;
    signal remark_crop_lines_U0_eroded_1_data_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal remark_crop_lines_U0_eroded_1_data_V_write : STD_LOGIC;
    signal remark_crop_lines_U0_eroded_2_data_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal remark_crop_lines_U0_eroded_2_data_V_write : STD_LOGIC;
    signal duplicateMat439_U0_ap_start : STD_LOGIC;
    signal duplicateMat439_U0_start_full_n : STD_LOGIC;
    signal duplicateMat439_U0_start_out : STD_LOGIC;
    signal duplicateMat439_U0_start_write : STD_LOGIC;
    signal duplicateMat439_U0_p_src_data_V_read : STD_LOGIC;
    signal duplicateMat439_U0_p_dst1_data_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal duplicateMat439_U0_p_dst1_data_V_write : STD_LOGIC;
    signal duplicateMat439_U0_p_dst2_data_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal duplicateMat439_U0_p_dst2_data_V_write : STD_LOGIC;
    signal duplicateMat439_U0_ap_done : STD_LOGIC;
    signal duplicateMat439_U0_ap_ready : STD_LOGIC;
    signal duplicateMat439_U0_ap_idle : STD_LOGIC;
    signal duplicateMat439_U0_ap_continue : STD_LOGIC;
    signal get_12th_segment_U0_eroded_data_V_read : STD_LOGIC;
    signal get_12th_segment_U0_bottom_data_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal get_12th_segment_U0_bottom_data_V_write : STD_LOGIC;
    signal get_12th_segment_U0_ap_start : STD_LOGIC;
    signal get_12th_segment_U0_ap_done : STD_LOGIC;
    signal get_12th_segment_U0_ap_ready : STD_LOGIC;
    signal get_12th_segment_U0_ap_idle : STD_LOGIC;
    signal get_12th_segment_U0_ap_continue : STD_LOGIC;
    signal get_crop_lines_U0_ap_start : STD_LOGIC;
    signal get_crop_lines_U0_ap_done : STD_LOGIC;
    signal get_crop_lines_U0_ap_continue : STD_LOGIC;
    signal get_crop_lines_U0_ap_idle : STD_LOGIC;
    signal get_crop_lines_U0_ap_ready : STD_LOGIC;
    signal get_crop_lines_U0_start_out : STD_LOGIC;
    signal get_crop_lines_U0_start_write : STD_LOGIC;
    signal get_crop_lines_U0_bottom_data_V_read : STD_LOGIC;
    signal get_crop_lines_U0_eroded_data_V_read : STD_LOGIC;
    signal get_crop_lines_U0_weed_mask_tmp_data_V_din : STD_LOGIC_VECTOR (1 downto 0);
    signal get_crop_lines_U0_weed_mask_tmp_data_V_write : STD_LOGIC;
    signal sectors_weed_classif_U0_ap_start : STD_LOGIC;
    signal sectors_weed_classif_U0_ap_done : STD_LOGIC;
    signal sectors_weed_classif_U0_ap_continue : STD_LOGIC;
    signal sectors_weed_classif_U0_ap_idle : STD_LOGIC;
    signal sectors_weed_classif_U0_ap_ready : STD_LOGIC;
    signal sectors_weed_classif_U0_weed_mask_tmp_data_V_read : STD_LOGIC;
    signal sectors_weed_classif_U0_weed_mask_out_data_V_read : STD_LOGIC;
    signal sectors_weed_classif_U0_weed_mask_out_data_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal sectors_weed_classif_U0_weed_mask_out_data_V_write : STD_LOGIC;
    signal sectors_weed_classif_U0_opened_data_V_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal zero_0_180_320_1_U0_ap_start : STD_LOGIC;
    signal zero_0_180_320_1_U0_ap_done : STD_LOGIC;
    signal zero_0_180_320_1_U0_ap_continue : STD_LOGIC;
    signal zero_0_180_320_1_U0_ap_idle : STD_LOGIC;
    signal zero_0_180_320_1_U0_ap_ready : STD_LOGIC;
    signal zero_0_180_320_1_U0_start_out : STD_LOGIC;
    signal zero_0_180_320_1_U0_start_write : STD_LOGIC;
    signal zero_0_180_320_1_U0_p_src1_data_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal zero_0_180_320_1_U0_p_src1_data_V_write : STD_LOGIC;
    signal merge_U0_ap_start : STD_LOGIC;
    signal merge_U0_start_out : STD_LOGIC;
    signal merge_U0_start_write : STD_LOGIC;
    signal merge_U0_p_src1_data_V_read : STD_LOGIC;
    signal merge_U0_p_src2_data_V_read : STD_LOGIC;
    signal merge_U0_p_dst_data_V_din : STD_LOGIC_VECTOR (23 downto 0);
    signal merge_U0_p_dst_data_V_write : STD_LOGIC;
    signal merge_U0_ap_done : STD_LOGIC;
    signal merge_U0_ap_ready : STD_LOGIC;
    signal merge_U0_ap_idle : STD_LOGIC;
    signal merge_U0_ap_continue : STD_LOGIC;
    signal resize_2_U0_ap_start : STD_LOGIC;
    signal resize_2_U0_ap_done : STD_LOGIC;
    signal resize_2_U0_ap_continue : STD_LOGIC;
    signal resize_2_U0_ap_idle : STD_LOGIC;
    signal resize_2_U0_ap_ready : STD_LOGIC;
    signal resize_2_U0_p_src_data_V_read : STD_LOGIC;
    signal resize_2_U0_p_dst_data_V_din : STD_LOGIC_VECTOR (23 downto 0);
    signal resize_2_U0_p_dst_data_V_write : STD_LOGIC;
    signal add_2750_U0_ap_start : STD_LOGIC;
    signal add_2750_U0_ap_done : STD_LOGIC;
    signal add_2750_U0_ap_continue : STD_LOGIC;
    signal add_2750_U0_ap_idle : STD_LOGIC;
    signal add_2750_U0_ap_ready : STD_LOGIC;
    signal add_2750_U0_p_src1_data_V_read : STD_LOGIC;
    signal add_2750_U0_p_src2_data_V_read : STD_LOGIC;
    signal add_2750_U0_p_dst_data_V_din : STD_LOGIC_VECTOR (23 downto 0);
    signal add_2750_U0_p_dst_data_V_write : STD_LOGIC;
    signal img_in_cols_c_full_n : STD_LOGIC;
    signal img_in_cols_c_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal img_in_cols_c_empty_n : STD_LOGIC;
    signal img_in_0_rows_channe_dout : STD_LOGIC_VECTOR (10 downto 0);
    signal img_in_0_rows_channe_empty_n : STD_LOGIC;
    signal img_in_0_cols_channe_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal img_in_0_cols_channe_empty_n : STD_LOGIC;
    signal resized_cols_channel_full_n : STD_LOGIC;
    signal resized_cols_channel_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal resized_cols_channel_empty_n : STD_LOGIC;
    signal img_in_0_data_V_full_n : STD_LOGIC;
    signal img_in_0_data_V_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal img_in_0_data_V_empty_n : STD_LOGIC;
    signal img_in_1_data_V_full_n : STD_LOGIC;
    signal img_in_1_data_V_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal img_in_1_data_V_empty_n : STD_LOGIC;
    signal resized_data_V_full_n : STD_LOGIC;
    signal resized_data_V_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal resized_data_V_empty_n : STD_LOGIC;
    signal veg_img_data_V_full_n : STD_LOGIC;
    signal veg_img_data_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal veg_img_data_V_empty_n : STD_LOGIC;
    signal segmented_data_V_full_n : STD_LOGIC;
    signal segmented_data_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal segmented_data_V_empty_n : STD_LOGIC;
    signal eroded_0a_data_V_full_n : STD_LOGIC;
    signal eroded_0a_data_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal eroded_0a_data_V_empty_n : STD_LOGIC;
    signal eroded_1_data_V_full_n : STD_LOGIC;
    signal eroded_1_data_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal eroded_1_data_V_empty_n : STD_LOGIC;
    signal duplicateMat439_U0_p_src_data_V_full_n : STD_LOGIC;
    signal duplicateMat439_U0_p_src_data_V_write : STD_LOGIC;
    signal duplicateMat439_U0_p_src_data_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal eroded_0b_data_V_full_n : STD_LOGIC;
    signal eroded_0b_data_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal eroded_0b_data_V_empty_n : STD_LOGIC;
    signal eroded_1a_data_V_full_n : STD_LOGIC;
    signal eroded_1a_data_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal eroded_1a_data_V_empty_n : STD_LOGIC;
    signal eroded_1b_data_V_full_n : STD_LOGIC;
    signal eroded_1b_data_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal eroded_1b_data_V_empty_n : STD_LOGIC;
    signal bottom_data_V_full_n : STD_LOGIC;
    signal bottom_data_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal bottom_data_V_empty_n : STD_LOGIC;
    signal weed_mask_tmp_data_V_full_n : STD_LOGIC;
    signal weed_mask_tmp_data_V_dout : STD_LOGIC_VECTOR (1 downto 0);
    signal weed_mask_tmp_data_V_empty_n : STD_LOGIC;
    signal weed_mask_out_data_V_full_n : STD_LOGIC;
    signal weed_mask_out_data_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal weed_mask_out_data_V_empty_n : STD_LOGIC;
    signal merge_U0_p_src1_data_V_full_n : STD_LOGIC;
    signal merge_U0_p_src1_data_V_write : STD_LOGIC;
    signal merge_U0_p_src1_data_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal zero_data_V_full_n : STD_LOGIC;
    signal zero_data_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal zero_data_V_empty_n : STD_LOGIC;
    signal mask_img_out_data_V_full_n : STD_LOGIC;
    signal mask_img_out_data_V_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal mask_img_out_data_V_empty_n : STD_LOGIC;
    signal rs_mask_img_out_data_full_n : STD_LOGIC;
    signal rs_mask_img_out_data_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal rs_mask_img_out_data_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_weed_detection_entry_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_weed_detection_entry_U0_ap_ready : STD_LOGIC;
    signal weed_detection_entry_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_weed_detection_Block_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_weed_detection_Block_U0_ap_ready : STD_LOGIC;
    signal weed_detection_Block_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_duplicateMat_2763_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_duplicateMat_2763_U0_ap_ready : STD_LOGIC;
    signal duplicateMat_2763_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_duplicateMat439_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_duplicateMat439_U0_ap_ready : STD_LOGIC;
    signal duplicateMat439_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_zero_0_180_320_1_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_zero_0_180_320_1_U0_ap_ready : STD_LOGIC;
    signal zero_0_180_320_1_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal weed_detection_entry_U0_start_full_n : STD_LOGIC;
    signal weed_detection_entry_U0_start_write : STD_LOGIC;
    signal start_for_get_vegetation_image_4_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_get_vegetation_image_4_U0_full_n : STD_LOGIC;
    signal start_for_get_vegetation_image_4_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_get_vegetation_image_4_U0_empty_n : STD_LOGIC;
    signal start_for_resizeNNBilinear_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_resizeNNBilinear_U0_full_n : STD_LOGIC;
    signal start_for_resizeNNBilinear_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_resizeNNBilinear_U0_empty_n : STD_LOGIC;
    signal start_for_add_2750_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_add_2750_U0_full_n : STD_LOGIC;
    signal start_for_add_2750_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_add_2750_U0_empty_n : STD_LOGIC;
    signal resizeNNBilinear_U0_start_full_n : STD_LOGIC;
    signal resizeNNBilinear_U0_start_write : STD_LOGIC;
    signal start_for_segment_image_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_segment_image_U0_full_n : STD_LOGIC;
    signal start_for_segment_image_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_segment_image_U0_empty_n : STD_LOGIC;
    signal start_for_erode438_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_erode438_U0_full_n : STD_LOGIC;
    signal start_for_erode438_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_erode438_U0_empty_n : STD_LOGIC;
    signal start_for_remark_crop_lines_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_remark_crop_lines_U0_full_n : STD_LOGIC;
    signal start_for_remark_crop_lines_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_remark_crop_lines_U0_empty_n : STD_LOGIC;
    signal remark_crop_lines_U0_start_full_n : STD_LOGIC;
    signal remark_crop_lines_U0_start_write : STD_LOGIC;
    signal start_for_get_12th_segment_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_get_12th_segment_U0_full_n : STD_LOGIC;
    signal start_for_get_12th_segment_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_get_12th_segment_U0_empty_n : STD_LOGIC;
    signal start_for_get_crop_lines_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_get_crop_lines_U0_full_n : STD_LOGIC;
    signal start_for_get_crop_lines_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_get_crop_lines_U0_empty_n : STD_LOGIC;
    signal get_12th_segment_U0_start_full_n : STD_LOGIC;
    signal get_12th_segment_U0_start_write : STD_LOGIC;
    signal start_for_sectors_weed_classif_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_sectors_weed_classif_U0_full_n : STD_LOGIC;
    signal start_for_sectors_weed_classif_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_sectors_weed_classif_U0_empty_n : STD_LOGIC;
    signal sectors_weed_classif_U0_start_full_n : STD_LOGIC;
    signal sectors_weed_classif_U0_start_write : STD_LOGIC;
    signal start_for_merge_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_merge_U0_full_n : STD_LOGIC;
    signal start_for_merge_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_merge_U0_empty_n : STD_LOGIC;
    signal start_for_resize_2_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_resize_2_U0_full_n : STD_LOGIC;
    signal start_for_resize_2_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_resize_2_U0_empty_n : STD_LOGIC;
    signal resize_2_U0_start_full_n : STD_LOGIC;
    signal resize_2_U0_start_write : STD_LOGIC;
    signal add_2750_U0_start_full_n : STD_LOGIC;
    signal add_2750_U0_start_write : STD_LOGIC;

    component weed_detection_entry IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_in_cols : IN STD_LOGIC_VECTOR (11 downto 0);
        img_in_cols_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        img_in_cols_out_full_n : IN STD_LOGIC;
        img_in_cols_out_write : OUT STD_LOGIC );
    end component;


    component weed_detection_Block IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        img_in_0_rows0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        img_in_0_rows0_ap_vld : OUT STD_LOGIC;
        img_in_0_cols0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        img_in_0_cols0_ap_vld : OUT STD_LOGIC;
        resized_cols_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        resized_cols_out_full_n : IN STD_LOGIC;
        resized_cols_out_write : OUT STD_LOGIC );
    end component;


    component duplicateMat_2763 IS
    port (
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_src_cols_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        p_src_cols_empty_n : IN STD_LOGIC;
        p_src_cols_read : OUT STD_LOGIC;
        p_src_data_V_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        p_src_data_V_empty_n : IN STD_LOGIC;
        p_src_data_V_read : OUT STD_LOGIC;
        p_dst1_rows : IN STD_LOGIC_VECTOR (10 downto 0);
        p_dst1_cols : IN STD_LOGIC_VECTOR (11 downto 0);
        p_dst1_data_V_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        p_dst1_data_V_full_n : IN STD_LOGIC;
        p_dst1_data_V_write : OUT STD_LOGIC;
        p_dst2_data_V_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        p_dst2_data_V_full_n : IN STD_LOGIC;
        p_dst2_data_V_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        p_dst1_rows_ap_vld : IN STD_LOGIC;
        p_dst1_cols_ap_vld : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component resizeNNBilinear IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        imgInput_data_V_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        imgInput_data_V_empty_n : IN STD_LOGIC;
        imgInput_data_V_read : OUT STD_LOGIC;
        imgOutput_data_V_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        imgOutput_data_V_full_n : IN STD_LOGIC;
        imgOutput_data_V_write : OUT STD_LOGIC );
    end component;


    component get_vegetation_image_4 IS
    port (
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        img_in_cols_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        img_in_cols_empty_n : IN STD_LOGIC;
        img_in_cols_read : OUT STD_LOGIC;
        img_in_data_V_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        img_in_data_V_empty_n : IN STD_LOGIC;
        img_in_data_V_read : OUT STD_LOGIC;
        img_out_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_out_data_V_full_n : IN STD_LOGIC;
        img_out_data_V_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component segment_image IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        img_in_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_in_data_V_empty_n : IN STD_LOGIC;
        img_in_data_V_read : OUT STD_LOGIC;
        img_out_data_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        img_out_data_V_full_n : IN STD_LOGIC;
        img_out_data_V_write : OUT STD_LOGIC );
    end component;


    component erode438 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_src_data_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        p_src_data_V_empty_n : IN STD_LOGIC;
        p_src_data_V_read : OUT STD_LOGIC;
        p_dst_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_V_full_n : IN STD_LOGIC;
        p_dst_data_V_write : OUT STD_LOGIC );
    end component;


    component remark_crop_lines IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        eroded_0_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        eroded_0_data_V_empty_n : IN STD_LOGIC;
        eroded_0_data_V_read : OUT STD_LOGIC;
        eroded_1_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        eroded_1_data_V_empty_n : IN STD_LOGIC;
        eroded_1_data_V_read : OUT STD_LOGIC;
        eroded_1_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        eroded_1_data_V_full_n : IN STD_LOGIC;
        eroded_1_data_V_write : OUT STD_LOGIC;
        eroded_2_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        eroded_2_data_V_full_n : IN STD_LOGIC;
        eroded_2_data_V_write : OUT STD_LOGIC );
    end component;


    component duplicateMat439 IS
    port (
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_src_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_V_empty_n : IN STD_LOGIC;
        p_src_data_V_read : OUT STD_LOGIC;
        p_dst1_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst1_data_V_full_n : IN STD_LOGIC;
        p_dst1_data_V_write : OUT STD_LOGIC;
        p_dst2_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst2_data_V_full_n : IN STD_LOGIC;
        p_dst2_data_V_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component get_12th_segment IS
    port (
        eroded_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        eroded_data_V_empty_n : IN STD_LOGIC;
        eroded_data_V_read : OUT STD_LOGIC;
        bottom_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        bottom_data_V_full_n : IN STD_LOGIC;
        bottom_data_V_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component get_crop_lines IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        bottom_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        bottom_data_V_empty_n : IN STD_LOGIC;
        bottom_data_V_read : OUT STD_LOGIC;
        eroded_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        eroded_data_V_empty_n : IN STD_LOGIC;
        eroded_data_V_read : OUT STD_LOGIC;
        weed_mask_tmp_data_V_din : OUT STD_LOGIC_VECTOR (1 downto 0);
        weed_mask_tmp_data_V_full_n : IN STD_LOGIC;
        weed_mask_tmp_data_V_write : OUT STD_LOGIC );
    end component;


    component sectors_weed_classif IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        weed_mask_tmp_data_V_dout : IN STD_LOGIC_VECTOR (1 downto 0);
        weed_mask_tmp_data_V_empty_n : IN STD_LOGIC;
        weed_mask_tmp_data_V_read : OUT STD_LOGIC;
        weed_mask_out_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        weed_mask_out_data_V_empty_n : IN STD_LOGIC;
        weed_mask_out_data_V_read : OUT STD_LOGIC;
        weed_mask_out_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        weed_mask_out_data_V_full_n : IN STD_LOGIC;
        weed_mask_out_data_V_write : OUT STD_LOGIC;
        opened_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        opened_data_V_empty_n : IN STD_LOGIC;
        opened_data_V_read : OUT STD_LOGIC );
    end component;


    component zero_0_180_320_1_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_src1_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_src1_data_V_full_n : IN STD_LOGIC;
        p_src1_data_V_write : OUT STD_LOGIC );
    end component;


    component merge IS
    port (
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_src1_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src1_data_V_empty_n : IN STD_LOGIC;
        p_src1_data_V_read : OUT STD_LOGIC;
        p_src2_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src2_data_V_empty_n : IN STD_LOGIC;
        p_src2_data_V_read : OUT STD_LOGIC;
        p_dst_data_V_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        p_dst_data_V_full_n : IN STD_LOGIC;
        p_dst_data_V_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component resize_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_data_V_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        p_src_data_V_empty_n : IN STD_LOGIC;
        p_src_data_V_read : OUT STD_LOGIC;
        p_dst_data_V_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        p_dst_data_V_full_n : IN STD_LOGIC;
        p_dst_data_V_write : OUT STD_LOGIC );
    end component;


    component add_2750 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src1_data_V_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        p_src1_data_V_empty_n : IN STD_LOGIC;
        p_src1_data_V_read : OUT STD_LOGIC;
        p_src2_data_V_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        p_src2_data_V_empty_n : IN STD_LOGIC;
        p_src2_data_V_read : OUT STD_LOGIC;
        p_dst_data_V_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        p_dst_data_V_full_n : IN STD_LOGIC;
        p_dst_data_V_write : OUT STD_LOGIC );
    end component;


    component fifo_w12_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w11_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (10 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (10 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w12_d2_A_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w10_d4_A_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (9 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w24_d1_A_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (23 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (23 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d1_A_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w1_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w2_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (1 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_get_vegbll IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_resizeNbml IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_add_275bnm IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_segmentbom IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_erode43bpm IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_remark_bqm IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_get_12tbrm IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_get_crobsm IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_sectorsbtn IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_merge_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_resize_bun IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    weed_detection_entry_U0 : component weed_detection_entry
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => weed_detection_entry_U0_ap_start,
        ap_done => weed_detection_entry_U0_ap_done,
        ap_continue => weed_detection_entry_U0_ap_continue,
        ap_idle => weed_detection_entry_U0_ap_idle,
        ap_ready => weed_detection_entry_U0_ap_ready,
        img_in_cols => img_in_cols,
        img_in_cols_out_din => weed_detection_entry_U0_img_in_cols_out_din,
        img_in_cols_out_full_n => img_in_cols_c_full_n,
        img_in_cols_out_write => weed_detection_entry_U0_img_in_cols_out_write);

    weed_detection_Block_U0 : component weed_detection_Block
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => weed_detection_Block_U0_ap_start,
        start_full_n => start_for_get_vegetation_image_4_U0_full_n,
        ap_done => weed_detection_Block_U0_ap_done,
        ap_continue => weed_detection_Block_U0_ap_continue,
        ap_idle => weed_detection_Block_U0_ap_idle,
        ap_ready => weed_detection_Block_U0_ap_ready,
        start_out => weed_detection_Block_U0_start_out,
        start_write => weed_detection_Block_U0_start_write,
        img_in_0_rows0 => weed_detection_Block_U0_img_in_0_rows0,
        img_in_0_rows0_ap_vld => weed_detection_Block_U0_img_in_0_rows0_ap_vld,
        img_in_0_cols0 => weed_detection_Block_U0_img_in_0_cols0,
        img_in_0_cols0_ap_vld => weed_detection_Block_U0_img_in_0_cols0_ap_vld,
        resized_cols_out_din => weed_detection_Block_U0_resized_cols_out_din,
        resized_cols_out_full_n => resized_cols_channel_full_n,
        resized_cols_out_write => weed_detection_Block_U0_resized_cols_out_write);

    duplicateMat_2763_U0 : component duplicateMat_2763
    port map (
        ap_start => duplicateMat_2763_U0_ap_start,
        start_full_n => duplicateMat_2763_U0_start_full_n,
        start_out => duplicateMat_2763_U0_start_out,
        start_write => duplicateMat_2763_U0_start_write,
        p_src_cols_dout => img_in_cols_c_dout,
        p_src_cols_empty_n => img_in_cols_c_empty_n,
        p_src_cols_read => duplicateMat_2763_U0_p_src_cols_read,
        p_src_data_V_dout => img_in_data_V_dout,
        p_src_data_V_empty_n => img_in_data_V_empty_n,
        p_src_data_V_read => duplicateMat_2763_U0_p_src_data_V_read,
        p_dst1_rows => img_in_0_rows_channe_dout,
        p_dst1_cols => img_in_0_cols_channe_dout,
        p_dst1_data_V_din => duplicateMat_2763_U0_p_dst1_data_V_din,
        p_dst1_data_V_full_n => img_in_0_data_V_full_n,
        p_dst1_data_V_write => duplicateMat_2763_U0_p_dst1_data_V_write,
        p_dst2_data_V_din => duplicateMat_2763_U0_p_dst2_data_V_din,
        p_dst2_data_V_full_n => img_in_1_data_V_full_n,
        p_dst2_data_V_write => duplicateMat_2763_U0_p_dst2_data_V_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        p_dst1_rows_ap_vld => ap_const_logic_0,
        p_dst1_cols_ap_vld => ap_const_logic_0,
        ap_done => duplicateMat_2763_U0_ap_done,
        ap_ready => duplicateMat_2763_U0_ap_ready,
        ap_idle => duplicateMat_2763_U0_ap_idle,
        ap_continue => duplicateMat_2763_U0_ap_continue);

    resizeNNBilinear_U0 : component resizeNNBilinear
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => resizeNNBilinear_U0_ap_start,
        ap_done => resizeNNBilinear_U0_ap_done,
        ap_continue => resizeNNBilinear_U0_ap_continue,
        ap_idle => resizeNNBilinear_U0_ap_idle,
        ap_ready => resizeNNBilinear_U0_ap_ready,
        imgInput_data_V_dout => img_in_0_data_V_dout,
        imgInput_data_V_empty_n => img_in_0_data_V_empty_n,
        imgInput_data_V_read => resizeNNBilinear_U0_imgInput_data_V_read,
        imgOutput_data_V_din => resizeNNBilinear_U0_imgOutput_data_V_din,
        imgOutput_data_V_full_n => resized_data_V_full_n,
        imgOutput_data_V_write => resizeNNBilinear_U0_imgOutput_data_V_write);

    get_vegetation_image_4_U0 : component get_vegetation_image_4
    port map (
        ap_start => get_vegetation_image_4_U0_ap_start,
        start_full_n => start_for_segment_image_U0_full_n,
        start_out => get_vegetation_image_4_U0_start_out,
        start_write => get_vegetation_image_4_U0_start_write,
        img_in_cols_dout => resized_cols_channel_dout,
        img_in_cols_empty_n => resized_cols_channel_empty_n,
        img_in_cols_read => get_vegetation_image_4_U0_img_in_cols_read,
        img_in_data_V_dout => resized_data_V_dout,
        img_in_data_V_empty_n => resized_data_V_empty_n,
        img_in_data_V_read => get_vegetation_image_4_U0_img_in_data_V_read,
        img_out_data_V_din => get_vegetation_image_4_U0_img_out_data_V_din,
        img_out_data_V_full_n => veg_img_data_V_full_n,
        img_out_data_V_write => get_vegetation_image_4_U0_img_out_data_V_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_done => get_vegetation_image_4_U0_ap_done,
        ap_ready => get_vegetation_image_4_U0_ap_ready,
        ap_idle => get_vegetation_image_4_U0_ap_idle,
        ap_continue => get_vegetation_image_4_U0_ap_continue);

    segment_image_U0 : component segment_image
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => segment_image_U0_ap_start,
        start_full_n => start_for_erode438_U0_full_n,
        ap_done => segment_image_U0_ap_done,
        ap_continue => segment_image_U0_ap_continue,
        ap_idle => segment_image_U0_ap_idle,
        ap_ready => segment_image_U0_ap_ready,
        start_out => segment_image_U0_start_out,
        start_write => segment_image_U0_start_write,
        img_in_data_V_dout => veg_img_data_V_dout,
        img_in_data_V_empty_n => veg_img_data_V_empty_n,
        img_in_data_V_read => segment_image_U0_img_in_data_V_read,
        img_out_data_V_din => segment_image_U0_img_out_data_V_din,
        img_out_data_V_full_n => segmented_data_V_full_n,
        img_out_data_V_write => segment_image_U0_img_out_data_V_write);

    erode438_U0 : component erode438
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => erode438_U0_ap_start,
        start_full_n => start_for_remark_crop_lines_U0_full_n,
        ap_done => erode438_U0_ap_done,
        ap_continue => erode438_U0_ap_continue,
        ap_idle => erode438_U0_ap_idle,
        ap_ready => erode438_U0_ap_ready,
        start_out => erode438_U0_start_out,
        start_write => erode438_U0_start_write,
        p_src_data_V_dout => segmented_data_V_dout,
        p_src_data_V_empty_n => segmented_data_V_empty_n,
        p_src_data_V_read => erode438_U0_p_src_data_V_read,
        p_dst_data_V_din => erode438_U0_p_dst_data_V_din,
        p_dst_data_V_full_n => eroded_0a_data_V_full_n,
        p_dst_data_V_write => erode438_U0_p_dst_data_V_write);

    remark_crop_lines_U0 : component remark_crop_lines
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => remark_crop_lines_U0_ap_start,
        ap_done => remark_crop_lines_U0_ap_done,
        ap_continue => remark_crop_lines_U0_ap_continue,
        ap_idle => remark_crop_lines_U0_ap_idle,
        ap_ready => remark_crop_lines_U0_ap_ready,
        eroded_0_data_V_dout => eroded_0a_data_V_dout,
        eroded_0_data_V_empty_n => eroded_0a_data_V_empty_n,
        eroded_0_data_V_read => remark_crop_lines_U0_eroded_0_data_V_read,
        eroded_1_data_V_dout => eroded_1_data_V_dout,
        eroded_1_data_V_empty_n => eroded_1_data_V_empty_n,
        eroded_1_data_V_read => remark_crop_lines_U0_eroded_1_data_V_read,
        eroded_1_data_V_din => remark_crop_lines_U0_eroded_1_data_V_din,
        eroded_1_data_V_full_n => ap_const_logic_1,
        eroded_1_data_V_write => remark_crop_lines_U0_eroded_1_data_V_write,
        eroded_2_data_V_din => remark_crop_lines_U0_eroded_2_data_V_din,
        eroded_2_data_V_full_n => eroded_0b_data_V_full_n,
        eroded_2_data_V_write => remark_crop_lines_U0_eroded_2_data_V_write);

    duplicateMat439_U0 : component duplicateMat439
    port map (
        ap_start => duplicateMat439_U0_ap_start,
        start_full_n => duplicateMat439_U0_start_full_n,
        start_out => duplicateMat439_U0_start_out,
        start_write => duplicateMat439_U0_start_write,
        p_src_data_V_dout => ap_const_lv8_0,
        p_src_data_V_empty_n => ap_const_logic_1,
        p_src_data_V_read => duplicateMat439_U0_p_src_data_V_read,
        p_dst1_data_V_din => duplicateMat439_U0_p_dst1_data_V_din,
        p_dst1_data_V_full_n => eroded_1a_data_V_full_n,
        p_dst1_data_V_write => duplicateMat439_U0_p_dst1_data_V_write,
        p_dst2_data_V_din => duplicateMat439_U0_p_dst2_data_V_din,
        p_dst2_data_V_full_n => eroded_1b_data_V_full_n,
        p_dst2_data_V_write => duplicateMat439_U0_p_dst2_data_V_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_done => duplicateMat439_U0_ap_done,
        ap_ready => duplicateMat439_U0_ap_ready,
        ap_idle => duplicateMat439_U0_ap_idle,
        ap_continue => duplicateMat439_U0_ap_continue);

    get_12th_segment_U0 : component get_12th_segment
    port map (
        eroded_data_V_dout => eroded_1a_data_V_dout,
        eroded_data_V_empty_n => eroded_1a_data_V_empty_n,
        eroded_data_V_read => get_12th_segment_U0_eroded_data_V_read,
        bottom_data_V_din => get_12th_segment_U0_bottom_data_V_din,
        bottom_data_V_full_n => bottom_data_V_full_n,
        bottom_data_V_write => get_12th_segment_U0_bottom_data_V_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => get_12th_segment_U0_ap_start,
        ap_done => get_12th_segment_U0_ap_done,
        ap_ready => get_12th_segment_U0_ap_ready,
        ap_idle => get_12th_segment_U0_ap_idle,
        ap_continue => get_12th_segment_U0_ap_continue);

    get_crop_lines_U0 : component get_crop_lines
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => get_crop_lines_U0_ap_start,
        start_full_n => start_for_sectors_weed_classif_U0_full_n,
        ap_done => get_crop_lines_U0_ap_done,
        ap_continue => get_crop_lines_U0_ap_continue,
        ap_idle => get_crop_lines_U0_ap_idle,
        ap_ready => get_crop_lines_U0_ap_ready,
        start_out => get_crop_lines_U0_start_out,
        start_write => get_crop_lines_U0_start_write,
        bottom_data_V_dout => bottom_data_V_dout,
        bottom_data_V_empty_n => bottom_data_V_empty_n,
        bottom_data_V_read => get_crop_lines_U0_bottom_data_V_read,
        eroded_data_V_dout => eroded_1b_data_V_dout,
        eroded_data_V_empty_n => eroded_1b_data_V_empty_n,
        eroded_data_V_read => get_crop_lines_U0_eroded_data_V_read,
        weed_mask_tmp_data_V_din => get_crop_lines_U0_weed_mask_tmp_data_V_din,
        weed_mask_tmp_data_V_full_n => weed_mask_tmp_data_V_full_n,
        weed_mask_tmp_data_V_write => get_crop_lines_U0_weed_mask_tmp_data_V_write);

    sectors_weed_classif_U0 : component sectors_weed_classif
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => sectors_weed_classif_U0_ap_start,
        ap_done => sectors_weed_classif_U0_ap_done,
        ap_continue => sectors_weed_classif_U0_ap_continue,
        ap_idle => sectors_weed_classif_U0_ap_idle,
        ap_ready => sectors_weed_classif_U0_ap_ready,
        weed_mask_tmp_data_V_dout => weed_mask_tmp_data_V_dout,
        weed_mask_tmp_data_V_empty_n => weed_mask_tmp_data_V_empty_n,
        weed_mask_tmp_data_V_read => sectors_weed_classif_U0_weed_mask_tmp_data_V_read,
        weed_mask_out_data_V_dout => weed_mask_out_data_V_dout,
        weed_mask_out_data_V_empty_n => weed_mask_out_data_V_empty_n,
        weed_mask_out_data_V_read => sectors_weed_classif_U0_weed_mask_out_data_V_read,
        weed_mask_out_data_V_din => sectors_weed_classif_U0_weed_mask_out_data_V_din,
        weed_mask_out_data_V_full_n => ap_const_logic_1,
        weed_mask_out_data_V_write => sectors_weed_classif_U0_weed_mask_out_data_V_write,
        opened_data_V_dout => eroded_0b_data_V_dout,
        opened_data_V_empty_n => eroded_0b_data_V_empty_n,
        opened_data_V_read => sectors_weed_classif_U0_opened_data_V_read);

    zero_0_180_320_1_U0 : component zero_0_180_320_1_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => zero_0_180_320_1_U0_ap_start,
        start_full_n => start_for_merge_U0_full_n,
        ap_done => zero_0_180_320_1_U0_ap_done,
        ap_continue => zero_0_180_320_1_U0_ap_continue,
        ap_idle => zero_0_180_320_1_U0_ap_idle,
        ap_ready => zero_0_180_320_1_U0_ap_ready,
        start_out => zero_0_180_320_1_U0_start_out,
        start_write => zero_0_180_320_1_U0_start_write,
        p_src1_data_V_din => zero_0_180_320_1_U0_p_src1_data_V_din,
        p_src1_data_V_full_n => zero_data_V_full_n,
        p_src1_data_V_write => zero_0_180_320_1_U0_p_src1_data_V_write);

    merge_U0 : component merge
    port map (
        ap_start => merge_U0_ap_start,
        start_full_n => start_for_resize_2_U0_full_n,
        start_out => merge_U0_start_out,
        start_write => merge_U0_start_write,
        p_src1_data_V_dout => ap_const_lv8_0,
        p_src1_data_V_empty_n => ap_const_logic_1,
        p_src1_data_V_read => merge_U0_p_src1_data_V_read,
        p_src2_data_V_dout => zero_data_V_dout,
        p_src2_data_V_empty_n => zero_data_V_empty_n,
        p_src2_data_V_read => merge_U0_p_src2_data_V_read,
        p_dst_data_V_din => merge_U0_p_dst_data_V_din,
        p_dst_data_V_full_n => mask_img_out_data_V_full_n,
        p_dst_data_V_write => merge_U0_p_dst_data_V_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_done => merge_U0_ap_done,
        ap_ready => merge_U0_ap_ready,
        ap_idle => merge_U0_ap_idle,
        ap_continue => merge_U0_ap_continue);

    resize_2_U0 : component resize_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => resize_2_U0_ap_start,
        ap_done => resize_2_U0_ap_done,
        ap_continue => resize_2_U0_ap_continue,
        ap_idle => resize_2_U0_ap_idle,
        ap_ready => resize_2_U0_ap_ready,
        p_src_data_V_dout => mask_img_out_data_V_dout,
        p_src_data_V_empty_n => mask_img_out_data_V_empty_n,
        p_src_data_V_read => resize_2_U0_p_src_data_V_read,
        p_dst_data_V_din => resize_2_U0_p_dst_data_V_din,
        p_dst_data_V_full_n => rs_mask_img_out_data_full_n,
        p_dst_data_V_write => resize_2_U0_p_dst_data_V_write);

    add_2750_U0 : component add_2750
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => add_2750_U0_ap_start,
        ap_done => add_2750_U0_ap_done,
        ap_continue => add_2750_U0_ap_continue,
        ap_idle => add_2750_U0_ap_idle,
        ap_ready => add_2750_U0_ap_ready,
        p_src1_data_V_dout => img_in_1_data_V_dout,
        p_src1_data_V_empty_n => img_in_1_data_V_empty_n,
        p_src1_data_V_read => add_2750_U0_p_src1_data_V_read,
        p_src2_data_V_dout => rs_mask_img_out_data_dout,
        p_src2_data_V_empty_n => rs_mask_img_out_data_empty_n,
        p_src2_data_V_read => add_2750_U0_p_src2_data_V_read,
        p_dst_data_V_din => add_2750_U0_p_dst_data_V_din,
        p_dst_data_V_full_n => img_out_data_V_full_n,
        p_dst_data_V_write => add_2750_U0_p_dst_data_V_write);

    img_in_cols_c_U : component fifo_w12_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => weed_detection_entry_U0_img_in_cols_out_din,
        if_full_n => img_in_cols_c_full_n,
        if_write => weed_detection_entry_U0_img_in_cols_out_write,
        if_dout => img_in_cols_c_dout,
        if_empty_n => img_in_cols_c_empty_n,
        if_read => duplicateMat_2763_U0_p_src_cols_read);

    img_in_0_rows_channe_U : component fifo_w11_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => weed_detection_Block_U0_img_in_0_rows0,
        if_full_n => img_in_0_rows_channe_full_n,
        if_write => ap_channel_done_img_in_0_rows_channe,
        if_dout => img_in_0_rows_channe_dout,
        if_empty_n => img_in_0_rows_channe_empty_n,
        if_read => duplicateMat_2763_U0_ap_ready);

    img_in_0_cols_channe_U : component fifo_w12_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => weed_detection_Block_U0_img_in_0_cols0,
        if_full_n => img_in_0_cols_channe_full_n,
        if_write => ap_channel_done_img_in_0_cols_channe,
        if_dout => img_in_0_cols_channe_dout,
        if_empty_n => img_in_0_cols_channe_empty_n,
        if_read => duplicateMat_2763_U0_ap_ready);

    resized_cols_channel_U : component fifo_w10_d4_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => weed_detection_Block_U0_resized_cols_out_din,
        if_full_n => resized_cols_channel_full_n,
        if_write => weed_detection_Block_U0_resized_cols_out_write,
        if_dout => resized_cols_channel_dout,
        if_empty_n => resized_cols_channel_empty_n,
        if_read => get_vegetation_image_4_U0_img_in_cols_read);

    img_in_0_data_V_U : component fifo_w24_d1_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => duplicateMat_2763_U0_p_dst1_data_V_din,
        if_full_n => img_in_0_data_V_full_n,
        if_write => duplicateMat_2763_U0_p_dst1_data_V_write,
        if_dout => img_in_0_data_V_dout,
        if_empty_n => img_in_0_data_V_empty_n,
        if_read => resizeNNBilinear_U0_imgInput_data_V_read);

    img_in_1_data_V_U : component fifo_w24_d1_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => duplicateMat_2763_U0_p_dst2_data_V_din,
        if_full_n => img_in_1_data_V_full_n,
        if_write => duplicateMat_2763_U0_p_dst2_data_V_write,
        if_dout => img_in_1_data_V_dout,
        if_empty_n => img_in_1_data_V_empty_n,
        if_read => add_2750_U0_p_src1_data_V_read);

    resized_data_V_U : component fifo_w24_d1_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => resizeNNBilinear_U0_imgOutput_data_V_din,
        if_full_n => resized_data_V_full_n,
        if_write => resizeNNBilinear_U0_imgOutput_data_V_write,
        if_dout => resized_data_V_dout,
        if_empty_n => resized_data_V_empty_n,
        if_read => get_vegetation_image_4_U0_img_in_data_V_read);

    veg_img_data_V_U : component fifo_w8_d1_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => get_vegetation_image_4_U0_img_out_data_V_din,
        if_full_n => veg_img_data_V_full_n,
        if_write => get_vegetation_image_4_U0_img_out_data_V_write,
        if_dout => veg_img_data_V_dout,
        if_empty_n => veg_img_data_V_empty_n,
        if_read => segment_image_U0_img_in_data_V_read);

    segmented_data_V_U : component fifo_w1_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => segment_image_U0_img_out_data_V_din,
        if_full_n => segmented_data_V_full_n,
        if_write => segment_image_U0_img_out_data_V_write,
        if_dout => segmented_data_V_dout,
        if_empty_n => segmented_data_V_empty_n,
        if_read => erode438_U0_p_src_data_V_read);

    eroded_0a_data_V_U : component fifo_w8_d1_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => erode438_U0_p_dst_data_V_din,
        if_full_n => eroded_0a_data_V_full_n,
        if_write => erode438_U0_p_dst_data_V_write,
        if_dout => eroded_0a_data_V_dout,
        if_empty_n => eroded_0a_data_V_empty_n,
        if_read => remark_crop_lines_U0_eroded_0_data_V_read);

    eroded_1_data_V_U : component fifo_w8_d1_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => duplicateMat439_U0_p_src_data_V_din,
        if_full_n => eroded_1_data_V_full_n,
        if_write => duplicateMat439_U0_p_src_data_V_write,
        if_dout => eroded_1_data_V_dout,
        if_empty_n => eroded_1_data_V_empty_n,
        if_read => remark_crop_lines_U0_eroded_1_data_V_read);

    eroded_0b_data_V_U : component fifo_w8_d1_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => remark_crop_lines_U0_eroded_2_data_V_din,
        if_full_n => eroded_0b_data_V_full_n,
        if_write => remark_crop_lines_U0_eroded_2_data_V_write,
        if_dout => eroded_0b_data_V_dout,
        if_empty_n => eroded_0b_data_V_empty_n,
        if_read => sectors_weed_classif_U0_opened_data_V_read);

    eroded_1a_data_V_U : component fifo_w8_d1_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => duplicateMat439_U0_p_dst1_data_V_din,
        if_full_n => eroded_1a_data_V_full_n,
        if_write => duplicateMat439_U0_p_dst1_data_V_write,
        if_dout => eroded_1a_data_V_dout,
        if_empty_n => eroded_1a_data_V_empty_n,
        if_read => get_12th_segment_U0_eroded_data_V_read);

    eroded_1b_data_V_U : component fifo_w8_d1_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => duplicateMat439_U0_p_dst2_data_V_din,
        if_full_n => eroded_1b_data_V_full_n,
        if_write => duplicateMat439_U0_p_dst2_data_V_write,
        if_dout => eroded_1b_data_V_dout,
        if_empty_n => eroded_1b_data_V_empty_n,
        if_read => get_crop_lines_U0_eroded_data_V_read);

    bottom_data_V_U : component fifo_w8_d1_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => get_12th_segment_U0_bottom_data_V_din,
        if_full_n => bottom_data_V_full_n,
        if_write => get_12th_segment_U0_bottom_data_V_write,
        if_dout => bottom_data_V_dout,
        if_empty_n => bottom_data_V_empty_n,
        if_read => get_crop_lines_U0_bottom_data_V_read);

    weed_mask_tmp_data_V_U : component fifo_w2_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => get_crop_lines_U0_weed_mask_tmp_data_V_din,
        if_full_n => weed_mask_tmp_data_V_full_n,
        if_write => get_crop_lines_U0_weed_mask_tmp_data_V_write,
        if_dout => weed_mask_tmp_data_V_dout,
        if_empty_n => weed_mask_tmp_data_V_empty_n,
        if_read => sectors_weed_classif_U0_weed_mask_tmp_data_V_read);

    weed_mask_out_data_V_U : component fifo_w8_d1_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => merge_U0_p_src1_data_V_din,
        if_full_n => weed_mask_out_data_V_full_n,
        if_write => merge_U0_p_src1_data_V_write,
        if_dout => weed_mask_out_data_V_dout,
        if_empty_n => weed_mask_out_data_V_empty_n,
        if_read => sectors_weed_classif_U0_weed_mask_out_data_V_read);

    zero_data_V_U : component fifo_w8_d1_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => zero_0_180_320_1_U0_p_src1_data_V_din,
        if_full_n => zero_data_V_full_n,
        if_write => zero_0_180_320_1_U0_p_src1_data_V_write,
        if_dout => zero_data_V_dout,
        if_empty_n => zero_data_V_empty_n,
        if_read => merge_U0_p_src2_data_V_read);

    mask_img_out_data_V_U : component fifo_w24_d1_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => merge_U0_p_dst_data_V_din,
        if_full_n => mask_img_out_data_V_full_n,
        if_write => merge_U0_p_dst_data_V_write,
        if_dout => mask_img_out_data_V_dout,
        if_empty_n => mask_img_out_data_V_empty_n,
        if_read => resize_2_U0_p_src_data_V_read);

    rs_mask_img_out_data_U : component fifo_w24_d1_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => resize_2_U0_p_dst_data_V_din,
        if_full_n => rs_mask_img_out_data_full_n,
        if_write => resize_2_U0_p_dst_data_V_write,
        if_dout => rs_mask_img_out_data_dout,
        if_empty_n => rs_mask_img_out_data_empty_n,
        if_read => add_2750_U0_p_src2_data_V_read);

    start_for_get_vegbll_U : component start_for_get_vegbll
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_get_vegetation_image_4_U0_din,
        if_full_n => start_for_get_vegetation_image_4_U0_full_n,
        if_write => weed_detection_Block_U0_start_write,
        if_dout => start_for_get_vegetation_image_4_U0_dout,
        if_empty_n => start_for_get_vegetation_image_4_U0_empty_n,
        if_read => get_vegetation_image_4_U0_ap_ready);

    start_for_resizeNbml_U : component start_for_resizeNbml
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_resizeNNBilinear_U0_din,
        if_full_n => start_for_resizeNNBilinear_U0_full_n,
        if_write => duplicateMat_2763_U0_start_write,
        if_dout => start_for_resizeNNBilinear_U0_dout,
        if_empty_n => start_for_resizeNNBilinear_U0_empty_n,
        if_read => resizeNNBilinear_U0_ap_ready);

    start_for_add_275bnm_U : component start_for_add_275bnm
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_add_2750_U0_din,
        if_full_n => start_for_add_2750_U0_full_n,
        if_write => duplicateMat_2763_U0_start_write,
        if_dout => start_for_add_2750_U0_dout,
        if_empty_n => start_for_add_2750_U0_empty_n,
        if_read => add_2750_U0_ap_ready);

    start_for_segmentbom_U : component start_for_segmentbom
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_segment_image_U0_din,
        if_full_n => start_for_segment_image_U0_full_n,
        if_write => get_vegetation_image_4_U0_start_write,
        if_dout => start_for_segment_image_U0_dout,
        if_empty_n => start_for_segment_image_U0_empty_n,
        if_read => segment_image_U0_ap_ready);

    start_for_erode43bpm_U : component start_for_erode43bpm
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_erode438_U0_din,
        if_full_n => start_for_erode438_U0_full_n,
        if_write => segment_image_U0_start_write,
        if_dout => start_for_erode438_U0_dout,
        if_empty_n => start_for_erode438_U0_empty_n,
        if_read => erode438_U0_ap_ready);

    start_for_remark_bqm_U : component start_for_remark_bqm
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_remark_crop_lines_U0_din,
        if_full_n => start_for_remark_crop_lines_U0_full_n,
        if_write => erode438_U0_start_write,
        if_dout => start_for_remark_crop_lines_U0_dout,
        if_empty_n => start_for_remark_crop_lines_U0_empty_n,
        if_read => remark_crop_lines_U0_ap_ready);

    start_for_get_12tbrm_U : component start_for_get_12tbrm
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_get_12th_segment_U0_din,
        if_full_n => start_for_get_12th_segment_U0_full_n,
        if_write => duplicateMat439_U0_start_write,
        if_dout => start_for_get_12th_segment_U0_dout,
        if_empty_n => start_for_get_12th_segment_U0_empty_n,
        if_read => get_12th_segment_U0_ap_ready);

    start_for_get_crobsm_U : component start_for_get_crobsm
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_get_crop_lines_U0_din,
        if_full_n => start_for_get_crop_lines_U0_full_n,
        if_write => duplicateMat439_U0_start_write,
        if_dout => start_for_get_crop_lines_U0_dout,
        if_empty_n => start_for_get_crop_lines_U0_empty_n,
        if_read => get_crop_lines_U0_ap_ready);

    start_for_sectorsbtn_U : component start_for_sectorsbtn
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_sectors_weed_classif_U0_din,
        if_full_n => start_for_sectors_weed_classif_U0_full_n,
        if_write => get_crop_lines_U0_start_write,
        if_dout => start_for_sectors_weed_classif_U0_dout,
        if_empty_n => start_for_sectors_weed_classif_U0_empty_n,
        if_read => sectors_weed_classif_U0_ap_ready);

    start_for_merge_U0_U : component start_for_merge_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_merge_U0_din,
        if_full_n => start_for_merge_U0_full_n,
        if_write => zero_0_180_320_1_U0_start_write,
        if_dout => start_for_merge_U0_dout,
        if_empty_n => start_for_merge_U0_empty_n,
        if_read => merge_U0_ap_ready);

    start_for_resize_bun_U : component start_for_resize_bun
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_resize_2_U0_din,
        if_full_n => start_for_resize_2_U0_full_n,
        if_write => merge_U0_start_write,
        if_dout => start_for_resize_2_U0_dout,
        if_empty_n => start_for_resize_2_U0_empty_n,
        if_read => resize_2_U0_ap_ready);





    ap_sync_reg_channel_write_img_in_0_cols_channe_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_img_in_0_cols_channe <= ap_const_logic_0;
            else
                if (((weed_detection_Block_U0_ap_done and weed_detection_Block_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_img_in_0_cols_channe <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_img_in_0_cols_channe <= ap_sync_channel_write_img_in_0_cols_channe;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_img_in_0_rows_channe_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_img_in_0_rows_channe <= ap_const_logic_0;
            else
                if (((weed_detection_Block_U0_ap_done and weed_detection_Block_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_img_in_0_rows_channe <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_img_in_0_rows_channe <= ap_sync_channel_write_img_in_0_rows_channe;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_duplicateMat439_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_duplicateMat439_U0_ap_ready <= ap_const_logic_0;
            else
                if (((real_start and ap_sync_ready) = ap_const_logic_1)) then 
                    ap_sync_reg_duplicateMat439_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_duplicateMat439_U0_ap_ready <= ap_sync_duplicateMat439_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_duplicateMat_2763_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_duplicateMat_2763_U0_ap_ready <= ap_const_logic_0;
            else
                if (((real_start and ap_sync_ready) = ap_const_logic_1)) then 
                    ap_sync_reg_duplicateMat_2763_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_duplicateMat_2763_U0_ap_ready <= ap_sync_duplicateMat_2763_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_weed_detection_Block_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_weed_detection_Block_U0_ap_ready <= ap_const_logic_0;
            else
                if (((real_start and ap_sync_ready) = ap_const_logic_1)) then 
                    ap_sync_reg_weed_detection_Block_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_weed_detection_Block_U0_ap_ready <= ap_sync_weed_detection_Block_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_weed_detection_entry_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_weed_detection_entry_U0_ap_ready <= ap_const_logic_0;
            else
                if (((real_start and ap_sync_ready) = ap_const_logic_1)) then 
                    ap_sync_reg_weed_detection_entry_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_weed_detection_entry_U0_ap_ready <= ap_sync_weed_detection_entry_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_zero_0_180_320_1_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_zero_0_180_320_1_U0_ap_ready <= ap_const_logic_0;
            else
                if (((real_start and ap_sync_ready) = ap_const_logic_1)) then 
                    ap_sync_reg_zero_0_180_320_1_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_zero_0_180_320_1_U0_ap_ready <= ap_sync_zero_0_180_320_1_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    duplicateMat439_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((duplicateMat439_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                duplicateMat439_U0_ap_ready_count <= std_logic_vector(unsigned(duplicateMat439_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (duplicateMat439_U0_ap_ready = ap_const_logic_1))) then 
                duplicateMat439_U0_ap_ready_count <= std_logic_vector(unsigned(duplicateMat439_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    duplicateMat_2763_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((duplicateMat_2763_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                duplicateMat_2763_U0_ap_ready_count <= std_logic_vector(unsigned(duplicateMat_2763_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (duplicateMat_2763_U0_ap_ready = ap_const_logic_1))) then 
                duplicateMat_2763_U0_ap_ready_count <= std_logic_vector(unsigned(duplicateMat_2763_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    weed_detection_Block_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((weed_detection_Block_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                weed_detection_Block_U0_ap_ready_count <= std_logic_vector(unsigned(weed_detection_Block_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (weed_detection_Block_U0_ap_ready = ap_const_logic_1))) then 
                weed_detection_Block_U0_ap_ready_count <= std_logic_vector(unsigned(weed_detection_Block_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    weed_detection_entry_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((weed_detection_entry_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                weed_detection_entry_U0_ap_ready_count <= std_logic_vector(unsigned(weed_detection_entry_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (weed_detection_entry_U0_ap_ready = ap_const_logic_1))) then 
                weed_detection_entry_U0_ap_ready_count <= std_logic_vector(unsigned(weed_detection_entry_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    zero_0_180_320_1_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((zero_0_180_320_1_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                zero_0_180_320_1_U0_ap_ready_count <= std_logic_vector(unsigned(zero_0_180_320_1_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (zero_0_180_320_1_U0_ap_ready = ap_const_logic_1))) then 
                zero_0_180_320_1_U0_ap_ready_count <= std_logic_vector(unsigned(zero_0_180_320_1_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    add_2750_U0_ap_continue <= ap_sync_continue;
    add_2750_U0_ap_start <= start_for_add_2750_U0_empty_n;
    add_2750_U0_start_full_n <= ap_const_logic_1;
    add_2750_U0_start_write <= ap_const_logic_0;
    ap_channel_done_img_in_0_cols_channe <= (weed_detection_Block_U0_ap_done and (ap_sync_reg_channel_write_img_in_0_cols_channe xor ap_const_logic_1));
    ap_channel_done_img_in_0_rows_channe <= (weed_detection_Block_U0_ap_done and (ap_sync_reg_channel_write_img_in_0_rows_channe xor ap_const_logic_1));
    ap_done <= ap_sync_done;
    ap_idle <= (zero_0_180_320_1_U0_ap_idle and weed_detection_entry_U0_ap_idle and weed_detection_Block_U0_ap_idle and segment_image_U0_ap_idle and sectors_weed_classif_U0_ap_idle and resize_2_U0_ap_idle and resizeNNBilinear_U0_ap_idle and remark_crop_lines_U0_ap_idle and merge_U0_ap_idle and get_vegetation_image_4_U0_ap_idle and get_crop_lines_U0_ap_idle and get_12th_segment_U0_ap_idle and (img_in_0_cols_channe_empty_n xor ap_const_logic_1) and (img_in_0_rows_channe_empty_n xor ap_const_logic_1) and erode438_U0_ap_idle and duplicateMat_2763_U0_ap_idle and duplicateMat439_U0_ap_idle and add_2750_U0_ap_idle);
    ap_ready <= internal_ap_ready;
    ap_sync_channel_write_img_in_0_cols_channe <= ((img_in_0_cols_channe_full_n and ap_channel_done_img_in_0_cols_channe) or ap_sync_reg_channel_write_img_in_0_cols_channe);
    ap_sync_channel_write_img_in_0_rows_channe <= ((img_in_0_rows_channe_full_n and ap_channel_done_img_in_0_rows_channe) or ap_sync_reg_channel_write_img_in_0_rows_channe);
    ap_sync_continue <= (ap_sync_done and ap_continue);
    ap_sync_done <= (sectors_weed_classif_U0_ap_done and add_2750_U0_ap_done);
    ap_sync_duplicateMat439_U0_ap_ready <= (duplicateMat439_U0_ap_ready or ap_sync_reg_duplicateMat439_U0_ap_ready);
    ap_sync_duplicateMat_2763_U0_ap_ready <= (duplicateMat_2763_U0_ap_ready or ap_sync_reg_duplicateMat_2763_U0_ap_ready);
    ap_sync_ready <= (ap_sync_zero_0_180_320_1_U0_ap_ready and ap_sync_weed_detection_entry_U0_ap_ready and ap_sync_weed_detection_Block_U0_ap_ready and ap_sync_duplicateMat_2763_U0_ap_ready and ap_sync_duplicateMat439_U0_ap_ready);
    ap_sync_weed_detection_Block_U0_ap_ready <= (weed_detection_Block_U0_ap_ready or ap_sync_reg_weed_detection_Block_U0_ap_ready);
    ap_sync_weed_detection_entry_U0_ap_ready <= (weed_detection_entry_U0_ap_ready or ap_sync_reg_weed_detection_entry_U0_ap_ready);
    ap_sync_zero_0_180_320_1_U0_ap_ready <= (zero_0_180_320_1_U0_ap_ready or ap_sync_reg_zero_0_180_320_1_U0_ap_ready);
    duplicateMat439_U0_ap_continue <= ap_const_logic_1;
    duplicateMat439_U0_ap_start <= (real_start and (ap_sync_reg_duplicateMat439_U0_ap_ready xor ap_const_logic_1));
    duplicateMat439_U0_p_src_data_V_din <= ap_const_lv8_0;
    duplicateMat439_U0_p_src_data_V_full_n <= eroded_1_data_V_full_n;
    duplicateMat439_U0_p_src_data_V_write <= ap_const_logic_0;
    duplicateMat439_U0_start_full_n <= (start_for_get_crop_lines_U0_full_n and start_for_get_12th_segment_U0_full_n);
    duplicateMat_2763_U0_ap_continue <= ap_const_logic_1;
    duplicateMat_2763_U0_ap_start <= (real_start and img_in_0_rows_channe_empty_n and img_in_0_cols_channe_empty_n and (ap_sync_reg_duplicateMat_2763_U0_ap_ready xor ap_const_logic_1));
    duplicateMat_2763_U0_start_full_n <= (start_for_resizeNNBilinear_U0_full_n and start_for_add_2750_U0_full_n);
    erode438_U0_ap_continue <= ap_const_logic_1;
    erode438_U0_ap_start <= start_for_erode438_U0_empty_n;
    get_12th_segment_U0_ap_continue <= ap_const_logic_1;
    get_12th_segment_U0_ap_start <= start_for_get_12th_segment_U0_empty_n;
    get_12th_segment_U0_start_full_n <= ap_const_logic_1;
    get_12th_segment_U0_start_write <= ap_const_logic_0;
    get_crop_lines_U0_ap_continue <= ap_const_logic_1;
    get_crop_lines_U0_ap_start <= start_for_get_crop_lines_U0_empty_n;
    get_vegetation_image_4_U0_ap_continue <= ap_const_logic_1;
    get_vegetation_image_4_U0_ap_start <= start_for_get_vegetation_image_4_U0_empty_n;
    img_in_data_V_read <= duplicateMat_2763_U0_p_src_data_V_read;
    img_out_data_V_din <= add_2750_U0_p_dst_data_V_din;
    img_out_data_V_write <= add_2750_U0_p_dst_data_V_write;
    internal_ap_ready <= ap_sync_ready;
    merge_U0_ap_continue <= ap_const_logic_1;
    merge_U0_ap_start <= start_for_merge_U0_empty_n;
    merge_U0_p_src1_data_V_din <= ap_const_lv8_0;
    merge_U0_p_src1_data_V_full_n <= weed_mask_out_data_V_full_n;
    merge_U0_p_src1_data_V_write <= ap_const_logic_0;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    remark_crop_lines_U0_ap_continue <= ap_const_logic_1;
    remark_crop_lines_U0_ap_start <= start_for_remark_crop_lines_U0_empty_n;
    remark_crop_lines_U0_start_full_n <= ap_const_logic_1;
    remark_crop_lines_U0_start_write <= ap_const_logic_0;
    resizeNNBilinear_U0_ap_continue <= ap_const_logic_1;
    resizeNNBilinear_U0_ap_start <= start_for_resizeNNBilinear_U0_empty_n;
    resizeNNBilinear_U0_start_full_n <= ap_const_logic_1;
    resizeNNBilinear_U0_start_write <= ap_const_logic_0;
    resize_2_U0_ap_continue <= ap_const_logic_1;
    resize_2_U0_ap_start <= start_for_resize_2_U0_empty_n;
    resize_2_U0_start_full_n <= ap_const_logic_1;
    resize_2_U0_start_write <= ap_const_logic_0;
    sectors_weed_classif_U0_ap_continue <= ap_sync_continue;
    sectors_weed_classif_U0_ap_start <= start_for_sectors_weed_classif_U0_empty_n;
    sectors_weed_classif_U0_start_full_n <= ap_const_logic_1;
    sectors_weed_classif_U0_start_write <= ap_const_logic_0;
    segment_image_U0_ap_continue <= ap_const_logic_1;
    segment_image_U0_ap_start <= start_for_segment_image_U0_empty_n;
    start_for_add_2750_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_erode438_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_get_12th_segment_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_get_crop_lines_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_get_vegetation_image_4_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_merge_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_remark_crop_lines_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_resizeNNBilinear_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_resize_2_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_sectors_weed_classif_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_segment_image_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    weed_detection_Block_U0_ap_continue <= (ap_sync_channel_write_img_in_0_rows_channe and ap_sync_channel_write_img_in_0_cols_channe);
    weed_detection_Block_U0_ap_start <= (real_start and (ap_sync_reg_weed_detection_Block_U0_ap_ready xor ap_const_logic_1));
    weed_detection_entry_U0_ap_continue <= ap_const_logic_1;
    weed_detection_entry_U0_ap_start <= (real_start and (ap_sync_reg_weed_detection_entry_U0_ap_ready xor ap_const_logic_1));
    weed_detection_entry_U0_start_full_n <= ap_const_logic_1;
    weed_detection_entry_U0_start_write <= ap_const_logic_0;
    zero_0_180_320_1_U0_ap_continue <= ap_const_logic_1;
    zero_0_180_320_1_U0_ap_start <= (real_start and (ap_sync_reg_zero_0_180_320_1_U0_ap_ready xor ap_const_logic_1));
end behav;
