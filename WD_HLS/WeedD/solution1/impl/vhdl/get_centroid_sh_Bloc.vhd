-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity get_centroid_sh_Bloc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    possible_c_x_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    possible_c_x_empty_n : IN STD_LOGIC;
    possible_c_x_read : OUT STD_LOGIC;
    c_read_dout : IN STD_LOGIC_VECTOR (47 downto 0);
    c_read_empty_n : IN STD_LOGIC;
    c_read_read : OUT STD_LOGIC;
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    v_offset_read_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    v_offset_read_empty_n : IN STD_LOGIC;
    v_offset_read_read : OUT STD_LOGIC;
    p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
    h_offset_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    h_offset_empty_n : IN STD_LOGIC;
    h_offset_read : OUT STD_LOGIC;
    possible_c_y_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    possible_c_y_empty_n : IN STD_LOGIC;
    possible_c_y_read : OUT STD_LOGIC;
    c : OUT STD_LOGIC_VECTOR (47 downto 0);
    c_ap_vld : OUT STD_LOGIC );
end;


architecture behav of get_centroid_sh_Bloc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (35 downto 0) := "000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (35 downto 0) := "000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (35 downto 0) := "000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (35 downto 0) := "000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (35 downto 0) := "000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (35 downto 0) := "000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (35 downto 0) := "000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (35 downto 0) := "000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (35 downto 0) := "000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (35 downto 0) := "001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (35 downto 0) := "010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (35 downto 0) := "100000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal possible_c_x_blk_n : STD_LOGIC;
    signal c_read_blk_n : STD_LOGIC;
    signal v_offset_read_blk_n : STD_LOGIC;
    signal h_offset_blk_n : STD_LOGIC;
    signal possible_c_y_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal c_read_2_reg_223 : STD_LOGIC_VECTOR (47 downto 0);
    signal v_offset_read_2_reg_228 : STD_LOGIC_VECTOR (7 downto 0);
    signal h_offset_read_reg_233 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln132_fu_125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln132_reg_243 : STD_LOGIC_VECTOR (0 downto 0);
    signal c1_part_set_i_i_fu_147_p5 : STD_LOGIC_VECTOR (47 downto 0);
    signal c2_part_set_i_i_fu_172_p5 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_phi_mux_c3_i_i_phi_fu_110_p4 : STD_LOGIC_VECTOR (47 downto 0);
    signal c3_i_i_reg_107 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal add_ln134_fu_187_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_storemerge_i_i_phi_fu_119_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge_i_i_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal c3_part_set_i_i_fu_194_p5 : STD_LOGIC_VECTOR (47 downto 0);
    signal c_preg : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    signal zext_ln119_fu_143_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_131_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln133_fu_159_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln133_fu_163_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln133_fu_166_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_137_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln134_fu_184_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_131_ap_start : STD_LOGIC;
    signal grp_fu_131_ap_done : STD_LOGIC;
    signal grp_fu_131_ce : STD_LOGIC;
    signal grp_fu_137_ap_start : STD_LOGIC;
    signal grp_fu_137_ap_done : STD_LOGIC;
    signal grp_fu_137_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (35 downto 0);

    component ip_accel_app_udivHfu IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component ip_accel_app_udivIfE IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    ip_accel_app_udivHfu_U443 : component ip_accel_app_udivHfu
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_131_ap_start,
        done => grp_fu_131_ap_done,
        din0 => p_read1,
        din1 => p_read,
        ce => grp_fu_131_ce,
        dout => grp_fu_131_p2);

    ip_accel_app_udivIfE_U444 : component ip_accel_app_udivIfE
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_137_ap_start,
        done => grp_fu_137_ap_done,
        din0 => p_read2,
        din1 => p_read,
        ce => grp_fu_137_ce,
        dout => grp_fu_137_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    c_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                c_preg <= ap_const_lv48_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                    c_preg <= c3_part_set_i_i_fu_194_p5;
                end if; 
            end if;
        end if;
    end process;


    c3_i_i_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (possible_c_y_empty_n = ap_const_logic_0) or (h_offset_empty_n = ap_const_logic_0) or (v_offset_read_empty_n = ap_const_logic_0) or (c_read_empty_n = ap_const_logic_0) or (possible_c_x_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln132_fu_125_p2 = ap_const_lv1_1))) then 
                c3_i_i_reg_107 <= c1_part_set_i_i_fu_147_p5;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state36) and (icmp_ln132_reg_243 = ap_const_lv1_0))) then 
                c3_i_i_reg_107 <= c2_part_set_i_i_fu_172_p5;
            end if; 
        end if;
    end process;

    storemerge_i_i_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (possible_c_y_empty_n = ap_const_logic_0) or (h_offset_empty_n = ap_const_logic_0) or (v_offset_read_empty_n = ap_const_logic_0) or (c_read_empty_n = ap_const_logic_0) or (possible_c_x_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln132_fu_125_p2 = ap_const_lv1_1))) then 
                storemerge_i_i_reg_116 <= possible_c_y_dout;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state36) and (icmp_ln132_reg_243 = ap_const_lv1_0))) then 
                storemerge_i_i_reg_116 <= add_ln134_fu_187_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (possible_c_y_empty_n = ap_const_logic_0) or (h_offset_empty_n = ap_const_logic_0) or (v_offset_read_empty_n = ap_const_logic_0) or (c_read_empty_n = ap_const_logic_0) or (possible_c_x_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                c_read_2_reg_223 <= c_read_dout;
                h_offset_read_reg_233 <= h_offset_dout;
                icmp_ln132_reg_243 <= icmp_ln132_fu_125_p2;
                v_offset_read_2_reg_228 <= v_offset_read_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, possible_c_x_empty_n, c_read_empty_n, v_offset_read_empty_n, h_offset_empty_n, possible_c_y_empty_n, icmp_ln132_fu_125_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (possible_c_y_empty_n = ap_const_logic_0) or (h_offset_empty_n = ap_const_logic_0) or (v_offset_read_empty_n = ap_const_logic_0) or (c_read_empty_n = ap_const_logic_0) or (possible_c_x_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln132_fu_125_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                elsif ((not(((ap_done_reg = ap_const_logic_1) or (possible_c_y_empty_n = ap_const_logic_0) or (h_offset_empty_n = ap_const_logic_0) or (v_offset_read_empty_n = ap_const_logic_0) or (c_read_empty_n = ap_const_logic_0) or (possible_c_x_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln132_fu_125_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln133_fu_166_p2 <= std_logic_vector(unsigned(trunc_ln133_fu_159_p1) + unsigned(zext_ln133_fu_163_p1));
    add_ln134_fu_187_p2 <= std_logic_vector(unsigned(grp_fu_137_p2) + unsigned(zext_ln134_fu_184_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, possible_c_x_empty_n, c_read_empty_n, v_offset_read_empty_n, h_offset_empty_n, possible_c_y_empty_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (possible_c_y_empty_n = ap_const_logic_0) or (h_offset_empty_n = ap_const_logic_0) or (v_offset_read_empty_n = ap_const_logic_0) or (c_read_empty_n = ap_const_logic_0) or (possible_c_x_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c3_i_i_phi_fu_110_p4_assign_proc : process(icmp_ln132_reg_243, c2_part_set_i_i_fu_172_p5, c3_i_i_reg_107, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) and (icmp_ln132_reg_243 = ap_const_lv1_0))) then 
            ap_phi_mux_c3_i_i_phi_fu_110_p4 <= c2_part_set_i_i_fu_172_p5;
        else 
            ap_phi_mux_c3_i_i_phi_fu_110_p4 <= c3_i_i_reg_107;
        end if; 
    end process;


    ap_phi_mux_storemerge_i_i_phi_fu_119_p4_assign_proc : process(icmp_ln132_reg_243, ap_CS_fsm_state36, add_ln134_fu_187_p2, storemerge_i_i_reg_116)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) and (icmp_ln132_reg_243 = ap_const_lv1_0))) then 
            ap_phi_mux_storemerge_i_i_phi_fu_119_p4 <= add_ln134_fu_187_p2;
        else 
            ap_phi_mux_storemerge_i_i_phi_fu_119_p4 <= storemerge_i_i_reg_116;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    c_assign_proc : process(ap_CS_fsm_state36, c3_part_set_i_i_fu_194_p5, c_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            c <= c3_part_set_i_i_fu_194_p5;
        else 
            c <= c_preg;
        end if; 
    end process;

    c1_part_set_i_i_fu_147_p5 <= (c_read_dout(47 downto 16) & zext_ln119_fu_143_p1);
    c2_part_set_i_i_fu_172_p5 <= (c_read_2_reg_223(47 downto 16) & add_ln133_fu_166_p2);
    c3_part_set_i_i_fu_194_p5 <= (ap_phi_mux_storemerge_i_i_phi_fu_119_p4 & ap_phi_mux_c3_i_i_phi_fu_110_p4(15 downto 0));

    c_ap_vld_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            c_ap_vld <= ap_const_logic_1;
        else 
            c_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    c_read_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, c_read_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            c_read_blk_n <= c_read_empty_n;
        else 
            c_read_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    c_read_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, possible_c_x_empty_n, c_read_empty_n, v_offset_read_empty_n, h_offset_empty_n, possible_c_y_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (possible_c_y_empty_n = ap_const_logic_0) or (h_offset_empty_n = ap_const_logic_0) or (v_offset_read_empty_n = ap_const_logic_0) or (c_read_empty_n = ap_const_logic_0) or (possible_c_x_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            c_read_read <= ap_const_logic_1;
        else 
            c_read_read <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_131_ap_start_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, possible_c_x_empty_n, c_read_empty_n, v_offset_read_empty_n, h_offset_empty_n, possible_c_y_empty_n, icmp_ln132_fu_125_p2)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (possible_c_y_empty_n = ap_const_logic_0) or (h_offset_empty_n = ap_const_logic_0) or (v_offset_read_empty_n = ap_const_logic_0) or (c_read_empty_n = ap_const_logic_0) or (possible_c_x_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln132_fu_125_p2 = ap_const_lv1_0))) then 
            grp_fu_131_ap_start <= ap_const_logic_1;
        else 
            grp_fu_131_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_131_ce <= ap_const_logic_1;

    grp_fu_137_ap_start_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, possible_c_x_empty_n, c_read_empty_n, v_offset_read_empty_n, h_offset_empty_n, possible_c_y_empty_n, icmp_ln132_fu_125_p2)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (possible_c_y_empty_n = ap_const_logic_0) or (h_offset_empty_n = ap_const_logic_0) or (v_offset_read_empty_n = ap_const_logic_0) or (c_read_empty_n = ap_const_logic_0) or (possible_c_x_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln132_fu_125_p2 = ap_const_lv1_0))) then 
            grp_fu_137_ap_start <= ap_const_logic_1;
        else 
            grp_fu_137_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_137_ce <= ap_const_logic_1;

    h_offset_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, h_offset_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            h_offset_blk_n <= h_offset_empty_n;
        else 
            h_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    h_offset_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, possible_c_x_empty_n, c_read_empty_n, v_offset_read_empty_n, h_offset_empty_n, possible_c_y_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (possible_c_y_empty_n = ap_const_logic_0) or (h_offset_empty_n = ap_const_logic_0) or (v_offset_read_empty_n = ap_const_logic_0) or (c_read_empty_n = ap_const_logic_0) or (possible_c_x_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            h_offset_read <= ap_const_logic_1;
        else 
            h_offset_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln132_fu_125_p2 <= "1" when (p_read = ap_const_lv32_0) else "0";

    possible_c_x_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, possible_c_x_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            possible_c_x_blk_n <= possible_c_x_empty_n;
        else 
            possible_c_x_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    possible_c_x_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, possible_c_x_empty_n, c_read_empty_n, v_offset_read_empty_n, h_offset_empty_n, possible_c_y_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (possible_c_y_empty_n = ap_const_logic_0) or (h_offset_empty_n = ap_const_logic_0) or (v_offset_read_empty_n = ap_const_logic_0) or (c_read_empty_n = ap_const_logic_0) or (possible_c_x_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            possible_c_x_read <= ap_const_logic_1;
        else 
            possible_c_x_read <= ap_const_logic_0;
        end if; 
    end process;


    possible_c_y_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, possible_c_y_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            possible_c_y_blk_n <= possible_c_y_empty_n;
        else 
            possible_c_y_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    possible_c_y_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, possible_c_x_empty_n, c_read_empty_n, v_offset_read_empty_n, h_offset_empty_n, possible_c_y_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (possible_c_y_empty_n = ap_const_logic_0) or (h_offset_empty_n = ap_const_logic_0) or (v_offset_read_empty_n = ap_const_logic_0) or (c_read_empty_n = ap_const_logic_0) or (possible_c_x_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            possible_c_y_read <= ap_const_logic_1;
        else 
            possible_c_y_read <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln133_fu_159_p1 <= grp_fu_131_p2(16 - 1 downto 0);

    v_offset_read_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, v_offset_read_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            v_offset_read_blk_n <= v_offset_read_empty_n;
        else 
            v_offset_read_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    v_offset_read_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, possible_c_x_empty_n, c_read_empty_n, v_offset_read_empty_n, h_offset_empty_n, possible_c_y_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (possible_c_y_empty_n = ap_const_logic_0) or (h_offset_empty_n = ap_const_logic_0) or (v_offset_read_empty_n = ap_const_logic_0) or (c_read_empty_n = ap_const_logic_0) or (possible_c_x_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            v_offset_read_read <= ap_const_logic_1;
        else 
            v_offset_read_read <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln119_fu_143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(possible_c_x_dout),16));
    zext_ln133_fu_163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_offset_read_2_reg_228),16));
    zext_ln134_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_offset_read_reg_233),32));
end behav;
