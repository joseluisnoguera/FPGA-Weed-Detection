-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity extract_micro_roi is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_in_mr_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in_mr_data_V_empty_n : IN STD_LOGIC;
    img_in_mr_data_V_read : OUT STD_LOGIC;
    x_top : IN STD_LOGIC_VECTOR (9 downto 0);
    x_bottom : IN STD_LOGIC_VECTOR (9 downto 0);
    y_left : IN STD_LOGIC_VECTOR (15 downto 0);
    y_right : IN STD_LOGIC_VECTOR (15 downto 0);
    micro_roi_data_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    micro_roi_data_V_ce0 : OUT STD_LOGIC;
    micro_roi_data_V_we0 : OUT STD_LOGIC;
    micro_roi_data_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of extract_micro_roi is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal img_in_mr_data_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln110_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln113_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln111_fu_128_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln111_reg_225 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln109_fu_132_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln109_reg_230 : STD_LOGIC_VECTOR (7 downto 0);
    signal v_fu_146_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal v_reg_238 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln113_fu_157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln113_reg_243 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln109_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_162_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln_reg_248 : STD_LOGIC_VECTOR (9 downto 0);
    signal h_fu_176_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_predicate_op38_read_state3 : BOOLEAN;
    signal ap_block_state3 : BOOLEAN;
    signal v_0_reg_106 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_0_reg_117 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln114_1_fu_210_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln109_fu_136_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_v_fu_152_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln112_fu_182_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_h_fu_186_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln113_1_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln114_fu_201_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln114_fu_205_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    h_0_reg_117_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln109_fu_140_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                h_0_reg_117 <= ap_const_lv6_0;
            elsif ((not(((img_in_mr_data_V_empty_n = ap_const_logic_0) and (ap_predicate_op38_read_state3 = ap_const_boolean_1))) and (icmp_ln110_fu_170_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                h_0_reg_117 <= h_fu_176_p2;
            end if; 
        end if;
    end process;

    v_0_reg_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((img_in_mr_data_V_empty_n = ap_const_logic_0) and (ap_predicate_op38_read_state3 = ap_const_boolean_1))) and (icmp_ln110_fu_170_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                v_0_reg_106 <= v_reg_238;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                v_0_reg_106 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln109_fu_140_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln113_reg_243 <= icmp_ln113_fu_157_p2;
                    shl_ln_reg_248(9 downto 5) <= shl_ln_fu_162_p3(9 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                trunc_ln109_reg_230 <= trunc_ln109_fu_132_p1;
                trunc_ln111_reg_225 <= trunc_ln111_fu_128_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                v_reg_238 <= v_fu_146_p2;
            end if;
        end if;
    end process;
    shl_ln_reg_248(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, img_in_mr_data_V_empty_n, ap_CS_fsm_state3, icmp_ln110_fu_170_p2, ap_CS_fsm_state2, icmp_ln109_fu_140_p2, ap_predicate_op38_read_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln109_fu_140_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((img_in_mr_data_V_empty_n = ap_const_logic_0) and (ap_predicate_op38_read_state3 = ap_const_boolean_1))) and (icmp_ln110_fu_170_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((img_in_mr_data_V_empty_n = ap_const_logic_0) and (ap_predicate_op38_read_state3 = ap_const_boolean_1))) and (icmp_ln110_fu_170_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln114_fu_205_p2 <= std_logic_vector(unsigned(shl_ln_reg_248) + unsigned(zext_ln114_fu_201_p1));
    and_ln113_fu_196_p2 <= (icmp_ln113_reg_243 and icmp_ln113_1_fu_191_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state3_assign_proc : process(img_in_mr_data_V_empty_n, ap_predicate_op38_read_state3)
    begin
                ap_block_state3 <= ((img_in_mr_data_V_empty_n = ap_const_logic_0) and (ap_predicate_op38_read_state3 = ap_const_boolean_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln109_fu_140_p2)
    begin
        if ((((icmp_ln109_fu_140_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op38_read_state3_assign_proc : process(icmp_ln110_fu_170_p2, and_ln113_fu_196_p2)
    begin
                ap_predicate_op38_read_state3 <= ((ap_const_lv1_1 = and_ln113_fu_196_p2) and (icmp_ln110_fu_170_p2 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln109_fu_140_p2)
    begin
        if (((icmp_ln109_fu_140_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    h_fu_176_p2 <= std_logic_vector(unsigned(h_0_reg_117) + unsigned(ap_const_lv6_1));
    icmp_ln109_fu_140_p2 <= "1" when (v_0_reg_106 = ap_const_lv5_17) else "0";
    icmp_ln110_fu_170_p2 <= "1" when (h_0_reg_117 = ap_const_lv6_20) else "0";
    icmp_ln113_1_fu_191_p2 <= "1" when (unsigned(p_h_fu_186_p2) < unsigned(y_right)) else "0";
    icmp_ln113_fu_157_p2 <= "1" when (unsigned(p_v_fu_152_p2) < unsigned(trunc_ln109_reg_230)) else "0";

    img_in_mr_data_V_blk_n_assign_proc : process(img_in_mr_data_V_empty_n, ap_CS_fsm_state3, icmp_ln110_fu_170_p2, and_ln113_fu_196_p2)
    begin
        if (((ap_const_lv1_1 = and_ln113_fu_196_p2) and (icmp_ln110_fu_170_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            img_in_mr_data_V_blk_n <= img_in_mr_data_V_empty_n;
        else 
            img_in_mr_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_in_mr_data_V_read_assign_proc : process(img_in_mr_data_V_empty_n, ap_CS_fsm_state3, ap_predicate_op38_read_state3)
    begin
        if ((not(((img_in_mr_data_V_empty_n = ap_const_logic_0) and (ap_predicate_op38_read_state3 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (ap_predicate_op38_read_state3 = ap_const_boolean_1))) then 
            img_in_mr_data_V_read <= ap_const_logic_1;
        else 
            img_in_mr_data_V_read <= ap_const_logic_0;
        end if; 
    end process;

    micro_roi_data_V_address0 <= zext_ln114_1_fu_210_p1(10 - 1 downto 0);

    micro_roi_data_V_ce0_assign_proc : process(img_in_mr_data_V_empty_n, ap_CS_fsm_state3, ap_predicate_op38_read_state3)
    begin
        if ((not(((img_in_mr_data_V_empty_n = ap_const_logic_0) and (ap_predicate_op38_read_state3 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            micro_roi_data_V_ce0 <= ap_const_logic_1;
        else 
            micro_roi_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    micro_roi_data_V_d0 <= img_in_mr_data_V_dout;

    micro_roi_data_V_we0_assign_proc : process(img_in_mr_data_V_empty_n, ap_CS_fsm_state3, icmp_ln110_fu_170_p2, and_ln113_fu_196_p2, ap_predicate_op38_read_state3)
    begin
        if ((not(((img_in_mr_data_V_empty_n = ap_const_logic_0) and (ap_predicate_op38_read_state3 = ap_const_boolean_1))) and (ap_const_lv1_1 = and_ln113_fu_196_p2) and (icmp_ln110_fu_170_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            micro_roi_data_V_we0 <= ap_const_logic_1;
        else 
            micro_roi_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_h_fu_186_p2 <= std_logic_vector(unsigned(zext_ln112_fu_182_p1) + unsigned(y_left));
    p_v_fu_152_p2 <= std_logic_vector(unsigned(zext_ln109_fu_136_p1) + unsigned(trunc_ln111_reg_225));
    shl_ln_fu_162_p3 <= (v_0_reg_106 & ap_const_lv5_0);
    trunc_ln109_fu_132_p1 <= x_bottom(8 - 1 downto 0);
    trunc_ln111_fu_128_p1 <= x_top(8 - 1 downto 0);
    v_fu_146_p2 <= std_logic_vector(unsigned(v_0_reg_106) + unsigned(ap_const_lv5_1));
    zext_ln109_fu_136_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_0_reg_106),8));
    zext_ln112_fu_182_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_0_reg_117),16));
    zext_ln114_1_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln114_fu_205_p2),64));
    zext_ln114_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_0_reg_117),10));
end behav;
