-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity get_exg_image is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    r_channel_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    r_channel_data_V_empty_n : IN STD_LOGIC;
    r_channel_data_V_read : OUT STD_LOGIC;
    g_channel_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    g_channel_data_V_empty_n : IN STD_LOGIC;
    g_channel_data_V_read : OUT STD_LOGIC;
    b_channel_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    b_channel_data_V_empty_n : IN STD_LOGIC;
    b_channel_data_V_read : OUT STD_LOGIC;
    max_r_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    max_r_empty_n : IN STD_LOGIC;
    max_r_read : OUT STD_LOGIC;
    max_g_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    max_g_empty_n : IN STD_LOGIC;
    max_g_read : OUT STD_LOGIC;
    max_b_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    max_b_empty_n : IN STD_LOGIC;
    max_b_read : OUT STD_LOGIC;
    veg_img_data_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    veg_img_data_V_full_n : IN STD_LOGIC;
    veg_img_data_V_write : OUT STD_LOGIC;
    min_value_V_out_din : OUT STD_LOGIC_VECTOR (27 downto 0);
    min_value_V_out_full_n : IN STD_LOGIC;
    min_value_V_out_write : OUT STD_LOGIC;
    max_value_V_out_din : OUT STD_LOGIC_VECTOR (28 downto 0);
    max_value_V_out_full_n : IN STD_LOGIC;
    max_value_V_out_write : OUT STD_LOGIC );
end;


architecture behav of get_exg_image is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (42 downto 0) := "0000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (42 downto 0) := "0000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (42 downto 0) := "0000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (42 downto 0) := "0000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (42 downto 0) := "0000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (42 downto 0) := "0000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (42 downto 0) := "0001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (42 downto 0) := "0010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (42 downto 0) := "0100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (42 downto 0) := "1000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv28_7FF800 : STD_LOGIC_VECTOR (27 downto 0) := "0000011111111111100000000000";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv56_7FF800 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000011111111111100000000000";
    constant ap_const_lv56_0 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_E100 : STD_LOGIC_VECTOR (15 downto 0) := "1110000100000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv19_100 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv6_11 : STD_LOGIC_VECTOR (5 downto 0) := "010001";
    constant ap_const_lv56_FFFFFFFFFFFFFF : STD_LOGIC_VECTOR (55 downto 0) := "11111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_30 : STD_LOGIC_VECTOR (7 downto 0) := "00110000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_96 : STD_LOGIC_VECTOR (8 downto 0) := "010010110";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_19 : STD_LOGIC_VECTOR (8 downto 0) := "000011001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal r_channel_data_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln40_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal g_channel_data_V_blk_n : STD_LOGIC;
    signal b_channel_data_V_blk_n : STD_LOGIC;
    signal max_r_blk_n : STD_LOGIC;
    signal max_g_blk_n : STD_LOGIC;
    signal max_b_blk_n : STD_LOGIC;
    signal veg_img_data_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal min_value_V_out_blk_n : STD_LOGIC;
    signal max_value_V_out_blk_n : STD_LOGIC;
    signal max_r_read_reg_1077 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal max_g_read_reg_1082 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_b_read_reg_1087 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_284_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_reg_1095 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal tmp_V_26_reg_1100 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_reg_1110 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_27_reg_1120 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal sext_ln1148_fu_390_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal icmp_ln935_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_1152 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal p_Result_35_fu_480_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_35_reg_1157 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_29_fu_494_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_V_29_reg_1162 : STD_LOGIC_VECTOR (25 downto 0);
    signal select_ln50_fu_512_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal select_ln50_reg_1168 : STD_LOGIC_VECTOR (28 downto 0);
    signal select_ln50_1_fu_520_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal select_ln50_1_reg_1173 : STD_LOGIC_VECTOR (55 downto 0);
    signal select_ln51_fu_538_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal select_ln51_reg_1178 : STD_LOGIC_VECTOR (27 downto 0);
    signal select_ln51_1_fu_546_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal select_ln51_1_reg_1183 : STD_LOGIC_VECTOR (55 downto 0);
    signal min_value_V_dc_0_reg_217 : STD_LOGIC_VECTOR (27 downto 0);
    signal max_value_V_dc_0_reg_230 : STD_LOGIC_VECTOR (28 downto 0);
    signal min_value_V_load_i_reg_243 : STD_LOGIC_VECTOR (55 downto 0);
    signal max_value_V_load_i_reg_255 : STD_LOGIC_VECTOR (55 downto 0);
    signal i_0_i_reg_267 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_294_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_303_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_312_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_294_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_303_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_fu_317_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_11_fu_321_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_fu_329_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal lhs_V_fu_325_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_312_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_12_fu_333_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_14_fu_339_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_5_fu_347_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal lhs_V_4_fu_343_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_16_fu_351_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln1498_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal denominator_V_fu_357_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln_fu_379_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal denominator_V_1_fu_371_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_394_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_394_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln1148_1_fu_400_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_411_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_411_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln1148_2_fu_417_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_428_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_428_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_394_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal shl_ln6_fu_434_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_411_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln703_fu_442_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln703_6_fu_446_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_428_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal sub_ln703_fu_450_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln703_7_fu_456_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_V_28_fu_460_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln703_fu_470_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sub_ln939_fu_488_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln703_8_fu_466_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal icmp_ln1495_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln203_fu_508_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal icmp_ln1494_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln203_1_fu_534_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln938_1_fu_557_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_Result_s_fu_560_p4 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_Result_36_fu_570_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_578_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal l_fu_586_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_fu_590_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_596_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_602_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_fu_618_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln947_fu_622_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln947_fu_628_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal lshr_ln947_fu_632_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_Result_31_fu_638_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal icmp_ln947_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln947_2_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_fu_656_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_32_fu_670_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_fu_664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln949_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln938_fu_554_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln954_fu_704_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln954_fu_716_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln954_fu_722_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal shl_ln954_fu_726_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal icmp_ln954_fu_698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln954_fu_710_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln954_fu_732_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_i_fu_690_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_fu_736_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_11_fu_744_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_s_fu_750_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_61_fu_764_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln943_fu_780_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln964_fu_784_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln964_fu_772_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_fu_790_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_14_fu_760_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_71_i_fu_796_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_37_fu_803_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_V_fu_815_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_i_fu_834_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln270_fu_848_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln262_fu_822_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal exp_V_fu_844_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_fu_866_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_72_i_fu_852_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sh_amt_1_fu_898_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_63_fu_908_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln281_fu_872_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_64_fu_930_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln283_fu_882_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln294_fu_904_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln278_fu_860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln282_fu_876_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_fu_952_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln282_fu_958_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln282_fu_972_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_fu_886_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln282_fu_978_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln284_fu_984_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln285_fu_892_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_fu_990_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln286_fu_924_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln282_fu_964_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln285_fu_996_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln284_fu_1008_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln295_fu_918_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln284_fu_1014_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln295_fu_1020_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln297_fu_946_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln285_fu_1004_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln295_fu_1026_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln285_fu_1042_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_1_fu_1048_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln288_fu_938_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln278_fu_1034_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln285_1_fu_1054_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_38_fu_826_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln461_fu_1062_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_294_ap_start : STD_LOGIC;
    signal grp_fu_294_ap_done : STD_LOGIC;
    signal grp_fu_294_ce : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_303_ap_start : STD_LOGIC;
    signal grp_fu_303_ap_done : STD_LOGIC;
    signal grp_fu_303_ce : STD_LOGIC;
    signal grp_fu_312_ap_start : STD_LOGIC;
    signal grp_fu_312_ap_done : STD_LOGIC;
    signal grp_fu_312_ce : STD_LOGIC;
    signal grp_fu_394_ap_start : STD_LOGIC;
    signal grp_fu_394_ap_done : STD_LOGIC;
    signal grp_fu_411_ap_start : STD_LOGIC;
    signal grp_fu_411_ap_done : STD_LOGIC;
    signal grp_fu_428_ap_start : STD_LOGIC;
    signal grp_fu_428_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (42 downto 0);
    signal grp_fu_294_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_303_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_312_p00 : STD_LOGIC_VECTOR (31 downto 0);

    component ip_accel_app_sdivpcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component ip_accel_app_sdivqcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;



begin
    ip_accel_app_sdivpcA_U182 : component ip_accel_app_sdivpcA
    generic map (
        ID => 1,
        NUM_STAGE => 13,
        din0_WIDTH => 9,
        din1_WIDTH => 32,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_294_ap_start,
        done => grp_fu_294_ap_done,
        din0 => grp_fu_294_p0,
        din1 => max_r_read_reg_1077,
        ce => grp_fu_294_ce,
        dout => grp_fu_294_p2);

    ip_accel_app_sdivpcA_U183 : component ip_accel_app_sdivpcA
    generic map (
        ID => 1,
        NUM_STAGE => 13,
        din0_WIDTH => 9,
        din1_WIDTH => 32,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_303_ap_start,
        done => grp_fu_303_ap_done,
        din0 => grp_fu_303_p0,
        din1 => max_g_read_reg_1082,
        ce => grp_fu_303_ce,
        dout => grp_fu_303_p2);

    ip_accel_app_sdivpcA_U184 : component ip_accel_app_sdivpcA
    generic map (
        ID => 1,
        NUM_STAGE => 13,
        din0_WIDTH => 9,
        din1_WIDTH => 32,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_312_ap_start,
        done => grp_fu_312_ap_done,
        din0 => grp_fu_312_p0,
        din1 => max_b_read_reg_1087,
        ce => grp_fu_312_ce,
        dout => grp_fu_312_p2);

    ip_accel_app_sdivqcK_U185 : component ip_accel_app_sdivqcK
    generic map (
        ID => 1,
        NUM_STAGE => 29,
        din0_WIDTH => 25,
        din1_WIDTH => 19,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_394_ap_start,
        done => grp_fu_394_ap_done,
        din0 => grp_fu_394_p0,
        din1 => grp_fu_394_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_394_p2);

    ip_accel_app_sdivqcK_U186 : component ip_accel_app_sdivqcK
    generic map (
        ID => 1,
        NUM_STAGE => 29,
        din0_WIDTH => 25,
        din1_WIDTH => 19,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_411_ap_start,
        done => grp_fu_411_ap_done,
        din0 => grp_fu_411_p0,
        din1 => grp_fu_411_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_411_p2);

    ip_accel_app_sdivqcK_U187 : component ip_accel_app_sdivqcK
    generic map (
        ID => 1,
        NUM_STAGE => 29,
        din0_WIDTH => 25,
        din1_WIDTH => 19,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_428_ap_start,
        done => grp_fu_428_ap_done,
        din0 => grp_fu_428_p0,
        din1 => grp_fu_428_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_428_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not((((max_value_V_out_full_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1)) or ((min_value_V_out_full_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1)) or ((b_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)) or ((g_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)) or ((r_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((veg_img_data_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                i_0_i_reg_267 <= i_reg_1095;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (max_b_empty_n = ap_const_logic_0) or (max_g_empty_n = ap_const_logic_0) or (max_r_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_reg_267 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    max_value_V_dc_0_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((veg_img_data_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                max_value_V_dc_0_reg_230 <= select_ln50_reg_1168;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (max_b_empty_n = ap_const_logic_0) or (max_g_empty_n = ap_const_logic_0) or (max_r_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                max_value_V_dc_0_reg_230 <= ap_const_lv29_0;
            end if; 
        end if;
    end process;

    max_value_V_load_i_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((veg_img_data_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                max_value_V_load_i_reg_255 <= select_ln50_1_reg_1173;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (max_b_empty_n = ap_const_logic_0) or (max_g_empty_n = ap_const_logic_0) or (max_r_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                max_value_V_load_i_reg_255 <= ap_const_lv56_0;
            end if; 
        end if;
    end process;

    min_value_V_dc_0_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((veg_img_data_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                min_value_V_dc_0_reg_217 <= select_ln51_reg_1178;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (max_b_empty_n = ap_const_logic_0) or (max_g_empty_n = ap_const_logic_0) or (max_r_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                min_value_V_dc_0_reg_217 <= ap_const_lv28_7FF800;
            end if; 
        end if;
    end process;

    min_value_V_load_i_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((veg_img_data_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                min_value_V_load_i_reg_243 <= select_ln51_1_reg_1183;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (max_b_empty_n = ap_const_logic_0) or (max_g_empty_n = ap_const_logic_0) or (max_r_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                min_value_V_load_i_reg_243 <= ap_const_lv56_7FF800;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((max_value_V_out_full_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1)) or ((min_value_V_out_full_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1)) or ((b_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)) or ((g_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)) or ((r_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_reg_1095 <= i_fu_284_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                icmp_ln935_reg_1152 <= icmp_ln935_fu_474_p2;
                p_Result_35_reg_1157 <= tmp_V_28_fu_460_p2(26 downto 26);
                select_ln50_1_reg_1173 <= select_ln50_1_fu_520_p3;
                select_ln50_reg_1168 <= select_ln50_fu_512_p3;
                select_ln51_1_reg_1183 <= select_ln51_1_fu_546_p3;
                select_ln51_reg_1178 <= select_ln51_fu_538_p3;
                tmp_V_29_reg_1162 <= tmp_V_29_fu_494_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (max_b_empty_n = ap_const_logic_0) or (max_g_empty_n = ap_const_logic_0) or (max_r_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                max_b_read_reg_1087 <= max_b_dout;
                max_g_read_reg_1082 <= max_g_dout;
                max_r_read_reg_1077 <= max_r_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((max_value_V_out_full_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1)) or ((min_value_V_out_full_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1)) or ((b_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)) or ((g_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)) or ((r_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0))) then
                tmp_V_26_reg_1100 <= r_channel_data_V_dout;
                tmp_V_27_reg_1120 <= b_channel_data_V_dout;
                tmp_V_reg_1110 <= g_channel_data_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, r_channel_data_V_empty_n, g_channel_data_V_empty_n, b_channel_data_V_empty_n, max_r_empty_n, max_g_empty_n, max_b_empty_n, veg_img_data_V_full_n, min_value_V_out_full_n, max_value_V_out_full_n, ap_CS_fsm_state2, icmp_ln40_fu_278_p2, ap_CS_fsm_state43)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (max_b_empty_n = ap_const_logic_0) or (max_g_empty_n = ap_const_logic_0) or (max_r_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not((((max_value_V_out_full_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1)) or ((min_value_V_out_full_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1)) or ((b_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)) or ((g_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)) or ((r_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not((((max_value_V_out_full_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1)) or ((min_value_V_out_full_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1)) or ((b_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)) or ((g_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)) or ((r_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                if (((veg_img_data_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_fu_650_p2 <= (icmp_ln947_fu_612_p2 and icmp_ln947_2_fu_644_p2);
    add_ln954_fu_704_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE7) + signed(sub_ln944_fu_590_p2));
    add_ln964_fu_790_p2 <= std_logic_vector(unsigned(sub_ln964_fu_784_p2) + unsigned(select_ln964_fu_772_p3));
    and_ln282_fu_958_p2 <= (xor_ln278_fu_952_p2 and icmp_ln282_fu_876_p2);
    and_ln284_fu_984_p2 <= (xor_ln282_fu_978_p2 and icmp_ln284_fu_886_p2);
    and_ln285_1_fu_1048_p2 <= (xor_ln285_fu_1042_p2 and and_ln284_fu_984_p2);
    and_ln285_fu_990_p2 <= (icmp_ln285_fu_892_p2 and and_ln284_fu_984_p2);
    and_ln295_fu_1020_p2 <= (xor_ln284_fu_1014_p2 and icmp_ln295_fu_918_p2);
    and_ln949_fu_678_p2 <= (xor_ln949_fu_664_p2 and p_Result_32_fu_670_p3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, max_r_empty_n, max_g_empty_n, max_b_empty_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (max_b_empty_n = ap_const_logic_0) or (max_g_empty_n = ap_const_logic_0) or (max_r_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state2_assign_proc : process(r_channel_data_V_empty_n, g_channel_data_V_empty_n, b_channel_data_V_empty_n, min_value_V_out_full_n, max_value_V_out_full_n, icmp_ln40_fu_278_p2)
    begin
                ap_block_state2 <= (((max_value_V_out_full_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1)) or ((min_value_V_out_full_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1)) or ((b_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)) or ((g_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)) or ((r_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)));
    end process;


    ap_done_assign_proc : process(ap_done_reg, r_channel_data_V_empty_n, g_channel_data_V_empty_n, b_channel_data_V_empty_n, min_value_V_out_full_n, max_value_V_out_full_n, ap_CS_fsm_state2, icmp_ln40_fu_278_p2)
    begin
        if ((not((((max_value_V_out_full_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1)) or ((min_value_V_out_full_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1)) or ((b_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)) or ((g_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)) or ((r_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(r_channel_data_V_empty_n, g_channel_data_V_empty_n, b_channel_data_V_empty_n, min_value_V_out_full_n, max_value_V_out_full_n, ap_CS_fsm_state2, icmp_ln40_fu_278_p2)
    begin
        if ((not((((max_value_V_out_full_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1)) or ((min_value_V_out_full_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1)) or ((b_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)) or ((g_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)) or ((r_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    b_channel_data_V_blk_n_assign_proc : process(b_channel_data_V_empty_n, ap_CS_fsm_state2, icmp_ln40_fu_278_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0))) then 
            b_channel_data_V_blk_n <= b_channel_data_V_empty_n;
        else 
            b_channel_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    b_channel_data_V_read_assign_proc : process(r_channel_data_V_empty_n, g_channel_data_V_empty_n, b_channel_data_V_empty_n, min_value_V_out_full_n, max_value_V_out_full_n, ap_CS_fsm_state2, icmp_ln40_fu_278_p2)
    begin
        if ((not((((max_value_V_out_full_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1)) or ((min_value_V_out_full_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1)) or ((b_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)) or ((g_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)) or ((r_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0))) then 
            b_channel_data_V_read <= ap_const_logic_1;
        else 
            b_channel_data_V_read <= ap_const_logic_0;
        end if; 
    end process;

    denominator_V_1_fu_371_p3 <= 
        ap_const_lv19_100 when (icmp_ln1498_fu_365_p2(0) = '1') else 
        denominator_V_fu_357_p3;
    denominator_V_fu_357_p3 <= (ret_V_16_fu_351_p2 & ap_const_lv8_0);
    exp_V_fu_844_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i_fu_834_p4),9));

    g_channel_data_V_blk_n_assign_proc : process(g_channel_data_V_empty_n, ap_CS_fsm_state2, icmp_ln40_fu_278_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0))) then 
            g_channel_data_V_blk_n <= g_channel_data_V_empty_n;
        else 
            g_channel_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    g_channel_data_V_read_assign_proc : process(r_channel_data_V_empty_n, g_channel_data_V_empty_n, b_channel_data_V_empty_n, min_value_V_out_full_n, max_value_V_out_full_n, ap_CS_fsm_state2, icmp_ln40_fu_278_p2)
    begin
        if ((not((((max_value_V_out_full_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1)) or ((min_value_V_out_full_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1)) or ((b_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)) or ((g_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)) or ((r_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0))) then 
            g_channel_data_V_read <= ap_const_logic_1;
        else 
            g_channel_data_V_read <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_294_ap_start_assign_proc : process(r_channel_data_V_empty_n, g_channel_data_V_empty_n, b_channel_data_V_empty_n, min_value_V_out_full_n, max_value_V_out_full_n, ap_CS_fsm_state2, icmp_ln40_fu_278_p2)
    begin
        if ((not((((max_value_V_out_full_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1)) or ((min_value_V_out_full_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1)) or ((b_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)) or ((g_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)) or ((r_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0))) then 
            grp_fu_294_ap_start <= ap_const_logic_1;
        else 
            grp_fu_294_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_294_ce_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state14, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_294_ce <= ap_const_logic_1;
        else 
            grp_fu_294_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_294_p0 <= grp_fu_294_p00(9 - 1 downto 0);
    grp_fu_294_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_channel_data_V_dout),32));

    grp_fu_303_ap_start_assign_proc : process(r_channel_data_V_empty_n, g_channel_data_V_empty_n, b_channel_data_V_empty_n, min_value_V_out_full_n, max_value_V_out_full_n, ap_CS_fsm_state2, icmp_ln40_fu_278_p2)
    begin
        if ((not((((max_value_V_out_full_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1)) or ((min_value_V_out_full_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1)) or ((b_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)) or ((g_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)) or ((r_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0))) then 
            grp_fu_303_ap_start <= ap_const_logic_1;
        else 
            grp_fu_303_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_303_ce_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state14, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_303_ce <= ap_const_logic_1;
        else 
            grp_fu_303_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_303_p0 <= grp_fu_303_p00(9 - 1 downto 0);
    grp_fu_303_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(g_channel_data_V_dout),32));

    grp_fu_312_ap_start_assign_proc : process(r_channel_data_V_empty_n, g_channel_data_V_empty_n, b_channel_data_V_empty_n, min_value_V_out_full_n, max_value_V_out_full_n, ap_CS_fsm_state2, icmp_ln40_fu_278_p2)
    begin
        if ((not((((max_value_V_out_full_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1)) or ((min_value_V_out_full_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1)) or ((b_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)) or ((g_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)) or ((r_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0))) then 
            grp_fu_312_ap_start <= ap_const_logic_1;
        else 
            grp_fu_312_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_312_ce_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state14, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_312_ce <= ap_const_logic_1;
        else 
            grp_fu_312_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_312_p0 <= grp_fu_312_p00(9 - 1 downto 0);
    grp_fu_312_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_channel_data_V_dout),32));

    grp_fu_394_ap_start_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_394_ap_start <= ap_const_logic_1;
        else 
            grp_fu_394_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_394_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_379_p3),25));
    grp_fu_394_p1 <= sext_ln1148_fu_390_p1(19 - 1 downto 0);

    grp_fu_411_ap_start_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_411_ap_start <= ap_const_logic_1;
        else 
            grp_fu_411_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_411_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1148_1_fu_400_p3),25));
    grp_fu_411_p1 <= sext_ln1148_fu_390_p1(19 - 1 downto 0);

    grp_fu_428_ap_start_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_428_ap_start <= ap_const_logic_1;
        else 
            grp_fu_428_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_428_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1148_2_fu_417_p3),25));
    grp_fu_428_p1 <= sext_ln1148_fu_390_p1(19 - 1 downto 0);
    i_fu_284_p2 <= std_logic_vector(unsigned(i_0_i_reg_267) + unsigned(ap_const_lv16_1));
    icmp_ln1494_fu_528_p2 <= "1" when (signed(min_value_V_load_i_reg_243) > signed(sext_ln703_8_fu_466_p1)) else "0";
    icmp_ln1495_fu_502_p2 <= "1" when (signed(max_value_V_load_i_reg_255) < signed(sext_ln703_8_fu_466_p1)) else "0";
    icmp_ln1498_fu_365_p2 <= "1" when (ret_V_16_fu_351_p2 = ap_const_lv11_0) else "0";
    icmp_ln278_fu_860_p2 <= "1" when (trunc_ln262_fu_822_p1 = ap_const_lv31_0) else "0";
    icmp_ln282_fu_876_p2 <= "1" when (p_Result_i_fu_834_p4 = ap_const_lv8_96) else "0";
    icmp_ln284_fu_886_p2 <= "1" when (signed(sh_amt_fu_866_p2) > signed(ap_const_lv9_0)) else "0";
    icmp_ln285_fu_892_p2 <= "1" when (signed(sh_amt_fu_866_p2) < signed(ap_const_lv9_19)) else "0";
    icmp_ln295_fu_918_p2 <= "1" when (signed(tmp_63_fu_908_p4) < signed(ap_const_lv3_1)) else "0";
    icmp_ln40_fu_278_p2 <= "1" when (i_0_i_reg_267 = ap_const_lv16_E100) else "0";
    icmp_ln935_fu_474_p2 <= "1" when (sub_ln703_fu_450_p2 = sext_ln703_7_fu_456_p1) else "0";
    icmp_ln947_2_fu_644_p2 <= "0" when (p_Result_31_fu_638_p2 = ap_const_lv56_0) else "1";
    icmp_ln947_fu_612_p2 <= "1" when (signed(tmp_fu_602_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln954_fu_698_p2 <= "1" when (signed(lsb_index_fu_596_p2) > signed(ap_const_lv32_0)) else "0";
    l_fu_586_p1 <= tmp_i_fu_578_p3(32 - 1 downto 0);
        lhs_V_4_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_12_fu_333_p2),11));

        lhs_V_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_fu_317_p1),10));

    lsb_index_fu_596_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE8) + signed(sub_ln944_fu_590_p2));
    lshr_ln286_fu_924_p2 <= std_logic_vector(shift_right(unsigned(tmp_72_i_fu_852_p3),to_integer(unsigned('0' & sext_ln281_fu_872_p1(24-1 downto 0)))));
    lshr_ln947_fu_632_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv56_FFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln947_fu_628_p1(31-1 downto 0)))));
    lshr_ln954_fu_710_p2 <= std_logic_vector(shift_right(unsigned(zext_ln938_fu_554_p1),to_integer(unsigned('0' & add_ln954_fu_704_p2(31-1 downto 0)))));
    m_11_fu_744_p2 <= std_logic_vector(unsigned(or_ln_i_fu_690_p3) + unsigned(m_fu_736_p3));
    m_14_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_s_fu_750_p4),32));
    m_fu_736_p3 <= 
        lshr_ln954_fu_710_p2 when (icmp_ln954_fu_698_p2(0) = '1') else 
        trunc_ln954_fu_732_p1;
    m_s_fu_750_p4 <= m_11_fu_744_p2(31 downto 1);

    max_b_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, max_b_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            max_b_blk_n <= max_b_empty_n;
        else 
            max_b_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    max_b_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, max_r_empty_n, max_g_empty_n, max_b_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (max_b_empty_n = ap_const_logic_0) or (max_g_empty_n = ap_const_logic_0) or (max_r_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            max_b_read <= ap_const_logic_1;
        else 
            max_b_read <= ap_const_logic_0;
        end if; 
    end process;


    max_g_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, max_g_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            max_g_blk_n <= max_g_empty_n;
        else 
            max_g_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    max_g_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, max_r_empty_n, max_g_empty_n, max_b_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (max_b_empty_n = ap_const_logic_0) or (max_g_empty_n = ap_const_logic_0) or (max_r_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            max_g_read <= ap_const_logic_1;
        else 
            max_g_read <= ap_const_logic_0;
        end if; 
    end process;


    max_r_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, max_r_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            max_r_blk_n <= max_r_empty_n;
        else 
            max_r_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    max_r_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, max_r_empty_n, max_g_empty_n, max_b_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (max_b_empty_n = ap_const_logic_0) or (max_g_empty_n = ap_const_logic_0) or (max_r_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            max_r_read <= ap_const_logic_1;
        else 
            max_r_read <= ap_const_logic_0;
        end if; 
    end process;


    max_value_V_out_blk_n_assign_proc : process(max_value_V_out_full_n, ap_CS_fsm_state2, icmp_ln40_fu_278_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1))) then 
            max_value_V_out_blk_n <= max_value_V_out_full_n;
        else 
            max_value_V_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    max_value_V_out_din <= max_value_V_dc_0_reg_230;

    max_value_V_out_write_assign_proc : process(r_channel_data_V_empty_n, g_channel_data_V_empty_n, b_channel_data_V_empty_n, min_value_V_out_full_n, max_value_V_out_full_n, ap_CS_fsm_state2, icmp_ln40_fu_278_p2)
    begin
        if ((not((((max_value_V_out_full_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1)) or ((min_value_V_out_full_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1)) or ((b_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)) or ((g_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)) or ((r_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1))) then 
            max_value_V_out_write <= ap_const_logic_1;
        else 
            max_value_V_out_write <= ap_const_logic_0;
        end if; 
    end process;


    min_value_V_out_blk_n_assign_proc : process(min_value_V_out_full_n, ap_CS_fsm_state2, icmp_ln40_fu_278_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1))) then 
            min_value_V_out_blk_n <= min_value_V_out_full_n;
        else 
            min_value_V_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    min_value_V_out_din <= min_value_V_dc_0_reg_217;

    min_value_V_out_write_assign_proc : process(r_channel_data_V_empty_n, g_channel_data_V_empty_n, b_channel_data_V_empty_n, min_value_V_out_full_n, max_value_V_out_full_n, ap_CS_fsm_state2, icmp_ln40_fu_278_p2)
    begin
        if ((not((((max_value_V_out_full_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1)) or ((min_value_V_out_full_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1)) or ((b_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)) or ((g_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)) or ((r_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1))) then 
            min_value_V_out_write <= ap_const_logic_1;
        else 
            min_value_V_out_write <= ap_const_logic_0;
        end if; 
    end process;

    or_ln282_fu_972_p2 <= (icmp_ln282_fu_876_p2 or icmp_ln278_fu_860_p2);
    or_ln284_fu_1008_p2 <= (or_ln282_fu_972_p2 or icmp_ln284_fu_886_p2);
    or_ln949_fu_684_p2 <= (and_ln949_fu_678_p2 or a_fu_650_p2);
    or_ln_i_fu_690_p3 <= (ap_const_lv31_0 & or_ln949_fu_684_p2);
    p_Result_31_fu_638_p2 <= (zext_ln938_1_fu_557_p1 and lshr_ln947_fu_632_p2);
    p_Result_32_fu_670_p3 <= zext_ln938_1_fu_557_p1(to_integer(unsigned(lsb_index_fu_596_p2)) downto to_integer(unsigned(lsb_index_fu_596_p2))) when (to_integer(unsigned(lsb_index_fu_596_p2))>= 0 and to_integer(unsigned(lsb_index_fu_596_p2))<=55) else "-";
    p_Result_35_fu_480_p3 <= tmp_V_28_fu_460_p2(26 downto 26);
    p_Result_36_fu_570_p3 <= (ap_const_lv8_FF & p_Result_s_fu_560_p4);
    p_Result_37_fu_803_p5 <= (tmp_71_i_fu_796_p3 & m_14_fu_760_p1(22 downto 0));
    p_Result_38_fu_826_p3 <= reg_V_fu_815_p3(31 downto 31);
    p_Result_i_fu_834_p4 <= reg_V_fu_815_p3(30 downto 23);
    
    p_Result_s_fu_560_p4_proc : process(zext_ln938_1_fu_557_p1)
    variable vlo_cpy : STD_LOGIC_VECTOR(56+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(56+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(56 - 1 downto 0);
    variable p_Result_s_fu_560_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(56 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(56 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(56 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_37(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := zext_ln938_1_fu_557_p1;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(56-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(56-1-unsigned(ap_const_lv32_37(6-1 downto 0)));
            for p_Result_s_fu_560_p4_i in 0 to 56-1 loop
                v0_cpy(p_Result_s_fu_560_p4_i) := zext_ln938_1_fu_557_p1(56-1-p_Result_s_fu_560_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(56-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_560_p4 <= resvalue(56-1 downto 0);
    end process;


    r_channel_data_V_blk_n_assign_proc : process(r_channel_data_V_empty_n, ap_CS_fsm_state2, icmp_ln40_fu_278_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0))) then 
            r_channel_data_V_blk_n <= r_channel_data_V_empty_n;
        else 
            r_channel_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    r_channel_data_V_read_assign_proc : process(r_channel_data_V_empty_n, g_channel_data_V_empty_n, b_channel_data_V_empty_n, min_value_V_out_full_n, max_value_V_out_full_n, ap_CS_fsm_state2, icmp_ln40_fu_278_p2)
    begin
        if ((not((((max_value_V_out_full_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1)) or ((min_value_V_out_full_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_1)) or ((b_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)) or ((g_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)) or ((r_channel_data_V_empty_n = ap_const_logic_0) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln40_fu_278_p2 = ap_const_lv1_0))) then 
            r_channel_data_V_read <= ap_const_logic_1;
        else 
            r_channel_data_V_read <= ap_const_logic_0;
        end if; 
    end process;

    reg_V_fu_815_p3 <= 
        ap_const_lv32_0 when (icmp_ln935_reg_1152(0) = '1') else 
        p_Result_37_fu_803_p5;
    ret_V_11_fu_321_p1 <= grp_fu_303_p2(9 - 1 downto 0);
    ret_V_12_fu_333_p2 <= std_logic_vector(signed(rhs_V_fu_329_p1) + signed(lhs_V_fu_325_p1));
    ret_V_14_fu_339_p1 <= grp_fu_312_p2(9 - 1 downto 0);
    ret_V_16_fu_351_p2 <= std_logic_vector(signed(rhs_V_5_fu_347_p1) + signed(lhs_V_4_fu_343_p1));
    ret_V_fu_317_p1 <= grp_fu_294_p2(9 - 1 downto 0);
        rhs_V_5_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_14_fu_339_p1),11));

        rhs_V_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_11_fu_321_p1),10));

    select_ln278_fu_1034_p3 <= 
        ap_const_lv32_0 when (icmp_ln278_fu_860_p2(0) = '1') else 
        select_ln295_fu_1026_p3;
    select_ln282_fu_964_p3 <= 
        tmp_72_i_fu_852_p3 when (and_ln282_fu_958_p2(0) = '1') else 
        ap_const_lv24_0;
    select_ln285_1_fu_1054_p3 <= 
        select_ln288_fu_938_p3 when (and_ln285_1_fu_1048_p2(0) = '1') else 
        select_ln278_fu_1034_p3;
    select_ln285_fu_996_p3 <= 
        lshr_ln286_fu_924_p2 when (and_ln285_fu_990_p2(0) = '1') else 
        select_ln282_fu_964_p3;
    select_ln288_fu_938_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_64_fu_930_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln295_fu_1026_p3 <= 
        shl_ln297_fu_946_p2 when (and_ln295_fu_1020_p2(0) = '1') else 
        zext_ln285_fu_1004_p1;
    select_ln50_1_fu_520_p3 <= 
        sext_ln703_8_fu_466_p1 when (icmp_ln1495_fu_502_p2(0) = '1') else 
        max_value_V_load_i_reg_255;
    select_ln50_fu_512_p3 <= 
        sext_ln203_fu_508_p1 when (icmp_ln1495_fu_502_p2(0) = '1') else 
        max_value_V_dc_0_reg_230;
    select_ln51_1_fu_546_p3 <= 
        sext_ln703_8_fu_466_p1 when (icmp_ln1494_fu_528_p2(0) = '1') else 
        min_value_V_load_i_reg_243;
    select_ln51_fu_538_p3 <= 
        sext_ln203_1_fu_534_p1 when (icmp_ln1494_fu_528_p2(0) = '1') else 
        min_value_V_dc_0_reg_217;
    select_ln964_fu_772_p3 <= 
        ap_const_lv8_7F when (tmp_61_fu_764_p3(0) = '1') else 
        ap_const_lv8_7E;
        sext_ln1148_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(denominator_V_1_fu_371_p3),25));

        sext_ln203_1_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_V_28_fu_460_p2),28));

        sext_ln203_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_V_28_fu_460_p2),29));

        sext_ln281_fu_872_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_fu_866_p2),24));

        sext_ln703_6_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_411_p2),27));

        sext_ln703_7_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_428_p2),27));

        sext_ln703_8_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_V_28_fu_460_p2),56));

        sext_ln703_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln6_fu_434_p3),27));

    sh_amt_1_fu_898_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sh_amt_fu_866_p2));
    sh_amt_fu_866_p2 <= std_logic_vector(unsigned(ap_const_lv9_96) - unsigned(exp_V_fu_844_p1));
    shl_ln1148_1_fu_400_p3 <= (tmp_V_26_reg_1100 & ap_const_lv16_0);
    shl_ln1148_2_fu_417_p3 <= (tmp_V_27_reg_1120 & ap_const_lv16_0);
    shl_ln297_fu_946_p2 <= std_logic_vector(shift_left(unsigned(zext_ln283_fu_882_p1),to_integer(unsigned('0' & zext_ln294_fu_904_p1(31-1 downto 0)))));
    shl_ln6_fu_434_p3 <= (grp_fu_394_p2 & ap_const_lv1_0);
    shl_ln954_fu_726_p2 <= std_logic_vector(shift_left(unsigned(zext_ln938_1_fu_557_p1),to_integer(unsigned('0' & zext_ln954_fu_722_p1(31-1 downto 0)))));
    shl_ln_fu_379_p3 <= (tmp_V_reg_1110 & ap_const_lv16_0);
    sub_ln461_fu_1062_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(select_ln285_1_fu_1054_p3));
    sub_ln703_fu_450_p2 <= std_logic_vector(signed(sext_ln703_fu_442_p1) - signed(sext_ln703_6_fu_446_p1));
    sub_ln939_fu_488_p2 <= std_logic_vector(unsigned(ap_const_lv26_0) - unsigned(trunc_ln703_fu_470_p1));
    sub_ln944_fu_590_p2 <= std_logic_vector(unsigned(ap_const_lv32_38) - unsigned(l_fu_586_p1));
    sub_ln947_fu_622_p2 <= std_logic_vector(unsigned(ap_const_lv6_11) - unsigned(trunc_ln947_fu_618_p1));
    sub_ln954_fu_716_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_fu_590_p2));
    sub_ln964_fu_784_p2 <= std_logic_vector(unsigned(ap_const_lv8_30) - unsigned(trunc_ln943_fu_780_p1));
    tmp_60_fu_656_p3 <= lsb_index_fu_596_p2(31 downto 31);
    tmp_61_fu_764_p3 <= m_11_fu_744_p2(25 downto 25);
    tmp_63_fu_908_p4 <= sh_amt_1_fu_898_p2(7 downto 5);
    tmp_64_fu_930_p3 <= reg_V_fu_815_p3(31 downto 31);
    tmp_71_i_fu_796_p3 <= (p_Result_35_reg_1157 & add_ln964_fu_790_p2);
    tmp_72_i_fu_852_p3 <= (ap_const_lv1_1 & trunc_ln270_fu_848_p1);
    tmp_V_28_fu_460_p2 <= std_logic_vector(unsigned(sub_ln703_fu_450_p2) - unsigned(sext_ln703_7_fu_456_p1));
    tmp_V_29_fu_494_p3 <= 
        sub_ln939_fu_488_p2 when (p_Result_35_fu_480_p3(0) = '1') else 
        trunc_ln703_fu_470_p1;
    tmp_fu_602_p4 <= lsb_index_fu_596_p2(31 downto 1);
    
    tmp_i_fu_578_p3_proc : process(p_Result_36_fu_570_p3)
    begin
        tmp_i_fu_578_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if p_Result_36_fu_570_p3(i) = '1' then
                tmp_i_fu_578_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    trunc_ln262_fu_822_p1 <= reg_V_fu_815_p3(31 - 1 downto 0);
    trunc_ln270_fu_848_p1 <= reg_V_fu_815_p3(23 - 1 downto 0);
    trunc_ln703_fu_470_p1 <= tmp_V_28_fu_460_p2(26 - 1 downto 0);
    trunc_ln943_fu_780_p1 <= tmp_i_fu_578_p3(8 - 1 downto 0);
    trunc_ln947_fu_618_p1 <= sub_ln944_fu_590_p2(6 - 1 downto 0);
    trunc_ln954_fu_732_p1 <= shl_ln954_fu_726_p2(32 - 1 downto 0);

    veg_img_data_V_blk_n_assign_proc : process(veg_img_data_V_full_n, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            veg_img_data_V_blk_n <= veg_img_data_V_full_n;
        else 
            veg_img_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    veg_img_data_V_din <= 
        sub_ln461_fu_1062_p2 when (p_Result_38_fu_826_p3(0) = '1') else 
        select_ln285_1_fu_1054_p3;

    veg_img_data_V_write_assign_proc : process(veg_img_data_V_full_n, ap_CS_fsm_state43)
    begin
        if (((veg_img_data_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            veg_img_data_V_write <= ap_const_logic_1;
        else 
            veg_img_data_V_write <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln278_fu_952_p2 <= (icmp_ln278_fu_860_p2 xor ap_const_lv1_1);
    xor_ln282_fu_978_p2 <= (or_ln282_fu_972_p2 xor ap_const_lv1_1);
    xor_ln284_fu_1014_p2 <= (or_ln284_fu_1008_p2 xor ap_const_lv1_1);
    xor_ln285_fu_1042_p2 <= (icmp_ln285_fu_892_p2 xor ap_const_lv1_1);
    xor_ln949_fu_664_p2 <= (tmp_60_fu_656_p3 xor ap_const_lv1_1);
    zext_ln283_fu_882_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_72_i_fu_852_p3),32));
    zext_ln285_fu_1004_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln285_fu_996_p3),32));
    zext_ln294_fu_904_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_amt_1_fu_898_p2),32));
    zext_ln938_1_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_29_reg_1162),56));
    zext_ln938_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_29_reg_1162),32));
    zext_ln947_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_fu_622_p2),56));
    zext_ln954_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln954_fu_716_p2),56));
end behav;
