-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity get_crop_lines is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    bottom_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    bottom_data_V_empty_n : IN STD_LOGIC;
    bottom_data_V_read : OUT STD_LOGIC;
    eroded_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    eroded_data_V_empty_n : IN STD_LOGIC;
    eroded_data_V_read : OUT STD_LOGIC;
    weed_mask_tmp_data_V_din : OUT STD_LOGIC_VECTOR (1 downto 0);
    weed_mask_tmp_data_V_full_n : IN STD_LOGIC;
    weed_mask_tmp_data_V_write : OUT STD_LOGIC );
end;


architecture behav of get_crop_lines is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal line_bases_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal line_bases_ce0 : STD_LOGIC;
    signal line_bases_we0 : STD_LOGIC;
    signal line_bases_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal line_bases_ce1 : STD_LOGIC;
    signal line_bases_we1 : STD_LOGIC;
    signal centroids_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal centroids_ce0 : STD_LOGIC;
    signal centroids_we0 : STD_LOGIC;
    signal centroids_d0 : STD_LOGIC_VECTOR (47 downto 0);
    signal centroids_q0 : STD_LOGIC_VECTOR (47 downto 0);
    signal lines_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal lines_ce0 : STD_LOGIC;
    signal lines_we0 : STD_LOGIC;
    signal lines_q0 : STD_LOGIC_VECTOR (64 downto 0);
    signal grp_get_lines_lsl_fu_76_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal lines_founded_reg_109 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_get_lines_lsl_fu_76_ap_ready : STD_LOGIC;
    signal grp_get_lines_lsl_fu_76_ap_done : STD_LOGIC;
    signal grp_extr_half_1_cent_fu_48_ap_start : STD_LOGIC;
    signal grp_extr_half_1_cent_fu_48_ap_done : STD_LOGIC;
    signal grp_extr_half_1_cent_fu_48_ap_idle : STD_LOGIC;
    signal grp_extr_half_1_cent_fu_48_ap_ready : STD_LOGIC;
    signal grp_extr_half_1_cent_fu_48_line_bases_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_extr_half_1_cent_fu_48_line_bases_ce0 : STD_LOGIC;
    signal grp_extr_half_1_cent_fu_48_eroded_data_V_read : STD_LOGIC;
    signal grp_extr_half_1_cent_fu_48_centroids_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_extr_half_1_cent_fu_48_centroids_ce0 : STD_LOGIC;
    signal grp_extr_half_1_cent_fu_48_centroids_we0 : STD_LOGIC;
    signal grp_extr_half_1_cent_fu_48_centroids_d0 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_extr_half_2_cent_fu_62_ap_start : STD_LOGIC;
    signal grp_extr_half_2_cent_fu_62_ap_done : STD_LOGIC;
    signal grp_extr_half_2_cent_fu_62_ap_idle : STD_LOGIC;
    signal grp_extr_half_2_cent_fu_62_ap_ready : STD_LOGIC;
    signal grp_extr_half_2_cent_fu_62_line_bases_active_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_extr_half_2_cent_fu_62_line_bases_active_ce0 : STD_LOGIC;
    signal grp_extr_half_2_cent_fu_62_eroded_data_V_read : STD_LOGIC;
    signal grp_extr_half_2_cent_fu_62_centroids_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_extr_half_2_cent_fu_62_centroids_ce0 : STD_LOGIC;
    signal grp_extr_half_2_cent_fu_62_centroids_we0 : STD_LOGIC;
    signal grp_extr_half_2_cent_fu_62_centroids_d0 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_get_lines_lsl_fu_76_ap_start : STD_LOGIC;
    signal grp_get_lines_lsl_fu_76_ap_idle : STD_LOGIC;
    signal grp_get_lines_lsl_fu_76_line_bases_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_get_lines_lsl_fu_76_line_bases_ce0 : STD_LOGIC;
    signal grp_get_lines_lsl_fu_76_centroids_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_get_lines_lsl_fu_76_centroids_ce0 : STD_LOGIC;
    signal grp_get_lines_lsl_fu_76_lines_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_get_lines_lsl_fu_76_lines_ce0 : STD_LOGIC;
    signal grp_get_lines_lsl_fu_76_lines_we0 : STD_LOGIC;
    signal grp_get_lines_lsl_fu_76_lines_d0 : STD_LOGIC_VECTOR (64 downto 0);
    signal grp_get_weed_mask_fu_88_ap_start : STD_LOGIC;
    signal grp_get_weed_mask_fu_88_ap_done : STD_LOGIC;
    signal grp_get_weed_mask_fu_88_ap_idle : STD_LOGIC;
    signal grp_get_weed_mask_fu_88_ap_ready : STD_LOGIC;
    signal grp_get_weed_mask_fu_88_weed_mask_tmp_data_V_din : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_get_weed_mask_fu_88_weed_mask_tmp_data_V_write : STD_LOGIC;
    signal grp_get_weed_mask_fu_88_lines_founded_read : STD_LOGIC;
    signal grp_get_weed_mask_fu_88_lines_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_get_weed_mask_fu_88_lines_ce0 : STD_LOGIC;
    signal grp_get_line_bases_fu_97_ap_start : STD_LOGIC;
    signal grp_get_line_bases_fu_97_ap_done : STD_LOGIC;
    signal grp_get_line_bases_fu_97_ap_idle : STD_LOGIC;
    signal grp_get_line_bases_fu_97_ap_ready : STD_LOGIC;
    signal grp_get_line_bases_fu_97_bottom_data_V_read : STD_LOGIC;
    signal grp_get_line_bases_fu_97_line_bases_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_get_line_bases_fu_97_line_bases_ce0 : STD_LOGIC;
    signal grp_get_line_bases_fu_97_line_bases_we0 : STD_LOGIC;
    signal grp_get_line_bases_fu_97_line_bases_d0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_get_line_bases_fu_97_line_bases_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_get_line_bases_fu_97_line_bases_ce1 : STD_LOGIC;
    signal grp_get_line_bases_fu_97_line_bases_we1 : STD_LOGIC;
    signal grp_get_line_bases_fu_97_line_bases_d1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_extr_half_1_cent_fu_48_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_extr_half_2_cent_fu_62_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_get_lines_lsl_fu_76_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_get_weed_mask_fu_88_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_get_line_bases_fu_97_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call3 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1 : BOOLEAN;

    component extr_half_1_cent IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        line_bases_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        line_bases_ce0 : OUT STD_LOGIC;
        line_bases_q0 : IN STD_LOGIC_VECTOR (16 downto 0);
        eroded_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        eroded_data_V_empty_n : IN STD_LOGIC;
        eroded_data_V_read : OUT STD_LOGIC;
        centroids_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        centroids_ce0 : OUT STD_LOGIC;
        centroids_we0 : OUT STD_LOGIC;
        centroids_d0 : OUT STD_LOGIC_VECTOR (47 downto 0);
        centroids_q0 : IN STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component extr_half_2_cent IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        line_bases_active_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        line_bases_active_ce0 : OUT STD_LOGIC;
        line_bases_active_q0 : IN STD_LOGIC_VECTOR (16 downto 0);
        eroded_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        eroded_data_V_empty_n : IN STD_LOGIC;
        eroded_data_V_read : OUT STD_LOGIC;
        centroids_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        centroids_ce0 : OUT STD_LOGIC;
        centroids_we0 : OUT STD_LOGIC;
        centroids_d0 : OUT STD_LOGIC_VECTOR (47 downto 0);
        centroids_q0 : IN STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component get_lines_lsl IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        line_bases_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        line_bases_ce0 : OUT STD_LOGIC;
        line_bases_q0 : IN STD_LOGIC_VECTOR (16 downto 0);
        centroids_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        centroids_ce0 : OUT STD_LOGIC;
        centroids_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
        lines_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        lines_ce0 : OUT STD_LOGIC;
        lines_we0 : OUT STD_LOGIC;
        lines_d0 : OUT STD_LOGIC_VECTOR (64 downto 0);
        lines_q0 : IN STD_LOGIC_VECTOR (64 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component get_weed_mask IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        weed_mask_tmp_data_V_din : OUT STD_LOGIC_VECTOR (1 downto 0);
        weed_mask_tmp_data_V_full_n : IN STD_LOGIC;
        weed_mask_tmp_data_V_write : OUT STD_LOGIC;
        lines_founded_read : IN STD_LOGIC;
        lines_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        lines_ce0 : OUT STD_LOGIC;
        lines_q0 : IN STD_LOGIC_VECTOR (64 downto 0) );
    end component;


    component get_line_bases IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        bottom_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        bottom_data_V_empty_n : IN STD_LOGIC;
        bottom_data_V_read : OUT STD_LOGIC;
        line_bases_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        line_bases_ce0 : OUT STD_LOGIC;
        line_bases_we0 : OUT STD_LOGIC;
        line_bases_d0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        line_bases_q0 : IN STD_LOGIC_VECTOR (16 downto 0);
        line_bases_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        line_bases_ce1 : OUT STD_LOGIC;
        line_bases_we1 : OUT STD_LOGIC;
        line_bases_d1 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component get_crop_lines_li2iS IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (16 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component get_crop_lines_ce3i2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (47 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component get_crop_lines_li4jc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (64 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (64 downto 0) );
    end component;



begin
    line_bases_U : component get_crop_lines_li2iS
    generic map (
        DataWidth => 17,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_bases_address0,
        ce0 => line_bases_ce0,
        we0 => line_bases_we0,
        d0 => grp_get_line_bases_fu_97_line_bases_d0,
        q0 => line_bases_q0,
        address1 => grp_get_line_bases_fu_97_line_bases_address1,
        ce1 => line_bases_ce1,
        we1 => line_bases_we1,
        d1 => grp_get_line_bases_fu_97_line_bases_d1);

    centroids_U : component get_crop_lines_ce3i2
    generic map (
        DataWidth => 48,
        AddressRange => 72,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => centroids_address0,
        ce0 => centroids_ce0,
        we0 => centroids_we0,
        d0 => centroids_d0,
        q0 => centroids_q0);

    lines_U : component get_crop_lines_li4jc
    generic map (
        DataWidth => 65,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lines_address0,
        ce0 => lines_ce0,
        we0 => lines_we0,
        d0 => grp_get_lines_lsl_fu_76_lines_d0,
        q0 => lines_q0);

    grp_extr_half_1_cent_fu_48 : component extr_half_1_cent
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_extr_half_1_cent_fu_48_ap_start,
        ap_done => grp_extr_half_1_cent_fu_48_ap_done,
        ap_idle => grp_extr_half_1_cent_fu_48_ap_idle,
        ap_ready => grp_extr_half_1_cent_fu_48_ap_ready,
        line_bases_address0 => grp_extr_half_1_cent_fu_48_line_bases_address0,
        line_bases_ce0 => grp_extr_half_1_cent_fu_48_line_bases_ce0,
        line_bases_q0 => line_bases_q0,
        eroded_data_V_dout => eroded_data_V_dout,
        eroded_data_V_empty_n => eroded_data_V_empty_n,
        eroded_data_V_read => grp_extr_half_1_cent_fu_48_eroded_data_V_read,
        centroids_address0 => grp_extr_half_1_cent_fu_48_centroids_address0,
        centroids_ce0 => grp_extr_half_1_cent_fu_48_centroids_ce0,
        centroids_we0 => grp_extr_half_1_cent_fu_48_centroids_we0,
        centroids_d0 => grp_extr_half_1_cent_fu_48_centroids_d0,
        centroids_q0 => centroids_q0);

    grp_extr_half_2_cent_fu_62 : component extr_half_2_cent
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_extr_half_2_cent_fu_62_ap_start,
        ap_done => grp_extr_half_2_cent_fu_62_ap_done,
        ap_idle => grp_extr_half_2_cent_fu_62_ap_idle,
        ap_ready => grp_extr_half_2_cent_fu_62_ap_ready,
        line_bases_active_address0 => grp_extr_half_2_cent_fu_62_line_bases_active_address0,
        line_bases_active_ce0 => grp_extr_half_2_cent_fu_62_line_bases_active_ce0,
        line_bases_active_q0 => line_bases_q0,
        eroded_data_V_dout => eroded_data_V_dout,
        eroded_data_V_empty_n => eroded_data_V_empty_n,
        eroded_data_V_read => grp_extr_half_2_cent_fu_62_eroded_data_V_read,
        centroids_address0 => grp_extr_half_2_cent_fu_62_centroids_address0,
        centroids_ce0 => grp_extr_half_2_cent_fu_62_centroids_ce0,
        centroids_we0 => grp_extr_half_2_cent_fu_62_centroids_we0,
        centroids_d0 => grp_extr_half_2_cent_fu_62_centroids_d0,
        centroids_q0 => centroids_q0);

    grp_get_lines_lsl_fu_76 : component get_lines_lsl
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_get_lines_lsl_fu_76_ap_start,
        ap_done => grp_get_lines_lsl_fu_76_ap_done,
        ap_idle => grp_get_lines_lsl_fu_76_ap_idle,
        ap_ready => grp_get_lines_lsl_fu_76_ap_ready,
        line_bases_address0 => grp_get_lines_lsl_fu_76_line_bases_address0,
        line_bases_ce0 => grp_get_lines_lsl_fu_76_line_bases_ce0,
        line_bases_q0 => line_bases_q0,
        centroids_address0 => grp_get_lines_lsl_fu_76_centroids_address0,
        centroids_ce0 => grp_get_lines_lsl_fu_76_centroids_ce0,
        centroids_q0 => centroids_q0,
        lines_address0 => grp_get_lines_lsl_fu_76_lines_address0,
        lines_ce0 => grp_get_lines_lsl_fu_76_lines_ce0,
        lines_we0 => grp_get_lines_lsl_fu_76_lines_we0,
        lines_d0 => grp_get_lines_lsl_fu_76_lines_d0,
        lines_q0 => lines_q0,
        ap_return => grp_get_lines_lsl_fu_76_ap_return);

    grp_get_weed_mask_fu_88 : component get_weed_mask
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_get_weed_mask_fu_88_ap_start,
        ap_done => grp_get_weed_mask_fu_88_ap_done,
        ap_idle => grp_get_weed_mask_fu_88_ap_idle,
        ap_ready => grp_get_weed_mask_fu_88_ap_ready,
        weed_mask_tmp_data_V_din => grp_get_weed_mask_fu_88_weed_mask_tmp_data_V_din,
        weed_mask_tmp_data_V_full_n => weed_mask_tmp_data_V_full_n,
        weed_mask_tmp_data_V_write => grp_get_weed_mask_fu_88_weed_mask_tmp_data_V_write,
        lines_founded_read => grp_get_weed_mask_fu_88_lines_founded_read,
        lines_address0 => grp_get_weed_mask_fu_88_lines_address0,
        lines_ce0 => grp_get_weed_mask_fu_88_lines_ce0,
        lines_q0 => lines_q0);

    grp_get_line_bases_fu_97 : component get_line_bases
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_get_line_bases_fu_97_ap_start,
        ap_done => grp_get_line_bases_fu_97_ap_done,
        ap_idle => grp_get_line_bases_fu_97_ap_idle,
        ap_ready => grp_get_line_bases_fu_97_ap_ready,
        bottom_data_V_dout => bottom_data_V_dout,
        bottom_data_V_empty_n => bottom_data_V_empty_n,
        bottom_data_V_read => grp_get_line_bases_fu_97_bottom_data_V_read,
        line_bases_address0 => grp_get_line_bases_fu_97_line_bases_address0,
        line_bases_ce0 => grp_get_line_bases_fu_97_line_bases_ce0,
        line_bases_we0 => grp_get_line_bases_fu_97_line_bases_we0,
        line_bases_d0 => grp_get_line_bases_fu_97_line_bases_d0,
        line_bases_q0 => line_bases_q0,
        line_bases_address1 => grp_get_line_bases_fu_97_line_bases_address1,
        line_bases_ce1 => grp_get_line_bases_fu_97_line_bases_ce1,
        line_bases_we1 => grp_get_line_bases_fu_97_line_bases_we1,
        line_bases_d1 => grp_get_line_bases_fu_97_line_bases_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_get_weed_mask_fu_88_ap_done = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_extr_half_1_cent_fu_48_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_extr_half_1_cent_fu_48_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_extr_half_1_cent_fu_48_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_extr_half_1_cent_fu_48_ap_ready = ap_const_logic_1)) then 
                    grp_extr_half_1_cent_fu_48_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_extr_half_2_cent_fu_62_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_extr_half_2_cent_fu_62_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_extr_half_2_cent_fu_62_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_extr_half_2_cent_fu_62_ap_ready = ap_const_logic_1)) then 
                    grp_extr_half_2_cent_fu_62_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_get_line_bases_fu_97_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_get_line_bases_fu_97_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_get_line_bases_fu_97_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_get_line_bases_fu_97_ap_ready = ap_const_logic_1)) then 
                    grp_get_line_bases_fu_97_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_get_lines_lsl_fu_76_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_get_lines_lsl_fu_76_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_get_lines_lsl_fu_76_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_get_lines_lsl_fu_76_ap_ready = ap_const_logic_1)) then 
                    grp_get_lines_lsl_fu_76_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_get_weed_mask_fu_88_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_get_weed_mask_fu_88_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_get_weed_mask_fu_88_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_get_weed_mask_fu_88_ap_ready = ap_const_logic_1)) then 
                    grp_get_weed_mask_fu_88_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_get_lines_lsl_fu_76_ap_done = ap_const_logic_1))) then
                lines_founded_reg_109 <= grp_get_lines_lsl_fu_76_ap_return;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state8, grp_get_lines_lsl_fu_76_ap_done, grp_extr_half_1_cent_fu_48_ap_done, grp_extr_half_2_cent_fu_62_ap_done, grp_get_weed_mask_fu_88_ap_done, grp_get_line_bases_fu_97_ap_done, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_get_line_bases_fu_97_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_extr_half_1_cent_fu_48_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_extr_half_2_cent_fu_62_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_get_lines_lsl_fu_76_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_get_weed_mask_fu_88_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_ignore_call3_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1_ignore_call3 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_get_weed_mask_fu_88_ap_done, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_get_weed_mask_fu_88_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    bottom_data_V_read_assign_proc : process(grp_get_line_bases_fu_97_bottom_data_V_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bottom_data_V_read <= grp_get_line_bases_fu_97_bottom_data_V_read;
        else 
            bottom_data_V_read <= ap_const_logic_0;
        end if; 
    end process;


    centroids_address0_assign_proc : process(ap_CS_fsm_state8, grp_extr_half_1_cent_fu_48_centroids_address0, grp_extr_half_2_cent_fu_62_centroids_address0, grp_get_lines_lsl_fu_76_centroids_address0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            centroids_address0 <= grp_get_lines_lsl_fu_76_centroids_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            centroids_address0 <= grp_extr_half_2_cent_fu_62_centroids_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            centroids_address0 <= grp_extr_half_1_cent_fu_48_centroids_address0;
        else 
            centroids_address0 <= "XXXXXXX";
        end if; 
    end process;


    centroids_ce0_assign_proc : process(ap_CS_fsm_state8, grp_extr_half_1_cent_fu_48_centroids_ce0, grp_extr_half_2_cent_fu_62_centroids_ce0, grp_get_lines_lsl_fu_76_centroids_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            centroids_ce0 <= grp_get_lines_lsl_fu_76_centroids_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            centroids_ce0 <= grp_extr_half_2_cent_fu_62_centroids_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            centroids_ce0 <= grp_extr_half_1_cent_fu_48_centroids_ce0;
        else 
            centroids_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    centroids_d0_assign_proc : process(grp_extr_half_1_cent_fu_48_centroids_d0, grp_extr_half_2_cent_fu_62_centroids_d0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            centroids_d0 <= grp_extr_half_2_cent_fu_62_centroids_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            centroids_d0 <= grp_extr_half_1_cent_fu_48_centroids_d0;
        else 
            centroids_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    centroids_we0_assign_proc : process(grp_extr_half_1_cent_fu_48_centroids_we0, grp_extr_half_2_cent_fu_62_centroids_we0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            centroids_we0 <= grp_extr_half_2_cent_fu_62_centroids_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            centroids_we0 <= grp_extr_half_1_cent_fu_48_centroids_we0;
        else 
            centroids_we0 <= ap_const_logic_0;
        end if; 
    end process;


    eroded_data_V_read_assign_proc : process(grp_extr_half_1_cent_fu_48_eroded_data_V_read, grp_extr_half_2_cent_fu_62_eroded_data_V_read, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            eroded_data_V_read <= grp_extr_half_2_cent_fu_62_eroded_data_V_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            eroded_data_V_read <= grp_extr_half_1_cent_fu_48_eroded_data_V_read;
        else 
            eroded_data_V_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_extr_half_1_cent_fu_48_ap_start <= grp_extr_half_1_cent_fu_48_ap_start_reg;
    grp_extr_half_2_cent_fu_62_ap_start <= grp_extr_half_2_cent_fu_62_ap_start_reg;
    grp_get_line_bases_fu_97_ap_start <= grp_get_line_bases_fu_97_ap_start_reg;
    grp_get_lines_lsl_fu_76_ap_start <= grp_get_lines_lsl_fu_76_ap_start_reg;
    grp_get_weed_mask_fu_88_ap_start <= grp_get_weed_mask_fu_88_ap_start_reg;
    grp_get_weed_mask_fu_88_lines_founded_read <= lines_founded_reg_109(0);

    internal_ap_ready_assign_proc : process(grp_get_weed_mask_fu_88_ap_done, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_get_weed_mask_fu_88_ap_done = ap_const_logic_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    line_bases_address0_assign_proc : process(ap_CS_fsm_state8, grp_extr_half_1_cent_fu_48_line_bases_address0, grp_extr_half_2_cent_fu_62_line_bases_active_address0, grp_get_lines_lsl_fu_76_line_bases_address0, grp_get_line_bases_fu_97_line_bases_address0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            line_bases_address0 <= grp_get_line_bases_fu_97_line_bases_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            line_bases_address0 <= grp_get_lines_lsl_fu_76_line_bases_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            line_bases_address0 <= grp_extr_half_2_cent_fu_62_line_bases_active_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            line_bases_address0 <= grp_extr_half_1_cent_fu_48_line_bases_address0;
        else 
            line_bases_address0 <= "XXX";
        end if; 
    end process;


    line_bases_ce0_assign_proc : process(ap_CS_fsm_state8, grp_extr_half_1_cent_fu_48_line_bases_ce0, grp_extr_half_2_cent_fu_62_line_bases_active_ce0, grp_get_lines_lsl_fu_76_line_bases_ce0, grp_get_line_bases_fu_97_line_bases_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            line_bases_ce0 <= grp_get_line_bases_fu_97_line_bases_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            line_bases_ce0 <= grp_get_lines_lsl_fu_76_line_bases_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            line_bases_ce0 <= grp_extr_half_2_cent_fu_62_line_bases_active_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            line_bases_ce0 <= grp_extr_half_1_cent_fu_48_line_bases_ce0;
        else 
            line_bases_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_bases_ce1_assign_proc : process(grp_get_line_bases_fu_97_line_bases_ce1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            line_bases_ce1 <= grp_get_line_bases_fu_97_line_bases_ce1;
        else 
            line_bases_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_bases_we0_assign_proc : process(grp_get_line_bases_fu_97_line_bases_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            line_bases_we0 <= grp_get_line_bases_fu_97_line_bases_we0;
        else 
            line_bases_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_bases_we1_assign_proc : process(grp_get_line_bases_fu_97_line_bases_we1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            line_bases_we1 <= grp_get_line_bases_fu_97_line_bases_we1;
        else 
            line_bases_we1 <= ap_const_logic_0;
        end if; 
    end process;


    lines_address0_assign_proc : process(ap_CS_fsm_state8, grp_get_lines_lsl_fu_76_lines_address0, grp_get_weed_mask_fu_88_lines_address0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            lines_address0 <= grp_get_weed_mask_fu_88_lines_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            lines_address0 <= grp_get_lines_lsl_fu_76_lines_address0;
        else 
            lines_address0 <= "XXX";
        end if; 
    end process;


    lines_ce0_assign_proc : process(ap_CS_fsm_state8, grp_get_lines_lsl_fu_76_lines_ce0, grp_get_weed_mask_fu_88_lines_ce0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            lines_ce0 <= grp_get_weed_mask_fu_88_lines_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            lines_ce0 <= grp_get_lines_lsl_fu_76_lines_ce0;
        else 
            lines_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lines_we0_assign_proc : process(ap_CS_fsm_state8, grp_get_lines_lsl_fu_76_lines_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            lines_we0 <= grp_get_lines_lsl_fu_76_lines_we0;
        else 
            lines_we0 <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    weed_mask_tmp_data_V_din <= grp_get_weed_mask_fu_88_weed_mask_tmp_data_V_din;

    weed_mask_tmp_data_V_write_assign_proc : process(grp_get_weed_mask_fu_88_weed_mask_tmp_data_V_write, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            weed_mask_tmp_data_V_write <= grp_get_weed_mask_fu_88_weed_mask_tmp_data_V_write;
        else 
            weed_mask_tmp_data_V_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
