-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity get_lines_lsl is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    line_bases_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    line_bases_ce0 : OUT STD_LOGIC;
    line_bases_q0 : IN STD_LOGIC_VECTOR (16 downto 0);
    centroids_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    centroids_ce0 : OUT STD_LOGIC;
    centroids_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    lines_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    lines_ce0 : OUT STD_LOGIC;
    lines_we0 : OUT STD_LOGIC;
    lines_d0 : OUT STD_LOGIC_VECTOR (64 downto 0);
    lines_q0 : IN STD_LOGIC_VECTOR (64 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of get_lines_lsl is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_43340000 : STD_LOGIC_VECTOR (31 downto 0) := "01000011001101000000000000000000";
    constant ap_const_lv32_BE0F5C29 : STD_LOGIC_VECTOR (31 downto 0) := "10111110000011110101110000101001";
    constant ap_const_lv32_BF800000 : STD_LOGIC_VECTOR (31 downto 0) := "10111111100000000000000000000000";
    constant ap_const_lv32_3E0F5C29 : STD_LOGIC_VECTOR (31 downto 0) := "00111110000011110101110000101001";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_3ECCCCCD : STD_LOGIC_VECTOR (31 downto 0) := "00111110110011001100110011001101";
    constant ap_const_lv32_BECCCCCD : STD_LOGIC_VECTOR (31 downto 0) := "10111110110011001100110011001101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_D4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010100";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_D5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010101";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal line_centroids_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal line_centroids_ce0 : STD_LOGIC;
    signal line_centroids_we0 : STD_LOGIC;
    signal line_centroids_q0 : STD_LOGIC_VECTOR (47 downto 0);
    signal s_index_0_i_reg_201 : STD_LOGIC_VECTOR (3 downto 0);
    signal line_index_fu_274_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal line_index_reg_702 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln352_fu_280_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln352_reg_707 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln351_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln351_fu_288_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln351_reg_718 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_fu_292_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_723 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln355_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln355_reg_727 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal s_index_fu_306_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal s_index_reg_731 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal m_reg_741 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_least_squares_line_1_fu_213_ap_ready : STD_LOGIC;
    signal grp_least_squares_line_1_fu_213_ap_done : STD_LOGIC;
    signal b_reg_753 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_223_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_229_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln362_2_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln362_2_reg_769 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal and_ln362_5_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln362_5_reg_773 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln362_8_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln362_8_reg_777 : STD_LOGIC_VECTOR (0 downto 0);
    signal lines_addr_1_reg_781 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal grp_least_squares_line_1_fu_213_ap_start : STD_LOGIC;
    signal grp_least_squares_line_1_fu_213_ap_idle : STD_LOGIC;
    signal grp_least_squares_line_1_fu_213_centroids_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_least_squares_line_1_fu_213_centroids_2_ce0 : STD_LOGIC;
    signal grp_least_squares_line_1_fu_213_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_least_squares_line_1_fu_213_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_index_0_i_reg_189 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_phi_mux_s_index_0_i_phi_fu_205_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_least_squares_line_1_fu_213_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln356_3_fu_351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln356_fu_356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lines_addr_gep_fu_181_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal lines_founded_write_s_fu_124 : STD_LOGIC_VECTOR (0 downto 0);
    signal final_lines_b_addr_fu_666_p4 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_57_fu_681_p4 : STD_LOGIC_VECTOR (64 downto 0);
    signal shl_ln_fu_312_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln356_1_fu_324_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln356_1_fu_320_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln356_2_fu_332_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln356_fu_336_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln356_fu_342_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln356_fu_347_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_371_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_25_fu_393_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_V_fu_397_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_V_fu_383_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln339_fu_411_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln339_fu_415_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_429_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_421_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_435_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_439_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1311_4_fu_447_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1311_5_fu_451_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln682_fu_407_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1287_fu_455_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_459_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_55_fu_471_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_6_fu_465_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln662_fu_479_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_483_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_38_fu_493_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_375_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_4_fu_501_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_39_fu_507_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_56_fu_515_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln362_fu_535_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_538_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln362_fu_548_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln362_6_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln362_1_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln362_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln362_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln362_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln362_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln362_3_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln362_1_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln362_2_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln362_3_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln362_4_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln362_7_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln362_6_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln362_4_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln362_5_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln362_9_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln362_11_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln362_10_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_223_ce : STD_LOGIC;
    signal grp_fu_229_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component least_squares_line_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        centroids_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        centroids_2_ce0 : OUT STD_LOGIC;
        centroids_2_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ip_accel_app_faddShg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ip_accel_app_fmulKfY IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ip_accel_app_sitoThq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ip_accel_app_fcmp1iI IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component get_lines_lsl_lin0iy IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (47 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;



begin
    line_centroids_U : component get_lines_lsl_lin0iy
    generic map (
        DataWidth => 48,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_centroids_address0,
        ce0 => line_centroids_ce0,
        we0 => line_centroids_we0,
        d0 => centroids_q0,
        q0 => line_centroids_q0);

    grp_least_squares_line_1_fu_213 : component least_squares_line_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_least_squares_line_1_fu_213_ap_start,
        ap_done => grp_least_squares_line_1_fu_213_ap_done,
        ap_idle => grp_least_squares_line_1_fu_213_ap_idle,
        ap_ready => grp_least_squares_line_1_fu_213_ap_ready,
        centroids_2_address0 => grp_least_squares_line_1_fu_213_centroids_2_address0,
        centroids_2_ce0 => grp_least_squares_line_1_fu_213_centroids_2_ce0,
        centroids_2_q0 => line_centroids_q0,
        ap_return_0 => grp_least_squares_line_1_fu_213_ap_return_0,
        ap_return_1 => grp_least_squares_line_1_fu_213_ap_return_1);

    ip_accel_app_faddShg_U485 : component ip_accel_app_faddShg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_223_p2,
        din1 => grp_fu_229_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_219_p2);

    ip_accel_app_fmulKfY_U486 : component ip_accel_app_fmulKfY
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_least_squares_line_1_fu_213_ap_return_0,
        din1 => ap_const_lv32_43340000,
        ce => grp_fu_223_ce,
        dout => grp_fu_223_p2);

    ip_accel_app_sitoThq_U487 : component ip_accel_app_sitoThq
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_least_squares_line_1_fu_213_ap_return_1,
        ce => grp_fu_229_ce,
        dout => grp_fu_229_p1);

    ip_accel_app_fcmp1iI_U488 : component ip_accel_app_fcmp1iI
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => m_reg_741,
        din1 => ap_const_lv32_BE0F5C29,
        opcode => ap_const_lv5_4,
        dout => tmp_8_fu_233_p2);

    ip_accel_app_fcmp1iI_U489 : component ip_accel_app_fcmp1iI
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => m_reg_741,
        din1 => ap_const_lv32_BF800000,
        opcode => ap_const_lv5_2,
        dout => tmp_9_fu_238_p2);

    ip_accel_app_fcmp1iI_U490 : component ip_accel_app_fcmp1iI
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => m_reg_741,
        din1 => ap_const_lv32_3E0F5C29,
        opcode => ap_const_lv5_2,
        dout => tmp_10_fu_243_p2);

    ip_accel_app_fcmp1iI_U491 : component ip_accel_app_fcmp1iI
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => m_reg_741,
        din1 => ap_const_lv32_3F800000,
        opcode => ap_const_lv5_4,
        dout => tmp_11_fu_248_p2);

    ip_accel_app_fcmp1iI_U492 : component ip_accel_app_fcmp1iI
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => m_reg_741,
        din1 => ap_const_lv32_3ECCCCCD,
        opcode => ap_const_lv5_4,
        dout => tmp_12_fu_253_p2);

    ip_accel_app_fcmp1iI_U493 : component ip_accel_app_fcmp1iI
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => m_reg_741,
        din1 => ap_const_lv32_BECCCCCD,
        opcode => ap_const_lv5_2,
        dout => tmp_13_fu_258_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((tmp_fu_292_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((tmp_fu_292_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_least_squares_line_1_fu_213_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_least_squares_line_1_fu_213_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_least_squares_line_1_fu_213_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_least_squares_line_1_fu_213_ap_ready = ap_const_logic_1)) then 
                    grp_least_squares_line_1_fu_213_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    line_index_0_i_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                line_index_0_i_reg_189 <= line_index_reg_702;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                line_index_0_i_reg_189 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    lines_founded_write_s_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and ((ap_const_lv1_1 = and_ln362_2_fu_588_p2) or ((ap_const_lv1_1 = and_ln362_8_fu_660_p2) or (ap_const_lv1_1 = and_ln362_5_fu_624_p2))))) then 
                lines_founded_write_s_fu_124 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                lines_founded_write_s_fu_124 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    s_index_0_i_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln355_reg_727 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                s_index_0_i_reg_201 <= s_index_reg_731;
            elsif (((tmp_fu_292_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                s_index_0_i_reg_201 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                and_ln362_2_reg_769 <= and_ln362_2_fu_588_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln362_2_fu_588_p2) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                and_ln362_5_reg_773 <= and_ln362_5_fu_624_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln362_5_fu_624_p2) and (ap_const_lv1_0 = and_ln362_2_fu_588_p2) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                and_ln362_8_reg_777 <= and_ln362_8_fu_660_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_least_squares_line_1_fu_213_ap_done = ap_const_logic_1))) then
                b_reg_753 <= grp_least_squares_line_1_fu_213_ap_return_1;
                m_reg_741 <= grp_least_squares_line_1_fu_213_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln355_reg_727 <= icmp_ln355_fu_300_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                line_index_reg_702 <= line_index_fu_274_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln362_8_fu_660_p2) and (ap_const_lv1_0 = and_ln362_5_fu_624_p2) and (ap_const_lv1_0 = and_ln362_2_fu_588_p2) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                lines_addr_1_reg_781 <= zext_ln352_reg_707(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                s_index_reg_731 <= s_index_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_reg_723 <= line_bases_q0(16 downto 16);
                    zext_ln351_reg_718(2 downto 0) <= zext_ln351_fu_288_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln351_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln352_reg_707(2 downto 0) <= zext_ln352_fu_280_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln352_reg_707(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln351_reg_718(7 downto 3) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln351_fu_268_p2, ap_CS_fsm_state3, tmp_fu_292_p3, icmp_ln355_fu_300_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state7, grp_least_squares_line_1_fu_213_ap_done, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln351_fu_268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_fu_292_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln355_fu_300_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln355_fu_300_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_least_squares_line_1_fu_213_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln339_fu_415_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(zext_ln339_fu_411_p1));
    add_ln356_fu_342_p2 <= std_logic_vector(unsigned(zext_ln351_reg_718) + unsigned(sub_ln356_fu_336_p2));
    and_ln362_10_fu_648_p2 <= (icmp_ln362_5_fu_636_p2 and icmp_ln362_4_fu_630_p2);
    and_ln362_11_fu_654_p2 <= (tmp_13_fu_258_p2 and and_ln362_9_fu_642_p2);
    and_ln362_1_fu_576_p2 <= (xor_ln362_fu_523_p2 and icmp_ln362_fu_529_p2);
    and_ln362_2_fu_588_p2 <= (and_ln362_3_fu_582_p2 and and_ln362_1_fu_576_p2);
    and_ln362_3_fu_582_p2 <= (tmp_9_fu_238_p2 and and_ln362_fu_570_p2);
    and_ln362_4_fu_606_p2 <= (tmp_10_fu_243_p2 and or_ln362_fu_564_p2);
    and_ln362_5_fu_624_p2 <= (and_ln362_7_fu_618_p2 and and_ln362_6_fu_612_p2);
    and_ln362_6_fu_612_p2 <= (icmp_ln362_3_fu_600_p2 and icmp_ln362_2_fu_594_p2);
    and_ln362_7_fu_618_p2 <= (tmp_11_fu_248_p2 and and_ln362_4_fu_606_p2);
    and_ln362_8_fu_660_p2 <= (and_ln362_11_fu_654_p2 and and_ln362_10_fu_648_p2);
    and_ln362_9_fu_642_p2 <= (tmp_12_fu_253_p2 and or_ln362_fu_564_p2);
    and_ln362_fu_570_p2 <= (tmp_8_fu_233_p2 and or_ln362_fu_564_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln355_fu_300_p2)
    begin
        if ((icmp_ln355_fu_300_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln351_fu_268_p2)
    begin
        if ((((icmp_ln351_fu_268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_s_index_0_i_phi_fu_205_p4_assign_proc : process(s_index_0_i_reg_201, icmp_ln355_reg_727, ap_CS_fsm_pp0_stage0, s_index_reg_731, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln355_reg_727 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_s_index_0_i_phi_fu_205_p4 <= s_index_reg_731;
        else 
            ap_phi_mux_s_index_0_i_phi_fu_205_p4 <= s_index_0_i_reg_201;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln351_fu_268_p2)
    begin
        if (((icmp_ln351_fu_268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= lines_founded_write_s_fu_124;
    bitcast_ln362_fu_535_p1 <= m_reg_741;
    centroids_address0 <= zext_ln356_3_fu_351_p1(7 - 1 downto 0);

    centroids_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            centroids_ce0 <= ap_const_logic_1;
        else 
            centroids_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    final_lines_b_addr_fu_666_p4 <= ((b_reg_753 & bitcast_ln362_fu_535_p1) & ap_const_lv1_1);

    grp_fu_223_ce_assign_proc : process(ap_CS_fsm_state7, grp_least_squares_line_1_fu_213_ap_done, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_least_squares_line_1_fu_213_ap_done = ap_const_logic_1)))) then 
            grp_fu_223_ce <= ap_const_logic_1;
        else 
            grp_fu_223_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_229_ce_assign_proc : process(ap_CS_fsm_state7, grp_least_squares_line_1_fu_213_ap_done, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_least_squares_line_1_fu_213_ap_done = ap_const_logic_1)))) then 
            grp_fu_229_ce <= ap_const_logic_1;
        else 
            grp_fu_229_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_least_squares_line_1_fu_213_ap_start <= grp_least_squares_line_1_fu_213_ap_start_reg;
    icmp_ln351_fu_268_p2 <= "1" when (line_index_0_i_reg_189 = ap_const_lv3_6) else "0";
    icmp_ln355_fu_300_p2 <= "1" when (ap_phi_mux_s_index_0_i_phi_fu_205_p4 = ap_const_lv4_C) else "0";
    icmp_ln362_1_fu_552_p2 <= "0" when (tmp_s_fu_538_p4 = ap_const_lv8_FF) else "1";
    icmp_ln362_2_fu_594_p2 <= "1" when (signed(p_Val2_39_fu_507_p3) > signed(ap_const_lv32_D4)) else "0";
    icmp_ln362_3_fu_600_p2 <= "1" when (signed(p_Val2_39_fu_507_p3) < signed(ap_const_lv32_140)) else "0";
    icmp_ln362_4_fu_630_p2 <= "1" when (signed(p_Val2_39_fu_507_p3) < signed(ap_const_lv32_D5)) else "0";
    icmp_ln362_5_fu_636_p2 <= "1" when (signed(p_Val2_39_fu_507_p3) > signed(ap_const_lv32_6A)) else "0";
    icmp_ln362_6_fu_558_p2 <= "1" when (trunc_ln362_fu_548_p1 = ap_const_lv23_0) else "0";
    icmp_ln362_fu_529_p2 <= "1" when (signed(p_Val2_39_fu_507_p3) < signed(ap_const_lv32_6B)) else "0";
    isNeg_fu_421_p3 <= add_ln339_fu_415_p2(8 downto 8);
    line_bases_address0 <= zext_ln352_fu_280_p1(3 - 1 downto 0);

    line_bases_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            line_bases_ce0 <= ap_const_logic_1;
        else 
            line_bases_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_centroids_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state7, ap_enable_reg_pp0_iter1, grp_least_squares_line_1_fu_213_centroids_2_address0, ap_block_pp0_stage0, zext_ln356_fu_356_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            line_centroids_address0 <= zext_ln356_fu_356_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            line_centroids_address0 <= grp_least_squares_line_1_fu_213_centroids_2_address0;
        else 
            line_centroids_address0 <= "XXXX";
        end if; 
    end process;


    line_centroids_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state7, ap_enable_reg_pp0_iter1, grp_least_squares_line_1_fu_213_centroids_2_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            line_centroids_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            line_centroids_ce0 <= grp_least_squares_line_1_fu_213_centroids_2_ce0;
        else 
            line_centroids_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_centroids_we0_assign_proc : process(icmp_ln355_reg_727, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln355_reg_727 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            line_centroids_we0 <= ap_const_logic_1;
        else 
            line_centroids_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_index_fu_274_p2 <= std_logic_vector(unsigned(line_index_0_i_reg_189) + unsigned(ap_const_lv3_1));
    lines_addr_gep_fu_181_p3 <= zext_ln352_reg_707(3 - 1 downto 0);

    lines_address0_assign_proc : process(zext_ln352_reg_707, and_ln362_2_fu_588_p2, ap_CS_fsm_state9, and_ln362_5_fu_624_p2, and_ln362_8_fu_660_p2, lines_addr_1_reg_781, ap_CS_fsm_state10, lines_addr_gep_fu_181_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            lines_address0 <= lines_addr_1_reg_781;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and ((ap_const_lv1_1 = and_ln362_2_fu_588_p2) or ((ap_const_lv1_1 = and_ln362_8_fu_660_p2) or (ap_const_lv1_1 = and_ln362_5_fu_624_p2))))) then 
            lines_address0 <= lines_addr_gep_fu_181_p3;
        elsif (((ap_const_lv1_0 = and_ln362_8_fu_660_p2) and (ap_const_lv1_0 = and_ln362_5_fu_624_p2) and (ap_const_lv1_0 = and_ln362_2_fu_588_p2) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            lines_address0 <= zext_ln352_reg_707(3 - 1 downto 0);
        else 
            lines_address0 <= "XXX";
        end if; 
    end process;


    lines_ce0_assign_proc : process(and_ln362_2_fu_588_p2, ap_CS_fsm_state9, and_ln362_5_fu_624_p2, and_ln362_8_fu_660_p2, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state9) and ((ap_const_lv1_1 = and_ln362_2_fu_588_p2) or ((ap_const_lv1_1 = and_ln362_8_fu_660_p2) or (ap_const_lv1_1 = and_ln362_5_fu_624_p2)))) or ((ap_const_lv1_0 = and_ln362_8_fu_660_p2) and (ap_const_lv1_0 = and_ln362_5_fu_624_p2) and (ap_const_lv1_0 = and_ln362_2_fu_588_p2) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            lines_ce0 <= ap_const_logic_1;
        else 
            lines_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lines_d0_assign_proc : process(and_ln362_2_fu_588_p2, ap_CS_fsm_state9, and_ln362_5_fu_624_p2, and_ln362_8_fu_660_p2, ap_CS_fsm_state10, final_lines_b_addr_fu_666_p4, tmp_57_fu_681_p4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            lines_d0 <= tmp_57_fu_681_p4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and ((ap_const_lv1_1 = and_ln362_2_fu_588_p2) or ((ap_const_lv1_1 = and_ln362_8_fu_660_p2) or (ap_const_lv1_1 = and_ln362_5_fu_624_p2))))) then 
            lines_d0 <= final_lines_b_addr_fu_666_p4;
        else 
            lines_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    lines_we0_assign_proc : process(tmp_reg_723, and_ln362_2_fu_588_p2, and_ln362_2_reg_769, ap_CS_fsm_state9, and_ln362_5_fu_624_p2, and_ln362_5_reg_773, and_ln362_8_fu_660_p2, and_ln362_8_reg_777, ap_CS_fsm_state10)
    begin
        if ((((tmp_reg_723 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln362_8_reg_777) and (ap_const_lv1_0 = and_ln362_5_reg_773) and (ap_const_lv1_0 = and_ln362_2_reg_769) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and ((ap_const_lv1_1 = and_ln362_2_fu_588_p2) or ((ap_const_lv1_1 = and_ln362_8_fu_660_p2) or (ap_const_lv1_1 = and_ln362_5_fu_624_p2)))))) then 
            lines_we0 <= ap_const_logic_1;
        else 
            lines_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mantissa_V_fu_397_p4 <= ((ap_const_lv1_1 & tmp_V_25_fu_393_p1) & ap_const_lv1_0);
    or_ln362_fu_564_p2 <= (icmp_ln362_6_fu_558_p2 or icmp_ln362_1_fu_552_p2);
    p_Result_s_fu_375_p3 <= p_Val2_s_fu_371_p1(31 downto 31);
    p_Val2_38_fu_493_p3 <= 
        zext_ln662_fu_479_p1 when (isNeg_fu_421_p3(0) = '1') else 
        tmp_7_fu_483_p4;
    p_Val2_39_fu_507_p3 <= 
        result_V_4_fu_501_p2 when (p_Result_s_fu_375_p3(0) = '1') else 
        p_Val2_38_fu_493_p3;
    p_Val2_s_fu_371_p1 <= grp_fu_219_p2;
    r_V_6_fu_465_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_fu_407_p1),to_integer(unsigned('0' & zext_ln1287_fu_455_p1(31-1 downto 0)))));
    r_V_fu_459_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_397_p4),to_integer(unsigned('0' & sext_ln1311_5_fu_451_p1(25-1 downto 0)))));
    result_V_4_fu_501_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_38_fu_493_p3));
    s_index_fu_306_p2 <= std_logic_vector(unsigned(ap_phi_mux_s_index_0_i_phi_fu_205_p4) + unsigned(ap_const_lv4_1));
        sext_ln1311_4_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_439_p3),32));

        sext_ln1311_5_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_439_p3),25));

        sext_ln1311_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_429_p2),9));

        sext_ln356_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln356_fu_342_p2),32));

    shl_ln356_1_fu_324_p3 <= (ap_phi_mux_s_index_0_i_phi_fu_205_p4 & ap_const_lv1_0);
    shl_ln_fu_312_p3 <= (ap_phi_mux_s_index_0_i_phi_fu_205_p4 & ap_const_lv3_0);
    sub_ln1311_fu_429_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_fu_383_p4));
    sub_ln356_fu_336_p2 <= std_logic_vector(unsigned(zext_ln356_1_fu_320_p1) - unsigned(zext_ln356_2_fu_332_p1));
    tmp_55_fu_471_p3 <= r_V_fu_459_p2(24 downto 24);
    tmp_56_fu_515_p3 <= p_Val2_39_fu_507_p3(31 downto 31);
    
    tmp_57_fu_681_p4_proc : process(lines_q0)
    begin
        tmp_57_fu_681_p4 <= lines_q0;
        tmp_57_fu_681_p4(0) <= ap_const_lv1_0(0);
    end process;

    tmp_7_fu_483_p4 <= r_V_6_fu_465_p2(55 downto 24);
    tmp_V_25_fu_393_p1 <= p_Val2_s_fu_371_p1(23 - 1 downto 0);
    tmp_V_fu_383_p4 <= p_Val2_s_fu_371_p1(30 downto 23);
    tmp_fu_292_p3 <= line_bases_q0(16 downto 16);
    tmp_s_fu_538_p4 <= bitcast_ln362_fu_535_p1(30 downto 23);
    trunc_ln362_fu_548_p1 <= bitcast_ln362_fu_535_p1(23 - 1 downto 0);
    ush_fu_439_p3 <= 
        sext_ln1311_fu_435_p1 when (isNeg_fu_421_p3(0) = '1') else 
        add_ln339_fu_415_p2;
    xor_ln362_fu_523_p2 <= (tmp_56_fu_515_p3 xor ap_const_lv1_1);
    zext_ln1287_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_4_fu_447_p1),79));
    zext_ln339_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_383_p4),9));
    zext_ln351_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(line_index_0_i_reg_189),8));
    zext_ln352_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(line_index_0_i_reg_189),64));
    zext_ln356_1_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_312_p3),8));
    zext_ln356_2_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln356_1_fu_324_p3),8));
    zext_ln356_3_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln356_fu_347_p1),64));
    zext_ln356_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(s_index_0_i_reg_201),64));
    zext_ln662_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_fu_471_p3),32));
    zext_ln682_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_397_p4),79));
end behav;
