-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity get_lines_lsl is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    line_bases_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    line_bases_ce0 : OUT STD_LOGIC;
    line_bases_q0 : IN STD_LOGIC_VECTOR (16 downto 0);
    centroids_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    centroids_ce0 : OUT STD_LOGIC;
    centroids_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    lines_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    lines_ce0 : OUT STD_LOGIC;
    lines_we0 : OUT STD_LOGIC;
    lines_d0 : OUT STD_LOGIC_VECTOR (56 downto 0);
    lines_q0 : IN STD_LOGIC_VECTOR (56 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of get_lines_lsl is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (78 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (78 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (78 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (78 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (78 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (78 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (78 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (78 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (78 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (78 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv42_155556 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000101010101010101010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv65_155555556 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000101010101010101010101010101010110";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv24_FFFFDC : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111011100";
    constant ap_const_lv24_FFFF00 : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111100000000";
    constant ap_const_lv32_D4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010100";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv24_23 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_D5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010101";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv24_66 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001100110";
    constant ap_const_lv24_FFFF99 : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111110011001";
    constant ap_const_lv33_B4 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000010110100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal line_centroids_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal line_centroids_ce0 : STD_LOGIC;
    signal line_centroids_we0 : STD_LOGIC;
    signal line_centroids_q0 : STD_LOGIC_VECTOR (47 downto 0);
    signal s_index_0_i_reg_237 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum_x_0_i_reg_249 : STD_LOGIC_VECTOR (19 downto 0);
    signal sum_y_0_i_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_xy_0_i_reg_273 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_xx_0_i_reg_285 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i_reg_297 : STD_LOGIC_VECTOR (3 downto 0);
    signal line_index_fu_319_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal line_index_reg_986 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln353_fu_325_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln353_reg_991 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln352_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln352_fu_333_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln352_reg_1002 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_35_fu_337_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_reg_1007 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln356_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln356_reg_1011 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal s_index_fu_351_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal s_index_reg_1015 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln186_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_1025 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state7_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln186_reg_1025_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_412_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_1029 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal zext_ln188_1_fu_427_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_block_state8_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_state10_pp1_stage1_iter1 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal sum_x_fu_435_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sum_x_reg_1045 : STD_LOGIC_VECTOR (19 downto 0);
    signal sum_y_fu_451_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_y_reg_1050 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_xy_fu_463_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_xy_reg_1055 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_960_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_37_reg_1075 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_597_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sdiv_ln1148_reg_1080 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal m_V_fu_623_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal m_V_reg_1085 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_19_fu_718_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_19_reg_1095 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln363_2_fu_839_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln363_2_reg_1106 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal and_ln364_1_fu_889_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln364_1_reg_1110 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln365_1_fu_929_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln365_1_reg_1114 : STD_LOGIC_VECTOR (0 downto 0);
    signal lines_addr_1_reg_1118 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal line_index_0_i_reg_225 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_phi_mux_s_index_0_i_phi_fu_241_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_sum_x_0_i_phi_fu_253_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal ap_phi_mux_sum_y_0_i_phi_fu_265_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_sum_xy_0_i_phi_fu_277_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_i_0_i_phi_fu_301_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal zext_ln357_3_fu_396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln357_fu_401_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln188_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lines_addr_gep_fu_217_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal lines_founded_write_s_fu_152 : STD_LOGIC_VECTOR (0 downto 0);
    signal final_lines_b_addr_fu_935_p4 : STD_LOGIC_VECTOR (56 downto 0);
    signal tmp_42_fu_949_p4 : STD_LOGIC_VECTOR (56 downto 0);
    signal shl_ln_fu_357_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln357_1_fu_369_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln357_1_fu_365_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln357_2_fu_377_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln357_fu_381_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln357_fu_387_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln357_fu_392_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln188_fu_423_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln188_2_fu_431_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal centroids_y_1_load_n_fu_441_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln190_fu_457_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln190_fu_457_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln6_fu_469_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln731_1_fu_481_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln731_fu_477_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal zext_ln731_1_fu_489_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal sub_ln731_fu_493_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal mul_ln731_fu_515_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln731_fu_515_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln731_fu_499_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln731_fu_515_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal shl_ln731_2_fu_527_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln731_3_fu_539_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln731_5_fu_535_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal zext_ln731_6_fu_547_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal sub_ln731_2_fu_551_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal mul_ln731_1_fu_561_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln731_3_fu_507_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln731_1_fu_561_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln731_1_fu_561_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln731_1_fu_557_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal zext_ln731_7_fu_567_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal sub_ln731_3_fu_571_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal sub_ln731_1_fu_521_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_fu_577_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_597_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln196_1_fu_607_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln196_1_fu_607_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal mul_ln196_fu_631_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln196_fu_631_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_36_fu_637_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_V_fu_651_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal r_V_fu_662_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal r_V_fu_662_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_fu_662_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln851_fu_686_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_668_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln851_6_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln555_fu_696_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_678_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln555_fu_702_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln196_1_fu_647_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln850_fu_710_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_968_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal rhs_V_fu_731_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal lhs_V_fu_728_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln728_fu_738_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal ret_V_fu_742_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln851_8_fu_756_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_765_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln851_fu_759_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln851_fu_775_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_fu_748_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln851_fu_781_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_temp_fu_789_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_fu_797_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln363_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln363_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1495_fu_817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_fu_822_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln363_1_fu_833_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln363_fu_827_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_862_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln363_1_fu_845_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln363_2_fu_851_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_1_fu_857_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1495_1_fu_871_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln364_2_fu_883_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln364_fu_877_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln364_fu_895_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln364_1_fu_901_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1495_2_fu_907_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_2_fu_912_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln365_2_fu_923_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln365_fu_917_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_960_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_960_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_968_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_597_ap_start : STD_LOGIC;
    signal grp_fu_597_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (78 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal mul_ln196_1_fu_607_p10 : STD_LOGIC_VECTOR (41 downto 0);
    signal mul_ln196_fu_631_p10 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_ln731_fu_515_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln731_fu_515_p10 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_fu_662_p00 : STD_LOGIC_VECTOR (39 downto 0);

    component ip_accel_app_sdivXh4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (48 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component ip_accel_app_mac_PgM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ip_accel_app_mul_Yie IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component get_lines_lsl_linWhU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (47 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;



begin
    line_centroids_U : component get_lines_lsl_linWhU
    generic map (
        DataWidth => 48,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_centroids_address0,
        ce0 => line_centroids_ce0,
        we0 => line_centroids_we0,
        d0 => centroids_q0,
        q0 => line_centroids_q0);

    ip_accel_app_sdivXh4_U469 : component ip_accel_app_sdivXh4
    generic map (
        ID => 1,
        NUM_STAGE => 68,
        din0_WIDTH => 64,
        din1_WIDTH => 49,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_597_ap_start,
        done => grp_fu_597_ap_done,
        din0 => grp_fu_597_p0,
        din1 => tmp_fu_577_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_597_p2);

    ip_accel_app_mac_PgM_U470 : component ip_accel_app_mac_PgM
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_960_p0,
        din1 => grp_fu_960_p1,
        din2 => sum_xx_0_i_reg_285,
        ce => ap_const_logic_1,
        dout => grp_fu_960_p3);

    ip_accel_app_mul_Yie_U471 : component ip_accel_app_mul_Yie
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 24,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_968_p0,
        din1 => m_V_fu_623_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_968_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_35_fu_337_p3 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_35_fu_337_p3 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_0_i_reg_297 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln186_reg_1025 = ap_const_lv1_0))) then 
                i_0_i_reg_297 <= i_reg_1029;
            end if; 
        end if;
    end process;

    line_index_0_i_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
                line_index_0_i_reg_225 <= line_index_reg_986;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                line_index_0_i_reg_225 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    lines_founded_write_s_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state82) and ((ap_const_lv1_1 = and_ln363_2_fu_839_p2) or ((ap_const_lv1_1 = and_ln365_1_fu_929_p2) or (ap_const_lv1_1 = and_ln364_1_fu_889_p2))))) then 
                lines_founded_write_s_fu_152 <= ap_const_lv1_1;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                lines_founded_write_s_fu_152 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    s_index_0_i_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln356_reg_1011 = ap_const_lv1_0))) then 
                s_index_0_i_reg_237 <= s_index_reg_1015;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_35_fu_337_p3 = ap_const_lv1_1))) then 
                s_index_0_i_reg_237 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    sum_x_0_i_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                sum_x_0_i_reg_249 <= ap_const_lv20_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln186_reg_1025_pp1_iter1_reg = ap_const_lv1_0))) then 
                sum_x_0_i_reg_249 <= sum_x_reg_1045;
            end if; 
        end if;
    end process;

    sum_xx_0_i_reg_285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                sum_xx_0_i_reg_285 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln186_reg_1025_pp1_iter1_reg = ap_const_lv1_0))) then 
                sum_xx_0_i_reg_285 <= grp_fu_960_p3;
            end if; 
        end if;
    end process;

    sum_xy_0_i_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                sum_xy_0_i_reg_273 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln186_reg_1025_pp1_iter1_reg = ap_const_lv1_0))) then 
                sum_xy_0_i_reg_273 <= sum_xy_reg_1055;
            end if; 
        end if;
    end process;

    sum_y_0_i_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                sum_y_0_i_reg_261 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln186_reg_1025_pp1_iter1_reg = ap_const_lv1_0))) then 
                sum_y_0_i_reg_261 <= sum_y_reg_1050;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state82)) then
                and_ln363_2_reg_1106 <= and_ln363_2_fu_839_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state82) and (ap_const_lv1_0 = and_ln363_2_fu_839_p2))) then
                and_ln364_1_reg_1110 <= and_ln364_1_fu_889_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state82) and (ap_const_lv1_0 = and_ln364_1_fu_889_p2) and (ap_const_lv1_0 = and_ln363_2_fu_839_p2))) then
                and_ln365_1_reg_1114 <= and_ln365_1_fu_929_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                i_reg_1029 <= i_fu_412_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln186_reg_1025 <= icmp_ln186_fu_406_p2;
                icmp_ln186_reg_1025_pp1_iter1_reg <= icmp_ln186_reg_1025;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln356_reg_1011 <= icmp_ln356_fu_345_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                line_index_reg_986 <= line_index_fu_319_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state82) and (ap_const_lv1_0 = and_ln365_1_fu_929_p2) and (ap_const_lv1_0 = and_ln364_1_fu_889_p2) and (ap_const_lv1_0 = and_ln363_2_fu_839_p2))) then
                lines_addr_1_reg_1118 <= zext_ln353_reg_991(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state79)) then
                m_V_reg_1085 <= m_V_fu_623_p1;
                p_Val2_19_reg_1095 <= p_Val2_19_fu_718_p2;
                sdiv_ln1148_reg_1080 <= grp_fu_597_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                s_index_reg_1015 <= s_index_fu_351_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln186_reg_1025 = ap_const_lv1_0))) then
                sum_x_reg_1045 <= sum_x_fu_435_p2;
                sum_xy_reg_1055 <= sum_xy_fu_463_p2;
                sum_y_reg_1050 <= sum_y_fu_451_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_35_reg_1007 <= line_bases_q0(16 downto 16);
                    zext_ln352_reg_1002(2 downto 0) <= zext_ln352_fu_333_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_37_reg_1075 <= mul_ln196_1_fu_607_p2(41 downto 24);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln352_fu_313_p2 = ap_const_lv1_0))) then
                    zext_ln353_reg_991(2 downto 0) <= zext_ln353_fu_325_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln353_reg_991(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln352_reg_1002(7 downto 3) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln352_fu_313_p2, ap_CS_fsm_state3, tmp_35_fu_337_p3, icmp_ln356_fu_345_p2, ap_enable_reg_pp0_iter0, icmp_ln186_fu_406_p2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_block_pp1_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln352_fu_313_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_35_fu_337_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state83;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln356_fu_345_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln356_fu_345_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln186_fu_406_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif ((((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln186_fu_406_p2 = ap_const_lv1_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln357_fu_387_p2 <= std_logic_vector(unsigned(zext_ln352_reg_1002) + unsigned(sub_ln357_fu_381_p2));
    add_ln555_fu_696_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(tmp_s_fu_668_p4));
    add_ln851_fu_775_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(tmp_7_fu_765_p4));
    and_ln363_1_fu_833_p2 <= (icmp_ln1495_fu_817_p2 and icmp_ln1494_fu_822_p2);
    and_ln363_2_fu_839_p2 <= (and_ln363_fu_827_p2 and and_ln363_1_fu_833_p2);
    and_ln363_fu_827_p2 <= (xor_ln363_fu_805_p2 and icmp_ln363_fu_811_p2);
    and_ln364_1_fu_889_p2 <= (and_ln364_fu_877_p2 and and_ln364_2_fu_883_p2);
    and_ln364_2_fu_883_p2 <= (icmp_ln1495_1_fu_871_p2 and icmp_ln1494_1_fu_857_p2);
    and_ln364_fu_877_p2 <= (icmp_ln363_2_fu_851_p2 and icmp_ln363_1_fu_845_p2);
    and_ln365_1_fu_929_p2 <= (and_ln365_fu_917_p2 and and_ln365_2_fu_923_p2);
    and_ln365_2_fu_923_p2 <= (icmp_ln1495_2_fu_907_p2 and icmp_ln1494_2_fu_912_p2);
    and_ln365_fu_917_p2 <= (icmp_ln364_fu_895_p2 and icmp_ln364_1_fu_901_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(7);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state79 <= ap_CS_fsm(74);
    ap_CS_fsm_state82 <= ap_CS_fsm(77);
    ap_CS_fsm_state83 <= ap_CS_fsm(78);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln356_fu_345_p2)
    begin
        if ((icmp_ln356_fu_345_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state7_assign_proc : process(icmp_ln186_fu_406_p2)
    begin
        if ((icmp_ln186_fu_406_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln352_fu_313_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln352_fu_313_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_i_phi_fu_301_p4_assign_proc : process(i_0_i_reg_297, icmp_ln186_reg_1025, ap_CS_fsm_pp1_stage0, i_reg_1029, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln186_reg_1025 = ap_const_lv1_0))) then 
            ap_phi_mux_i_0_i_phi_fu_301_p4 <= i_reg_1029;
        else 
            ap_phi_mux_i_0_i_phi_fu_301_p4 <= i_0_i_reg_297;
        end if; 
    end process;


    ap_phi_mux_s_index_0_i_phi_fu_241_p4_assign_proc : process(s_index_0_i_reg_237, icmp_ln356_reg_1011, ap_CS_fsm_pp0_stage0, s_index_reg_1015, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln356_reg_1011 = ap_const_lv1_0))) then 
            ap_phi_mux_s_index_0_i_phi_fu_241_p4 <= s_index_reg_1015;
        else 
            ap_phi_mux_s_index_0_i_phi_fu_241_p4 <= s_index_0_i_reg_237;
        end if; 
    end process;


    ap_phi_mux_sum_x_0_i_phi_fu_253_p4_assign_proc : process(sum_x_0_i_reg_249, icmp_ln186_reg_1025_pp1_iter1_reg, ap_CS_fsm_pp1_stage1, sum_x_reg_1045, ap_enable_reg_pp1_iter1, ap_block_pp1_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln186_reg_1025_pp1_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_sum_x_0_i_phi_fu_253_p4 <= sum_x_reg_1045;
        else 
            ap_phi_mux_sum_x_0_i_phi_fu_253_p4 <= sum_x_0_i_reg_249;
        end if; 
    end process;


    ap_phi_mux_sum_xy_0_i_phi_fu_277_p4_assign_proc : process(sum_xy_0_i_reg_273, icmp_ln186_reg_1025_pp1_iter1_reg, ap_CS_fsm_pp1_stage1, sum_xy_reg_1055, ap_enable_reg_pp1_iter1, ap_block_pp1_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln186_reg_1025_pp1_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_sum_xy_0_i_phi_fu_277_p4 <= sum_xy_reg_1055;
        else 
            ap_phi_mux_sum_xy_0_i_phi_fu_277_p4 <= sum_xy_0_i_reg_273;
        end if; 
    end process;


    ap_phi_mux_sum_y_0_i_phi_fu_265_p4_assign_proc : process(sum_y_0_i_reg_261, icmp_ln186_reg_1025_pp1_iter1_reg, ap_CS_fsm_pp1_stage1, sum_y_reg_1050, ap_enable_reg_pp1_iter1, ap_block_pp1_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln186_reg_1025_pp1_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_sum_y_0_i_phi_fu_265_p4 <= sum_y_reg_1050;
        else 
            ap_phi_mux_sum_y_0_i_phi_fu_265_p4 <= sum_y_0_i_reg_261;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln352_fu_313_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln352_fu_313_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= lines_founded_write_s_fu_152;
    centroids_address0 <= zext_ln357_3_fu_396_p1(7 - 1 downto 0);

    centroids_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            centroids_ce0 <= ap_const_logic_1;
        else 
            centroids_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    centroids_y_1_load_n_fu_441_p4 <= line_centroids_q0(47 downto 16);
    final_lines_b_addr_fu_935_p4 <= ((p_Val2_19_reg_1095 & m_V_reg_1085) & ap_const_lv1_1);

    grp_fu_597_ap_start_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_597_ap_start <= ap_const_logic_1;
        else 
            grp_fu_597_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_597_p0 <= (sub_ln731_1_fu_521_p2 & ap_const_lv16_0);
    grp_fu_960_p0 <= zext_ln188_1_fu_427_p1(16 - 1 downto 0);
    grp_fu_960_p1 <= zext_ln188_1_fu_427_p1(16 - 1 downto 0);
    grp_fu_968_p0 <= ap_const_lv33_B4(9 - 1 downto 0);
    i_fu_412_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_i_phi_fu_301_p4) + unsigned(ap_const_lv4_1));
    icmp_ln1494_1_fu_857_p2 <= "1" when (signed(m_V_reg_1085) > signed(ap_const_lv24_23)) else "0";
    icmp_ln1494_2_fu_912_p2 <= "1" when (signed(m_V_reg_1085) > signed(ap_const_lv24_FFFF99)) else "0";
    icmp_ln1494_fu_822_p2 <= "1" when (signed(m_V_reg_1085) > signed(ap_const_lv24_FFFF00)) else "0";
    icmp_ln1495_1_fu_871_p2 <= "1" when (signed(tmp_41_fu_862_p4) < signed(ap_const_lv16_1)) else "0";
    icmp_ln1495_2_fu_907_p2 <= "1" when (signed(m_V_reg_1085) < signed(ap_const_lv24_66)) else "0";
    icmp_ln1495_fu_817_p2 <= "1" when (signed(m_V_reg_1085) < signed(ap_const_lv24_FFFFDC)) else "0";
    icmp_ln186_fu_406_p2 <= "1" when (ap_phi_mux_i_0_i_phi_fu_301_p4 = ap_const_lv4_C) else "0";
    icmp_ln352_fu_313_p2 <= "1" when (line_index_0_i_reg_225 = ap_const_lv3_6) else "0";
    icmp_ln356_fu_345_p2 <= "1" when (ap_phi_mux_s_index_0_i_phi_fu_241_p4 = ap_const_lv4_C) else "0";
    icmp_ln363_1_fu_845_p2 <= "1" when (signed(y_temp_fu_789_p3) > signed(ap_const_lv32_D4)) else "0";
    icmp_ln363_2_fu_851_p2 <= "1" when (signed(y_temp_fu_789_p3) < signed(ap_const_lv32_140)) else "0";
    icmp_ln363_fu_811_p2 <= "1" when (signed(y_temp_fu_789_p3) < signed(ap_const_lv32_6B)) else "0";
    icmp_ln364_1_fu_901_p2 <= "1" when (signed(y_temp_fu_789_p3) > signed(ap_const_lv32_6A)) else "0";
    icmp_ln364_fu_895_p2 <= "1" when (signed(y_temp_fu_789_p3) < signed(ap_const_lv32_D5)) else "0";
    icmp_ln851_6_fu_690_p2 <= "1" when (trunc_ln851_fu_686_p1 = ap_const_lv8_0) else "0";
    icmp_ln851_fu_759_p2 <= "1" when (trunc_ln851_8_fu_756_p1 = ap_const_lv8_0) else "0";
        lhs_V_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_968_p2),41));

    line_bases_address0 <= zext_ln353_fu_325_p1(3 - 1 downto 0);

    line_bases_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            line_bases_ce0 <= ap_const_logic_1;
        else 
            line_bases_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_centroids_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp1_stage0, zext_ln357_fu_401_p1, zext_ln188_fu_418_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            line_centroids_address0 <= zext_ln188_fu_418_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_centroids_address0 <= zext_ln357_fu_401_p1(4 - 1 downto 0);
        else 
            line_centroids_address0 <= "XXXX";
        end if; 
    end process;


    line_centroids_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            line_centroids_ce0 <= ap_const_logic_1;
        else 
            line_centroids_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_centroids_we0_assign_proc : process(icmp_ln356_reg_1011, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln356_reg_1011 = ap_const_lv1_0))) then 
            line_centroids_we0 <= ap_const_logic_1;
        else 
            line_centroids_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_index_fu_319_p2 <= std_logic_vector(unsigned(line_index_0_i_reg_225) + unsigned(ap_const_lv3_1));
    lines_addr_gep_fu_217_p3 <= zext_ln353_reg_991(3 - 1 downto 0);

    lines_address0_assign_proc : process(zext_ln353_reg_991, and_ln363_2_fu_839_p2, ap_CS_fsm_state82, and_ln364_1_fu_889_p2, and_ln365_1_fu_929_p2, lines_addr_1_reg_1118, ap_CS_fsm_state83, lines_addr_gep_fu_217_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            lines_address0 <= lines_addr_1_reg_1118;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) and ((ap_const_lv1_1 = and_ln363_2_fu_839_p2) or ((ap_const_lv1_1 = and_ln365_1_fu_929_p2) or (ap_const_lv1_1 = and_ln364_1_fu_889_p2))))) then 
            lines_address0 <= lines_addr_gep_fu_217_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) and (ap_const_lv1_0 = and_ln365_1_fu_929_p2) and (ap_const_lv1_0 = and_ln364_1_fu_889_p2) and (ap_const_lv1_0 = and_ln363_2_fu_839_p2))) then 
            lines_address0 <= zext_ln353_reg_991(3 - 1 downto 0);
        else 
            lines_address0 <= "XXX";
        end if; 
    end process;


    lines_ce0_assign_proc : process(and_ln363_2_fu_839_p2, ap_CS_fsm_state82, and_ln364_1_fu_889_p2, and_ln365_1_fu_929_p2, ap_CS_fsm_state83)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state83) or ((ap_const_logic_1 = ap_CS_fsm_state82) and ((ap_const_lv1_1 = and_ln363_2_fu_839_p2) or ((ap_const_lv1_1 = and_ln365_1_fu_929_p2) or (ap_const_lv1_1 = and_ln364_1_fu_889_p2)))) or ((ap_const_logic_1 = ap_CS_fsm_state82) and (ap_const_lv1_0 = and_ln365_1_fu_929_p2) and (ap_const_lv1_0 = and_ln364_1_fu_889_p2) and (ap_const_lv1_0 = and_ln363_2_fu_839_p2)))) then 
            lines_ce0 <= ap_const_logic_1;
        else 
            lines_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lines_d0_assign_proc : process(and_ln363_2_fu_839_p2, ap_CS_fsm_state82, and_ln364_1_fu_889_p2, and_ln365_1_fu_929_p2, ap_CS_fsm_state83, final_lines_b_addr_fu_935_p4, tmp_42_fu_949_p4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            lines_d0 <= tmp_42_fu_949_p4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) and ((ap_const_lv1_1 = and_ln363_2_fu_839_p2) or ((ap_const_lv1_1 = and_ln365_1_fu_929_p2) or (ap_const_lv1_1 = and_ln364_1_fu_889_p2))))) then 
            lines_d0 <= final_lines_b_addr_fu_935_p4;
        else 
            lines_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    lines_we0_assign_proc : process(tmp_35_reg_1007, and_ln363_2_fu_839_p2, and_ln363_2_reg_1106, ap_CS_fsm_state82, and_ln364_1_fu_889_p2, and_ln364_1_reg_1110, and_ln365_1_fu_929_p2, and_ln365_1_reg_1114, ap_CS_fsm_state83)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state83) and (tmp_35_reg_1007 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln365_1_reg_1114) and (ap_const_lv1_0 = and_ln364_1_reg_1110) and (ap_const_lv1_0 = and_ln363_2_reg_1106)) or ((ap_const_logic_1 = ap_CS_fsm_state82) and ((ap_const_lv1_1 = and_ln363_2_fu_839_p2) or ((ap_const_lv1_1 = and_ln365_1_fu_929_p2) or (ap_const_lv1_1 = and_ln364_1_fu_889_p2)))))) then 
            lines_we0 <= ap_const_logic_1;
        else 
            lines_we0 <= ap_const_logic_0;
        end if; 
    end process;

    m_V_fu_623_p1 <= grp_fu_597_p2(24 - 1 downto 0);
    mul_ln190_fu_457_p0 <= zext_ln188_1_fu_427_p1(16 - 1 downto 0);
    mul_ln190_fu_457_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln190_fu_457_p0) * signed(centroids_y_1_load_n_fu_441_p4))), 32));
    mul_ln196_1_fu_607_p1 <= mul_ln196_1_fu_607_p10(20 - 1 downto 0);
    mul_ln196_1_fu_607_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_x_0_i_reg_249),42));
    mul_ln196_1_fu_607_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv42_155556) * unsigned(mul_ln196_1_fu_607_p1), 42));
    mul_ln196_fu_631_p1 <= mul_ln196_fu_631_p10(32 - 1 downto 0);
    mul_ln196_fu_631_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_y_0_i_reg_261),65));
    mul_ln196_fu_631_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv65_155555556) * unsigned(mul_ln196_fu_631_p1), 65));
    mul_ln731_1_fu_561_p0 <= zext_ln731_3_fu_507_p1(20 - 1 downto 0);
    mul_ln731_1_fu_561_p1 <= zext_ln731_3_fu_507_p1(20 - 1 downto 0);
    mul_ln731_1_fu_561_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln731_1_fu_561_p0) * unsigned(mul_ln731_1_fu_561_p1), 40));
    mul_ln731_fu_515_p0 <= mul_ln731_fu_515_p00(20 - 1 downto 0);
    mul_ln731_fu_515_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_x_0_i_reg_249),48));
    mul_ln731_fu_515_p1 <= mul_ln731_fu_515_p10(32 - 1 downto 0);
    mul_ln731_fu_515_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_y_0_i_reg_261),48));
    mul_ln731_fu_515_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln731_fu_515_p0) * unsigned(mul_ln731_fu_515_p1), 48));
    p_Result_2_fu_748_p3 <= ret_V_fu_742_p2(40 downto 40);
    p_Result_s_fu_678_p3 <= r_V_fu_662_p2(39 downto 39);
    p_Val2_19_fu_718_p2 <= std_logic_vector(unsigned(zext_ln196_1_fu_647_p1) - unsigned(select_ln850_fu_710_p3));
    r_V_fu_662_p0 <= r_V_fu_662_p00(20 - 1 downto 0);
    r_V_fu_662_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_651_p1),40));
    r_V_fu_662_p1 <= m_V_fu_623_p1;
    r_V_fu_662_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &r_V_fu_662_p0) * signed(r_V_fu_662_p1))), 40));
    ret_V_fu_742_p2 <= std_logic_vector(signed(lhs_V_fu_728_p1) + signed(sext_ln728_fu_738_p1));
    rhs_V_fu_731_p3 <= (p_Val2_19_reg_1095 & ap_const_lv8_0);
    s_index_fu_351_p2 <= std_logic_vector(unsigned(ap_phi_mux_s_index_0_i_phi_fu_241_p4) + unsigned(ap_const_lv4_1));
    select_ln555_fu_702_p3 <= 
        tmp_s_fu_668_p4 when (icmp_ln851_6_fu_690_p2(0) = '1') else 
        add_ln555_fu_696_p2;
    select_ln850_fu_710_p3 <= 
        select_ln555_fu_702_p3 when (p_Result_s_fu_678_p3(0) = '1') else 
        tmp_s_fu_668_p4;
    select_ln851_fu_781_p3 <= 
        tmp_7_fu_765_p4 when (icmp_ln851_fu_759_p2(0) = '1') else 
        add_ln851_fu_775_p2;
        sext_ln357_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln357_fu_387_p2),32));

        sext_ln728_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_fu_731_p3),41));

        sext_ln731_1_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln731_2_fu_551_p2),41));

        sext_ln731_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln731_fu_493_p2),48));

    shl_ln357_1_fu_369_p3 <= (ap_phi_mux_s_index_0_i_phi_fu_241_p4 & ap_const_lv1_0);
    shl_ln6_fu_469_p3 <= (sum_xy_0_i_reg_273 & ap_const_lv4_0);
    shl_ln731_1_fu_481_p3 <= (sum_xy_0_i_reg_273 & ap_const_lv2_0);
    shl_ln731_2_fu_527_p3 <= (sum_xx_0_i_reg_285 & ap_const_lv4_0);
    shl_ln731_3_fu_539_p3 <= (sum_xx_0_i_reg_285 & ap_const_lv2_0);
    shl_ln_fu_357_p3 <= (ap_phi_mux_s_index_0_i_phi_fu_241_p4 & ap_const_lv3_0);
    sub_ln357_fu_381_p2 <= std_logic_vector(unsigned(zext_ln357_1_fu_365_p1) - unsigned(zext_ln357_2_fu_377_p1));
    sub_ln731_1_fu_521_p2 <= std_logic_vector(signed(sext_ln731_fu_499_p1) - signed(mul_ln731_fu_515_p2));
    sub_ln731_2_fu_551_p2 <= std_logic_vector(unsigned(zext_ln731_5_fu_535_p1) - unsigned(zext_ln731_6_fu_547_p1));
    sub_ln731_3_fu_571_p2 <= std_logic_vector(signed(sext_ln731_1_fu_557_p1) - signed(zext_ln731_7_fu_567_p1));
    sub_ln731_fu_493_p2 <= std_logic_vector(unsigned(zext_ln731_fu_477_p1) - unsigned(zext_ln731_1_fu_489_p1));
    sum_x_fu_435_p2 <= std_logic_vector(unsigned(ap_phi_mux_sum_x_0_i_phi_fu_253_p4) + unsigned(zext_ln188_2_fu_431_p1));
    sum_xy_fu_463_p2 <= std_logic_vector(unsigned(ap_phi_mux_sum_xy_0_i_phi_fu_277_p4) + unsigned(mul_ln190_fu_457_p2));
    sum_y_fu_451_p2 <= std_logic_vector(unsigned(ap_phi_mux_sum_y_0_i_phi_fu_265_p4) + unsigned(centroids_y_1_load_n_fu_441_p4));
    tmp_35_fu_337_p3 <= line_bases_q0(16 downto 16);
    tmp_36_fu_637_p4 <= mul_ln196_fu_631_p2(64 downto 36);
    tmp_40_fu_797_p3 <= y_temp_fu_789_p3(31 downto 31);
    tmp_41_fu_862_p4 <= sdiv_ln1148_reg_1080(23 downto 8);
    
    tmp_42_fu_949_p4_proc : process(lines_q0)
    begin
        tmp_42_fu_949_p4 <= lines_q0;
        tmp_42_fu_949_p4(0) <= ap_const_lv1_0(0);
    end process;

    tmp_7_fu_765_p4 <= ret_V_fu_742_p2(39 downto 8);
        tmp_V_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_37_reg_1075),20));

    tmp_fu_577_p3 <= (sub_ln731_3_fu_571_p2 & ap_const_lv8_0);
    tmp_s_fu_668_p4 <= r_V_fu_662_p2(39 downto 8);
    trunc_ln188_fu_423_p1 <= line_centroids_q0(16 - 1 downto 0);
    trunc_ln851_8_fu_756_p1 <= grp_fu_968_p2(8 - 1 downto 0);
    trunc_ln851_fu_686_p1 <= r_V_fu_662_p2(8 - 1 downto 0);
    xor_ln363_fu_805_p2 <= (tmp_40_fu_797_p3 xor ap_const_lv1_1);
    y_temp_fu_789_p3 <= 
        select_ln851_fu_781_p3 when (p_Result_2_fu_748_p3(0) = '1') else 
        tmp_7_fu_765_p4;
    zext_ln188_1_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln188_fu_423_p1),32));
    zext_ln188_2_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln188_fu_423_p1),20));
    zext_ln188_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_0_i_phi_fu_301_p4),64));
    zext_ln196_1_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_36_fu_637_p4),32));
    zext_ln352_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(line_index_0_i_reg_225),8));
    zext_ln353_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(line_index_0_i_reg_225),64));
    zext_ln357_1_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_357_p3),8));
    zext_ln357_2_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln357_1_fu_369_p3),8));
    zext_ln357_3_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln357_fu_392_p1),64));
    zext_ln357_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(s_index_0_i_reg_237),64));
    zext_ln731_1_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln731_1_fu_481_p3),37));
    zext_ln731_3_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_x_0_i_reg_249),40));
    zext_ln731_5_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln731_2_fu_527_p3),37));
    zext_ln731_6_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln731_3_fu_539_p3),37));
    zext_ln731_7_fu_567_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln731_1_fu_561_p2),41));
    zext_ln731_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln6_fu_469_p3),37));
end behav;
