-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity OtsuThreshold is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_src_mat_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    p_src_mat_data_V_empty_n : IN STD_LOGIC;
    p_src_mat_data_V_read : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of OtsuThreshold is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal hist_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal hist_ce0 : STD_LOGIC;
    signal hist_we0 : STD_LOGIC;
    signal hist_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_xfOtsuKernel_fu_28_ap_start : STD_LOGIC;
    signal grp_xfOtsuKernel_fu_28_ap_done : STD_LOGIC;
    signal grp_xfOtsuKernel_fu_28_ap_idle : STD_LOGIC;
    signal grp_xfOtsuKernel_fu_28_ap_ready : STD_LOGIC;
    signal grp_xfOtsuKernel_fu_28_p_hist_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_xfOtsuKernel_fu_28_p_hist_ce0 : STD_LOGIC;
    signal grp_xfOtsuKernel_fu_28_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_xFHistogramKernel_fu_35_ap_start : STD_LOGIC;
    signal grp_xFHistogramKernel_fu_35_ap_done : STD_LOGIC;
    signal grp_xFHistogramKernel_fu_35_ap_idle : STD_LOGIC;
    signal grp_xFHistogramKernel_fu_35_ap_ready : STD_LOGIC;
    signal grp_xFHistogramKernel_fu_35_p_src_mat_data_V_read : STD_LOGIC;
    signal grp_xFHistogramKernel_fu_35_hist_array_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_xFHistogramKernel_fu_35_hist_array_ce0 : STD_LOGIC;
    signal grp_xFHistogramKernel_fu_35_hist_array_we0 : STD_LOGIC;
    signal grp_xFHistogramKernel_fu_35_hist_array_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_xfOtsuKernel_fu_28_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_xFHistogramKernel_fu_35_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_return_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component xfOtsuKernel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_hist_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_hist_ce0 : OUT STD_LOGIC;
        p_hist_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component xFHistogramKernel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_mat_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_mat_data_V_empty_n : IN STD_LOGIC;
        p_src_mat_data_V_read : OUT STD_LOGIC;
        hist_array_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        hist_array_ce0 : OUT STD_LOGIC;
        hist_array_we0 : OUT STD_LOGIC;
        hist_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component xFHistogramKerneludo IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    hist_U : component xFHistogramKerneludo
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hist_address0,
        ce0 => hist_ce0,
        we0 => hist_we0,
        d0 => grp_xFHistogramKernel_fu_35_hist_array_d0,
        q0 => hist_q0);

    grp_xfOtsuKernel_fu_28 : component xfOtsuKernel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_xfOtsuKernel_fu_28_ap_start,
        ap_done => grp_xfOtsuKernel_fu_28_ap_done,
        ap_idle => grp_xfOtsuKernel_fu_28_ap_idle,
        ap_ready => grp_xfOtsuKernel_fu_28_ap_ready,
        p_hist_address0 => grp_xfOtsuKernel_fu_28_p_hist_address0,
        p_hist_ce0 => grp_xfOtsuKernel_fu_28_p_hist_ce0,
        p_hist_q0 => hist_q0,
        ap_return => grp_xfOtsuKernel_fu_28_ap_return);

    grp_xFHistogramKernel_fu_35 : component xFHistogramKernel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_xFHistogramKernel_fu_35_ap_start,
        ap_done => grp_xFHistogramKernel_fu_35_ap_done,
        ap_idle => grp_xFHistogramKernel_fu_35_ap_idle,
        ap_ready => grp_xFHistogramKernel_fu_35_ap_ready,
        p_src_mat_data_V_dout => p_src_mat_data_V_dout,
        p_src_mat_data_V_empty_n => p_src_mat_data_V_empty_n,
        p_src_mat_data_V_read => grp_xFHistogramKernel_fu_35_p_src_mat_data_V_read,
        hist_array_address0 => grp_xFHistogramKernel_fu_35_hist_array_address0,
        hist_array_ce0 => grp_xFHistogramKernel_fu_35_hist_array_ce0,
        hist_array_we0 => grp_xFHistogramKernel_fu_35_hist_array_we0,
        hist_array_d0 => grp_xFHistogramKernel_fu_35_hist_array_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv8_0;
            else
                if (((grp_xfOtsuKernel_fu_28_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_return_preg <= grp_xfOtsuKernel_fu_28_ap_return;
                end if; 
            end if;
        end if;
    end process;


    grp_xFHistogramKernel_fu_35_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_xFHistogramKernel_fu_35_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_xFHistogramKernel_fu_35_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_xFHistogramKernel_fu_35_ap_ready = ap_const_logic_1)) then 
                    grp_xFHistogramKernel_fu_35_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_xfOtsuKernel_fu_28_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_xfOtsuKernel_fu_28_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_xfOtsuKernel_fu_28_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_xfOtsuKernel_fu_28_ap_ready = ap_const_logic_1)) then 
                    grp_xfOtsuKernel_fu_28_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_xfOtsuKernel_fu_28_ap_done, grp_xFHistogramKernel_fu_35_ap_done, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_xFHistogramKernel_fu_35_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_xfOtsuKernel_fu_28_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_xfOtsuKernel_fu_28_ap_done, ap_CS_fsm_state4)
    begin
        if ((((grp_xfOtsuKernel_fu_28_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_xfOtsuKernel_fu_28_ap_done, ap_CS_fsm_state4)
    begin
        if (((grp_xfOtsuKernel_fu_28_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(grp_xfOtsuKernel_fu_28_ap_done, grp_xfOtsuKernel_fu_28_ap_return, ap_CS_fsm_state4, ap_return_preg)
    begin
        if (((grp_xfOtsuKernel_fu_28_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_return <= grp_xfOtsuKernel_fu_28_ap_return;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    grp_xFHistogramKernel_fu_35_ap_start <= grp_xFHistogramKernel_fu_35_ap_start_reg;
    grp_xfOtsuKernel_fu_28_ap_start <= grp_xfOtsuKernel_fu_28_ap_start_reg;

    hist_address0_assign_proc : process(grp_xfOtsuKernel_fu_28_p_hist_address0, grp_xFHistogramKernel_fu_35_hist_array_address0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            hist_address0 <= grp_xFHistogramKernel_fu_35_hist_array_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            hist_address0 <= grp_xfOtsuKernel_fu_28_p_hist_address0;
        else 
            hist_address0 <= "XXXXXXXX";
        end if; 
    end process;


    hist_ce0_assign_proc : process(grp_xfOtsuKernel_fu_28_p_hist_ce0, grp_xFHistogramKernel_fu_35_hist_array_ce0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            hist_ce0 <= grp_xFHistogramKernel_fu_35_hist_array_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            hist_ce0 <= grp_xfOtsuKernel_fu_28_p_hist_ce0;
        else 
            hist_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hist_we0_assign_proc : process(grp_xFHistogramKernel_fu_35_hist_array_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            hist_we0 <= grp_xFHistogramKernel_fu_35_hist_array_we0;
        else 
            hist_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p_src_mat_data_V_read_assign_proc : process(grp_xFHistogramKernel_fu_35_p_src_mat_data_V_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_src_mat_data_V_read <= grp_xFHistogramKernel_fu_35_p_src_mat_data_V_read;
        else 
            p_src_mat_data_V_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
