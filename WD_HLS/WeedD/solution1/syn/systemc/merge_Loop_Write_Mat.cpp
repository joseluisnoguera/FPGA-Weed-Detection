// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "merge_Loop_Write_Mat.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic merge_Loop_Write_Mat::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic merge_Loop_Write_Mat::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> merge_Loop_Write_Mat::ap_ST_fsm_state1 = "1";
const sc_lv<3> merge_Loop_Write_Mat::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> merge_Loop_Write_Mat::ap_ST_fsm_state4 = "100";
const sc_lv<32> merge_Loop_Write_Mat::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool merge_Loop_Write_Mat::ap_const_boolean_1 = true;
const sc_lv<32> merge_Loop_Write_Mat::ap_const_lv32_1 = "1";
const bool merge_Loop_Write_Mat::ap_const_boolean_0 = false;
const sc_lv<1> merge_Loop_Write_Mat::ap_const_lv1_0 = "0";
const sc_lv<1> merge_Loop_Write_Mat::ap_const_lv1_1 = "1";
const sc_lv<16> merge_Loop_Write_Mat::ap_const_lv16_0 = "0000000000000000";
const sc_lv<16> merge_Loop_Write_Mat::ap_const_lv16_E100 = "1110000100000000";
const sc_lv<16> merge_Loop_Write_Mat::ap_const_lv16_1 = "1";
const sc_lv<32> merge_Loop_Write_Mat::ap_const_lv32_2 = "10";

merge_Loop_Write_Mat::merge_Loop_Write_Mat(sc_module_name name) : sc_module(name), mVcdFile(0) {
    call_ln341_write_1_fu_63 = new write_1("call_ln341_write_1_fu_63");
    call_ln341_write_1_fu_63->ap_clk(ap_clk);
    call_ln341_write_1_fu_63->ap_rst(ap_rst);
    call_ln341_write_1_fu_63->ap_start(call_ln341_write_1_fu_63_ap_start);
    call_ln341_write_1_fu_63->ap_done(call_ln341_write_1_fu_63_ap_done);
    call_ln341_write_1_fu_63->ap_idle(call_ln341_write_1_fu_63_ap_idle);
    call_ln341_write_1_fu_63->ap_ready(call_ln341_write_1_fu_63_ap_ready);
    call_ln341_write_1_fu_63->val_V(p_out_V_V_dout);
    call_ln341_write_1_fu_63->Mat_9_180_320_1_data_V_addr_din(call_ln341_write_1_fu_63_Mat_9_180_320_1_data_V_addr_din);
    call_ln341_write_1_fu_63->Mat_9_180_320_1_data_V_addr_full_n(p_dst_data_V_full_n);
    call_ln341_write_1_fu_63->Mat_9_180_320_1_data_V_addr_write(call_ln341_write_1_fu_63_Mat_9_180_320_1_data_V_addr_write);
    call_ln341_write_1_fu_63->Mat_9_180_320_1_data_V_addr_blk_n(call_ln341_write_1_fu_63_Mat_9_180_320_1_data_V_addr_blk_n);
    call_ln341_write_1_fu_63->ap_ce(call_ln341_write_1_fu_63_ap_ce);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln333_fu_77_p2);
    sensitive << ( indvar_flatten_reg_52 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( p_out_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln333_reg_83 );
    sensitive << ( call_ln341_write_1_fu_63_Mat_9_180_320_1_data_V_addr_blk_n );

    SC_METHOD(thread_ap_block_pp0_stage0_11001_ignoreCallOp17);
    sensitive << ( p_out_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln333_reg_83 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( p_out_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln333_reg_83 );
    sensitive << ( call_ln341_write_1_fu_63_Mat_9_180_320_1_data_V_addr_blk_n );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0_ignore_call4);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);
    sensitive << ( p_out_V_V_empty_n );
    sensitive << ( icmp_ln333_reg_83 );
    sensitive << ( call_ln341_write_1_fu_63_Mat_9_180_320_1_data_V_addr_blk_n );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1_ignore_call4);
    sensitive << ( p_out_V_V_empty_n );
    sensitive << ( icmp_ln333_reg_83 );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( icmp_ln333_fu_71_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_call_ln341_write_1_fu_63_ap_ce);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001_ignoreCallOp17 );

    SC_METHOD(thread_call_ln341_write_1_fu_63_ap_start);
    sensitive << ( call_ln341_write_1_fu_63_ap_start_reg );

    SC_METHOD(thread_icmp_ln333_fu_71_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( indvar_flatten_reg_52 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_p_dst_data_V_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln333_reg_83 );
    sensitive << ( call_ln341_write_1_fu_63_Mat_9_180_320_1_data_V_addr_blk_n );

    SC_METHOD(thread_p_dst_data_V_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln333_reg_83 );
    sensitive << ( call_ln341_write_1_fu_63_Mat_9_180_320_1_data_V_addr_din );

    SC_METHOD(thread_p_dst_data_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln333_reg_83 );
    sensitive << ( call_ln341_write_1_fu_63_Mat_9_180_320_1_data_V_addr_write );

    SC_METHOD(thread_p_out_V_V_blk_n);
    sensitive << ( p_out_V_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln333_reg_83 );

    SC_METHOD(thread_p_out_V_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln333_reg_83 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln333_fu_71_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    call_ln341_write_1_fu_63_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "merge_Loop_Write_Mat_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, p_out_V_V_dout, "(port)p_out_V_V_dout");
    sc_trace(mVcdFile, p_out_V_V_empty_n, "(port)p_out_V_V_empty_n");
    sc_trace(mVcdFile, p_out_V_V_read, "(port)p_out_V_V_read");
    sc_trace(mVcdFile, p_dst_data_V_din, "(port)p_dst_data_V_din");
    sc_trace(mVcdFile, p_dst_data_V_full_n, "(port)p_dst_data_V_full_n");
    sc_trace(mVcdFile, p_dst_data_V_write, "(port)p_dst_data_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, p_out_V_V_blk_n, "p_out_V_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln333_reg_83, "icmp_ln333_reg_83");
    sc_trace(mVcdFile, call_ln341_write_1_fu_63_Mat_9_180_320_1_data_V_addr_blk_n, "call_ln341_write_1_fu_63_Mat_9_180_320_1_data_V_addr_blk_n");
    sc_trace(mVcdFile, p_dst_data_V_blk_n, "p_dst_data_V_blk_n");
    sc_trace(mVcdFile, indvar_flatten_reg_52, "indvar_flatten_reg_52");
    sc_trace(mVcdFile, icmp_ln333_fu_71_p2, "icmp_ln333_fu_71_p2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, add_ln333_fu_77_p2, "add_ln333_fu_77_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, call_ln341_write_1_fu_63_ap_start, "call_ln341_write_1_fu_63_ap_start");
    sc_trace(mVcdFile, call_ln341_write_1_fu_63_ap_done, "call_ln341_write_1_fu_63_ap_done");
    sc_trace(mVcdFile, call_ln341_write_1_fu_63_ap_idle, "call_ln341_write_1_fu_63_ap_idle");
    sc_trace(mVcdFile, call_ln341_write_1_fu_63_ap_ready, "call_ln341_write_1_fu_63_ap_ready");
    sc_trace(mVcdFile, call_ln341_write_1_fu_63_Mat_9_180_320_1_data_V_addr_din, "call_ln341_write_1_fu_63_Mat_9_180_320_1_data_V_addr_din");
    sc_trace(mVcdFile, call_ln341_write_1_fu_63_Mat_9_180_320_1_data_V_addr_write, "call_ln341_write_1_fu_63_Mat_9_180_320_1_data_V_addr_write");
    sc_trace(mVcdFile, call_ln341_write_1_fu_63_ap_ce, "call_ln341_write_1_fu_63_ap_ce");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0_ignore_call4, "ap_block_state2_pp0_stage0_iter0_ignore_call4");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1_ignore_call4, "ap_block_state3_pp0_stage0_iter1_ignore_call4");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001_ignoreCallOp17, "ap_block_pp0_stage0_11001_ignoreCallOp17");
    sc_trace(mVcdFile, call_ln341_write_1_fu_63_ap_start_reg, "call_ln341_write_1_fu_63_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

merge_Loop_Write_Mat::~merge_Loop_Write_Mat() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete call_ln341_write_1_fu_63;
}

void merge_Loop_Write_Mat::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        call_ln341_write_1_fu_63_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln333_fu_71_p2.read()))) {
            call_ln341_write_1_fu_63_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, call_ln341_write_1_fu_63_ap_ready.read())) {
            call_ln341_write_1_fu_63_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln333_fu_71_p2.read()))) {
        indvar_flatten_reg_52 = add_ln333_fu_77_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        indvar_flatten_reg_52 = ap_const_lv16_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln333_reg_83 = icmp_ln333_fu_71_p2.read();
    }
}

void merge_Loop_Write_Mat::thread_add_ln333_fu_77_p2() {
    add_ln333_fu_77_p2 = (!indvar_flatten_reg_52.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_biguint<16>(indvar_flatten_reg_52.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void merge_Loop_Write_Mat::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void merge_Loop_Write_Mat::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void merge_Loop_Write_Mat::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[2];
}

void merge_Loop_Write_Mat::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void merge_Loop_Write_Mat::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && ((esl_seteq<1,1,1>(icmp_ln333_reg_83.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, p_out_V_V_empty_n.read())) || 
  (esl_seteq<1,1,1>(icmp_ln333_reg_83.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, call_ln341_write_1_fu_63_Mat_9_180_320_1_data_V_addr_blk_n.read()))));
}

void merge_Loop_Write_Mat::thread_ap_block_pp0_stage0_11001_ignoreCallOp17() {
    ap_block_pp0_stage0_11001_ignoreCallOp17 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(icmp_ln333_reg_83.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, p_out_V_V_empty_n.read()));
}

void merge_Loop_Write_Mat::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && ((esl_seteq<1,1,1>(icmp_ln333_reg_83.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, p_out_V_V_empty_n.read())) || 
  (esl_seteq<1,1,1>(icmp_ln333_reg_83.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, call_ln341_write_1_fu_63_Mat_9_180_320_1_data_V_addr_blk_n.read()))));
}

void merge_Loop_Write_Mat::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void merge_Loop_Write_Mat::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void merge_Loop_Write_Mat::thread_ap_block_state2_pp0_stage0_iter0_ignore_call4() {
    ap_block_state2_pp0_stage0_iter0_ignore_call4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void merge_Loop_Write_Mat::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = ((esl_seteq<1,1,1>(icmp_ln333_reg_83.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_out_V_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln333_reg_83.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, call_ln341_write_1_fu_63_Mat_9_180_320_1_data_V_addr_blk_n.read())));
}

void merge_Loop_Write_Mat::thread_ap_block_state3_pp0_stage0_iter1_ignore_call4() {
    ap_block_state3_pp0_stage0_iter1_ignore_call4 = (esl_seteq<1,1,1>(icmp_ln333_reg_83.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, p_out_V_V_empty_n.read()));
}

void merge_Loop_Write_Mat::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(icmp_ln333_fu_71_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void merge_Loop_Write_Mat::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void merge_Loop_Write_Mat::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void merge_Loop_Write_Mat::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void merge_Loop_Write_Mat::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void merge_Loop_Write_Mat::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void merge_Loop_Write_Mat::thread_call_ln341_write_1_fu_63_ap_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001_ignoreCallOp17.read(), ap_const_boolean_0))) {
        call_ln341_write_1_fu_63_ap_ce = ap_const_logic_1;
    } else {
        call_ln341_write_1_fu_63_ap_ce = ap_const_logic_0;
    }
}

void merge_Loop_Write_Mat::thread_call_ln341_write_1_fu_63_ap_start() {
    call_ln341_write_1_fu_63_ap_start = call_ln341_write_1_fu_63_ap_start_reg.read();
}

void merge_Loop_Write_Mat::thread_icmp_ln333_fu_71_p2() {
    icmp_ln333_fu_71_p2 = (!indvar_flatten_reg_52.read().is_01() || !ap_const_lv16_E100.is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_reg_52.read() == ap_const_lv16_E100);
}

void merge_Loop_Write_Mat::thread_p_dst_data_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln333_reg_83.read(), ap_const_lv1_0))) {
        p_dst_data_V_blk_n = call_ln341_write_1_fu_63_Mat_9_180_320_1_data_V_addr_blk_n.read();
    } else {
        p_dst_data_V_blk_n = ap_const_logic_1;
    }
}

void merge_Loop_Write_Mat::thread_p_dst_data_V_din() {
    p_dst_data_V_din = call_ln341_write_1_fu_63_Mat_9_180_320_1_data_V_addr_din.read();
}

void merge_Loop_Write_Mat::thread_p_dst_data_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln333_reg_83.read(), ap_const_lv1_0))) {
        p_dst_data_V_write = call_ln341_write_1_fu_63_Mat_9_180_320_1_data_V_addr_write.read();
    } else {
        p_dst_data_V_write = ap_const_logic_0;
    }
}

void merge_Loop_Write_Mat::thread_p_out_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln333_reg_83.read(), ap_const_lv1_0))) {
        p_out_V_V_blk_n = p_out_V_V_empty_n.read();
    } else {
        p_out_V_V_blk_n = ap_const_logic_1;
    }
}

void merge_Loop_Write_Mat::thread_p_out_V_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln333_reg_83.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        p_out_V_V_read = ap_const_logic_1;
    } else {
        p_out_V_V_read = ap_const_logic_0;
    }
}

void merge_Loop_Write_Mat::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln333_fu_71_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln333_fu_71_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

