// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "xfExtractPixels_1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic xfExtractPixels_1::ap_const_logic_1 = sc_dt::Log_1;
const bool xfExtractPixels_1::ap_const_boolean_1 = true;
const sc_logic xfExtractPixels_1::ap_const_logic_0 = sc_dt::Log_0;

xfExtractPixels_1::xfExtractPixels_1(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_ap_return);
    sensitive << ( val1_V_read );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "xfExtractPixels_1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, val1_V_read, "(port)val1_V_read");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif

    }
}

xfExtractPixels_1::~xfExtractPixels_1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void xfExtractPixels_1::thread_ap_ready() {
    ap_ready = ap_const_logic_1;
}

void xfExtractPixels_1::thread_ap_return() {
    ap_return = val1_V_read.read();
}

}

