// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _get_weed_mask_HH_
#define _get_weed_mask_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "is_crop_or_furrow.h"

namespace ap_rtl {

struct get_weed_mask : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<2> > weed_mask_tmp_data_V_din;
    sc_in< sc_logic > weed_mask_tmp_data_V_full_n;
    sc_out< sc_logic > weed_mask_tmp_data_V_write;
    sc_in< sc_logic > lines_founded_read;
    sc_out< sc_lv<3> > lines_address0;
    sc_out< sc_logic > lines_ce0;
    sc_in< sc_lv<57> > lines_q0;


    // Module declarations
    get_weed_mask(sc_module_name name);
    SC_HAS_PROCESS(get_weed_mask);

    ~get_weed_mask();

    sc_trace_file* mVcdFile;

    is_crop_or_furrow* grp_is_crop_or_furrow_fu_117;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > weed_mask_tmp_data_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > lines_founded_read_1_read_fu_66_p2;
    sc_signal< sc_lv<1> > icmp_ln415_fu_170_p2;
    sc_signal< sc_lv<5> > tmp_6_reg_183;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > tmp_34_fu_128_p3;
    sc_signal< sc_lv<9> > h_2_fu_152_p2;
    sc_signal< sc_lv<9> > h_2_reg_191;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<14> > add_ln703_fu_158_p2;
    sc_signal< sc_lv<1> > icmp_ln413_fu_146_p2;
    sc_signal< sc_lv<9> > v_2_fu_164_p2;
    sc_signal< sc_logic > grp_is_crop_or_furrow_fu_117_ap_start;
    sc_signal< sc_logic > grp_is_crop_or_furrow_fu_117_ap_done;
    sc_signal< sc_logic > grp_is_crop_or_furrow_fu_117_ap_idle;
    sc_signal< sc_logic > grp_is_crop_or_furrow_fu_117_ap_ready;
    sc_signal< sc_lv<3> > grp_is_crop_or_furrow_fu_117_lines_address0;
    sc_signal< sc_logic > grp_is_crop_or_furrow_fu_117_lines_ce0;
    sc_signal< sc_lv<2> > grp_is_crop_or_furrow_fu_117_ap_return;
    sc_signal< sc_lv<14> > p_Val2_s_reg_81;
    sc_signal< sc_lv<9> > v_reg_93;
    sc_signal< sc_lv<9> > h_reg_105;
    sc_signal< bool > ap_predicate_op32_write_state4;
    sc_signal< bool > ap_predicate_op34_write_state4;
    sc_signal< bool > ap_block_state4;
    sc_signal< bool > ap_block_state4_on_subcall_done;
    sc_signal< sc_logic > grp_is_crop_or_furrow_fu_117_ap_start_reg;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< bool > ap_condition_118;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<14> ap_const_lv14_3300;
    static const sc_lv<9> ap_const_lv9_B3;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<9> ap_const_lv9_140;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<14> ap_const_lv14_3FCF;
    static const sc_lv<9> ap_const_lv9_1FF;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln703_fu_158_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_state4();
    void thread_ap_block_state4_on_subcall_done();
    void thread_ap_condition_118();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_predicate_op32_write_state4();
    void thread_ap_predicate_op34_write_state4();
    void thread_ap_ready();
    void thread_grp_is_crop_or_furrow_fu_117_ap_start();
    void thread_h_2_fu_152_p2();
    void thread_icmp_ln413_fu_146_p2();
    void thread_icmp_ln415_fu_170_p2();
    void thread_lines_address0();
    void thread_lines_ce0();
    void thread_lines_founded_read_1_read_fu_66_p2();
    void thread_tmp_34_fu_128_p3();
    void thread_v_2_fu_164_p2();
    void thread_weed_mask_tmp_data_V_blk_n();
    void thread_weed_mask_tmp_data_V_din();
    void thread_weed_mask_tmp_data_V_write();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
