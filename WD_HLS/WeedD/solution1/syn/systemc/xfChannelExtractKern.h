// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _xfChannelExtractKern_HH_
#define _xfChannelExtractKern_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct xfChannelExtractKern : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<24> > p_src_mat_data_V_dout;
    sc_in< sc_logic > p_src_mat_data_V_empty_n;
    sc_out< sc_logic > p_src_mat_data_V_read;
    sc_out< sc_lv<8> > p_dst_mat_data_V_din;
    sc_in< sc_logic > p_dst_mat_data_V_full_n;
    sc_out< sc_logic > p_dst_mat_data_V_write;
    sc_in< sc_lv<4> > p_channel;


    // Module declarations
    xfChannelExtractKern(sc_module_name name);
    SC_HAS_PROCESS(xfChannelExtractKern);

    ~xfChannelExtractKern();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > p_src_mat_data_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln88_reg_373;
    sc_signal< sc_logic > p_dst_mat_data_V_blk_n;
    sc_signal< sc_lv<9> > t_V_reg_114;
    sc_signal< sc_lv<5> > select_ln69_fu_223_p3;
    sc_signal< sc_lv<5> > select_ln69_reg_348;
    sc_signal< sc_lv<5> > or_ln100_fu_231_p2;
    sc_signal< sc_lv<5> > or_ln100_reg_357;
    sc_signal< sc_lv<1> > icmp_ln887_fu_237_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<8> > i_V_fu_243_p2;
    sc_signal< sc_lv<8> > i_V_reg_368;
    sc_signal< sc_lv<1> > icmp_ln88_fu_249_p2;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<9> > add_ln1597_fu_255_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_lv<8> > t_V_3_reg_103;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<3> > trunc_ln65_fu_125_p1;
    sc_signal< sc_lv<1> > icmp_ln65_fu_129_p2;
    sc_signal< sc_lv<32> > or_ln65_1_fu_135_p3;
    sc_signal< sc_lv<1> > icmp_ln69_fu_149_p2;
    sc_signal< sc_lv<1> > icmp_ln73_fu_163_p2;
    sc_signal< sc_lv<32> > or_ln69_1_fu_155_p3;
    sc_signal< sc_lv<32> > or_ln73_1_fu_169_p3;
    sc_signal< sc_lv<32> > or_ln73_fu_177_p2;
    sc_signal< sc_lv<32> > or_ln73_2_fu_183_p2;
    sc_signal< sc_lv<1> > icmp_ln73_1_fu_189_p2;
    sc_signal< sc_lv<1> > icmp_ln65_1_fu_143_p2;
    sc_signal< sc_lv<5> > select_ln73_fu_195_p3;
    sc_signal< sc_lv<1> > icmp_ln69_1_fu_211_p2;
    sc_signal< sc_lv<1> > and_ln69_fu_217_p2;
    sc_signal< sc_lv<5> > select_ln65_fu_203_p3;
    sc_signal< sc_lv<1> > icmp_ln647_fu_261_p2;
    sc_signal< sc_lv<5> > sub_ln647_fu_275_p2;
    sc_signal< sc_lv<5> > sub_ln647_2_fu_284_p2;
    sc_signal< sc_lv<24> > tmp_6_fu_265_p4;
    sc_signal< sc_lv<5> > sub_ln647_1_fu_279_p2;
    sc_signal< sc_lv<5> > select_ln647_fu_288_p3;
    sc_signal< sc_lv<5> > select_ln647_2_fu_304_p3;
    sc_signal< sc_lv<5> > sub_ln647_3_fu_311_p2;
    sc_signal< sc_lv<24> > select_ln647_1_fu_296_p3;
    sc_signal< sc_lv<24> > zext_ln647_fu_317_p1;
    sc_signal< sc_lv<24> > zext_ln647_1_fu_321_p1;
    sc_signal< sc_lv<24> > lshr_ln647_fu_325_p2;
    sc_signal< sc_lv<24> > lshr_ln647_1_fu_331_p2;
    sc_signal< sc_lv<24> > and_ln647_fu_337_p2;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_state5;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<3> ap_const_lv3_5;
    static const sc_lv<3> ap_const_lv3_6;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_8;
    static const sc_lv<5> ap_const_lv5_7;
    static const sc_lv<8> ap_const_lv8_B4;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<9> ap_const_lv9_140;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<5> ap_const_lv5_17;
    static const sc_lv<24> ap_const_lv24_FFFFFF;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln1597_fu_255_p2();
    void thread_and_ln647_fu_337_p2();
    void thread_and_ln69_fu_217_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_i_V_fu_243_p2();
    void thread_icmp_ln647_fu_261_p2();
    void thread_icmp_ln65_1_fu_143_p2();
    void thread_icmp_ln65_fu_129_p2();
    void thread_icmp_ln69_1_fu_211_p2();
    void thread_icmp_ln69_fu_149_p2();
    void thread_icmp_ln73_1_fu_189_p2();
    void thread_icmp_ln73_fu_163_p2();
    void thread_icmp_ln887_fu_237_p2();
    void thread_icmp_ln88_fu_249_p2();
    void thread_lshr_ln647_1_fu_331_p2();
    void thread_lshr_ln647_fu_325_p2();
    void thread_or_ln100_fu_231_p2();
    void thread_or_ln65_1_fu_135_p3();
    void thread_or_ln69_1_fu_155_p3();
    void thread_or_ln73_1_fu_169_p3();
    void thread_or_ln73_2_fu_183_p2();
    void thread_or_ln73_fu_177_p2();
    void thread_p_dst_mat_data_V_blk_n();
    void thread_p_dst_mat_data_V_din();
    void thread_p_dst_mat_data_V_write();
    void thread_p_src_mat_data_V_blk_n();
    void thread_p_src_mat_data_V_read();
    void thread_select_ln647_1_fu_296_p3();
    void thread_select_ln647_2_fu_304_p3();
    void thread_select_ln647_fu_288_p3();
    void thread_select_ln65_fu_203_p3();
    void thread_select_ln69_fu_223_p3();
    void thread_select_ln73_fu_195_p3();
    void thread_sub_ln647_1_fu_279_p2();
    void thread_sub_ln647_2_fu_284_p2();
    void thread_sub_ln647_3_fu_311_p2();
    void thread_sub_ln647_fu_275_p2();
    void thread_tmp_6_fu_265_p4();
    void thread_trunc_ln65_fu_125_p1();
    void thread_zext_ln647_1_fu_321_p1();
    void thread_zext_ln647_fu_317_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
