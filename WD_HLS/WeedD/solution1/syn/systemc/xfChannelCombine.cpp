// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "xfChannelCombine.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic xfChannelCombine::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic xfChannelCombine::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> xfChannelCombine::ap_ST_fsm_state1 = "1";
const sc_lv<3> xfChannelCombine::ap_ST_fsm_state2 = "10";
const sc_lv<3> xfChannelCombine::ap_ST_fsm_state3 = "100";
const sc_lv<32> xfChannelCombine::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> xfChannelCombine::ap_const_lv32_2 = "10";
const sc_lv<1> xfChannelCombine::ap_const_lv1_0 = "0";
const sc_lv<32> xfChannelCombine::ap_const_lv32_1 = "1";
const sc_lv<8> xfChannelCombine::ap_const_lv8_0 = "00000000";
const sc_lv<1> xfChannelCombine::ap_const_lv1_1 = "1";
const sc_lv<16> xfChannelCombine::ap_const_lv16_0 = "0000000000000000";
const sc_lv<8> xfChannelCombine::ap_const_lv8_B4 = "10110100";
const sc_lv<8> xfChannelCombine::ap_const_lv8_1 = "1";
const sc_lv<16> xfChannelCombine::ap_const_lv16_1 = "1";
const bool xfChannelCombine::ap_const_boolean_1 = true;

xfChannelCombine::xfChannelCombine(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( p_src1_cols_load7_loc_empty_n );

    SC_METHOD(thread_ap_block_state3);
    sensitive << ( p_in1_V_V_empty_n );
    sensitive << ( p_in2_V_V_empty_n );
    sensitive << ( p_in3_V_V_empty_n );
    sensitive << ( p_out_V_V_full_n );
    sensitive << ( icmp_ln118_fu_127_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln113_fu_115_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_i_fu_121_p2);
    sensitive << ( i_0_i_i_i_reg_89 );

    SC_METHOD(thread_icmp_ln113_fu_115_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_i_i_i_reg_89 );

    SC_METHOD(thread_icmp_ln118_fu_127_p2);
    sensitive << ( p_in1_V_V_empty_n );
    sensitive << ( p_in2_V_V_empty_n );
    sensitive << ( p_in3_V_V_empty_n );
    sensitive << ( p_out_V_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln118_fu_127_p2 );
    sensitive << ( sext_ln330_reg_149 );
    sensitive << ( j_0_i_i_i_reg_100 );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln113_fu_115_p2 );

    SC_METHOD(thread_j_fu_132_p2);
    sensitive << ( j_0_i_i_i_reg_100 );

    SC_METHOD(thread_p_in1_V_V_blk_n);
    sensitive << ( p_in1_V_V_empty_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln118_fu_127_p2 );

    SC_METHOD(thread_p_in1_V_V_read);
    sensitive << ( p_in1_V_V_empty_n );
    sensitive << ( p_in2_V_V_empty_n );
    sensitive << ( p_in3_V_V_empty_n );
    sensitive << ( p_out_V_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln118_fu_127_p2 );

    SC_METHOD(thread_p_in2_V_V_blk_n);
    sensitive << ( p_in2_V_V_empty_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln118_fu_127_p2 );

    SC_METHOD(thread_p_in2_V_V_read);
    sensitive << ( p_in1_V_V_empty_n );
    sensitive << ( p_in2_V_V_empty_n );
    sensitive << ( p_in3_V_V_empty_n );
    sensitive << ( p_out_V_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln118_fu_127_p2 );

    SC_METHOD(thread_p_in3_V_V_blk_n);
    sensitive << ( p_in3_V_V_empty_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln118_fu_127_p2 );

    SC_METHOD(thread_p_in3_V_V_read);
    sensitive << ( p_in1_V_V_empty_n );
    sensitive << ( p_in2_V_V_empty_n );
    sensitive << ( p_in3_V_V_empty_n );
    sensitive << ( p_out_V_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln118_fu_127_p2 );

    SC_METHOD(thread_p_out_V_V_blk_n);
    sensitive << ( p_out_V_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln118_fu_127_p2 );

    SC_METHOD(thread_p_out_V_V_din);
    sensitive << ( p_in1_V_V_dout );
    sensitive << ( p_in1_V_V_empty_n );
    sensitive << ( p_in2_V_V_dout );
    sensitive << ( p_in2_V_V_empty_n );
    sensitive << ( p_in3_V_V_dout );
    sensitive << ( p_in3_V_V_empty_n );
    sensitive << ( p_out_V_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln118_fu_127_p2 );

    SC_METHOD(thread_p_out_V_V_write);
    sensitive << ( p_in1_V_V_empty_n );
    sensitive << ( p_in2_V_V_empty_n );
    sensitive << ( p_in3_V_V_empty_n );
    sensitive << ( p_out_V_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln118_fu_127_p2 );

    SC_METHOD(thread_p_src1_cols_load7_loc_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( p_src1_cols_load7_loc_empty_n );

    SC_METHOD(thread_p_src1_cols_load7_loc_read);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( p_src1_cols_load7_loc_empty_n );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_sext_ln330_fu_111_p1);
    sensitive << ( p_src1_cols_load7_loc_dout );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( p_in1_V_V_empty_n );
    sensitive << ( p_in2_V_V_empty_n );
    sensitive << ( p_in3_V_V_empty_n );
    sensitive << ( p_out_V_V_full_n );
    sensitive << ( p_src1_cols_load7_loc_empty_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln118_fu_127_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln113_fu_115_p2 );

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "xfChannelCombine_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, p_in1_V_V_dout, "(port)p_in1_V_V_dout");
    sc_trace(mVcdFile, p_in1_V_V_empty_n, "(port)p_in1_V_V_empty_n");
    sc_trace(mVcdFile, p_in1_V_V_read, "(port)p_in1_V_V_read");
    sc_trace(mVcdFile, p_in2_V_V_dout, "(port)p_in2_V_V_dout");
    sc_trace(mVcdFile, p_in2_V_V_empty_n, "(port)p_in2_V_V_empty_n");
    sc_trace(mVcdFile, p_in2_V_V_read, "(port)p_in2_V_V_read");
    sc_trace(mVcdFile, p_in3_V_V_dout, "(port)p_in3_V_V_dout");
    sc_trace(mVcdFile, p_in3_V_V_empty_n, "(port)p_in3_V_V_empty_n");
    sc_trace(mVcdFile, p_in3_V_V_read, "(port)p_in3_V_V_read");
    sc_trace(mVcdFile, p_out_V_V_din, "(port)p_out_V_V_din");
    sc_trace(mVcdFile, p_out_V_V_full_n, "(port)p_out_V_V_full_n");
    sc_trace(mVcdFile, p_out_V_V_write, "(port)p_out_V_V_write");
    sc_trace(mVcdFile, p_src1_cols_load7_loc_dout, "(port)p_src1_cols_load7_loc_dout");
    sc_trace(mVcdFile, p_src1_cols_load7_loc_empty_n, "(port)p_src1_cols_load7_loc_empty_n");
    sc_trace(mVcdFile, p_src1_cols_load7_loc_read, "(port)p_src1_cols_load7_loc_read");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, p_in1_V_V_blk_n, "p_in1_V_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, icmp_ln118_fu_127_p2, "icmp_ln118_fu_127_p2");
    sc_trace(mVcdFile, p_in2_V_V_blk_n, "p_in2_V_V_blk_n");
    sc_trace(mVcdFile, p_in3_V_V_blk_n, "p_in3_V_V_blk_n");
    sc_trace(mVcdFile, p_out_V_V_blk_n, "p_out_V_V_blk_n");
    sc_trace(mVcdFile, p_src1_cols_load7_loc_blk_n, "p_src1_cols_load7_loc_blk_n");
    sc_trace(mVcdFile, sext_ln330_fu_111_p1, "sext_ln330_fu_111_p1");
    sc_trace(mVcdFile, sext_ln330_reg_149, "sext_ln330_reg_149");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, i_fu_121_p2, "i_fu_121_p2");
    sc_trace(mVcdFile, i_reg_157, "i_reg_157");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, j_fu_132_p2, "j_fu_132_p2");
    sc_trace(mVcdFile, ap_block_state3, "ap_block_state3");
    sc_trace(mVcdFile, i_0_i_i_i_reg_89, "i_0_i_i_i_reg_89");
    sc_trace(mVcdFile, j_0_i_i_i_reg_100, "j_0_i_i_i_reg_100");
    sc_trace(mVcdFile, icmp_ln113_fu_115_p2, "icmp_ln113_fu_115_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

xfChannelCombine::~xfChannelCombine() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void xfChannelCombine::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln113_fu_115_p2.read()))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         !((esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_in1_V_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_in2_V_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_in3_V_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_out_V_V_full_n.read()))) && 
         esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_1))) {
        i_0_i_i_i_reg_89 = i_reg_157.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, p_src1_cols_load7_loc_empty_n.read())))) {
        i_0_i_i_i_reg_89 = ap_const_lv8_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
         !((esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_in1_V_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_in2_V_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_in3_V_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_out_V_V_full_n.read()))))) {
        j_0_i_i_i_reg_100 = j_fu_132_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln113_fu_115_p2.read()))) {
        j_0_i_i_i_reg_100 = ap_const_lv16_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_157 = i_fu_121_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, p_src1_cols_load7_loc_empty_n.read())))) {
        sext_ln330_reg_149 = sext_ln330_fu_111_p1.read();
    }
}

void xfChannelCombine::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void xfChannelCombine::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void xfChannelCombine::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void xfChannelCombine::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, p_src1_cols_load7_loc_empty_n.read()));
}

void xfChannelCombine::thread_ap_block_state3() {
    ap_block_state3 = ((esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_in1_V_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_in2_V_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_in3_V_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_out_V_V_full_n.read())));
}

void xfChannelCombine::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln113_fu_115_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void xfChannelCombine::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void xfChannelCombine::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void xfChannelCombine::thread_i_fu_121_p2() {
    i_fu_121_p2 = (!i_0_i_i_i_reg_89.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(i_0_i_i_i_reg_89.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void xfChannelCombine::thread_icmp_ln113_fu_115_p2() {
    icmp_ln113_fu_115_p2 = (!i_0_i_i_i_reg_89.read().is_01() || !ap_const_lv8_B4.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i_i_i_reg_89.read() == ap_const_lv8_B4);
}

void xfChannelCombine::thread_icmp_ln118_fu_127_p2() {
    icmp_ln118_fu_127_p2 = (!j_0_i_i_i_reg_100.read().is_01() || !sext_ln330_reg_149.read().is_01())? sc_lv<1>(): sc_lv<1>(j_0_i_i_i_reg_100.read() == sext_ln330_reg_149.read());
}

void xfChannelCombine::thread_internal_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln113_fu_115_p2.read()))) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void xfChannelCombine::thread_j_fu_132_p2() {
    j_fu_132_p2 = (!j_0_i_i_i_reg_100.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_biguint<16>(j_0_i_i_i_reg_100.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void xfChannelCombine::thread_p_in1_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0))) {
        p_in1_V_V_blk_n = p_in1_V_V_empty_n.read();
    } else {
        p_in1_V_V_blk_n = ap_const_logic_1;
    }
}

void xfChannelCombine::thread_p_in1_V_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
         !((esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_in1_V_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_in2_V_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_in3_V_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_out_V_V_full_n.read()))))) {
        p_in1_V_V_read = ap_const_logic_1;
    } else {
        p_in1_V_V_read = ap_const_logic_0;
    }
}

void xfChannelCombine::thread_p_in2_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0))) {
        p_in2_V_V_blk_n = p_in2_V_V_empty_n.read();
    } else {
        p_in2_V_V_blk_n = ap_const_logic_1;
    }
}

void xfChannelCombine::thread_p_in2_V_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
         !((esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_in1_V_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_in2_V_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_in3_V_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_out_V_V_full_n.read()))))) {
        p_in2_V_V_read = ap_const_logic_1;
    } else {
        p_in2_V_V_read = ap_const_logic_0;
    }
}

void xfChannelCombine::thread_p_in3_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0))) {
        p_in3_V_V_blk_n = p_in3_V_V_empty_n.read();
    } else {
        p_in3_V_V_blk_n = ap_const_logic_1;
    }
}

void xfChannelCombine::thread_p_in3_V_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
         !((esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_in1_V_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_in2_V_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_in3_V_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_out_V_V_full_n.read()))))) {
        p_in3_V_V_read = ap_const_logic_1;
    } else {
        p_in3_V_V_read = ap_const_logic_0;
    }
}

void xfChannelCombine::thread_p_out_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0))) {
        p_out_V_V_blk_n = p_out_V_V_full_n.read();
    } else {
        p_out_V_V_blk_n = ap_const_logic_1;
    }
}

void xfChannelCombine::thread_p_out_V_V_din() {
    p_out_V_V_din = esl_concat<16,8>(esl_concat<8,8>(p_in1_V_V_dout.read(), p_in2_V_V_dout.read()), p_in3_V_V_dout.read());
}

void xfChannelCombine::thread_p_out_V_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
         !((esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_in1_V_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_in2_V_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_in3_V_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_out_V_V_full_n.read()))))) {
        p_out_V_V_write = ap_const_logic_1;
    } else {
        p_out_V_V_write = ap_const_logic_0;
    }
}

void xfChannelCombine::thread_p_src1_cols_load7_loc_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        p_src1_cols_load7_loc_blk_n = p_src1_cols_load7_loc_empty_n.read();
    } else {
        p_src1_cols_load7_loc_blk_n = ap_const_logic_1;
    }
}

void xfChannelCombine::thread_p_src1_cols_load7_loc_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, p_src1_cols_load7_loc_empty_n.read())))) {
        p_src1_cols_load7_loc_read = ap_const_logic_1;
    } else {
        p_src1_cols_load7_loc_read = ap_const_logic_0;
    }
}

void xfChannelCombine::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void xfChannelCombine::thread_sext_ln330_fu_111_p1() {
    sext_ln330_fu_111_p1 = esl_sext<16,10>(p_src1_cols_load7_loc_dout.read());
}

void xfChannelCombine::thread_start_out() {
    start_out = real_start.read();
}

void xfChannelCombine::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void xfChannelCombine::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, p_src1_cols_load7_loc_empty_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln113_fu_115_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !((esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_in1_V_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_in2_V_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_in3_V_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_out_V_V_full_n.read()))) && esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && !((esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_in1_V_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_in2_V_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_in3_V_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln118_fu_127_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_out_V_V_full_n.read()))))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

