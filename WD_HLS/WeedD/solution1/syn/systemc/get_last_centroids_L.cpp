// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "get_last_centroids_L.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic get_last_centroids_L::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic get_last_centroids_L::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> get_last_centroids_L::ap_ST_fsm_state1 = "1";
const sc_lv<3> get_last_centroids_L::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> get_last_centroids_L::ap_ST_fsm_state4 = "100";
const sc_lv<32> get_last_centroids_L::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool get_last_centroids_L::ap_const_boolean_1 = true;
const sc_lv<32> get_last_centroids_L::ap_const_lv32_1 = "1";
const bool get_last_centroids_L::ap_const_boolean_0 = false;
const sc_lv<1> get_last_centroids_L::ap_const_lv1_0 = "0";
const sc_lv<1> get_last_centroids_L::ap_const_lv1_1 = "1";
const sc_lv<3> get_last_centroids_L::ap_const_lv3_0 = "000";
const sc_lv<3> get_last_centroids_L::ap_const_lv3_6 = "110";
const sc_lv<3> get_last_centroids_L::ap_const_lv3_1 = "1";
const sc_lv<32> get_last_centroids_L::ap_const_lv32_2 = "10";

get_last_centroids_L::get_last_centroids_L(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln172_fu_189_p2);
    sensitive << ( zext_ln172_cast_cast_reg_218 );
    sensitive << ( sext_ln172_fu_185_p1 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( icmp_ln169_fu_129_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_phi_mux_i_0_i_i_i_phi_fu_99_p4);
    sensitive << ( i_0_i_i_i_reg_95 );
    sensitive << ( icmp_ln169_reg_223 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( i_reg_227 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_centroids_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln172_2_fu_198_p1 );

    SC_METHOD(thread_centroids_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_empty_fu_107_p1);
    sensitive << ( size );

    SC_METHOD(thread_i_fu_135_p2);
    sensitive << ( ap_phi_mux_i_0_i_i_i_phi_fu_99_p4 );

    SC_METHOD(thread_icmp_ln169_fu_129_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_phi_mux_i_0_i_i_i_phi_fu_99_p4 );

    SC_METHOD(thread_icmp_ln171_fu_150_p2);
    sensitive << ( seg_index_end_reg_213 );
    sensitive << ( icmp_ln169_fu_129_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( p_i_fu_145_p2 );

    SC_METHOD(thread_last_c_2_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln172_3_fu_203_p1 );

    SC_METHOD(thread_last_c_2_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_last_c_2_d0);
    sensitive << ( centroids_q0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_last_c_2_we0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( icmp_ln171_reg_232 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_p_i_fu_145_p2);
    sensitive << ( zext_ln168_reg_208 );
    sensitive << ( zext_ln169_fu_141_p1 );

    SC_METHOD(thread_seg_index_end_fu_119_p2);
    sensitive << ( zext_ln168_fu_115_p1 );
    sensitive << ( size_cast_i_fu_111_p1 );

    SC_METHOD(thread_sext_ln172_1_fu_194_p1);
    sensitive << ( add_ln172_fu_189_p2 );

    SC_METHOD(thread_sext_ln172_fu_185_p1);
    sensitive << ( sub_ln172_fu_179_p2 );

    SC_METHOD(thread_shl_ln172_1_i_fu_167_p3);
    sensitive << ( p_i_fu_145_p2 );

    SC_METHOD(thread_shl_ln_i_fu_155_p3);
    sensitive << ( p_i_fu_145_p2 );

    SC_METHOD(thread_size_cast_i_fu_111_p1);
    sensitive << ( empty_fu_107_p1 );

    SC_METHOD(thread_sub_ln172_fu_179_p2);
    sensitive << ( zext_ln172_fu_163_p1 );
    sensitive << ( zext_ln172_1_fu_175_p1 );

    SC_METHOD(thread_zext_ln168_fu_115_p1);
    sensitive << ( seg_index_start );

    SC_METHOD(thread_zext_ln169_fu_141_p1);
    sensitive << ( ap_phi_mux_i_0_i_i_i_phi_fu_99_p4 );

    SC_METHOD(thread_zext_ln172_1_fu_175_p1);
    sensitive << ( shl_ln172_1_i_fu_167_p3 );

    SC_METHOD(thread_zext_ln172_2_fu_198_p1);
    sensitive << ( sext_ln172_1_fu_194_p1 );

    SC_METHOD(thread_zext_ln172_3_fu_203_p1);
    sensitive << ( i_0_i_i_i_reg_95 );

    SC_METHOD(thread_zext_ln172_cast_cast_fu_125_p1);
    sensitive << ( selected_line );

    SC_METHOD(thread_zext_ln172_fu_163_p1);
    sensitive << ( shl_ln_i_fu_155_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln169_fu_129_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "get_last_centroids_L_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, size, "(port)size");
    sc_trace(mVcdFile, seg_index_start, "(port)seg_index_start");
    sc_trace(mVcdFile, selected_line, "(port)selected_line");
    sc_trace(mVcdFile, centroids_address0, "(port)centroids_address0");
    sc_trace(mVcdFile, centroids_ce0, "(port)centroids_ce0");
    sc_trace(mVcdFile, centroids_q0, "(port)centroids_q0");
    sc_trace(mVcdFile, last_c_2_address0, "(port)last_c_2_address0");
    sc_trace(mVcdFile, last_c_2_ce0, "(port)last_c_2_ce0");
    sc_trace(mVcdFile, last_c_2_we0, "(port)last_c_2_we0");
    sc_trace(mVcdFile, last_c_2_d0, "(port)last_c_2_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_0_i_i_i_reg_95, "i_0_i_i_i_reg_95");
    sc_trace(mVcdFile, zext_ln168_fu_115_p1, "zext_ln168_fu_115_p1");
    sc_trace(mVcdFile, zext_ln168_reg_208, "zext_ln168_reg_208");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, seg_index_end_fu_119_p2, "seg_index_end_fu_119_p2");
    sc_trace(mVcdFile, seg_index_end_reg_213, "seg_index_end_reg_213");
    sc_trace(mVcdFile, zext_ln172_cast_cast_fu_125_p1, "zext_ln172_cast_cast_fu_125_p1");
    sc_trace(mVcdFile, zext_ln172_cast_cast_reg_218, "zext_ln172_cast_cast_reg_218");
    sc_trace(mVcdFile, icmp_ln169_fu_129_p2, "icmp_ln169_fu_129_p2");
    sc_trace(mVcdFile, icmp_ln169_reg_223, "icmp_ln169_reg_223");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, i_fu_135_p2, "i_fu_135_p2");
    sc_trace(mVcdFile, i_reg_227, "i_reg_227");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, icmp_ln171_fu_150_p2, "icmp_ln171_fu_150_p2");
    sc_trace(mVcdFile, icmp_ln171_reg_232, "icmp_ln171_reg_232");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_phi_mux_i_0_i_i_i_phi_fu_99_p4, "ap_phi_mux_i_0_i_i_i_phi_fu_99_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, zext_ln172_2_fu_198_p1, "zext_ln172_2_fu_198_p1");
    sc_trace(mVcdFile, zext_ln172_3_fu_203_p1, "zext_ln172_3_fu_203_p1");
    sc_trace(mVcdFile, empty_fu_107_p1, "empty_fu_107_p1");
    sc_trace(mVcdFile, size_cast_i_fu_111_p1, "size_cast_i_fu_111_p1");
    sc_trace(mVcdFile, zext_ln169_fu_141_p1, "zext_ln169_fu_141_p1");
    sc_trace(mVcdFile, p_i_fu_145_p2, "p_i_fu_145_p2");
    sc_trace(mVcdFile, shl_ln_i_fu_155_p3, "shl_ln_i_fu_155_p3");
    sc_trace(mVcdFile, shl_ln172_1_i_fu_167_p3, "shl_ln172_1_i_fu_167_p3");
    sc_trace(mVcdFile, zext_ln172_fu_163_p1, "zext_ln172_fu_163_p1");
    sc_trace(mVcdFile, zext_ln172_1_fu_175_p1, "zext_ln172_1_fu_175_p1");
    sc_trace(mVcdFile, sub_ln172_fu_179_p2, "sub_ln172_fu_179_p2");
    sc_trace(mVcdFile, sext_ln172_fu_185_p1, "sext_ln172_fu_185_p1");
    sc_trace(mVcdFile, add_ln172_fu_189_p2, "add_ln172_fu_189_p2");
    sc_trace(mVcdFile, sext_ln172_1_fu_194_p1, "sext_ln172_1_fu_194_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

get_last_centroids_L::~get_last_centroids_L() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void get_last_centroids_L::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln169_reg_223.read(), ap_const_lv1_0))) {
        i_0_i_i_i_reg_95 = i_reg_227.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        i_0_i_i_i_reg_95 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        i_reg_227 = i_fu_135_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln169_reg_223 = icmp_ln169_fu_129_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln169_fu_129_p2.read(), ap_const_lv1_0))) {
        icmp_ln171_reg_232 = icmp_ln171_fu_150_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        seg_index_end_reg_213 = seg_index_end_fu_119_p2.read();
        zext_ln168_reg_208 = zext_ln168_fu_115_p1.read();
        zext_ln172_cast_cast_reg_218 = zext_ln172_cast_cast_fu_125_p1.read();
    }
}

void get_last_centroids_L::thread_add_ln172_fu_189_p2() {
    add_ln172_fu_189_p2 = (!zext_ln172_cast_cast_reg_218.read().is_01() || !sext_ln172_fu_185_p1.read().is_01())? sc_lv<10>(): (sc_biguint<10>(zext_ln172_cast_cast_reg_218.read()) + sc_bigint<10>(sext_ln172_fu_185_p1.read()));
}

void get_last_centroids_L::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void get_last_centroids_L::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void get_last_centroids_L::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[2];
}

void get_last_centroids_L::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void get_last_centroids_L::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void get_last_centroids_L::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void get_last_centroids_L::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void get_last_centroids_L::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void get_last_centroids_L::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void get_last_centroids_L::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(icmp_ln169_fu_129_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void get_last_centroids_L::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void get_last_centroids_L::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void get_last_centroids_L::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void get_last_centroids_L::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void get_last_centroids_L::thread_ap_phi_mux_i_0_i_i_i_phi_fu_99_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln169_reg_223.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_i_0_i_i_i_phi_fu_99_p4 = i_reg_227.read();
    } else {
        ap_phi_mux_i_0_i_i_i_phi_fu_99_p4 = i_0_i_i_i_reg_95.read();
    }
}

void get_last_centroids_L::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void get_last_centroids_L::thread_centroids_address0() {
    centroids_address0 =  (sc_lv<7>) (zext_ln172_2_fu_198_p1.read());
}

void get_last_centroids_L::thread_centroids_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        centroids_ce0 = ap_const_logic_1;
    } else {
        centroids_ce0 = ap_const_logic_0;
    }
}

void get_last_centroids_L::thread_empty_fu_107_p1() {
    empty_fu_107_p1 = size.read().range(3-1, 0);
}

void get_last_centroids_L::thread_i_fu_135_p2() {
    i_fu_135_p2 = (!ap_phi_mux_i_0_i_i_i_phi_fu_99_p4.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(ap_phi_mux_i_0_i_i_i_phi_fu_99_p4.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void get_last_centroids_L::thread_icmp_ln169_fu_129_p2() {
    icmp_ln169_fu_129_p2 = (!ap_phi_mux_i_0_i_i_i_phi_fu_99_p4.read().is_01() || !ap_const_lv3_6.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_i_0_i_i_i_phi_fu_99_p4.read() == ap_const_lv3_6);
}

void get_last_centroids_L::thread_icmp_ln171_fu_150_p2() {
    icmp_ln171_fu_150_p2 = (!p_i_fu_145_p2.read().is_01() || !seg_index_end_reg_213.read().is_01())? sc_lv<1>(): (sc_biguint<5>(p_i_fu_145_p2.read()) < sc_biguint<5>(seg_index_end_reg_213.read()));
}

void get_last_centroids_L::thread_last_c_2_address0() {
    last_c_2_address0 =  (sc_lv<2>) (zext_ln172_3_fu_203_p1.read());
}

void get_last_centroids_L::thread_last_c_2_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        last_c_2_ce0 = ap_const_logic_1;
    } else {
        last_c_2_ce0 = ap_const_logic_0;
    }
}

void get_last_centroids_L::thread_last_c_2_d0() {
    last_c_2_d0 = centroids_q0.read();
}

void get_last_centroids_L::thread_last_c_2_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln171_reg_232.read(), ap_const_lv1_1))) {
        last_c_2_we0 = ap_const_logic_1;
    } else {
        last_c_2_we0 = ap_const_logic_0;
    }
}

void get_last_centroids_L::thread_p_i_fu_145_p2() {
    p_i_fu_145_p2 = (!zext_ln168_reg_208.read().is_01() || !zext_ln169_fu_141_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(zext_ln168_reg_208.read()) + sc_biguint<5>(zext_ln169_fu_141_p1.read()));
}

void get_last_centroids_L::thread_seg_index_end_fu_119_p2() {
    seg_index_end_fu_119_p2 = (!zext_ln168_fu_115_p1.read().is_01() || !size_cast_i_fu_111_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(zext_ln168_fu_115_p1.read()) + sc_biguint<5>(size_cast_i_fu_111_p1.read()));
}

void get_last_centroids_L::thread_sext_ln172_1_fu_194_p1() {
    sext_ln172_1_fu_194_p1 = esl_sext<32,10>(add_ln172_fu_189_p2.read());
}

void get_last_centroids_L::thread_sext_ln172_fu_185_p1() {
    sext_ln172_fu_185_p1 = esl_sext<10,9>(sub_ln172_fu_179_p2.read());
}

void get_last_centroids_L::thread_shl_ln172_1_i_fu_167_p3() {
    shl_ln172_1_i_fu_167_p3 = esl_concat<5,1>(p_i_fu_145_p2.read(), ap_const_lv1_0);
}

void get_last_centroids_L::thread_shl_ln_i_fu_155_p3() {
    shl_ln_i_fu_155_p3 = esl_concat<5,3>(p_i_fu_145_p2.read(), ap_const_lv3_0);
}

void get_last_centroids_L::thread_size_cast_i_fu_111_p1() {
    size_cast_i_fu_111_p1 = esl_zext<5,3>(empty_fu_107_p1.read());
}

void get_last_centroids_L::thread_sub_ln172_fu_179_p2() {
    sub_ln172_fu_179_p2 = (!zext_ln172_fu_163_p1.read().is_01() || !zext_ln172_1_fu_175_p1.read().is_01())? sc_lv<9>(): (sc_biguint<9>(zext_ln172_fu_163_p1.read()) - sc_biguint<9>(zext_ln172_1_fu_175_p1.read()));
}

void get_last_centroids_L::thread_zext_ln168_fu_115_p1() {
    zext_ln168_fu_115_p1 = esl_zext<5,4>(seg_index_start.read());
}

void get_last_centroids_L::thread_zext_ln169_fu_141_p1() {
    zext_ln169_fu_141_p1 = esl_zext<5,3>(ap_phi_mux_i_0_i_i_i_phi_fu_99_p4.read());
}

void get_last_centroids_L::thread_zext_ln172_1_fu_175_p1() {
    zext_ln172_1_fu_175_p1 = esl_zext<9,6>(shl_ln172_1_i_fu_167_p3.read());
}

void get_last_centroids_L::thread_zext_ln172_2_fu_198_p1() {
    zext_ln172_2_fu_198_p1 = esl_zext<64,32>(sext_ln172_1_fu_194_p1.read());
}

void get_last_centroids_L::thread_zext_ln172_3_fu_203_p1() {
    zext_ln172_3_fu_203_p1 = esl_zext<64,3>(i_0_i_i_i_reg_95.read());
}

void get_last_centroids_L::thread_zext_ln172_cast_cast_fu_125_p1() {
    zext_ln172_cast_cast_fu_125_p1 = esl_zext<10,3>(selected_line.read());
}

void get_last_centroids_L::thread_zext_ln172_fu_163_p1() {
    zext_ln172_fu_163_p1 = esl_zext<9,8>(shl_ln_i_fu_155_p3.read());
}

void get_last_centroids_L::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln169_fu_129_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln169_fu_129_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

