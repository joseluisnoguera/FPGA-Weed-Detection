// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _xFarithm_proc_2811_HH_
#define _xFarithm_proc_2811_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct xFarithm_proc_2811 : public sc_module {
    // Port declarations 15
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<24> > p_src1_data_V_dout;
    sc_in< sc_logic > p_src1_data_V_empty_n;
    sc_out< sc_logic > p_src1_data_V_read;
    sc_in< sc_lv<24> > p_src2_data_V_dout;
    sc_in< sc_logic > p_src2_data_V_empty_n;
    sc_out< sc_logic > p_src2_data_V_read;
    sc_out< sc_lv<24> > p_dst_data_V_din;
    sc_in< sc_logic > p_dst_data_V_full_n;
    sc_out< sc_logic > p_dst_data_V_write;


    // Module declarations
    xFarithm_proc_2811(sc_module_name name);
    SC_HAS_PROCESS(xFarithm_proc_2811);

    ~xFarithm_proc_2811();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > p_src1_data_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln98_reg_311;
    sc_signal< sc_logic > p_src2_data_V_blk_n;
    sc_signal< sc_logic > p_dst_data_V_blk_n;
    sc_signal< sc_lv<11> > t_V_4_reg_100;
    sc_signal< sc_lv<1> > icmp_ln887_fu_111_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<10> > i_V_fu_117_p2;
    sc_signal< sc_lv<10> > i_V_reg_306;
    sc_signal< sc_lv<1> > icmp_ln98_fu_123_p2;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<11> > add_ln1597_fu_129_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_lv<10> > t_V_reg_89;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<8> > trunc_ln647_fu_135_p1;
    sc_signal< sc_lv<8> > trunc_ln647_1_fu_139_p1;
    sc_signal< sc_lv<9> > zext_ln1353_fu_147_p1;
    sc_signal< sc_lv<9> > zext_ln215_fu_143_p1;
    sc_signal< sc_lv<9> > add_ln1353_fu_151_p2;
    sc_signal< sc_lv<1> > tmp_7_fu_157_p3;
    sc_signal< sc_lv<8> > add_ln209_fu_165_p2;
    sc_signal< sc_lv<8> > p_Result_s_fu_179_p4;
    sc_signal< sc_lv<8> > p_Result_1_1_fu_189_p4;
    sc_signal< sc_lv<9> > zext_ln1353_1_fu_203_p1;
    sc_signal< sc_lv<9> > zext_ln215_6_fu_199_p1;
    sc_signal< sc_lv<9> > add_ln1353_1_fu_207_p2;
    sc_signal< sc_lv<1> > tmp_8_fu_213_p3;
    sc_signal< sc_lv<8> > add_ln209_1_fu_221_p2;
    sc_signal< sc_lv<8> > p_Result_2_fu_235_p4;
    sc_signal< sc_lv<8> > p_Result_1_2_fu_245_p4;
    sc_signal< sc_lv<9> > zext_ln1353_2_fu_259_p1;
    sc_signal< sc_lv<9> > zext_ln215_7_fu_255_p1;
    sc_signal< sc_lv<9> > add_ln1353_2_fu_263_p2;
    sc_signal< sc_lv<1> > tmp_9_fu_269_p3;
    sc_signal< sc_lv<8> > add_ln209_2_fu_277_p2;
    sc_signal< sc_lv<8> > select_ln209_2_fu_283_p3;
    sc_signal< sc_lv<8> > select_ln209_1_fu_227_p3;
    sc_signal< sc_lv<8> > select_ln209_fu_171_p3;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_state5;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<10> ap_const_lv10_2D0;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<11> ap_const_lv11_500;
    static const sc_lv<11> ap_const_lv11_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_17;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln1353_1_fu_207_p2();
    void thread_add_ln1353_2_fu_263_p2();
    void thread_add_ln1353_fu_151_p2();
    void thread_add_ln1597_fu_129_p2();
    void thread_add_ln209_1_fu_221_p2();
    void thread_add_ln209_2_fu_277_p2();
    void thread_add_ln209_fu_165_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_i_V_fu_117_p2();
    void thread_icmp_ln887_fu_111_p2();
    void thread_icmp_ln98_fu_123_p2();
    void thread_p_Result_1_1_fu_189_p4();
    void thread_p_Result_1_2_fu_245_p4();
    void thread_p_Result_2_fu_235_p4();
    void thread_p_Result_s_fu_179_p4();
    void thread_p_dst_data_V_blk_n();
    void thread_p_dst_data_V_din();
    void thread_p_dst_data_V_write();
    void thread_p_src1_data_V_blk_n();
    void thread_p_src1_data_V_read();
    void thread_p_src2_data_V_blk_n();
    void thread_p_src2_data_V_read();
    void thread_select_ln209_1_fu_227_p3();
    void thread_select_ln209_2_fu_283_p3();
    void thread_select_ln209_fu_171_p3();
    void thread_tmp_7_fu_157_p3();
    void thread_tmp_8_fu_213_p3();
    void thread_tmp_9_fu_269_p3();
    void thread_trunc_ln647_1_fu_139_p1();
    void thread_trunc_ln647_fu_135_p1();
    void thread_zext_ln1353_1_fu_203_p1();
    void thread_zext_ln1353_2_fu_259_p1();
    void thread_zext_ln1353_fu_147_p1();
    void thread_zext_ln215_6_fu_199_p1();
    void thread_zext_ln215_7_fu_255_p1();
    void thread_zext_ln215_fu_143_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
