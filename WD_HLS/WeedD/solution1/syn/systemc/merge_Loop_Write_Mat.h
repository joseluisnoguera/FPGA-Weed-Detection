// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _merge_Loop_Write_Mat_HH_
#define _merge_Loop_Write_Mat_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "write_1.h"

namespace ap_rtl {

struct merge_Loop_Write_Mat : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<24> > p_out_V_V_dout;
    sc_in< sc_logic > p_out_V_V_empty_n;
    sc_out< sc_logic > p_out_V_V_read;
    sc_out< sc_lv<24> > p_dst_data_V_din;
    sc_in< sc_logic > p_dst_data_V_full_n;
    sc_out< sc_logic > p_dst_data_V_write;


    // Module declarations
    merge_Loop_Write_Mat(sc_module_name name);
    SC_HAS_PROCESS(merge_Loop_Write_Mat);

    ~merge_Loop_Write_Mat();

    sc_trace_file* mVcdFile;

    write_1* call_ln341_write_1_fu_63;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > p_out_V_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln333_reg_83;
    sc_signal< sc_logic > call_ln341_write_1_fu_63_Mat_9_180_320_1_data_V_addr_blk_n;
    sc_signal< sc_logic > p_dst_data_V_blk_n;
    sc_signal< sc_lv<16> > indvar_flatten_reg_52;
    sc_signal< sc_lv<1> > icmp_ln333_fu_71_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<16> > add_ln333_fu_77_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > call_ln341_write_1_fu_63_ap_start;
    sc_signal< sc_logic > call_ln341_write_1_fu_63_ap_done;
    sc_signal< sc_logic > call_ln341_write_1_fu_63_ap_idle;
    sc_signal< sc_logic > call_ln341_write_1_fu_63_ap_ready;
    sc_signal< sc_lv<24> > call_ln341_write_1_fu_63_Mat_9_180_320_1_data_V_addr_din;
    sc_signal< sc_logic > call_ln341_write_1_fu_63_Mat_9_180_320_1_data_V_addr_write;
    sc_signal< sc_logic > call_ln341_write_1_fu_63_ap_ce;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0_ignore_call4;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1_ignore_call4;
    sc_signal< bool > ap_block_pp0_stage0_11001_ignoreCallOp17;
    sc_signal< sc_logic > call_ln341_write_1_fu_63_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<16> ap_const_lv16_E100;
    static const sc_lv<16> ap_const_lv16_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln333_fu_77_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_11001_ignoreCallOp17();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter0_ignore_call4();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state3_pp0_stage0_iter1_ignore_call4();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_call_ln341_write_1_fu_63_ap_ce();
    void thread_call_ln341_write_1_fu_63_ap_start();
    void thread_icmp_ln333_fu_71_p2();
    void thread_p_dst_data_V_blk_n();
    void thread_p_dst_data_V_din();
    void thread_p_dst_data_V_write();
    void thread_p_out_V_V_blk_n();
    void thread_p_out_V_V_read();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
