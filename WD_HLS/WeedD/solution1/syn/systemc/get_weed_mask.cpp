// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "get_weed_mask.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic get_weed_mask::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic get_weed_mask::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> get_weed_mask::ap_ST_fsm_state1 = "1";
const sc_lv<4> get_weed_mask::ap_ST_fsm_state2 = "10";
const sc_lv<4> get_weed_mask::ap_ST_fsm_state3 = "100";
const sc_lv<4> get_weed_mask::ap_ST_fsm_state4 = "1000";
const bool get_weed_mask::ap_const_boolean_1 = true;
const sc_lv<32> get_weed_mask::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> get_weed_mask::ap_const_lv32_3 = "11";
const sc_lv<1> get_weed_mask::ap_const_lv1_1 = "1";
const sc_lv<1> get_weed_mask::ap_const_lv1_0 = "0";
const sc_lv<32> get_weed_mask::ap_const_lv32_1 = "1";
const sc_lv<32> get_weed_mask::ap_const_lv32_2 = "10";
const sc_lv<14> get_weed_mask::ap_const_lv14_3300 = "11001100000000";
const sc_lv<9> get_weed_mask::ap_const_lv9_B3 = "10110011";
const sc_lv<9> get_weed_mask::ap_const_lv9_0 = "000000000";
const sc_lv<2> get_weed_mask::ap_const_lv2_0 = "00";
const sc_lv<2> get_weed_mask::ap_const_lv2_3 = "11";
const sc_lv<32> get_weed_mask::ap_const_lv32_8 = "1000";
const sc_lv<32> get_weed_mask::ap_const_lv32_9 = "1001";
const sc_lv<32> get_weed_mask::ap_const_lv32_D = "1101";
const sc_lv<9> get_weed_mask::ap_const_lv9_140 = "101000000";
const sc_lv<9> get_weed_mask::ap_const_lv9_1 = "1";
const sc_lv<14> get_weed_mask::ap_const_lv14_3FCF = "11111111001111";
const sc_lv<9> get_weed_mask::ap_const_lv9_1FF = "111111111";

get_weed_mask::get_weed_mask(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_is_crop_or_furrow_fu_117 = new is_crop_or_furrow("grp_is_crop_or_furrow_fu_117");
    grp_is_crop_or_furrow_fu_117->ap_clk(ap_clk);
    grp_is_crop_or_furrow_fu_117->ap_rst(ap_rst);
    grp_is_crop_or_furrow_fu_117->ap_start(grp_is_crop_or_furrow_fu_117_ap_start);
    grp_is_crop_or_furrow_fu_117->ap_done(grp_is_crop_or_furrow_fu_117_ap_done);
    grp_is_crop_or_furrow_fu_117->ap_idle(grp_is_crop_or_furrow_fu_117_ap_idle);
    grp_is_crop_or_furrow_fu_117->ap_ready(grp_is_crop_or_furrow_fu_117_ap_ready);
    grp_is_crop_or_furrow_fu_117->lines_address0(grp_is_crop_or_furrow_fu_117_lines_address0);
    grp_is_crop_or_furrow_fu_117->lines_ce0(grp_is_crop_or_furrow_fu_117_lines_ce0);
    grp_is_crop_or_furrow_fu_117->lines_q0(lines_q0);
    grp_is_crop_or_furrow_fu_117->px_read(v_reg_93);
    grp_is_crop_or_furrow_fu_117->py_read(h_reg_105);
    grp_is_crop_or_furrow_fu_117->crop_width_read(tmp_6_reg_183);
    grp_is_crop_or_furrow_fu_117->ap_return(grp_is_crop_or_furrow_fu_117_ap_return);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln703_fu_158_p2);
    sensitive << ( p_Val2_s_reg_81 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state4);
    sensitive << ( weed_mask_tmp_data_V_full_n );
    sensitive << ( ap_predicate_op32_write_state4 );
    sensitive << ( ap_predicate_op34_write_state4 );

    SC_METHOD(thread_ap_block_state4_on_subcall_done);
    sensitive << ( lines_founded_read_1_read_fu_66_p2 );
    sensitive << ( grp_is_crop_or_furrow_fu_117_ap_done );

    SC_METHOD(thread_ap_condition_118);
    sensitive << ( weed_mask_tmp_data_V_full_n );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_predicate_op32_write_state4 );
    sensitive << ( ap_predicate_op34_write_state4 );
    sensitive << ( ap_block_state4_on_subcall_done );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_34_fu_128_p3 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_predicate_op32_write_state4);
    sensitive << ( lines_founded_read_1_read_fu_66_p2 );
    sensitive << ( icmp_ln415_fu_170_p2 );

    SC_METHOD(thread_ap_predicate_op34_write_state4);
    sensitive << ( lines_founded_read_1_read_fu_66_p2 );
    sensitive << ( icmp_ln415_fu_170_p2 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_34_fu_128_p3 );

    SC_METHOD(thread_grp_is_crop_or_furrow_fu_117_ap_start);
    sensitive << ( grp_is_crop_or_furrow_fu_117_ap_start_reg );

    SC_METHOD(thread_h_2_fu_152_p2);
    sensitive << ( h_reg_105 );

    SC_METHOD(thread_icmp_ln413_fu_146_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( h_reg_105 );

    SC_METHOD(thread_icmp_ln415_fu_170_p2);
    sensitive << ( weed_mask_tmp_data_V_full_n );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( lines_founded_read_1_read_fu_66_p2 );
    sensitive << ( grp_is_crop_or_furrow_fu_117_ap_return );
    sensitive << ( ap_predicate_op32_write_state4 );
    sensitive << ( ap_predicate_op34_write_state4 );
    sensitive << ( ap_block_state4_on_subcall_done );

    SC_METHOD(thread_lines_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( lines_founded_read_1_read_fu_66_p2 );
    sensitive << ( grp_is_crop_or_furrow_fu_117_lines_address0 );

    SC_METHOD(thread_lines_ce0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( lines_founded_read_1_read_fu_66_p2 );
    sensitive << ( grp_is_crop_or_furrow_fu_117_lines_ce0 );

    SC_METHOD(thread_lines_founded_read_1_read_fu_66_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( lines_founded_read );

    SC_METHOD(thread_tmp_34_fu_128_p3);
    sensitive << ( v_reg_93 );

    SC_METHOD(thread_v_2_fu_164_p2);
    sensitive << ( v_reg_93 );

    SC_METHOD(thread_weed_mask_tmp_data_V_blk_n);
    sensitive << ( weed_mask_tmp_data_V_full_n );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( lines_founded_read_1_read_fu_66_p2 );
    sensitive << ( icmp_ln415_fu_170_p2 );

    SC_METHOD(thread_weed_mask_tmp_data_V_din);
    sensitive << ( ap_predicate_op32_write_state4 );
    sensitive << ( ap_predicate_op34_write_state4 );
    sensitive << ( ap_condition_118 );

    SC_METHOD(thread_weed_mask_tmp_data_V_write);
    sensitive << ( weed_mask_tmp_data_V_full_n );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_predicate_op32_write_state4 );
    sensitive << ( ap_predicate_op34_write_state4 );
    sensitive << ( ap_block_state4_on_subcall_done );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( weed_mask_tmp_data_V_full_n );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_34_fu_128_p3 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln413_fu_146_p2 );
    sensitive << ( ap_predicate_op32_write_state4 );
    sensitive << ( ap_predicate_op34_write_state4 );
    sensitive << ( ap_block_state4_on_subcall_done );

    ap_CS_fsm = "0001";
    grp_is_crop_or_furrow_fu_117_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "get_weed_mask_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, weed_mask_tmp_data_V_din, "(port)weed_mask_tmp_data_V_din");
    sc_trace(mVcdFile, weed_mask_tmp_data_V_full_n, "(port)weed_mask_tmp_data_V_full_n");
    sc_trace(mVcdFile, weed_mask_tmp_data_V_write, "(port)weed_mask_tmp_data_V_write");
    sc_trace(mVcdFile, lines_founded_read, "(port)lines_founded_read");
    sc_trace(mVcdFile, lines_address0, "(port)lines_address0");
    sc_trace(mVcdFile, lines_ce0, "(port)lines_ce0");
    sc_trace(mVcdFile, lines_q0, "(port)lines_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, weed_mask_tmp_data_V_blk_n, "weed_mask_tmp_data_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, lines_founded_read_1_read_fu_66_p2, "lines_founded_read_1_read_fu_66_p2");
    sc_trace(mVcdFile, icmp_ln415_fu_170_p2, "icmp_ln415_fu_170_p2");
    sc_trace(mVcdFile, tmp_6_reg_183, "tmp_6_reg_183");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_34_fu_128_p3, "tmp_34_fu_128_p3");
    sc_trace(mVcdFile, h_2_fu_152_p2, "h_2_fu_152_p2");
    sc_trace(mVcdFile, h_2_reg_191, "h_2_reg_191");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, add_ln703_fu_158_p2, "add_ln703_fu_158_p2");
    sc_trace(mVcdFile, icmp_ln413_fu_146_p2, "icmp_ln413_fu_146_p2");
    sc_trace(mVcdFile, v_2_fu_164_p2, "v_2_fu_164_p2");
    sc_trace(mVcdFile, grp_is_crop_or_furrow_fu_117_ap_start, "grp_is_crop_or_furrow_fu_117_ap_start");
    sc_trace(mVcdFile, grp_is_crop_or_furrow_fu_117_ap_done, "grp_is_crop_or_furrow_fu_117_ap_done");
    sc_trace(mVcdFile, grp_is_crop_or_furrow_fu_117_ap_idle, "grp_is_crop_or_furrow_fu_117_ap_idle");
    sc_trace(mVcdFile, grp_is_crop_or_furrow_fu_117_ap_ready, "grp_is_crop_or_furrow_fu_117_ap_ready");
    sc_trace(mVcdFile, grp_is_crop_or_furrow_fu_117_lines_address0, "grp_is_crop_or_furrow_fu_117_lines_address0");
    sc_trace(mVcdFile, grp_is_crop_or_furrow_fu_117_lines_ce0, "grp_is_crop_or_furrow_fu_117_lines_ce0");
    sc_trace(mVcdFile, grp_is_crop_or_furrow_fu_117_ap_return, "grp_is_crop_or_furrow_fu_117_ap_return");
    sc_trace(mVcdFile, p_Val2_s_reg_81, "p_Val2_s_reg_81");
    sc_trace(mVcdFile, v_reg_93, "v_reg_93");
    sc_trace(mVcdFile, h_reg_105, "h_reg_105");
    sc_trace(mVcdFile, ap_predicate_op32_write_state4, "ap_predicate_op32_write_state4");
    sc_trace(mVcdFile, ap_predicate_op34_write_state4, "ap_predicate_op34_write_state4");
    sc_trace(mVcdFile, ap_block_state4, "ap_block_state4");
    sc_trace(mVcdFile, ap_block_state4_on_subcall_done, "ap_block_state4_on_subcall_done");
    sc_trace(mVcdFile, grp_is_crop_or_furrow_fu_117_ap_start_reg, "grp_is_crop_or_furrow_fu_117_ap_start_reg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_condition_118, "ap_condition_118");
#endif

    }
}

get_weed_mask::~get_weed_mask() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_is_crop_or_furrow_fu_117;
}

void get_weed_mask::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_is_crop_or_furrow_fu_117_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(lines_founded_read_1_read_fu_66_p2.read(), ap_const_lv1_1) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln413_fu_146_p2.read()))) {
            grp_is_crop_or_furrow_fu_117_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_is_crop_or_furrow_fu_117_ap_ready.read())) {
            grp_is_crop_or_furrow_fu_117_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_0, weed_mask_tmp_data_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op32_write_state4.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, weed_mask_tmp_data_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op34_write_state4.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4_on_subcall_done.read())))) {
        h_reg_105 = h_2_reg_191.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_34_fu_128_p3.read()))) {
        h_reg_105 = ap_const_lv9_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln413_fu_146_p2.read()))) {
        p_Val2_s_reg_81 = add_ln703_fu_158_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        p_Val2_s_reg_81 = ap_const_lv14_3300;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln413_fu_146_p2.read()))) {
        v_reg_93 = v_2_fu_164_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        v_reg_93 = ap_const_lv9_B3;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        h_2_reg_191 = h_2_fu_152_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_34_fu_128_p3.read()))) {
        tmp_6_reg_183 = p_Val2_s_reg_81.read().range(13, 9);
    }
}

void get_weed_mask::thread_add_ln703_fu_158_p2() {
    add_ln703_fu_158_p2 = (!p_Val2_s_reg_81.read().is_01() || !ap_const_lv14_3FCF.is_01())? sc_lv<14>(): (sc_biguint<14>(p_Val2_s_reg_81.read()) + sc_bigint<14>(ap_const_lv14_3FCF));
}

void get_weed_mask::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void get_weed_mask::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void get_weed_mask::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void get_weed_mask::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void get_weed_mask::thread_ap_block_state4() {
    ap_block_state4 = ((esl_seteq<1,1,1>(ap_const_logic_0, weed_mask_tmp_data_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op32_write_state4.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, weed_mask_tmp_data_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op34_write_state4.read())));
}

void get_weed_mask::thread_ap_block_state4_on_subcall_done() {
    ap_block_state4_on_subcall_done = (esl_seteq<1,1,1>(lines_founded_read_1_read_fu_66_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, grp_is_crop_or_furrow_fu_117_ap_done.read()));
}

void get_weed_mask::thread_ap_condition_118() {
    ap_condition_118 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && !((esl_seteq<1,1,1>(ap_const_logic_0, weed_mask_tmp_data_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op32_write_state4.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, weed_mask_tmp_data_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op34_write_state4.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4_on_subcall_done.read())));
}

void get_weed_mask::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_34_fu_128_p3.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void get_weed_mask::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void get_weed_mask::thread_ap_predicate_op32_write_state4() {
    ap_predicate_op32_write_state4 = (esl_seteq<1,1,1>(icmp_ln415_fu_170_p2.read(), ap_const_lv1_0) || esl_seteq<1,1,1>(lines_founded_read_1_read_fu_66_p2.read(), ap_const_lv1_0));
}

void get_weed_mask::thread_ap_predicate_op34_write_state4() {
    ap_predicate_op34_write_state4 = (esl_seteq<1,1,1>(lines_founded_read_1_read_fu_66_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln415_fu_170_p2.read()));
}

void get_weed_mask::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_34_fu_128_p3.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void get_weed_mask::thread_grp_is_crop_or_furrow_fu_117_ap_start() {
    grp_is_crop_or_furrow_fu_117_ap_start = grp_is_crop_or_furrow_fu_117_ap_start_reg.read();
}

void get_weed_mask::thread_h_2_fu_152_p2() {
    h_2_fu_152_p2 = (!h_reg_105.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(h_reg_105.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void get_weed_mask::thread_icmp_ln413_fu_146_p2() {
    icmp_ln413_fu_146_p2 = (!h_reg_105.read().is_01() || !ap_const_lv9_140.is_01())? sc_lv<1>(): sc_lv<1>(h_reg_105.read() == ap_const_lv9_140);
}

void get_weed_mask::thread_icmp_ln415_fu_170_p2() {
    icmp_ln415_fu_170_p2 = (!grp_is_crop_or_furrow_fu_117_ap_return.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(grp_is_crop_or_furrow_fu_117_ap_return.read() == ap_const_lv2_3);
}

void get_weed_mask::thread_lines_address0() {
    lines_address0 = grp_is_crop_or_furrow_fu_117_lines_address0.read();
}

void get_weed_mask::thread_lines_ce0() {
    lines_ce0 = grp_is_crop_or_furrow_fu_117_lines_ce0.read();
}

void get_weed_mask::thread_lines_founded_read_1_read_fu_66_p2() {
    lines_founded_read_1_read_fu_66_p2 =  (sc_lv<1>) (lines_founded_read.read());
}

void get_weed_mask::thread_tmp_34_fu_128_p3() {
    tmp_34_fu_128_p3 = v_reg_93.read().range(8, 8);
}

void get_weed_mask::thread_v_2_fu_164_p2() {
    v_2_fu_164_p2 = (!v_reg_93.read().is_01() || !ap_const_lv9_1FF.is_01())? sc_lv<9>(): (sc_biguint<9>(v_reg_93.read()) + sc_bigint<9>(ap_const_lv9_1FF));
}

void get_weed_mask::thread_weed_mask_tmp_data_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(lines_founded_read_1_read_fu_66_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln415_fu_170_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          (esl_seteq<1,1,1>(icmp_ln415_fu_170_p2.read(), ap_const_lv1_0) || 
           esl_seteq<1,1,1>(lines_founded_read_1_read_fu_66_p2.read(), ap_const_lv1_0))))) {
        weed_mask_tmp_data_V_blk_n = weed_mask_tmp_data_V_full_n.read();
    } else {
        weed_mask_tmp_data_V_blk_n = ap_const_logic_1;
    }
}

void get_weed_mask::thread_weed_mask_tmp_data_V_din() {
    if (esl_seteq<1,1,1>(ap_condition_118.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op34_write_state4.read())) {
            weed_mask_tmp_data_V_din = ap_const_lv2_3;
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op32_write_state4.read())) {
            weed_mask_tmp_data_V_din = ap_const_lv2_0;
        } else {
            weed_mask_tmp_data_V_din = "XX";
        }
    } else {
        weed_mask_tmp_data_V_din = "XX";
    }
}

void get_weed_mask::thread_weed_mask_tmp_data_V_write() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op32_write_state4.read()) && 
          !((esl_seteq<1,1,1>(ap_const_logic_0, weed_mask_tmp_data_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op32_write_state4.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, weed_mask_tmp_data_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op34_write_state4.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4_on_subcall_done.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op34_write_state4.read()) && 
          !((esl_seteq<1,1,1>(ap_const_logic_0, weed_mask_tmp_data_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op32_write_state4.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, weed_mask_tmp_data_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op34_write_state4.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4_on_subcall_done.read()))))) {
        weed_mask_tmp_data_V_write = ap_const_logic_1;
    } else {
        weed_mask_tmp_data_V_write = ap_const_logic_0;
    }
}

void get_weed_mask::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_34_fu_128_p3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln413_fu_146_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && !((esl_seteq<1,1,1>(ap_const_logic_0, weed_mask_tmp_data_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op32_write_state4.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, weed_mask_tmp_data_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op34_write_state4.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4_on_subcall_done.read())))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<4>) ("XXXX");
            break;
    }
}

}

