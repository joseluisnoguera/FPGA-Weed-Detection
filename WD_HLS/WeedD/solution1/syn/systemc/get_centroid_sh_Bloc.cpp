// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "get_centroid_sh_Bloc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic get_centroid_sh_Bloc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic get_centroid_sh_Bloc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<36> get_centroid_sh_Bloc::ap_ST_fsm_state1 = "1";
const sc_lv<36> get_centroid_sh_Bloc::ap_ST_fsm_state2 = "10";
const sc_lv<36> get_centroid_sh_Bloc::ap_ST_fsm_state3 = "100";
const sc_lv<36> get_centroid_sh_Bloc::ap_ST_fsm_state4 = "1000";
const sc_lv<36> get_centroid_sh_Bloc::ap_ST_fsm_state5 = "10000";
const sc_lv<36> get_centroid_sh_Bloc::ap_ST_fsm_state6 = "100000";
const sc_lv<36> get_centroid_sh_Bloc::ap_ST_fsm_state7 = "1000000";
const sc_lv<36> get_centroid_sh_Bloc::ap_ST_fsm_state8 = "10000000";
const sc_lv<36> get_centroid_sh_Bloc::ap_ST_fsm_state9 = "100000000";
const sc_lv<36> get_centroid_sh_Bloc::ap_ST_fsm_state10 = "1000000000";
const sc_lv<36> get_centroid_sh_Bloc::ap_ST_fsm_state11 = "10000000000";
const sc_lv<36> get_centroid_sh_Bloc::ap_ST_fsm_state12 = "100000000000";
const sc_lv<36> get_centroid_sh_Bloc::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<36> get_centroid_sh_Bloc::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<36> get_centroid_sh_Bloc::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<36> get_centroid_sh_Bloc::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<36> get_centroid_sh_Bloc::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<36> get_centroid_sh_Bloc::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<36> get_centroid_sh_Bloc::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<36> get_centroid_sh_Bloc::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<36> get_centroid_sh_Bloc::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<36> get_centroid_sh_Bloc::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<36> get_centroid_sh_Bloc::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<36> get_centroid_sh_Bloc::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<36> get_centroid_sh_Bloc::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<36> get_centroid_sh_Bloc::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<36> get_centroid_sh_Bloc::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<36> get_centroid_sh_Bloc::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<36> get_centroid_sh_Bloc::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<36> get_centroid_sh_Bloc::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<36> get_centroid_sh_Bloc::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<36> get_centroid_sh_Bloc::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<36> get_centroid_sh_Bloc::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<36> get_centroid_sh_Bloc::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<36> get_centroid_sh_Bloc::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<36> get_centroid_sh_Bloc::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<32> get_centroid_sh_Bloc::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool get_centroid_sh_Bloc::ap_const_boolean_1 = true;
const sc_lv<1> get_centroid_sh_Bloc::ap_const_lv1_1 = "1";
const sc_lv<32> get_centroid_sh_Bloc::ap_const_lv32_23 = "100011";
const sc_lv<1> get_centroid_sh_Bloc::ap_const_lv1_0 = "0";
const sc_lv<48> get_centroid_sh_Bloc::ap_const_lv48_0 = "000000000000000000000000000000000000000000000000";
const sc_lv<32> get_centroid_sh_Bloc::ap_const_lv32_F = "1111";
const sc_lv<32> get_centroid_sh_Bloc::ap_const_lv32_10 = "10000";
const sc_lv<32> get_centroid_sh_Bloc::ap_const_lv32_2F = "101111";

get_centroid_sh_Bloc::get_centroid_sh_Bloc(sc_module_name name) : sc_module(name), mVcdFile(0) {
    ip_accel_app_udivHfu_U434 = new ip_accel_app_udivHfu<1,36,32,32,16>("ip_accel_app_udivHfu_U434");
    ip_accel_app_udivHfu_U434->clk(ap_clk);
    ip_accel_app_udivHfu_U434->reset(ap_rst);
    ip_accel_app_udivHfu_U434->start(grp_fu_131_ap_start);
    ip_accel_app_udivHfu_U434->done(grp_fu_131_ap_done);
    ip_accel_app_udivHfu_U434->din0(p_read1);
    ip_accel_app_udivHfu_U434->din1(p_read);
    ip_accel_app_udivHfu_U434->ce(grp_fu_131_ce);
    ip_accel_app_udivHfu_U434->dout(grp_fu_131_p2);
    ip_accel_app_udivIfE_U435 = new ip_accel_app_udivIfE<1,36,32,32,32>("ip_accel_app_udivIfE_U435");
    ip_accel_app_udivIfE_U435->clk(ap_clk);
    ip_accel_app_udivIfE_U435->reset(ap_rst);
    ip_accel_app_udivIfE_U435->start(grp_fu_137_ap_start);
    ip_accel_app_udivIfE_U435->done(grp_fu_137_ap_done);
    ip_accel_app_udivIfE_U435->din0(p_read2);
    ip_accel_app_udivIfE_U435->din1(p_read);
    ip_accel_app_udivIfE_U435->ce(grp_fu_137_ce);
    ip_accel_app_udivIfE_U435->dout(grp_fu_137_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln134_fu_166_p2);
    sensitive << ( trunc_ln134_fu_159_p1 );
    sensitive << ( zext_ln134_fu_163_p1 );

    SC_METHOD(thread_add_ln135_fu_187_p2);
    sensitive << ( grp_fu_137_p2 );
    sensitive << ( zext_ln135_fu_184_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state36);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( possible_c_x_empty_n );
    sensitive << ( c_read_empty_n );
    sensitive << ( v_offset_read_empty_n );
    sensitive << ( h_offset_empty_n );
    sensitive << ( possible_c_y_empty_n );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state36 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_c3_i_i_phi_fu_110_p4);
    sensitive << ( icmp_ln133_reg_243 );
    sensitive << ( c2_part_set_i_i_fu_172_p5 );
    sensitive << ( c3_i_i_reg_107 );
    sensitive << ( ap_CS_fsm_state36 );

    SC_METHOD(thread_ap_phi_mux_storemerge_i_i_phi_fu_119_p4);
    sensitive << ( icmp_ln133_reg_243 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( add_ln135_fu_187_p2 );
    sensitive << ( storemerge_i_i_reg_116 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state36 );

    SC_METHOD(thread_c);
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( c3_part_set_i_i_fu_194_p5 );
    sensitive << ( c_preg );

    SC_METHOD(thread_c1_part_set_i_i_fu_147_p5);
    sensitive << ( c_read_dout );
    sensitive << ( zext_ln120_fu_143_p1 );

    SC_METHOD(thread_c2_part_set_i_i_fu_172_p5);
    sensitive << ( c_read_2_reg_223 );
    sensitive << ( add_ln134_fu_166_p2 );

    SC_METHOD(thread_c3_part_set_i_i_fu_194_p5);
    sensitive << ( ap_phi_mux_c3_i_i_phi_fu_110_p4 );
    sensitive << ( ap_phi_mux_storemerge_i_i_phi_fu_119_p4 );

    SC_METHOD(thread_c_ap_vld);
    sensitive << ( ap_CS_fsm_state36 );

    SC_METHOD(thread_c_read_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( c_read_empty_n );

    SC_METHOD(thread_c_read_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( possible_c_x_empty_n );
    sensitive << ( c_read_empty_n );
    sensitive << ( v_offset_read_empty_n );
    sensitive << ( h_offset_empty_n );
    sensitive << ( possible_c_y_empty_n );

    SC_METHOD(thread_grp_fu_131_ap_start);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( possible_c_x_empty_n );
    sensitive << ( c_read_empty_n );
    sensitive << ( v_offset_read_empty_n );
    sensitive << ( h_offset_empty_n );
    sensitive << ( possible_c_y_empty_n );
    sensitive << ( icmp_ln133_fu_125_p2 );

    SC_METHOD(thread_grp_fu_131_ce);

    SC_METHOD(thread_grp_fu_137_ap_start);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( possible_c_x_empty_n );
    sensitive << ( c_read_empty_n );
    sensitive << ( v_offset_read_empty_n );
    sensitive << ( h_offset_empty_n );
    sensitive << ( possible_c_y_empty_n );
    sensitive << ( icmp_ln133_fu_125_p2 );

    SC_METHOD(thread_grp_fu_137_ce);

    SC_METHOD(thread_h_offset_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( h_offset_empty_n );

    SC_METHOD(thread_h_offset_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( possible_c_x_empty_n );
    sensitive << ( c_read_empty_n );
    sensitive << ( v_offset_read_empty_n );
    sensitive << ( h_offset_empty_n );
    sensitive << ( possible_c_y_empty_n );

    SC_METHOD(thread_icmp_ln133_fu_125_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( p_read );
    sensitive << ( possible_c_x_empty_n );
    sensitive << ( c_read_empty_n );
    sensitive << ( v_offset_read_empty_n );
    sensitive << ( h_offset_empty_n );
    sensitive << ( possible_c_y_empty_n );

    SC_METHOD(thread_possible_c_x_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( possible_c_x_empty_n );

    SC_METHOD(thread_possible_c_x_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( possible_c_x_empty_n );
    sensitive << ( c_read_empty_n );
    sensitive << ( v_offset_read_empty_n );
    sensitive << ( h_offset_empty_n );
    sensitive << ( possible_c_y_empty_n );

    SC_METHOD(thread_possible_c_y_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( possible_c_y_empty_n );

    SC_METHOD(thread_possible_c_y_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( possible_c_x_empty_n );
    sensitive << ( c_read_empty_n );
    sensitive << ( v_offset_read_empty_n );
    sensitive << ( h_offset_empty_n );
    sensitive << ( possible_c_y_empty_n );

    SC_METHOD(thread_trunc_ln134_fu_159_p1);
    sensitive << ( grp_fu_131_p2 );

    SC_METHOD(thread_v_offset_read_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( v_offset_read_empty_n );

    SC_METHOD(thread_v_offset_read_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( possible_c_x_empty_n );
    sensitive << ( c_read_empty_n );
    sensitive << ( v_offset_read_empty_n );
    sensitive << ( h_offset_empty_n );
    sensitive << ( possible_c_y_empty_n );

    SC_METHOD(thread_zext_ln120_fu_143_p1);
    sensitive << ( possible_c_x_dout );

    SC_METHOD(thread_zext_ln134_fu_163_p1);
    sensitive << ( v_offset_read_2_reg_228 );

    SC_METHOD(thread_zext_ln135_fu_184_p1);
    sensitive << ( h_offset_read_reg_233 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( possible_c_x_empty_n );
    sensitive << ( c_read_empty_n );
    sensitive << ( v_offset_read_empty_n );
    sensitive << ( h_offset_empty_n );
    sensitive << ( possible_c_y_empty_n );
    sensitive << ( icmp_ln133_fu_125_p2 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "000000000000000000000000000000000001";
    c_preg = "000000000000000000000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "get_centroid_sh_Bloc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, p_read, "(port)p_read");
    sc_trace(mVcdFile, possible_c_x_dout, "(port)possible_c_x_dout");
    sc_trace(mVcdFile, possible_c_x_empty_n, "(port)possible_c_x_empty_n");
    sc_trace(mVcdFile, possible_c_x_read, "(port)possible_c_x_read");
    sc_trace(mVcdFile, c_read_dout, "(port)c_read_dout");
    sc_trace(mVcdFile, c_read_empty_n, "(port)c_read_empty_n");
    sc_trace(mVcdFile, c_read_read, "(port)c_read_read");
    sc_trace(mVcdFile, p_read1, "(port)p_read1");
    sc_trace(mVcdFile, v_offset_read_dout, "(port)v_offset_read_dout");
    sc_trace(mVcdFile, v_offset_read_empty_n, "(port)v_offset_read_empty_n");
    sc_trace(mVcdFile, v_offset_read_read, "(port)v_offset_read_read");
    sc_trace(mVcdFile, p_read2, "(port)p_read2");
    sc_trace(mVcdFile, h_offset_dout, "(port)h_offset_dout");
    sc_trace(mVcdFile, h_offset_empty_n, "(port)h_offset_empty_n");
    sc_trace(mVcdFile, h_offset_read, "(port)h_offset_read");
    sc_trace(mVcdFile, possible_c_y_dout, "(port)possible_c_y_dout");
    sc_trace(mVcdFile, possible_c_y_empty_n, "(port)possible_c_y_empty_n");
    sc_trace(mVcdFile, possible_c_y_read, "(port)possible_c_y_read");
    sc_trace(mVcdFile, c, "(port)c");
    sc_trace(mVcdFile, c_ap_vld, "(port)c_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, possible_c_x_blk_n, "possible_c_x_blk_n");
    sc_trace(mVcdFile, c_read_blk_n, "c_read_blk_n");
    sc_trace(mVcdFile, v_offset_read_blk_n, "v_offset_read_blk_n");
    sc_trace(mVcdFile, h_offset_blk_n, "h_offset_blk_n");
    sc_trace(mVcdFile, possible_c_y_blk_n, "possible_c_y_blk_n");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, c_read_2_reg_223, "c_read_2_reg_223");
    sc_trace(mVcdFile, v_offset_read_2_reg_228, "v_offset_read_2_reg_228");
    sc_trace(mVcdFile, h_offset_read_reg_233, "h_offset_read_reg_233");
    sc_trace(mVcdFile, icmp_ln133_fu_125_p2, "icmp_ln133_fu_125_p2");
    sc_trace(mVcdFile, icmp_ln133_reg_243, "icmp_ln133_reg_243");
    sc_trace(mVcdFile, c1_part_set_i_i_fu_147_p5, "c1_part_set_i_i_fu_147_p5");
    sc_trace(mVcdFile, c2_part_set_i_i_fu_172_p5, "c2_part_set_i_i_fu_172_p5");
    sc_trace(mVcdFile, ap_phi_mux_c3_i_i_phi_fu_110_p4, "ap_phi_mux_c3_i_i_phi_fu_110_p4");
    sc_trace(mVcdFile, c3_i_i_reg_107, "c3_i_i_reg_107");
    sc_trace(mVcdFile, ap_CS_fsm_state36, "ap_CS_fsm_state36");
    sc_trace(mVcdFile, add_ln135_fu_187_p2, "add_ln135_fu_187_p2");
    sc_trace(mVcdFile, ap_phi_mux_storemerge_i_i_phi_fu_119_p4, "ap_phi_mux_storemerge_i_i_phi_fu_119_p4");
    sc_trace(mVcdFile, storemerge_i_i_reg_116, "storemerge_i_i_reg_116");
    sc_trace(mVcdFile, c3_part_set_i_i_fu_194_p5, "c3_part_set_i_i_fu_194_p5");
    sc_trace(mVcdFile, c_preg, "c_preg");
    sc_trace(mVcdFile, zext_ln120_fu_143_p1, "zext_ln120_fu_143_p1");
    sc_trace(mVcdFile, grp_fu_131_p2, "grp_fu_131_p2");
    sc_trace(mVcdFile, trunc_ln134_fu_159_p1, "trunc_ln134_fu_159_p1");
    sc_trace(mVcdFile, zext_ln134_fu_163_p1, "zext_ln134_fu_163_p1");
    sc_trace(mVcdFile, add_ln134_fu_166_p2, "add_ln134_fu_166_p2");
    sc_trace(mVcdFile, grp_fu_137_p2, "grp_fu_137_p2");
    sc_trace(mVcdFile, zext_ln135_fu_184_p1, "zext_ln135_fu_184_p1");
    sc_trace(mVcdFile, grp_fu_131_ap_start, "grp_fu_131_ap_start");
    sc_trace(mVcdFile, grp_fu_131_ap_done, "grp_fu_131_ap_done");
    sc_trace(mVcdFile, grp_fu_131_ce, "grp_fu_131_ce");
    sc_trace(mVcdFile, grp_fu_137_ap_start, "grp_fu_137_ap_start");
    sc_trace(mVcdFile, grp_fu_137_ap_done, "grp_fu_137_ap_done");
    sc_trace(mVcdFile, grp_fu_137_ce, "grp_fu_137_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

get_centroid_sh_Bloc::~get_centroid_sh_Bloc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete ip_accel_app_udivHfu_U434;
    delete ip_accel_app_udivIfE_U435;
}

void get_centroid_sh_Bloc::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_x_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, c_read_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, v_offset_read_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, h_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_y_empty_n.read())) && 
         esl_seteq<1,1,1>(icmp_ln133_fu_125_p2.read(), ap_const_lv1_1))) {
        c3_i_i_reg_107 = c1_part_set_i_i_fu_147_p5.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) && 
                esl_seteq<1,1,1>(icmp_ln133_reg_243.read(), ap_const_lv1_0))) {
        c3_i_i_reg_107 = c2_part_set_i_i_fu_172_p5.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        c_preg = ap_const_lv48_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
            c_preg = c3_part_set_i_i_fu_194_p5.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_x_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, c_read_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, v_offset_read_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, h_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_y_empty_n.read())) && 
         esl_seteq<1,1,1>(icmp_ln133_fu_125_p2.read(), ap_const_lv1_1))) {
        storemerge_i_i_reg_116 = possible_c_y_dout.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) && 
                esl_seteq<1,1,1>(icmp_ln133_reg_243.read(), ap_const_lv1_0))) {
        storemerge_i_i_reg_116 = add_ln135_fu_187_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_x_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, c_read_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, v_offset_read_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, h_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_y_empty_n.read())))) {
        c_read_2_reg_223 = c_read_dout.read();
        h_offset_read_reg_233 = h_offset_dout.read();
        icmp_ln133_reg_243 = icmp_ln133_fu_125_p2.read();
        v_offset_read_2_reg_228 = v_offset_read_dout.read();
    }
}

void get_centroid_sh_Bloc::thread_add_ln134_fu_166_p2() {
    add_ln134_fu_166_p2 = (!trunc_ln134_fu_159_p1.read().is_01() || !zext_ln134_fu_163_p1.read().is_01())? sc_lv<16>(): (sc_biguint<16>(trunc_ln134_fu_159_p1.read()) + sc_biguint<16>(zext_ln134_fu_163_p1.read()));
}

void get_centroid_sh_Bloc::thread_add_ln135_fu_187_p2() {
    add_ln135_fu_187_p2 = (!grp_fu_137_p2.read().is_01() || !zext_ln135_fu_184_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(grp_fu_137_p2.read()) + sc_biguint<32>(zext_ln135_fu_184_p1.read()));
}

void get_centroid_sh_Bloc::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void get_centroid_sh_Bloc::thread_ap_CS_fsm_state36() {
    ap_CS_fsm_state36 = ap_CS_fsm.read()[35];
}

void get_centroid_sh_Bloc::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_x_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, c_read_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, v_offset_read_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, h_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_y_empty_n.read()));
}

void get_centroid_sh_Bloc::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void get_centroid_sh_Bloc::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void get_centroid_sh_Bloc::thread_ap_phi_mux_c3_i_i_phi_fu_110_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) && 
         esl_seteq<1,1,1>(icmp_ln133_reg_243.read(), ap_const_lv1_0))) {
        ap_phi_mux_c3_i_i_phi_fu_110_p4 = c2_part_set_i_i_fu_172_p5.read();
    } else {
        ap_phi_mux_c3_i_i_phi_fu_110_p4 = c3_i_i_reg_107.read();
    }
}

void get_centroid_sh_Bloc::thread_ap_phi_mux_storemerge_i_i_phi_fu_119_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) && 
         esl_seteq<1,1,1>(icmp_ln133_reg_243.read(), ap_const_lv1_0))) {
        ap_phi_mux_storemerge_i_i_phi_fu_119_p4 = add_ln135_fu_187_p2.read();
    } else {
        ap_phi_mux_storemerge_i_i_phi_fu_119_p4 = storemerge_i_i_reg_116.read();
    }
}

void get_centroid_sh_Bloc::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void get_centroid_sh_Bloc::thread_c() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        c = c3_part_set_i_i_fu_194_p5.read();
    } else {
        c = c_preg.read();
    }
}

void get_centroid_sh_Bloc::thread_c1_part_set_i_i_fu_147_p5() {
    c1_part_set_i_i_fu_147_p5 = esl_partset<48,48,16,32,32>(c_read_dout.read(), zext_ln120_fu_143_p1.read(), ap_const_lv32_0, ap_const_lv32_F);
}

void get_centroid_sh_Bloc::thread_c2_part_set_i_i_fu_172_p5() {
    c2_part_set_i_i_fu_172_p5 = esl_partset<48,48,16,32,32>(c_read_2_reg_223.read(), add_ln134_fu_166_p2.read(), ap_const_lv32_0, ap_const_lv32_F);
}

void get_centroid_sh_Bloc::thread_c3_part_set_i_i_fu_194_p5() {
    c3_part_set_i_i_fu_194_p5 = esl_partset<48,48,32,32,32>(ap_phi_mux_c3_i_i_phi_fu_110_p4.read(), ap_phi_mux_storemerge_i_i_phi_fu_119_p4.read(), ap_const_lv32_10, ap_const_lv32_2F);
}

void get_centroid_sh_Bloc::thread_c_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        c_ap_vld = ap_const_logic_1;
    } else {
        c_ap_vld = ap_const_logic_0;
    }
}

void get_centroid_sh_Bloc::thread_c_read_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        c_read_blk_n = c_read_empty_n.read();
    } else {
        c_read_blk_n = ap_const_logic_1;
    }
}

void get_centroid_sh_Bloc::thread_c_read_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_x_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, c_read_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, v_offset_read_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, h_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_y_empty_n.read())))) {
        c_read_read = ap_const_logic_1;
    } else {
        c_read_read = ap_const_logic_0;
    }
}

void get_centroid_sh_Bloc::thread_grp_fu_131_ap_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_x_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, c_read_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, v_offset_read_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, h_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_y_empty_n.read())) && 
         esl_seteq<1,1,1>(icmp_ln133_fu_125_p2.read(), ap_const_lv1_0))) {
        grp_fu_131_ap_start = ap_const_logic_1;
    } else {
        grp_fu_131_ap_start = ap_const_logic_0;
    }
}

void get_centroid_sh_Bloc::thread_grp_fu_131_ce() {
    if (!esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
        grp_fu_131_ce = ap_const_logic_0;
    } else {
        grp_fu_131_ce = ap_const_logic_1;
    }
}

void get_centroid_sh_Bloc::thread_grp_fu_137_ap_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_x_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, c_read_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, v_offset_read_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, h_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_y_empty_n.read())) && 
         esl_seteq<1,1,1>(icmp_ln133_fu_125_p2.read(), ap_const_lv1_0))) {
        grp_fu_137_ap_start = ap_const_logic_1;
    } else {
        grp_fu_137_ap_start = ap_const_logic_0;
    }
}

void get_centroid_sh_Bloc::thread_grp_fu_137_ce() {
    if (!esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
        grp_fu_137_ce = ap_const_logic_0;
    } else {
        grp_fu_137_ce = ap_const_logic_1;
    }
}

void get_centroid_sh_Bloc::thread_h_offset_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        h_offset_blk_n = h_offset_empty_n.read();
    } else {
        h_offset_blk_n = ap_const_logic_1;
    }
}

void get_centroid_sh_Bloc::thread_h_offset_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_x_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, c_read_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, v_offset_read_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, h_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_y_empty_n.read())))) {
        h_offset_read = ap_const_logic_1;
    } else {
        h_offset_read = ap_const_logic_0;
    }
}

void get_centroid_sh_Bloc::thread_icmp_ln133_fu_125_p2() {
    icmp_ln133_fu_125_p2 = (!p_read.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(p_read.read() == ap_const_lv32_0);
}

void get_centroid_sh_Bloc::thread_possible_c_x_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        possible_c_x_blk_n = possible_c_x_empty_n.read();
    } else {
        possible_c_x_blk_n = ap_const_logic_1;
    }
}

void get_centroid_sh_Bloc::thread_possible_c_x_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_x_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, c_read_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, v_offset_read_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, h_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_y_empty_n.read())))) {
        possible_c_x_read = ap_const_logic_1;
    } else {
        possible_c_x_read = ap_const_logic_0;
    }
}

void get_centroid_sh_Bloc::thread_possible_c_y_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        possible_c_y_blk_n = possible_c_y_empty_n.read();
    } else {
        possible_c_y_blk_n = ap_const_logic_1;
    }
}

void get_centroid_sh_Bloc::thread_possible_c_y_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_x_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, c_read_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, v_offset_read_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, h_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_y_empty_n.read())))) {
        possible_c_y_read = ap_const_logic_1;
    } else {
        possible_c_y_read = ap_const_logic_0;
    }
}

void get_centroid_sh_Bloc::thread_trunc_ln134_fu_159_p1() {
    trunc_ln134_fu_159_p1 = grp_fu_131_p2.read().range(16-1, 0);
}

void get_centroid_sh_Bloc::thread_v_offset_read_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        v_offset_read_blk_n = v_offset_read_empty_n.read();
    } else {
        v_offset_read_blk_n = ap_const_logic_1;
    }
}

void get_centroid_sh_Bloc::thread_v_offset_read_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_x_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, c_read_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, v_offset_read_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, h_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_y_empty_n.read())))) {
        v_offset_read_read = ap_const_logic_1;
    } else {
        v_offset_read_read = ap_const_logic_0;
    }
}

void get_centroid_sh_Bloc::thread_zext_ln120_fu_143_p1() {
    zext_ln120_fu_143_p1 = esl_zext<16,8>(possible_c_x_dout.read());
}

void get_centroid_sh_Bloc::thread_zext_ln134_fu_163_p1() {
    zext_ln134_fu_163_p1 = esl_zext<16,8>(v_offset_read_2_reg_228.read());
}

void get_centroid_sh_Bloc::thread_zext_ln135_fu_184_p1() {
    zext_ln135_fu_184_p1 = esl_zext<32,16>(h_offset_read_reg_233.read());
}

void get_centroid_sh_Bloc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_x_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, c_read_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, v_offset_read_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, h_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_y_empty_n.read())) && esl_seteq<1,1,1>(icmp_ln133_fu_125_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state36;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_x_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, c_read_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, v_offset_read_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, h_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_y_empty_n.read())) && esl_seteq<1,1,1>(icmp_ln133_fu_125_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            break;
    }
}

}

