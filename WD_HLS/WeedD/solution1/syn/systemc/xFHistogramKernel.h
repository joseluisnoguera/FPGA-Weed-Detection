// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _xFHistogramKernel_HH_
#define _xFHistogramKernel_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "xFHistogramKerneludo.h"

namespace ap_rtl {

struct xFHistogramKernel : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > p_src_mat_data_V_dout;
    sc_in< sc_logic > p_src_mat_data_V_empty_n;
    sc_out< sc_logic > p_src_mat_data_V_read;
    sc_out< sc_lv<8> > hist_array_address0;
    sc_out< sc_logic > hist_array_ce0;
    sc_out< sc_logic > hist_array_we0;
    sc_out< sc_lv<32> > hist_array_d0;


    // Module declarations
    xFHistogramKernel(sc_module_name name);
    SC_HAS_PROCESS(xFHistogramKernel);

    ~xFHistogramKernel();

    sc_trace_file* mVcdFile;

    xFHistogramKerneludo* tmp_hist_0_U;
    xFHistogramKerneludo* tmp_hist1_0_U;
    sc_signal< sc_lv<11> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > p_src_mat_data_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage1;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< bool > ap_block_pp1_stage1;
    sc_signal< sc_lv<1> > icmp_ln887_13_reg_401;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_lv<9> > p_0396_0_reg_219;
    sc_signal< sc_lv<9> > t_V_7_reg_231;
    sc_signal< sc_lv<8> > add_ln47_fu_242_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<8> > add_ln48_fu_259_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > icmp_ln48_fu_270_p2;
    sc_signal< sc_lv<9> > i_V_fu_282_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > icmp_ln887_12_fu_294_p2;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<8> > row_V_fu_300_p2;
    sc_signal< sc_lv<8> > row_V_reg_396;
    sc_signal< sc_lv<1> > icmp_ln887_13_fu_306_p2;
    sc_signal< bool > ap_block_state7_pp1_stage0_iter0;
    sc_signal< bool > ap_block_state9_pp1_stage0_iter1;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln887_13_reg_401_pp1_iter1_reg;
    sc_signal< sc_lv<8> > tmp_hist_0_addr_3_reg_405;
    sc_signal< bool > ap_block_state8_pp1_stage1_iter0;
    sc_signal< bool > ap_block_state10_pp1_stage1_iter1;
    sc_signal< bool > ap_block_pp1_stage1_11001;
    sc_signal< sc_lv<9> > col_V_fu_317_p2;
    sc_signal< sc_lv<9> > col_V_reg_410;
    sc_signal< sc_lv<8> > tmp_hist1_0_addr_3_reg_415;
    sc_signal< sc_lv<1> > icmp_ln887_14_fu_342_p2;
    sc_signal< sc_lv<1> > icmp_ln887_14_reg_420;
    sc_signal< sc_logic > ap_CS_fsm_pp2_stage0;
    sc_signal< bool > ap_block_state12_pp2_stage0_iter0;
    sc_signal< bool > ap_block_state13_pp2_stage0_iter1;
    sc_signal< bool > ap_block_pp2_stage0_11001;
    sc_signal< sc_lv<9> > i_V_1_fu_348_p2;
    sc_signal< sc_logic > ap_enable_reg_pp2_iter0;
    sc_signal< sc_lv<64> > zext_ln544_4_fu_354_p1;
    sc_signal< sc_lv<64> > zext_ln544_4_reg_429;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp1_exit_iter0_state7;
    sc_signal< bool > ap_block_pp1_stage1_subdone;
    sc_signal< bool > ap_block_pp2_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp2_exit_iter0_state12;
    sc_signal< sc_logic > ap_enable_reg_pp2_iter1;
    sc_signal< sc_lv<8> > tmp_hist_0_address0;
    sc_signal< sc_logic > tmp_hist_0_ce0;
    sc_signal< sc_logic > tmp_hist_0_we0;
    sc_signal< sc_lv<32> > tmp_hist_0_d0;
    sc_signal< sc_lv<32> > tmp_hist_0_q0;
    sc_signal< sc_lv<8> > tmp_hist1_0_address0;
    sc_signal< sc_logic > tmp_hist1_0_ce0;
    sc_signal< sc_logic > tmp_hist1_0_we0;
    sc_signal< sc_lv<32> > tmp_hist1_0_d0;
    sc_signal< sc_lv<32> > tmp_hist1_0_q0;
    sc_signal< sc_lv<8> > phi_ln47_reg_175;
    sc_signal< sc_lv<1> > icmp_ln47_fu_253_p2;
    sc_signal< sc_lv<8> > phi_ln48_reg_186;
    sc_signal< sc_lv<9> > t_V_reg_197;
    sc_signal< sc_lv<1> > icmp_ln887_fu_276_p2;
    sc_signal< sc_lv<8> > t_V_6_reg_208;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<9> > ap_phi_mux_p_0396_0_phi_fu_223_p4;
    sc_signal< sc_lv<64> > zext_ln47_fu_248_p1;
    sc_signal< sc_lv<64> > zext_ln48_fu_265_p1;
    sc_signal< sc_lv<64> > zext_ln544_fu_288_p1;
    sc_signal< sc_lv<64> > zext_ln544_5_fu_312_p1;
    sc_signal< sc_lv<64> > zext_ln544_6_fu_323_p1;
    sc_signal< bool > ap_block_pp2_stage0;
    sc_signal< sc_lv<32> > add_ln97_fu_328_p2;
    sc_signal< sc_lv<32> > add_ln99_fu_335_p2;
    sc_signal< sc_logic > ap_CS_fsm_state14;
    sc_signal< sc_lv<11> > ap_NS_fsm;
    sc_signal< bool > ap_block_pp1;
    sc_signal< bool > ap_block_pp2;
    sc_signal< bool > ap_enable_operation_73;
    sc_signal< bool > ap_enable_state8_pp1_iter0_stage1;
    sc_signal< bool > ap_enable_operation_76;
    sc_signal< bool > ap_enable_state9_pp1_iter1_stage0;
    sc_signal< bool > ap_enable_operation_81;
    sc_signal< bool > ap_enable_operation_79;
    sc_signal< bool > ap_enable_operation_87;
    sc_signal< bool > ap_enable_state10_pp1_iter1_stage1;
    sc_signal< bool > ap_enable_operation_89;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    sc_signal< sc_logic > ap_idle_pp2;
    sc_signal< sc_logic > ap_enable_pp2;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<11> ap_ST_fsm_state1;
    static const sc_lv<11> ap_ST_fsm_state2;
    static const sc_lv<11> ap_ST_fsm_state3;
    static const sc_lv<11> ap_ST_fsm_state4;
    static const sc_lv<11> ap_ST_fsm_state5;
    static const sc_lv<11> ap_ST_fsm_state6;
    static const sc_lv<11> ap_ST_fsm_pp1_stage0;
    static const sc_lv<11> ap_ST_fsm_pp1_stage1;
    static const sc_lv<11> ap_ST_fsm_state11;
    static const sc_lv<11> ap_ST_fsm_pp2_stage0;
    static const sc_lv<11> ap_ST_fsm_state14;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_7;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<9> ap_const_lv9_100;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<8> ap_const_lv8_B4;
    static const sc_lv<9> ap_const_lv9_140;
    static const sc_lv<9> ap_const_lv9_2;
    static const sc_lv<32> ap_const_lv32_A;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln47_fu_242_p2();
    void thread_add_ln48_fu_259_p2();
    void thread_add_ln97_fu_328_p2();
    void thread_add_ln99_fu_335_p2();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_pp1_stage1();
    void thread_ap_CS_fsm_pp2_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state14();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp1();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_pp1_stage1();
    void thread_ap_block_pp1_stage1_11001();
    void thread_ap_block_pp1_stage1_subdone();
    void thread_ap_block_pp2();
    void thread_ap_block_pp2_stage0();
    void thread_ap_block_pp2_stage0_11001();
    void thread_ap_block_pp2_stage0_subdone();
    void thread_ap_block_state10_pp1_stage1_iter1();
    void thread_ap_block_state12_pp2_stage0_iter0();
    void thread_ap_block_state13_pp2_stage0_iter1();
    void thread_ap_block_state7_pp1_stage0_iter0();
    void thread_ap_block_state8_pp1_stage1_iter0();
    void thread_ap_block_state9_pp1_stage0_iter1();
    void thread_ap_condition_pp1_exit_iter0_state7();
    void thread_ap_condition_pp2_exit_iter0_state12();
    void thread_ap_done();
    void thread_ap_enable_operation_73();
    void thread_ap_enable_operation_76();
    void thread_ap_enable_operation_79();
    void thread_ap_enable_operation_81();
    void thread_ap_enable_operation_87();
    void thread_ap_enable_operation_89();
    void thread_ap_enable_pp1();
    void thread_ap_enable_pp2();
    void thread_ap_enable_state10_pp1_iter1_stage1();
    void thread_ap_enable_state8_pp1_iter0_stage1();
    void thread_ap_enable_state9_pp1_iter1_stage0();
    void thread_ap_idle();
    void thread_ap_idle_pp1();
    void thread_ap_idle_pp2();
    void thread_ap_phi_mux_p_0396_0_phi_fu_223_p4();
    void thread_ap_ready();
    void thread_col_V_fu_317_p2();
    void thread_hist_array_address0();
    void thread_hist_array_ce0();
    void thread_hist_array_d0();
    void thread_hist_array_we0();
    void thread_i_V_1_fu_348_p2();
    void thread_i_V_fu_282_p2();
    void thread_icmp_ln47_fu_253_p2();
    void thread_icmp_ln48_fu_270_p2();
    void thread_icmp_ln887_12_fu_294_p2();
    void thread_icmp_ln887_13_fu_306_p2();
    void thread_icmp_ln887_14_fu_342_p2();
    void thread_icmp_ln887_fu_276_p2();
    void thread_p_src_mat_data_V_blk_n();
    void thread_p_src_mat_data_V_read();
    void thread_row_V_fu_300_p2();
    void thread_tmp_hist1_0_address0();
    void thread_tmp_hist1_0_ce0();
    void thread_tmp_hist1_0_d0();
    void thread_tmp_hist1_0_we0();
    void thread_tmp_hist_0_address0();
    void thread_tmp_hist_0_ce0();
    void thread_tmp_hist_0_d0();
    void thread_tmp_hist_0_we0();
    void thread_zext_ln47_fu_248_p1();
    void thread_zext_ln48_fu_265_p1();
    void thread_zext_ln544_4_fu_354_p1();
    void thread_zext_ln544_5_fu_312_p1();
    void thread_zext_ln544_6_fu_323_p1();
    void thread_zext_ln544_fu_288_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
