// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _get_centroid_sh_HH_
#define _get_centroid_sh_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "get_centroid_sh_Loop.h"
#include "get_centroid_sh_Bloc.h"
#include "fifo_w16_d2_A_x.h"
#include "fifo_w8_d2_A_x1.h"
#include "fifo_w32_d2_A_x1.h"
#include "fifo_w48_d2_A.h"

namespace ap_rtl {

struct get_centroid_sh : public sc_module {
    // Port declarations 33
    sc_out< sc_lv<10> > micro_roi_data_V_address0;
    sc_out< sc_logic > micro_roi_data_V_ce0;
    sc_out< sc_lv<8> > micro_roi_data_V_d0;
    sc_in< sc_lv<8> > micro_roi_data_V_q0;
    sc_out< sc_logic > micro_roi_data_V_we0;
    sc_out< sc_lv<10> > micro_roi_data_V_address1;
    sc_out< sc_logic > micro_roi_data_V_ce1;
    sc_out< sc_lv<8> > micro_roi_data_V_d1;
    sc_in< sc_lv<8> > micro_roi_data_V_q1;
    sc_out< sc_logic > micro_roi_data_V_we1;
    sc_in< sc_lv<16> > h_offset;
    sc_in< sc_lv<8> > v_offset_read;
    sc_in< sc_lv<8> > v_limit;
    sc_in< sc_lv<16> > h_limit;
    sc_in< sc_lv<8> > possible_c_x;
    sc_in< sc_lv<32> > possible_c_y;
    sc_out< sc_lv<48> > c;
    sc_in< sc_lv<48> > c_read;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > v_limit_ap_vld;
    sc_in< sc_logic > h_limit_ap_vld;
    sc_in< sc_logic > h_offset_ap_vld;
    sc_in< sc_logic > v_offset_read_ap_vld;
    sc_in< sc_logic > possible_c_x_ap_vld;
    sc_in< sc_logic > possible_c_y_ap_vld;
    sc_in< sc_logic > c_read_ap_vld;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > c_ap_vld;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_idle;
    sc_in< sc_logic > ap_continue;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    get_centroid_sh(sc_module_name name);
    SC_HAS_PROCESS(get_centroid_sh);

    ~get_centroid_sh();

    sc_trace_file* mVcdFile;

    get_centroid_sh_Loop* get_centroid_sh_Loop_U0;
    get_centroid_sh_Bloc* get_centroid_sh_Bloc_U0;
    fifo_w16_d2_A_x* h_offset_c_U;
    fifo_w8_d2_A_x1* v_offset_read_c_U;
    fifo_w8_d2_A_x1* possible_c_x_c_U;
    fifo_w32_d2_A_x1* possible_c_y_c_U;
    fifo_w48_d2_A* c_read_c_U;
    fifo_w32_d2_A_x1* v_sum_0_loc_0_i_loc_s_U;
    fifo_w32_d2_A_x1* h_sum_0_loc_0_i_loc_s_U;
    fifo_w32_d2_A_x1* p_sum_0_loc_0_i_loc_c_U;
    sc_signal< sc_logic > get_centroid_sh_Loop_U0_ap_start;
    sc_signal< sc_logic > get_centroid_sh_Loop_U0_ap_done;
    sc_signal< sc_logic > get_centroid_sh_Loop_U0_ap_continue;
    sc_signal< sc_logic > get_centroid_sh_Loop_U0_ap_idle;
    sc_signal< sc_logic > get_centroid_sh_Loop_U0_ap_ready;
    sc_signal< sc_lv<10> > get_centroid_sh_Loop_U0_micro_roi_data_V_address0;
    sc_signal< sc_logic > get_centroid_sh_Loop_U0_micro_roi_data_V_ce0;
    sc_signal< sc_lv<16> > get_centroid_sh_Loop_U0_h_offset_out_din;
    sc_signal< sc_logic > get_centroid_sh_Loop_U0_h_offset_out_write;
    sc_signal< sc_lv<8> > get_centroid_sh_Loop_U0_v_offset_read_out_din;
    sc_signal< sc_logic > get_centroid_sh_Loop_U0_v_offset_read_out_write;
    sc_signal< sc_lv<8> > get_centroid_sh_Loop_U0_possible_c_x_out_din;
    sc_signal< sc_logic > get_centroid_sh_Loop_U0_possible_c_x_out_write;
    sc_signal< sc_lv<32> > get_centroid_sh_Loop_U0_possible_c_y_out_din;
    sc_signal< sc_logic > get_centroid_sh_Loop_U0_possible_c_y_out_write;
    sc_signal< sc_lv<48> > get_centroid_sh_Loop_U0_c_read_out_din;
    sc_signal< sc_logic > get_centroid_sh_Loop_U0_c_read_out_write;
    sc_signal< sc_lv<32> > get_centroid_sh_Loop_U0_ap_return_0;
    sc_signal< sc_lv<32> > get_centroid_sh_Loop_U0_ap_return_1;
    sc_signal< sc_lv<32> > get_centroid_sh_Loop_U0_ap_return_2;
    sc_signal< sc_logic > ap_channel_done_p_sum_0_loc_0_i_loc_c;
    sc_signal< sc_logic > p_sum_0_loc_0_i_loc_c_full_n;
    sc_signal< sc_logic > ap_sync_reg_channel_write_p_sum_0_loc_0_i_loc_c;
    sc_signal< sc_logic > ap_sync_channel_write_p_sum_0_loc_0_i_loc_c;
    sc_signal< sc_logic > ap_channel_done_h_sum_0_loc_0_i_loc_s;
    sc_signal< sc_logic > h_sum_0_loc_0_i_loc_s_full_n;
    sc_signal< sc_logic > ap_sync_reg_channel_write_h_sum_0_loc_0_i_loc_s;
    sc_signal< sc_logic > ap_sync_channel_write_h_sum_0_loc_0_i_loc_s;
    sc_signal< sc_logic > ap_channel_done_v_sum_0_loc_0_i_loc_s;
    sc_signal< sc_logic > v_sum_0_loc_0_i_loc_s_full_n;
    sc_signal< sc_logic > ap_sync_reg_channel_write_v_sum_0_loc_0_i_loc_s;
    sc_signal< sc_logic > ap_sync_channel_write_v_sum_0_loc_0_i_loc_s;
    sc_signal< sc_logic > get_centroid_sh_Bloc_U0_ap_start;
    sc_signal< sc_logic > get_centroid_sh_Bloc_U0_ap_done;
    sc_signal< sc_logic > get_centroid_sh_Bloc_U0_ap_continue;
    sc_signal< sc_logic > get_centroid_sh_Bloc_U0_ap_idle;
    sc_signal< sc_logic > get_centroid_sh_Bloc_U0_ap_ready;
    sc_signal< sc_logic > get_centroid_sh_Bloc_U0_possible_c_x_read;
    sc_signal< sc_logic > get_centroid_sh_Bloc_U0_c_read_read;
    sc_signal< sc_logic > get_centroid_sh_Bloc_U0_v_offset_read_read;
    sc_signal< sc_logic > get_centroid_sh_Bloc_U0_h_offset_read;
    sc_signal< sc_logic > get_centroid_sh_Bloc_U0_possible_c_y_read;
    sc_signal< sc_lv<48> > get_centroid_sh_Bloc_U0_c;
    sc_signal< sc_logic > get_centroid_sh_Bloc_U0_c_ap_vld;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > h_offset_c_full_n;
    sc_signal< sc_lv<16> > h_offset_c_dout;
    sc_signal< sc_logic > h_offset_c_empty_n;
    sc_signal< sc_logic > v_offset_read_c_full_n;
    sc_signal< sc_lv<8> > v_offset_read_c_dout;
    sc_signal< sc_logic > v_offset_read_c_empty_n;
    sc_signal< sc_logic > possible_c_x_c_full_n;
    sc_signal< sc_lv<8> > possible_c_x_c_dout;
    sc_signal< sc_logic > possible_c_x_c_empty_n;
    sc_signal< sc_logic > possible_c_y_c_full_n;
    sc_signal< sc_lv<32> > possible_c_y_c_dout;
    sc_signal< sc_logic > possible_c_y_c_empty_n;
    sc_signal< sc_logic > c_read_c_full_n;
    sc_signal< sc_lv<48> > c_read_c_dout;
    sc_signal< sc_logic > c_read_c_empty_n;
    sc_signal< sc_lv<32> > v_sum_0_loc_0_i_loc_s_dout;
    sc_signal< sc_logic > v_sum_0_loc_0_i_loc_s_empty_n;
    sc_signal< sc_lv<32> > h_sum_0_loc_0_i_loc_s_dout;
    sc_signal< sc_logic > h_sum_0_loc_0_i_loc_s_empty_n;
    sc_signal< sc_lv<32> > p_sum_0_loc_0_i_loc_c_dout;
    sc_signal< sc_logic > p_sum_0_loc_0_i_loc_c_empty_n;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_logic > get_centroid_sh_Loop_U0_start_full_n;
    sc_signal< sc_logic > get_centroid_sh_Loop_U0_start_write;
    sc_signal< sc_logic > get_centroid_sh_Bloc_U0_start_full_n;
    sc_signal< sc_logic > get_centroid_sh_Bloc_U0_start_write;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<48> ap_const_lv48_0;
    static const sc_logic ap_const_logic_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_channel_done_h_sum_0_loc_0_i_loc_s();
    void thread_ap_channel_done_p_sum_0_loc_0_i_loc_c();
    void thread_ap_channel_done_v_sum_0_loc_0_i_loc_s();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sync_channel_write_h_sum_0_loc_0_i_loc_s();
    void thread_ap_sync_channel_write_p_sum_0_loc_0_i_loc_c();
    void thread_ap_sync_channel_write_v_sum_0_loc_0_i_loc_s();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_c();
    void thread_c_ap_vld();
    void thread_get_centroid_sh_Bloc_U0_ap_continue();
    void thread_get_centroid_sh_Bloc_U0_ap_start();
    void thread_get_centroid_sh_Bloc_U0_start_full_n();
    void thread_get_centroid_sh_Bloc_U0_start_write();
    void thread_get_centroid_sh_Loop_U0_ap_continue();
    void thread_get_centroid_sh_Loop_U0_ap_start();
    void thread_get_centroid_sh_Loop_U0_start_full_n();
    void thread_get_centroid_sh_Loop_U0_start_write();
    void thread_micro_roi_data_V_address0();
    void thread_micro_roi_data_V_address1();
    void thread_micro_roi_data_V_ce0();
    void thread_micro_roi_data_V_ce1();
    void thread_micro_roi_data_V_d0();
    void thread_micro_roi_data_V_d1();
    void thread_micro_roi_data_V_we0();
    void thread_micro_roi_data_V_we1();
};

}

using namespace ap_rtl;

#endif
