// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _xFMinMaxLocKernel_HH_
#define _xFMinMaxLocKernel_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct xFMinMaxLocKernel : public sc_module {
    // Port declarations 10
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > p_src_data_V_dout;
    sc_in< sc_logic > p_src_data_V_empty_n;
    sc_out< sc_logic > p_src_data_V_read;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    xFMinMaxLocKernel(sc_module_name name);
    SC_HAS_PROCESS(xFMinMaxLocKernel);

    ~xFMinMaxLocKernel();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > p_src_data_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln111_reg_205;
    sc_signal< sc_lv<9> > t_V_5_reg_77;
    sc_signal< sc_lv<1> > icmp_ln887_fu_98_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<8> > i_V_fu_104_p2;
    sc_signal< sc_lv<8> > i_V_reg_200;
    sc_signal< sc_lv<1> > icmp_ln111_fu_127_p2;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<9> > add_ln1597_fu_133_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_lv<8> > t_V_reg_66;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > p_maxval_0_fu_52;
    sc_signal< sc_lv<32> > zext_ln895_fu_168_p1;
    sc_signal< sc_lv<32> > max_val_tmp_0_0_fu_56;
    sc_signal< sc_lv<1> > icmp_ln196_fu_113_p2;
    sc_signal< sc_lv<32> > min_val_tmp_0_fu_146_p1;
    sc_signal< sc_lv<1> > icmp_ln895_fu_154_p2;
    sc_signal< sc_lv<31> > zext_ln131_fu_150_p1;
    sc_signal< sc_lv<31> > trunc_ln1597_fu_142_p1;
    sc_signal< sc_lv<31> > max_val_tmp_0_1_fu_160_p3;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_state5;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<32> ap_const_lv32_FFFFFF80;
    static const sc_lv<8> ap_const_lv8_B4;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<9> ap_const_lv9_140;
    static const sc_lv<9> ap_const_lv9_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln1597_fu_133_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_i_V_fu_104_p2();
    void thread_icmp_ln111_fu_127_p2();
    void thread_icmp_ln196_fu_113_p2();
    void thread_icmp_ln887_fu_98_p2();
    void thread_icmp_ln895_fu_154_p2();
    void thread_max_val_tmp_0_1_fu_160_p3();
    void thread_min_val_tmp_0_fu_146_p1();
    void thread_p_src_data_V_blk_n();
    void thread_p_src_data_V_read();
    void thread_trunc_ln1597_fu_142_p1();
    void thread_zext_ln131_fu_150_p1();
    void thread_zext_ln895_fu_168_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
