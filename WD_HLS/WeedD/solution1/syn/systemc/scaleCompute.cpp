// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "scaleCompute.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic scaleCompute::ap_const_logic_1 = sc_dt::Log_1;
const bool scaleCompute::ap_const_boolean_1 = true;
const sc_lv<22> scaleCompute::ap_const_lv22_0 = "0000000000000000000000";
const sc_lv<42> scaleCompute::ap_const_lv42_200000 = "1000000000000000000000";
const sc_lv<71> scaleCompute::ap_const_lv71_7FFFFC000000000000 = "11111111111111111111100000000000000000000000000000000000000000000000000";
const sc_lv<32> scaleCompute::ap_const_lv32_1D = "11101";
const sc_lv<32> scaleCompute::ap_const_lv32_46 = "1000110";
const sc_logic scaleCompute::ap_const_logic_0 = sc_dt::Log_0;

scaleCompute::scaleCompute(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_ap_return);
    sensitive << ( ret_V_8_fu_64_p2 );

    SC_METHOD(thread_mul_ln1193_fu_58_p0);
    sensitive << ( mul_ln1193_fu_58_p00 );

    SC_METHOD(thread_mul_ln1193_fu_58_p00);
    sensitive << ( inscale_V );

    SC_METHOD(thread_mul_ln1193_fu_58_p1);
    sensitive << ( ret_V_fu_44_p2 );

    SC_METHOD(thread_mul_ln1193_fu_58_p2);
    sensitive << ( mul_ln1193_fu_58_p0 );
    sensitive << ( mul_ln1193_fu_58_p1 );

    SC_METHOD(thread_p_Val2_s_fu_36_p3);
    sensitive << ( trunc_ln728_fu_32_p1 );

    SC_METHOD(thread_ret_V_8_fu_64_p2);
    sensitive << ( mul_ln1193_fu_58_p2 );

    SC_METHOD(thread_ret_V_fu_44_p2);
    sensitive << ( p_Val2_s_fu_36_p3 );

    SC_METHOD(thread_trunc_ln728_fu_32_p1);
    sensitive << ( currindex );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "scaleCompute_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, currindex, "(port)currindex");
    sc_trace(mVcdFile, inscale_V, "(port)inscale_V");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, trunc_ln728_fu_32_p1, "trunc_ln728_fu_32_p1");
    sc_trace(mVcdFile, p_Val2_s_fu_36_p3, "p_Val2_s_fu_36_p3");
    sc_trace(mVcdFile, ret_V_fu_44_p2, "ret_V_fu_44_p2");
    sc_trace(mVcdFile, mul_ln1193_fu_58_p0, "mul_ln1193_fu_58_p0");
    sc_trace(mVcdFile, mul_ln1193_fu_58_p1, "mul_ln1193_fu_58_p1");
    sc_trace(mVcdFile, mul_ln1193_fu_58_p2, "mul_ln1193_fu_58_p2");
    sc_trace(mVcdFile, ret_V_8_fu_64_p2, "ret_V_8_fu_64_p2");
    sc_trace(mVcdFile, mul_ln1193_fu_58_p00, "mul_ln1193_fu_58_p00");
#endif

    }
}

scaleCompute::~scaleCompute() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void scaleCompute::thread_ap_ready() {
    ap_ready = ap_const_logic_1;
}

void scaleCompute::thread_ap_return() {
    ap_return = ret_V_8_fu_64_p2.read().range(70, 29);
}

void scaleCompute::thread_mul_ln1193_fu_58_p0() {
    mul_ln1193_fu_58_p0 =  (sc_lv<32>) (mul_ln1193_fu_58_p00.read());
}

void scaleCompute::thread_mul_ln1193_fu_58_p00() {
    mul_ln1193_fu_58_p00 = esl_zext<71,32>(inscale_V.read());
}

void scaleCompute::thread_mul_ln1193_fu_58_p1() {
    mul_ln1193_fu_58_p1 = ret_V_fu_44_p2.read();
}

void scaleCompute::thread_mul_ln1193_fu_58_p2() {
    mul_ln1193_fu_58_p2 = (!mul_ln1193_fu_58_p0.read().is_01() || !mul_ln1193_fu_58_p1.read().is_01())? sc_lv<71>(): sc_biguint<32>(mul_ln1193_fu_58_p0.read()) * sc_bigint<42>(mul_ln1193_fu_58_p1.read());
}

void scaleCompute::thread_p_Val2_s_fu_36_p3() {
    p_Val2_s_fu_36_p3 = esl_concat<20,22>(trunc_ln728_fu_32_p1.read(), ap_const_lv22_0);
}

void scaleCompute::thread_ret_V_8_fu_64_p2() {
    ret_V_8_fu_64_p2 = (!ap_const_lv71_7FFFFC000000000000.is_01() || !mul_ln1193_fu_58_p2.read().is_01())? sc_lv<71>(): (sc_bigint<71>(ap_const_lv71_7FFFFC000000000000) + sc_biguint<71>(mul_ln1193_fu_58_p2.read()));
}

void scaleCompute::thread_ret_V_fu_44_p2() {
    ret_V_fu_44_p2 = (p_Val2_s_fu_36_p3.read() | ap_const_lv42_200000);
}

void scaleCompute::thread_trunc_ln728_fu_32_p1() {
    trunc_ln728_fu_32_p1 = currindex.read().range(20-1, 0);
}

}

