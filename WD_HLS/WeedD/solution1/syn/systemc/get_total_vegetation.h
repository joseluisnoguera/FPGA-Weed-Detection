// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _get_total_vegetation_HH_
#define _get_total_vegetation_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct get_total_vegetation : public sc_module {
    // Port declarations 11
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<16> > img_in_data_V_address0;
    sc_out< sc_logic > img_in_data_V_ce0;
    sc_in< sc_lv<8> > img_in_data_V_q0;
    sc_out< sc_lv<24> > ap_return;


    // Module declarations
    get_total_vegetation(sc_module_name name);
    SC_HAS_PROCESS(get_total_vegetation);

    ~get_total_vegetation();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<24> > p_Val2_s_reg_51;
    sc_signal< sc_lv<15> > i_0_i_i_reg_63;
    sc_signal< sc_lv<1> > icmp_ln122_fu_74_p2;
    sc_signal< sc_lv<1> > icmp_ln122_reg_111;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<15> > i_fu_80_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<24> > select_ln123_fu_103_p3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<64> > zext_ln123_fu_86_p1;
    sc_signal< sc_lv<1> > icmp_ln895_fu_91_p2;
    sc_signal< sc_lv<24> > total1_V_fu_97_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<24> ap_const_lv24_0;
    static const sc_lv<15> ap_const_lv15_0;
    static const sc_lv<15> ap_const_lv15_7080;
    static const sc_lv<15> ap_const_lv15_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<24> ap_const_lv24_100;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_i_fu_80_p2();
    void thread_icmp_ln122_fu_74_p2();
    void thread_icmp_ln895_fu_91_p2();
    void thread_img_in_data_V_address0();
    void thread_img_in_data_V_ce0();
    void thread_select_ln123_fu_103_p3();
    void thread_total1_V_fu_97_p2();
    void thread_zext_ln123_fu_86_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
