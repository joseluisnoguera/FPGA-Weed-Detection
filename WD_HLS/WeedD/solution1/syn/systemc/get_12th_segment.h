// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _get_12th_segment_HH_
#define _get_12th_segment_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "get_12th_segment_Loo.h"

namespace ap_rtl {

struct get_12th_segment : public sc_module {
    // Port declarations 13
    sc_in< sc_lv<8> > eroded_data_V_dout;
    sc_in< sc_logic > eroded_data_V_empty_n;
    sc_out< sc_logic > eroded_data_V_read;
    sc_out< sc_lv<8> > bottom_data_V_din;
    sc_in< sc_logic > bottom_data_V_full_n;
    sc_out< sc_logic > bottom_data_V_write;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_idle;
    sc_in< sc_logic > ap_continue;


    // Module declarations
    get_12th_segment(sc_module_name name);
    SC_HAS_PROCESS(get_12th_segment);

    ~get_12th_segment();

    sc_trace_file* mVcdFile;

    get_12th_segment_Loo* get_12th_segment_Loo_U0;
    sc_signal< sc_logic > get_12th_segment_Loo_U0_ap_start;
    sc_signal< sc_logic > get_12th_segment_Loo_U0_ap_done;
    sc_signal< sc_logic > get_12th_segment_Loo_U0_ap_continue;
    sc_signal< sc_logic > get_12th_segment_Loo_U0_ap_idle;
    sc_signal< sc_logic > get_12th_segment_Loo_U0_ap_ready;
    sc_signal< sc_logic > get_12th_segment_Loo_U0_eroded_data_V_read;
    sc_signal< sc_lv<8> > get_12th_segment_Loo_U0_bottom_data_V_din;
    sc_signal< sc_logic > get_12th_segment_Loo_U0_bottom_data_V_write;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_logic > get_12th_segment_Loo_U0_start_full_n;
    sc_signal< sc_logic > get_12th_segment_Loo_U0_start_write;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_logic ap_const_logic_1;
    // Thread declarations
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_bottom_data_V_din();
    void thread_bottom_data_V_write();
    void thread_eroded_data_V_read();
    void thread_get_12th_segment_Loo_U0_ap_continue();
    void thread_get_12th_segment_Loo_U0_ap_start();
    void thread_get_12th_segment_Loo_U0_start_full_n();
    void thread_get_12th_segment_Loo_U0_start_write();
};

}

using namespace ap_rtl;

#endif
