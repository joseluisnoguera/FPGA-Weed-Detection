// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "get_centroid_sh_Loop.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic get_centroid_sh_Loop::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic get_centroid_sh_Loop::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> get_centroid_sh_Loop::ap_ST_fsm_state1 = "1";
const sc_lv<4> get_centroid_sh_Loop::ap_ST_fsm_state2 = "10";
const sc_lv<4> get_centroid_sh_Loop::ap_ST_fsm_state3 = "100";
const sc_lv<4> get_centroid_sh_Loop::ap_ST_fsm_state4 = "1000";
const sc_lv<32> get_centroid_sh_Loop::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> get_centroid_sh_Loop::ap_const_lv32_1 = "1";
const sc_lv<1> get_centroid_sh_Loop::ap_const_lv1_0 = "0";
const sc_lv<32> get_centroid_sh_Loop::ap_const_lv32_2 = "10";
const sc_lv<6> get_centroid_sh_Loop::ap_const_lv6_0 = "000000";
const sc_lv<1> get_centroid_sh_Loop::ap_const_lv1_1 = "1";
const sc_lv<32> get_centroid_sh_Loop::ap_const_lv32_3 = "11";
const sc_lv<5> get_centroid_sh_Loop::ap_const_lv5_0 = "00000";
const sc_lv<6> get_centroid_sh_Loop::ap_const_lv6_20 = "100000";
const sc_lv<6> get_centroid_sh_Loop::ap_const_lv6_1 = "1";
const sc_lv<5> get_centroid_sh_Loop::ap_const_lv5_17 = "10111";
const sc_lv<5> get_centroid_sh_Loop::ap_const_lv5_1 = "1";
const sc_lv<8> get_centroid_sh_Loop::ap_const_lv8_0 = "00000000";
const bool get_centroid_sh_Loop::ap_const_boolean_1 = true;

get_centroid_sh_Loop::get_centroid_sh_Loop(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln127_fu_329_p2);
    sensitive << ( zext_ln126_1_reg_475 );
    sensitive << ( shl_ln_fu_321_p3 );

    SC_METHOD(thread_and_ln126_fu_316_p2);
    sensitive << ( icmp_ln126_reg_480 );
    sensitive << ( icmp_ln126_1_fu_311_p2 );

    SC_METHOD(thread_and_ln895_fu_373_p2);
    sensitive << ( and_ln126_reg_493 );
    sensitive << ( icmp_ln895_fu_343_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( h_offset_out_full_n );
    sensitive << ( v_offset_read_out_full_n );
    sensitive << ( possible_c_x_out_full_n );
    sensitive << ( possible_c_y_out_full_n );
    sensitive << ( c_read_out_full_n );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln124_fu_248_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln124_fu_248_p2 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln124_fu_248_p2 );
    sensitive << ( v_sum_3_fu_102 );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln124_fu_248_p2 );
    sensitive << ( h_sum_3_fu_98 );

    SC_METHOD(thread_ap_return_2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln124_fu_248_p2 );
    sensitive << ( p_sum_3_fu_94 );

    SC_METHOD(thread_c_read_out_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( c_read_out_full_n );

    SC_METHOD(thread_c_read_out_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( c_read );
    sensitive << ( h_offset_out_full_n );
    sensitive << ( v_offset_read_out_full_n );
    sensitive << ( possible_c_x_out_full_n );
    sensitive << ( possible_c_y_out_full_n );
    sensitive << ( c_read_out_full_n );

    SC_METHOD(thread_c_read_out_write);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( h_offset_out_full_n );
    sensitive << ( v_offset_read_out_full_n );
    sensitive << ( possible_c_x_out_full_n );
    sensitive << ( possible_c_y_out_full_n );
    sensitive << ( c_read_out_full_n );

    SC_METHOD(thread_h_fu_254_p2);
    sensitive << ( h_0_i_i_i_i_reg_201 );

    SC_METHOD(thread_h_offset_out_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( h_offset_out_full_n );

    SC_METHOD(thread_h_offset_out_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( h_offset );
    sensitive << ( h_offset_out_full_n );
    sensitive << ( v_offset_read_out_full_n );
    sensitive << ( possible_c_x_out_full_n );
    sensitive << ( possible_c_y_out_full_n );
    sensitive << ( c_read_out_full_n );

    SC_METHOD(thread_h_offset_out_write);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( h_offset_out_full_n );
    sensitive << ( v_offset_read_out_full_n );
    sensitive << ( possible_c_x_out_full_n );
    sensitive << ( possible_c_y_out_full_n );
    sensitive << ( c_read_out_full_n );

    SC_METHOD(thread_h_sum_4_fu_386_p3);
    sensitive << ( and_ln126_reg_493 );
    sensitive << ( h_sum_3_fu_98 );
    sensitive << ( h_sum_fu_355_p2 );

    SC_METHOD(thread_h_sum_5_fu_393_p3);
    sensitive << ( h_sum_3_fu_98 );
    sensitive << ( and_ln895_fu_373_p2 );
    sensitive << ( h_sum_4_fu_386_p3 );

    SC_METHOD(thread_h_sum_fu_355_p2);
    sensitive << ( zext_ln126_reg_470 );
    sensitive << ( h_sum_3_fu_98 );

    SC_METHOD(thread_icmp_ln124_fu_248_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( h_0_i_i_i_i_reg_201 );

    SC_METHOD(thread_icmp_ln125_fu_299_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( v_0_i_i_i_i_reg_212 );

    SC_METHOD(thread_icmp_ln126_1_fu_311_p2);
    sensitive << ( v_limit );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln125_fu_299_p2 );
    sensitive << ( zext_ln125_fu_295_p1 );

    SC_METHOD(thread_icmp_ln126_fu_272_p2);
    sensitive << ( h_limit );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln124_fu_248_p2 );
    sensitive << ( zext_ln126_2_fu_268_p1 );

    SC_METHOD(thread_icmp_ln895_fu_343_p2);
    sensitive << ( micro_roi_data_V_q0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_micro_roi_data_V_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln127_1_fu_334_p1 );

    SC_METHOD(thread_micro_roi_data_V_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_p_sum_4_fu_401_p3);
    sensitive << ( and_ln126_reg_493 );
    sensitive << ( p_sum_3_fu_94 );
    sensitive << ( p_sum_fu_360_p2 );

    SC_METHOD(thread_p_sum_5_fu_408_p3);
    sensitive << ( p_sum_3_fu_94 );
    sensitive << ( and_ln895_fu_373_p2 );
    sensitive << ( p_sum_4_fu_401_p3 );

    SC_METHOD(thread_p_sum_fu_360_p2);
    sensitive << ( p_sum_3_fu_94 );

    SC_METHOD(thread_possible_c_x_out_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( possible_c_x_out_full_n );

    SC_METHOD(thread_possible_c_x_out_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( possible_c_x );
    sensitive << ( h_offset_out_full_n );
    sensitive << ( v_offset_read_out_full_n );
    sensitive << ( possible_c_x_out_full_n );
    sensitive << ( possible_c_y_out_full_n );
    sensitive << ( c_read_out_full_n );

    SC_METHOD(thread_possible_c_x_out_write);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( h_offset_out_full_n );
    sensitive << ( v_offset_read_out_full_n );
    sensitive << ( possible_c_x_out_full_n );
    sensitive << ( possible_c_y_out_full_n );
    sensitive << ( c_read_out_full_n );

    SC_METHOD(thread_possible_c_y_out_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( possible_c_y_out_full_n );

    SC_METHOD(thread_possible_c_y_out_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( possible_c_y );
    sensitive << ( h_offset_out_full_n );
    sensitive << ( v_offset_read_out_full_n );
    sensitive << ( possible_c_x_out_full_n );
    sensitive << ( possible_c_y_out_full_n );
    sensitive << ( c_read_out_full_n );

    SC_METHOD(thread_possible_c_y_out_write);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( h_offset_out_full_n );
    sensitive << ( v_offset_read_out_full_n );
    sensitive << ( possible_c_x_out_full_n );
    sensitive << ( possible_c_y_out_full_n );
    sensitive << ( c_read_out_full_n );

    SC_METHOD(thread_shl_ln_fu_321_p3);
    sensitive << ( v_0_i_i_i_i_reg_212 );

    SC_METHOD(thread_v_fu_305_p2);
    sensitive << ( v_0_i_i_i_i_reg_212 );

    SC_METHOD(thread_v_offset_read_out_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( v_offset_read_out_full_n );

    SC_METHOD(thread_v_offset_read_out_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( v_offset_read );
    sensitive << ( h_offset_out_full_n );
    sensitive << ( v_offset_read_out_full_n );
    sensitive << ( possible_c_x_out_full_n );
    sensitive << ( possible_c_y_out_full_n );
    sensitive << ( c_read_out_full_n );

    SC_METHOD(thread_v_offset_read_out_write);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( h_offset_out_full_n );
    sensitive << ( v_offset_read_out_full_n );
    sensitive << ( possible_c_x_out_full_n );
    sensitive << ( possible_c_y_out_full_n );
    sensitive << ( c_read_out_full_n );

    SC_METHOD(thread_v_sum_4_fu_366_p3);
    sensitive << ( and_ln126_reg_493 );
    sensitive << ( v_sum_3_fu_102 );
    sensitive << ( v_sum_fu_349_p2 );

    SC_METHOD(thread_v_sum_5_fu_378_p3);
    sensitive << ( v_sum_3_fu_102 );
    sensitive << ( and_ln895_fu_373_p2 );
    sensitive << ( v_sum_4_fu_366_p3 );

    SC_METHOD(thread_v_sum_fu_349_p2);
    sensitive << ( v_sum_3_fu_102 );
    sensitive << ( zext_ln127_fu_339_p1 );

    SC_METHOD(thread_zext_ln125_fu_295_p1);
    sensitive << ( v_0_i_i_i_i_reg_212 );

    SC_METHOD(thread_zext_ln126_1_fu_264_p1);
    sensitive << ( h_0_i_i_i_i_reg_201 );

    SC_METHOD(thread_zext_ln126_2_fu_268_p1);
    sensitive << ( h_0_i_i_i_i_reg_201 );

    SC_METHOD(thread_zext_ln126_fu_260_p1);
    sensitive << ( h_0_i_i_i_i_reg_201 );

    SC_METHOD(thread_zext_ln127_1_fu_334_p1);
    sensitive << ( add_ln127_fu_329_p2 );

    SC_METHOD(thread_zext_ln127_fu_339_p1);
    sensitive << ( v_0_i_i_i_i_reg_212 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( h_offset_out_full_n );
    sensitive << ( v_offset_read_out_full_n );
    sensitive << ( possible_c_x_out_full_n );
    sensitive << ( possible_c_y_out_full_n );
    sensitive << ( c_read_out_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln124_fu_248_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln125_fu_299_p2 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "get_centroid_sh_Loop_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, micro_roi_data_V_address0, "(port)micro_roi_data_V_address0");
    sc_trace(mVcdFile, micro_roi_data_V_ce0, "(port)micro_roi_data_V_ce0");
    sc_trace(mVcdFile, micro_roi_data_V_q0, "(port)micro_roi_data_V_q0");
    sc_trace(mVcdFile, v_limit, "(port)v_limit");
    sc_trace(mVcdFile, h_limit, "(port)h_limit");
    sc_trace(mVcdFile, h_offset, "(port)h_offset");
    sc_trace(mVcdFile, v_offset_read, "(port)v_offset_read");
    sc_trace(mVcdFile, possible_c_x, "(port)possible_c_x");
    sc_trace(mVcdFile, possible_c_y, "(port)possible_c_y");
    sc_trace(mVcdFile, c_read, "(port)c_read");
    sc_trace(mVcdFile, h_offset_out_din, "(port)h_offset_out_din");
    sc_trace(mVcdFile, h_offset_out_full_n, "(port)h_offset_out_full_n");
    sc_trace(mVcdFile, h_offset_out_write, "(port)h_offset_out_write");
    sc_trace(mVcdFile, v_offset_read_out_din, "(port)v_offset_read_out_din");
    sc_trace(mVcdFile, v_offset_read_out_full_n, "(port)v_offset_read_out_full_n");
    sc_trace(mVcdFile, v_offset_read_out_write, "(port)v_offset_read_out_write");
    sc_trace(mVcdFile, possible_c_x_out_din, "(port)possible_c_x_out_din");
    sc_trace(mVcdFile, possible_c_x_out_full_n, "(port)possible_c_x_out_full_n");
    sc_trace(mVcdFile, possible_c_x_out_write, "(port)possible_c_x_out_write");
    sc_trace(mVcdFile, possible_c_y_out_din, "(port)possible_c_y_out_din");
    sc_trace(mVcdFile, possible_c_y_out_full_n, "(port)possible_c_y_out_full_n");
    sc_trace(mVcdFile, possible_c_y_out_write, "(port)possible_c_y_out_write");
    sc_trace(mVcdFile, c_read_out_din, "(port)c_read_out_din");
    sc_trace(mVcdFile, c_read_out_full_n, "(port)c_read_out_full_n");
    sc_trace(mVcdFile, c_read_out_write, "(port)c_read_out_write");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_return_2, "(port)ap_return_2");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, h_offset_out_blk_n, "h_offset_out_blk_n");
    sc_trace(mVcdFile, v_offset_read_out_blk_n, "v_offset_read_out_blk_n");
    sc_trace(mVcdFile, possible_c_x_out_blk_n, "possible_c_x_out_blk_n");
    sc_trace(mVcdFile, possible_c_y_out_blk_n, "possible_c_y_out_blk_n");
    sc_trace(mVcdFile, c_read_out_blk_n, "c_read_out_blk_n");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, h_fu_254_p2, "h_fu_254_p2");
    sc_trace(mVcdFile, h_reg_465, "h_reg_465");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln126_fu_260_p1, "zext_ln126_fu_260_p1");
    sc_trace(mVcdFile, zext_ln126_reg_470, "zext_ln126_reg_470");
    sc_trace(mVcdFile, icmp_ln124_fu_248_p2, "icmp_ln124_fu_248_p2");
    sc_trace(mVcdFile, zext_ln126_1_fu_264_p1, "zext_ln126_1_fu_264_p1");
    sc_trace(mVcdFile, zext_ln126_1_reg_475, "zext_ln126_1_reg_475");
    sc_trace(mVcdFile, icmp_ln126_fu_272_p2, "icmp_ln126_fu_272_p2");
    sc_trace(mVcdFile, icmp_ln126_reg_480, "icmp_ln126_reg_480");
    sc_trace(mVcdFile, v_fu_305_p2, "v_fu_305_p2");
    sc_trace(mVcdFile, v_reg_488, "v_reg_488");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, and_ln126_fu_316_p2, "and_ln126_fu_316_p2");
    sc_trace(mVcdFile, and_ln126_reg_493, "and_ln126_reg_493");
    sc_trace(mVcdFile, icmp_ln125_fu_299_p2, "icmp_ln125_fu_299_p2");
    sc_trace(mVcdFile, h_0_i_i_i_i_reg_201, "h_0_i_i_i_i_reg_201");
    sc_trace(mVcdFile, v_0_i_i_i_i_reg_212, "v_0_i_i_i_i_reg_212");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, zext_ln127_1_fu_334_p1, "zext_ln127_1_fu_334_p1");
    sc_trace(mVcdFile, p_sum_3_fu_94, "p_sum_3_fu_94");
    sc_trace(mVcdFile, p_sum_5_fu_408_p3, "p_sum_5_fu_408_p3");
    sc_trace(mVcdFile, h_sum_3_fu_98, "h_sum_3_fu_98");
    sc_trace(mVcdFile, h_sum_5_fu_393_p3, "h_sum_5_fu_393_p3");
    sc_trace(mVcdFile, v_sum_3_fu_102, "v_sum_3_fu_102");
    sc_trace(mVcdFile, v_sum_5_fu_378_p3, "v_sum_5_fu_378_p3");
    sc_trace(mVcdFile, zext_ln126_2_fu_268_p1, "zext_ln126_2_fu_268_p1");
    sc_trace(mVcdFile, zext_ln125_fu_295_p1, "zext_ln125_fu_295_p1");
    sc_trace(mVcdFile, icmp_ln126_1_fu_311_p2, "icmp_ln126_1_fu_311_p2");
    sc_trace(mVcdFile, shl_ln_fu_321_p3, "shl_ln_fu_321_p3");
    sc_trace(mVcdFile, add_ln127_fu_329_p2, "add_ln127_fu_329_p2");
    sc_trace(mVcdFile, zext_ln127_fu_339_p1, "zext_ln127_fu_339_p1");
    sc_trace(mVcdFile, v_sum_fu_349_p2, "v_sum_fu_349_p2");
    sc_trace(mVcdFile, icmp_ln895_fu_343_p2, "icmp_ln895_fu_343_p2");
    sc_trace(mVcdFile, and_ln895_fu_373_p2, "and_ln895_fu_373_p2");
    sc_trace(mVcdFile, v_sum_4_fu_366_p3, "v_sum_4_fu_366_p3");
    sc_trace(mVcdFile, h_sum_fu_355_p2, "h_sum_fu_355_p2");
    sc_trace(mVcdFile, h_sum_4_fu_386_p3, "h_sum_4_fu_386_p3");
    sc_trace(mVcdFile, p_sum_fu_360_p2, "p_sum_fu_360_p2");
    sc_trace(mVcdFile, p_sum_4_fu_401_p3, "p_sum_4_fu_401_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

get_centroid_sh_Loop::~get_centroid_sh_Loop() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void get_centroid_sh_Loop::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(icmp_ln124_fu_248_p2.read(), ap_const_lv1_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln125_fu_299_p2.read(), ap_const_lv1_1))) {
        h_0_i_i_i_i_reg_201 = h_reg_465.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, h_offset_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, v_offset_read_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_x_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_y_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, c_read_out_full_n.read())))) {
        h_0_i_i_i_i_reg_201 = ap_const_lv6_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        h_sum_3_fu_98 = h_sum_5_fu_393_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, h_offset_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, v_offset_read_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_x_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_y_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, c_read_out_full_n.read())))) {
        h_sum_3_fu_98 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        p_sum_3_fu_94 = p_sum_5_fu_408_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, h_offset_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, v_offset_read_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_x_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_y_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, c_read_out_full_n.read())))) {
        p_sum_3_fu_94 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln124_fu_248_p2.read(), ap_const_lv1_0))) {
        v_0_i_i_i_i_reg_212 = ap_const_lv5_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        v_0_i_i_i_i_reg_212 = v_reg_488.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        v_sum_3_fu_102 = v_sum_5_fu_378_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, h_offset_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, v_offset_read_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_x_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_y_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, c_read_out_full_n.read())))) {
        v_sum_3_fu_102 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln125_fu_299_p2.read()))) {
        and_ln126_reg_493 = and_ln126_fu_316_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        h_reg_465 = h_fu_254_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln124_fu_248_p2.read(), ap_const_lv1_0))) {
        icmp_ln126_reg_480 = icmp_ln126_fu_272_p2.read();
        zext_ln126_1_reg_475 = zext_ln126_1_fu_264_p1.read();
        zext_ln126_reg_470 = zext_ln126_fu_260_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        v_reg_488 = v_fu_305_p2.read();
    }
}

void get_centroid_sh_Loop::thread_add_ln127_fu_329_p2() {
    add_ln127_fu_329_p2 = (!zext_ln126_1_reg_475.read().is_01() || !shl_ln_fu_321_p3.read().is_01())? sc_lv<10>(): (sc_biguint<10>(zext_ln126_1_reg_475.read()) + sc_biguint<10>(shl_ln_fu_321_p3.read()));
}

void get_centroid_sh_Loop::thread_and_ln126_fu_316_p2() {
    and_ln126_fu_316_p2 = (icmp_ln126_reg_480.read() & icmp_ln126_1_fu_311_p2.read());
}

void get_centroid_sh_Loop::thread_and_ln895_fu_373_p2() {
    and_ln895_fu_373_p2 = (and_ln126_reg_493.read() & icmp_ln895_fu_343_p2.read());
}

void get_centroid_sh_Loop::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void get_centroid_sh_Loop::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void get_centroid_sh_Loop::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void get_centroid_sh_Loop::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void get_centroid_sh_Loop::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, h_offset_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, v_offset_read_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_x_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_y_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, c_read_out_full_n.read()));
}

void get_centroid_sh_Loop::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln124_fu_248_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void get_centroid_sh_Loop::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void get_centroid_sh_Loop::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln124_fu_248_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void get_centroid_sh_Loop::thread_ap_return_0() {
    ap_return_0 = v_sum_3_fu_102.read();
}

void get_centroid_sh_Loop::thread_ap_return_1() {
    ap_return_1 = h_sum_3_fu_98.read();
}

void get_centroid_sh_Loop::thread_ap_return_2() {
    ap_return_2 = p_sum_3_fu_94.read();
}

void get_centroid_sh_Loop::thread_c_read_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        c_read_out_blk_n = c_read_out_full_n.read();
    } else {
        c_read_out_blk_n = ap_const_logic_1;
    }
}

void get_centroid_sh_Loop::thread_c_read_out_din() {
    c_read_out_din = c_read.read();
}

void get_centroid_sh_Loop::thread_c_read_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, h_offset_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, v_offset_read_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_x_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_y_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, c_read_out_full_n.read())))) {
        c_read_out_write = ap_const_logic_1;
    } else {
        c_read_out_write = ap_const_logic_0;
    }
}

void get_centroid_sh_Loop::thread_h_fu_254_p2() {
    h_fu_254_p2 = (!h_0_i_i_i_i_reg_201.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(h_0_i_i_i_i_reg_201.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void get_centroid_sh_Loop::thread_h_offset_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        h_offset_out_blk_n = h_offset_out_full_n.read();
    } else {
        h_offset_out_blk_n = ap_const_logic_1;
    }
}

void get_centroid_sh_Loop::thread_h_offset_out_din() {
    h_offset_out_din = h_offset.read();
}

void get_centroid_sh_Loop::thread_h_offset_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, h_offset_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, v_offset_read_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_x_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_y_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, c_read_out_full_n.read())))) {
        h_offset_out_write = ap_const_logic_1;
    } else {
        h_offset_out_write = ap_const_logic_0;
    }
}

void get_centroid_sh_Loop::thread_h_sum_4_fu_386_p3() {
    h_sum_4_fu_386_p3 = (!and_ln126_reg_493.read()[0].is_01())? sc_lv<32>(): ((and_ln126_reg_493.read()[0].to_bool())? h_sum_fu_355_p2.read(): h_sum_3_fu_98.read());
}

void get_centroid_sh_Loop::thread_h_sum_5_fu_393_p3() {
    h_sum_5_fu_393_p3 = (!and_ln895_fu_373_p2.read()[0].is_01())? sc_lv<32>(): ((and_ln895_fu_373_p2.read()[0].to_bool())? h_sum_3_fu_98.read(): h_sum_4_fu_386_p3.read());
}

void get_centroid_sh_Loop::thread_h_sum_fu_355_p2() {
    h_sum_fu_355_p2 = (!zext_ln126_reg_470.read().is_01() || !h_sum_3_fu_98.read().is_01())? sc_lv<32>(): (sc_biguint<32>(zext_ln126_reg_470.read()) + sc_biguint<32>(h_sum_3_fu_98.read()));
}

void get_centroid_sh_Loop::thread_icmp_ln124_fu_248_p2() {
    icmp_ln124_fu_248_p2 = (!h_0_i_i_i_i_reg_201.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(h_0_i_i_i_i_reg_201.read() == ap_const_lv6_20);
}

void get_centroid_sh_Loop::thread_icmp_ln125_fu_299_p2() {
    icmp_ln125_fu_299_p2 = (!v_0_i_i_i_i_reg_212.read().is_01() || !ap_const_lv5_17.is_01())? sc_lv<1>(): sc_lv<1>(v_0_i_i_i_i_reg_212.read() == ap_const_lv5_17);
}

void get_centroid_sh_Loop::thread_icmp_ln126_1_fu_311_p2() {
    icmp_ln126_1_fu_311_p2 = (!zext_ln125_fu_295_p1.read().is_01() || !v_limit.read().is_01())? sc_lv<1>(): (sc_biguint<8>(zext_ln125_fu_295_p1.read()) < sc_biguint<8>(v_limit.read()));
}

void get_centroid_sh_Loop::thread_icmp_ln126_fu_272_p2() {
    icmp_ln126_fu_272_p2 = (!zext_ln126_2_fu_268_p1.read().is_01() || !h_limit.read().is_01())? sc_lv<1>(): (sc_biguint<16>(zext_ln126_2_fu_268_p1.read()) < sc_biguint<16>(h_limit.read()));
}

void get_centroid_sh_Loop::thread_icmp_ln895_fu_343_p2() {
    icmp_ln895_fu_343_p2 = (!micro_roi_data_V_q0.read().is_01() || !ap_const_lv8_0.is_01())? sc_lv<1>(): sc_lv<1>(micro_roi_data_V_q0.read() == ap_const_lv8_0);
}

void get_centroid_sh_Loop::thread_micro_roi_data_V_address0() {
    micro_roi_data_V_address0 =  (sc_lv<10>) (zext_ln127_1_fu_334_p1.read());
}

void get_centroid_sh_Loop::thread_micro_roi_data_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        micro_roi_data_V_ce0 = ap_const_logic_1;
    } else {
        micro_roi_data_V_ce0 = ap_const_logic_0;
    }
}

void get_centroid_sh_Loop::thread_p_sum_4_fu_401_p3() {
    p_sum_4_fu_401_p3 = (!and_ln126_reg_493.read()[0].is_01())? sc_lv<32>(): ((and_ln126_reg_493.read()[0].to_bool())? p_sum_fu_360_p2.read(): p_sum_3_fu_94.read());
}

void get_centroid_sh_Loop::thread_p_sum_5_fu_408_p3() {
    p_sum_5_fu_408_p3 = (!and_ln895_fu_373_p2.read()[0].is_01())? sc_lv<32>(): ((and_ln895_fu_373_p2.read()[0].to_bool())? p_sum_3_fu_94.read(): p_sum_4_fu_401_p3.read());
}

void get_centroid_sh_Loop::thread_p_sum_fu_360_p2() {
    p_sum_fu_360_p2 = (!p_sum_3_fu_94.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(p_sum_3_fu_94.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void get_centroid_sh_Loop::thread_possible_c_x_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        possible_c_x_out_blk_n = possible_c_x_out_full_n.read();
    } else {
        possible_c_x_out_blk_n = ap_const_logic_1;
    }
}

void get_centroid_sh_Loop::thread_possible_c_x_out_din() {
    possible_c_x_out_din = possible_c_x.read();
}

void get_centroid_sh_Loop::thread_possible_c_x_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, h_offset_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, v_offset_read_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_x_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_y_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, c_read_out_full_n.read())))) {
        possible_c_x_out_write = ap_const_logic_1;
    } else {
        possible_c_x_out_write = ap_const_logic_0;
    }
}

void get_centroid_sh_Loop::thread_possible_c_y_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        possible_c_y_out_blk_n = possible_c_y_out_full_n.read();
    } else {
        possible_c_y_out_blk_n = ap_const_logic_1;
    }
}

void get_centroid_sh_Loop::thread_possible_c_y_out_din() {
    possible_c_y_out_din = possible_c_y.read();
}

void get_centroid_sh_Loop::thread_possible_c_y_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, h_offset_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, v_offset_read_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_x_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_y_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, c_read_out_full_n.read())))) {
        possible_c_y_out_write = ap_const_logic_1;
    } else {
        possible_c_y_out_write = ap_const_logic_0;
    }
}

void get_centroid_sh_Loop::thread_shl_ln_fu_321_p3() {
    shl_ln_fu_321_p3 = esl_concat<5,5>(v_0_i_i_i_i_reg_212.read(), ap_const_lv5_0);
}

void get_centroid_sh_Loop::thread_v_fu_305_p2() {
    v_fu_305_p2 = (!v_0_i_i_i_i_reg_212.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(v_0_i_i_i_i_reg_212.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void get_centroid_sh_Loop::thread_v_offset_read_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        v_offset_read_out_blk_n = v_offset_read_out_full_n.read();
    } else {
        v_offset_read_out_blk_n = ap_const_logic_1;
    }
}

void get_centroid_sh_Loop::thread_v_offset_read_out_din() {
    v_offset_read_out_din = v_offset_read.read();
}

void get_centroid_sh_Loop::thread_v_offset_read_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, h_offset_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, v_offset_read_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_x_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_y_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, c_read_out_full_n.read())))) {
        v_offset_read_out_write = ap_const_logic_1;
    } else {
        v_offset_read_out_write = ap_const_logic_0;
    }
}

void get_centroid_sh_Loop::thread_v_sum_4_fu_366_p3() {
    v_sum_4_fu_366_p3 = (!and_ln126_reg_493.read()[0].is_01())? sc_lv<32>(): ((and_ln126_reg_493.read()[0].to_bool())? v_sum_fu_349_p2.read(): v_sum_3_fu_102.read());
}

void get_centroid_sh_Loop::thread_v_sum_5_fu_378_p3() {
    v_sum_5_fu_378_p3 = (!and_ln895_fu_373_p2.read()[0].is_01())? sc_lv<32>(): ((and_ln895_fu_373_p2.read()[0].to_bool())? v_sum_3_fu_102.read(): v_sum_4_fu_366_p3.read());
}

void get_centroid_sh_Loop::thread_v_sum_fu_349_p2() {
    v_sum_fu_349_p2 = (!zext_ln127_fu_339_p1.read().is_01() || !v_sum_3_fu_102.read().is_01())? sc_lv<32>(): (sc_biguint<32>(zext_ln127_fu_339_p1.read()) + sc_biguint<32>(v_sum_3_fu_102.read()));
}

void get_centroid_sh_Loop::thread_zext_ln125_fu_295_p1() {
    zext_ln125_fu_295_p1 = esl_zext<8,5>(v_0_i_i_i_i_reg_212.read());
}

void get_centroid_sh_Loop::thread_zext_ln126_1_fu_264_p1() {
    zext_ln126_1_fu_264_p1 = esl_zext<10,6>(h_0_i_i_i_i_reg_201.read());
}

void get_centroid_sh_Loop::thread_zext_ln126_2_fu_268_p1() {
    zext_ln126_2_fu_268_p1 = esl_zext<16,6>(h_0_i_i_i_i_reg_201.read());
}

void get_centroid_sh_Loop::thread_zext_ln126_fu_260_p1() {
    zext_ln126_fu_260_p1 = esl_zext<32,6>(h_0_i_i_i_i_reg_201.read());
}

void get_centroid_sh_Loop::thread_zext_ln127_1_fu_334_p1() {
    zext_ln127_1_fu_334_p1 = esl_zext<64,10>(add_ln127_fu_329_p2.read());
}

void get_centroid_sh_Loop::thread_zext_ln127_fu_339_p1() {
    zext_ln127_fu_339_p1 = esl_zext<32,5>(v_0_i_i_i_i_reg_212.read());
}

void get_centroid_sh_Loop::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, h_offset_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, v_offset_read_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_x_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, possible_c_y_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, c_read_out_full_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln124_fu_248_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln125_fu_299_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}

