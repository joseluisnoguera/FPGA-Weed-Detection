// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "extract_channels.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic extract_channels::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<8> extract_channels::ap_const_lv8_0 = "00000000";
const sc_logic extract_channels::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<2> extract_channels::ap_const_lv2_0 = "00";
const sc_lv<2> extract_channels::ap_const_lv2_1 = "1";
const bool extract_channels::ap_const_boolean_1 = true;

extract_channels::extract_channels(sc_module_name name) : sc_module(name), mVcdFile(0) {
    extractChannel432_U0 = new extractChannel432("extractChannel432_U0");
    extractChannel432_U0->ap_clk(ap_clk);
    extractChannel432_U0->ap_rst(ap_rst);
    extractChannel432_U0->ap_start(extractChannel432_U0_ap_start);
    extractChannel432_U0->ap_done(extractChannel432_U0_ap_done);
    extractChannel432_U0->ap_continue(extractChannel432_U0_ap_continue);
    extractChannel432_U0->ap_idle(extractChannel432_U0_ap_idle);
    extractChannel432_U0->ap_ready(extractChannel432_U0_ap_ready);
    extractChannel432_U0->p_src_mat_data_V_dout(img_in_0_data_V_dout);
    extractChannel432_U0->p_src_mat_data_V_empty_n(img_in_0_data_V_empty_n);
    extractChannel432_U0->p_src_mat_data_V_read(extractChannel432_U0_p_src_mat_data_V_read);
    extractChannel432_U0->p_dst_mat_data_V_din(extractChannel432_U0_p_dst_mat_data_V_din);
    extractChannel432_U0->p_dst_mat_data_V_full_n(b_channel_data_V_full_n);
    extractChannel432_U0->p_dst_mat_data_V_write(extractChannel432_U0_p_dst_mat_data_V_write);
    extractChannel433_U0 = new extractChannel433("extractChannel433_U0");
    extractChannel433_U0->ap_clk(ap_clk);
    extractChannel433_U0->ap_rst(ap_rst);
    extractChannel433_U0->ap_start(extractChannel433_U0_ap_start);
    extractChannel433_U0->ap_done(extractChannel433_U0_ap_done);
    extractChannel433_U0->ap_continue(extractChannel433_U0_ap_continue);
    extractChannel433_U0->ap_idle(extractChannel433_U0_ap_idle);
    extractChannel433_U0->ap_ready(extractChannel433_U0_ap_ready);
    extractChannel433_U0->p_src_mat_data_V_dout(img_in_1_data_V_dout);
    extractChannel433_U0->p_src_mat_data_V_empty_n(img_in_1_data_V_empty_n);
    extractChannel433_U0->p_src_mat_data_V_read(extractChannel433_U0_p_src_mat_data_V_read);
    extractChannel433_U0->p_dst_mat_data_V_din(extractChannel433_U0_p_dst_mat_data_V_din);
    extractChannel433_U0->p_dst_mat_data_V_full_n(g_channel_data_V_full_n);
    extractChannel433_U0->p_dst_mat_data_V_write(extractChannel433_U0_p_dst_mat_data_V_write);
    extractChannel434_U0 = new extractChannel434("extractChannel434_U0");
    extractChannel434_U0->ap_clk(ap_clk);
    extractChannel434_U0->ap_rst(ap_rst);
    extractChannel434_U0->ap_start(extractChannel434_U0_ap_start);
    extractChannel434_U0->ap_done(extractChannel434_U0_ap_done);
    extractChannel434_U0->ap_continue(extractChannel434_U0_ap_continue);
    extractChannel434_U0->ap_idle(extractChannel434_U0_ap_idle);
    extractChannel434_U0->ap_ready(extractChannel434_U0_ap_ready);
    extractChannel434_U0->p_src_mat_data_V_dout(img_in_2_data_V_dout);
    extractChannel434_U0->p_src_mat_data_V_empty_n(img_in_2_data_V_empty_n);
    extractChannel434_U0->p_src_mat_data_V_read(extractChannel434_U0_p_src_mat_data_V_read);
    extractChannel434_U0->p_dst_mat_data_V_din(extractChannel434_U0_p_dst_mat_data_V_din);
    extractChannel434_U0->p_dst_mat_data_V_full_n(r_channel_data_V_full_n);
    extractChannel434_U0->p_dst_mat_data_V_write(extractChannel434_U0_p_dst_mat_data_V_write);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sync_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( extractChannel432_U0_ap_idle );
    sensitive << ( extractChannel433_U0_ap_idle );
    sensitive << ( extractChannel434_U0_ap_idle );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sync_ready );

    SC_METHOD(thread_ap_sync_continue);
    sensitive << ( ap_sync_done );
    sensitive << ( ap_continue );

    SC_METHOD(thread_ap_sync_done);
    sensitive << ( extractChannel432_U0_ap_done );
    sensitive << ( extractChannel433_U0_ap_done );
    sensitive << ( extractChannel434_U0_ap_done );

    SC_METHOD(thread_ap_sync_extractChannel432_U0_ap_ready);
    sensitive << ( extractChannel432_U0_ap_ready );
    sensitive << ( ap_sync_reg_extractChannel432_U0_ap_ready );

    SC_METHOD(thread_ap_sync_extractChannel433_U0_ap_ready);
    sensitive << ( extractChannel433_U0_ap_ready );
    sensitive << ( ap_sync_reg_extractChannel433_U0_ap_ready );

    SC_METHOD(thread_ap_sync_extractChannel434_U0_ap_ready);
    sensitive << ( extractChannel434_U0_ap_ready );
    sensitive << ( ap_sync_reg_extractChannel434_U0_ap_ready );

    SC_METHOD(thread_ap_sync_ready);
    sensitive << ( ap_sync_extractChannel432_U0_ap_ready );
    sensitive << ( ap_sync_extractChannel433_U0_ap_ready );
    sensitive << ( ap_sync_extractChannel434_U0_ap_ready );

    SC_METHOD(thread_b_channel_data_V_din);
    sensitive << ( extractChannel432_U0_p_dst_mat_data_V_din );

    SC_METHOD(thread_b_channel_data_V_write);
    sensitive << ( extractChannel432_U0_p_dst_mat_data_V_write );

    SC_METHOD(thread_extractChannel432_U0_ap_continue);
    sensitive << ( ap_sync_continue );

    SC_METHOD(thread_extractChannel432_U0_ap_start);
    sensitive << ( ap_start );
    sensitive << ( ap_sync_reg_extractChannel432_U0_ap_ready );

    SC_METHOD(thread_extractChannel432_U0_start_full_n);

    SC_METHOD(thread_extractChannel432_U0_start_write);

    SC_METHOD(thread_extractChannel433_U0_ap_continue);
    sensitive << ( ap_sync_continue );

    SC_METHOD(thread_extractChannel433_U0_ap_start);
    sensitive << ( ap_start );
    sensitive << ( ap_sync_reg_extractChannel433_U0_ap_ready );

    SC_METHOD(thread_extractChannel433_U0_start_full_n);

    SC_METHOD(thread_extractChannel433_U0_start_write);

    SC_METHOD(thread_extractChannel434_U0_ap_continue);
    sensitive << ( ap_sync_continue );

    SC_METHOD(thread_extractChannel434_U0_ap_start);
    sensitive << ( ap_start );
    sensitive << ( ap_sync_reg_extractChannel434_U0_ap_ready );

    SC_METHOD(thread_extractChannel434_U0_start_full_n);

    SC_METHOD(thread_extractChannel434_U0_start_write);

    SC_METHOD(thread_g_channel_data_V_din);
    sensitive << ( extractChannel433_U0_p_dst_mat_data_V_din );

    SC_METHOD(thread_g_channel_data_V_write);
    sensitive << ( extractChannel433_U0_p_dst_mat_data_V_write );

    SC_METHOD(thread_img_in_0_data_V_read);
    sensitive << ( extractChannel432_U0_p_src_mat_data_V_read );

    SC_METHOD(thread_img_in_1_data_V_read);
    sensitive << ( extractChannel433_U0_p_src_mat_data_V_read );

    SC_METHOD(thread_img_in_2_data_V_read);
    sensitive << ( extractChannel434_U0_p_src_mat_data_V_read );

    SC_METHOD(thread_r_channel_data_V_din);
    sensitive << ( extractChannel434_U0_p_dst_mat_data_V_din );

    SC_METHOD(thread_r_channel_data_V_write);
    sensitive << ( extractChannel434_U0_p_dst_mat_data_V_write );

    ap_sync_reg_extractChannel432_U0_ap_ready = SC_LOGIC_0;
    extractChannel432_U0_ap_ready_count = "00";
    ap_sync_reg_extractChannel433_U0_ap_ready = SC_LOGIC_0;
    extractChannel433_U0_ap_ready_count = "00";
    ap_sync_reg_extractChannel434_U0_ap_ready = SC_LOGIC_0;
    extractChannel434_U0_ap_ready_count = "00";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "extract_channels_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, img_in_0_data_V_dout, "(port)img_in_0_data_V_dout");
    sc_trace(mVcdFile, img_in_0_data_V_empty_n, "(port)img_in_0_data_V_empty_n");
    sc_trace(mVcdFile, img_in_0_data_V_read, "(port)img_in_0_data_V_read");
    sc_trace(mVcdFile, img_in_1_data_V_dout, "(port)img_in_1_data_V_dout");
    sc_trace(mVcdFile, img_in_1_data_V_empty_n, "(port)img_in_1_data_V_empty_n");
    sc_trace(mVcdFile, img_in_1_data_V_read, "(port)img_in_1_data_V_read");
    sc_trace(mVcdFile, img_in_2_data_V_dout, "(port)img_in_2_data_V_dout");
    sc_trace(mVcdFile, img_in_2_data_V_empty_n, "(port)img_in_2_data_V_empty_n");
    sc_trace(mVcdFile, img_in_2_data_V_read, "(port)img_in_2_data_V_read");
    sc_trace(mVcdFile, r_channel_data_V_din, "(port)r_channel_data_V_din");
    sc_trace(mVcdFile, r_channel_data_V_full_n, "(port)r_channel_data_V_full_n");
    sc_trace(mVcdFile, r_channel_data_V_write, "(port)r_channel_data_V_write");
    sc_trace(mVcdFile, g_channel_data_V_din, "(port)g_channel_data_V_din");
    sc_trace(mVcdFile, g_channel_data_V_full_n, "(port)g_channel_data_V_full_n");
    sc_trace(mVcdFile, g_channel_data_V_write, "(port)g_channel_data_V_write");
    sc_trace(mVcdFile, b_channel_data_V_din, "(port)b_channel_data_V_din");
    sc_trace(mVcdFile, b_channel_data_V_full_n, "(port)b_channel_data_V_full_n");
    sc_trace(mVcdFile, b_channel_data_V_write, "(port)b_channel_data_V_write");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, extractChannel432_U0_ap_start, "extractChannel432_U0_ap_start");
    sc_trace(mVcdFile, extractChannel432_U0_ap_done, "extractChannel432_U0_ap_done");
    sc_trace(mVcdFile, extractChannel432_U0_ap_continue, "extractChannel432_U0_ap_continue");
    sc_trace(mVcdFile, extractChannel432_U0_ap_idle, "extractChannel432_U0_ap_idle");
    sc_trace(mVcdFile, extractChannel432_U0_ap_ready, "extractChannel432_U0_ap_ready");
    sc_trace(mVcdFile, extractChannel432_U0_p_src_mat_data_V_read, "extractChannel432_U0_p_src_mat_data_V_read");
    sc_trace(mVcdFile, extractChannel432_U0_p_dst_mat_data_V_din, "extractChannel432_U0_p_dst_mat_data_V_din");
    sc_trace(mVcdFile, extractChannel432_U0_p_dst_mat_data_V_write, "extractChannel432_U0_p_dst_mat_data_V_write");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, extractChannel433_U0_ap_start, "extractChannel433_U0_ap_start");
    sc_trace(mVcdFile, extractChannel433_U0_ap_done, "extractChannel433_U0_ap_done");
    sc_trace(mVcdFile, extractChannel433_U0_ap_continue, "extractChannel433_U0_ap_continue");
    sc_trace(mVcdFile, extractChannel433_U0_ap_idle, "extractChannel433_U0_ap_idle");
    sc_trace(mVcdFile, extractChannel433_U0_ap_ready, "extractChannel433_U0_ap_ready");
    sc_trace(mVcdFile, extractChannel433_U0_p_src_mat_data_V_read, "extractChannel433_U0_p_src_mat_data_V_read");
    sc_trace(mVcdFile, extractChannel433_U0_p_dst_mat_data_V_din, "extractChannel433_U0_p_dst_mat_data_V_din");
    sc_trace(mVcdFile, extractChannel433_U0_p_dst_mat_data_V_write, "extractChannel433_U0_p_dst_mat_data_V_write");
    sc_trace(mVcdFile, extractChannel434_U0_ap_start, "extractChannel434_U0_ap_start");
    sc_trace(mVcdFile, extractChannel434_U0_ap_done, "extractChannel434_U0_ap_done");
    sc_trace(mVcdFile, extractChannel434_U0_ap_continue, "extractChannel434_U0_ap_continue");
    sc_trace(mVcdFile, extractChannel434_U0_ap_idle, "extractChannel434_U0_ap_idle");
    sc_trace(mVcdFile, extractChannel434_U0_ap_ready, "extractChannel434_U0_ap_ready");
    sc_trace(mVcdFile, extractChannel434_U0_p_src_mat_data_V_read, "extractChannel434_U0_p_src_mat_data_V_read");
    sc_trace(mVcdFile, extractChannel434_U0_p_dst_mat_data_V_din, "extractChannel434_U0_p_dst_mat_data_V_din");
    sc_trace(mVcdFile, extractChannel434_U0_p_dst_mat_data_V_write, "extractChannel434_U0_p_dst_mat_data_V_write");
    sc_trace(mVcdFile, ap_sync_done, "ap_sync_done");
    sc_trace(mVcdFile, ap_sync_ready, "ap_sync_ready");
    sc_trace(mVcdFile, ap_sync_reg_extractChannel432_U0_ap_ready, "ap_sync_reg_extractChannel432_U0_ap_ready");
    sc_trace(mVcdFile, ap_sync_extractChannel432_U0_ap_ready, "ap_sync_extractChannel432_U0_ap_ready");
    sc_trace(mVcdFile, extractChannel432_U0_ap_ready_count, "extractChannel432_U0_ap_ready_count");
    sc_trace(mVcdFile, ap_sync_reg_extractChannel433_U0_ap_ready, "ap_sync_reg_extractChannel433_U0_ap_ready");
    sc_trace(mVcdFile, ap_sync_extractChannel433_U0_ap_ready, "ap_sync_extractChannel433_U0_ap_ready");
    sc_trace(mVcdFile, extractChannel433_U0_ap_ready_count, "extractChannel433_U0_ap_ready_count");
    sc_trace(mVcdFile, ap_sync_reg_extractChannel434_U0_ap_ready, "ap_sync_reg_extractChannel434_U0_ap_ready");
    sc_trace(mVcdFile, ap_sync_extractChannel434_U0_ap_ready, "ap_sync_extractChannel434_U0_ap_ready");
    sc_trace(mVcdFile, extractChannel434_U0_ap_ready_count, "extractChannel434_U0_ap_ready_count");
    sc_trace(mVcdFile, extractChannel432_U0_start_full_n, "extractChannel432_U0_start_full_n");
    sc_trace(mVcdFile, extractChannel432_U0_start_write, "extractChannel432_U0_start_write");
    sc_trace(mVcdFile, extractChannel433_U0_start_full_n, "extractChannel433_U0_start_full_n");
    sc_trace(mVcdFile, extractChannel433_U0_start_write, "extractChannel433_U0_start_write");
    sc_trace(mVcdFile, extractChannel434_U0_start_full_n, "extractChannel434_U0_start_full_n");
    sc_trace(mVcdFile, extractChannel434_U0_start_write, "extractChannel434_U0_start_write");
#endif

    }
}

extract_channels::~extract_channels() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete extractChannel432_U0;
    delete extractChannel433_U0;
    delete extractChannel434_U0;
}

void extract_channels::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_sync_reg_extractChannel432_U0_ap_ready = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (ap_start.read() & 
             ap_sync_ready.read()))) {
            ap_sync_reg_extractChannel432_U0_ap_ready = ap_const_logic_0;
        } else {
            ap_sync_reg_extractChannel432_U0_ap_ready = ap_sync_extractChannel432_U0_ap_ready.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_sync_reg_extractChannel433_U0_ap_ready = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (ap_start.read() & 
             ap_sync_ready.read()))) {
            ap_sync_reg_extractChannel433_U0_ap_ready = ap_const_logic_0;
        } else {
            ap_sync_reg_extractChannel433_U0_ap_ready = ap_sync_extractChannel433_U0_ap_ready.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_sync_reg_extractChannel434_U0_ap_ready = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (ap_start.read() & 
             ap_sync_ready.read()))) {
            ap_sync_reg_extractChannel434_U0_ap_ready = ap_const_logic_0;
        } else {
            ap_sync_reg_extractChannel434_U0_ap_ready = ap_sync_extractChannel434_U0_ap_ready.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_0, extractChannel432_U0_ap_ready.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sync_ready.read()))) {
        extractChannel432_U0_ap_ready_count = (!extractChannel432_U0_ap_ready_count.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(extractChannel432_U0_ap_ready_count.read()) - sc_biguint<2>(ap_const_lv2_1));
    } else if ((esl_seteq<1,1,1>(extractChannel432_U0_ap_ready.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_0, ap_sync_ready.read()))) {
        extractChannel432_U0_ap_ready_count = (!extractChannel432_U0_ap_ready_count.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(extractChannel432_U0_ap_ready_count.read()) + sc_biguint<2>(ap_const_lv2_1));
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sync_ready.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, extractChannel433_U0_ap_ready.read()))) {
        extractChannel433_U0_ap_ready_count = (!extractChannel433_U0_ap_ready_count.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(extractChannel433_U0_ap_ready_count.read()) - sc_biguint<2>(ap_const_lv2_1));
    } else if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_sync_ready.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, extractChannel433_U0_ap_ready.read()))) {
        extractChannel433_U0_ap_ready_count = (!extractChannel433_U0_ap_ready_count.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(extractChannel433_U0_ap_ready_count.read()) + sc_biguint<2>(ap_const_lv2_1));
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sync_ready.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, extractChannel434_U0_ap_ready.read()))) {
        extractChannel434_U0_ap_ready_count = (!extractChannel434_U0_ap_ready_count.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(extractChannel434_U0_ap_ready_count.read()) - sc_biguint<2>(ap_const_lv2_1));
    } else if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_sync_ready.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, extractChannel434_U0_ap_ready.read()))) {
        extractChannel434_U0_ap_ready_count = (!extractChannel434_U0_ap_ready_count.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(extractChannel434_U0_ap_ready_count.read()) + sc_biguint<2>(ap_const_lv2_1));
    }
}

void extract_channels::thread_ap_done() {
    ap_done = ap_sync_done.read();
}

void extract_channels::thread_ap_idle() {
    ap_idle = (extractChannel432_U0_ap_idle.read() & extractChannel433_U0_ap_idle.read() & extractChannel434_U0_ap_idle.read());
}

void extract_channels::thread_ap_ready() {
    ap_ready = ap_sync_ready.read();
}

void extract_channels::thread_ap_sync_continue() {
    ap_sync_continue = (ap_sync_done.read() & ap_continue.read());
}

void extract_channels::thread_ap_sync_done() {
    ap_sync_done = (extractChannel432_U0_ap_done.read() & extractChannel433_U0_ap_done.read() & extractChannel434_U0_ap_done.read());
}

void extract_channels::thread_ap_sync_extractChannel432_U0_ap_ready() {
    ap_sync_extractChannel432_U0_ap_ready = (extractChannel432_U0_ap_ready.read() | ap_sync_reg_extractChannel432_U0_ap_ready.read());
}

void extract_channels::thread_ap_sync_extractChannel433_U0_ap_ready() {
    ap_sync_extractChannel433_U0_ap_ready = (extractChannel433_U0_ap_ready.read() | ap_sync_reg_extractChannel433_U0_ap_ready.read());
}

void extract_channels::thread_ap_sync_extractChannel434_U0_ap_ready() {
    ap_sync_extractChannel434_U0_ap_ready = (extractChannel434_U0_ap_ready.read() | ap_sync_reg_extractChannel434_U0_ap_ready.read());
}

void extract_channels::thread_ap_sync_ready() {
    ap_sync_ready = (ap_sync_extractChannel432_U0_ap_ready.read() & ap_sync_extractChannel433_U0_ap_ready.read() & ap_sync_extractChannel434_U0_ap_ready.read());
}

void extract_channels::thread_b_channel_data_V_din() {
    b_channel_data_V_din = extractChannel432_U0_p_dst_mat_data_V_din.read();
}

void extract_channels::thread_b_channel_data_V_write() {
    b_channel_data_V_write = extractChannel432_U0_p_dst_mat_data_V_write.read();
}

void extract_channels::thread_extractChannel432_U0_ap_continue() {
    extractChannel432_U0_ap_continue = ap_sync_continue.read();
}

void extract_channels::thread_extractChannel432_U0_ap_start() {
    extractChannel432_U0_ap_start = (ap_start.read() & (ap_sync_reg_extractChannel432_U0_ap_ready.read() ^ 
  ap_const_logic_1));
}

void extract_channels::thread_extractChannel432_U0_start_full_n() {
    extractChannel432_U0_start_full_n = ap_const_logic_1;
}

void extract_channels::thread_extractChannel432_U0_start_write() {
    extractChannel432_U0_start_write = ap_const_logic_0;
}

void extract_channels::thread_extractChannel433_U0_ap_continue() {
    extractChannel433_U0_ap_continue = ap_sync_continue.read();
}

void extract_channels::thread_extractChannel433_U0_ap_start() {
    extractChannel433_U0_ap_start = (ap_start.read() & (ap_sync_reg_extractChannel433_U0_ap_ready.read() ^ 
  ap_const_logic_1));
}

void extract_channels::thread_extractChannel433_U0_start_full_n() {
    extractChannel433_U0_start_full_n = ap_const_logic_1;
}

void extract_channels::thread_extractChannel433_U0_start_write() {
    extractChannel433_U0_start_write = ap_const_logic_0;
}

void extract_channels::thread_extractChannel434_U0_ap_continue() {
    extractChannel434_U0_ap_continue = ap_sync_continue.read();
}

void extract_channels::thread_extractChannel434_U0_ap_start() {
    extractChannel434_U0_ap_start = (ap_start.read() & (ap_sync_reg_extractChannel434_U0_ap_ready.read() ^ 
  ap_const_logic_1));
}

void extract_channels::thread_extractChannel434_U0_start_full_n() {
    extractChannel434_U0_start_full_n = ap_const_logic_1;
}

void extract_channels::thread_extractChannel434_U0_start_write() {
    extractChannel434_U0_start_write = ap_const_logic_0;
}

void extract_channels::thread_g_channel_data_V_din() {
    g_channel_data_V_din = extractChannel433_U0_p_dst_mat_data_V_din.read();
}

void extract_channels::thread_g_channel_data_V_write() {
    g_channel_data_V_write = extractChannel433_U0_p_dst_mat_data_V_write.read();
}

void extract_channels::thread_img_in_0_data_V_read() {
    img_in_0_data_V_read = extractChannel432_U0_p_src_mat_data_V_read.read();
}

void extract_channels::thread_img_in_1_data_V_read() {
    img_in_1_data_V_read = extractChannel433_U0_p_src_mat_data_V_read.read();
}

void extract_channels::thread_img_in_2_data_V_read() {
    img_in_2_data_V_read = extractChannel434_U0_p_src_mat_data_V_read.read();
}

void extract_channels::thread_r_channel_data_V_din() {
    r_channel_data_V_din = extractChannel434_U0_p_dst_mat_data_V_din.read();
}

void extract_channels::thread_r_channel_data_V_write() {
    r_channel_data_V_write = extractChannel434_U0_p_dst_mat_data_V_write.read();
}

}

