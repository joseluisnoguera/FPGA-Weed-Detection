// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _extract_channels_HH_
#define _extract_channels_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "extractChannel432.h"
#include "extractChannel433.h"
#include "extractChannel434.h"

namespace ap_rtl {

struct extract_channels : public sc_module {
    // Port declarations 25
    sc_in< sc_lv<24> > img_in_0_data_V_dout;
    sc_in< sc_logic > img_in_0_data_V_empty_n;
    sc_out< sc_logic > img_in_0_data_V_read;
    sc_in< sc_lv<24> > img_in_1_data_V_dout;
    sc_in< sc_logic > img_in_1_data_V_empty_n;
    sc_out< sc_logic > img_in_1_data_V_read;
    sc_in< sc_lv<24> > img_in_2_data_V_dout;
    sc_in< sc_logic > img_in_2_data_V_empty_n;
    sc_out< sc_logic > img_in_2_data_V_read;
    sc_out< sc_lv<8> > r_channel_data_V_din;
    sc_in< sc_logic > r_channel_data_V_full_n;
    sc_out< sc_logic > r_channel_data_V_write;
    sc_out< sc_lv<8> > g_channel_data_V_din;
    sc_in< sc_logic > g_channel_data_V_full_n;
    sc_out< sc_logic > g_channel_data_V_write;
    sc_out< sc_lv<8> > b_channel_data_V_din;
    sc_in< sc_logic > b_channel_data_V_full_n;
    sc_out< sc_logic > b_channel_data_V_write;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_idle;
    sc_in< sc_logic > ap_continue;


    // Module declarations
    extract_channels(sc_module_name name);
    SC_HAS_PROCESS(extract_channels);

    ~extract_channels();

    sc_trace_file* mVcdFile;

    extractChannel432* extractChannel432_U0;
    extractChannel433* extractChannel433_U0;
    extractChannel434* extractChannel434_U0;
    sc_signal< sc_logic > extractChannel432_U0_ap_start;
    sc_signal< sc_logic > extractChannel432_U0_ap_done;
    sc_signal< sc_logic > extractChannel432_U0_ap_continue;
    sc_signal< sc_logic > extractChannel432_U0_ap_idle;
    sc_signal< sc_logic > extractChannel432_U0_ap_ready;
    sc_signal< sc_logic > extractChannel432_U0_p_src_mat_data_V_read;
    sc_signal< sc_lv<8> > extractChannel432_U0_p_dst_mat_data_V_din;
    sc_signal< sc_logic > extractChannel432_U0_p_dst_mat_data_V_write;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > extractChannel433_U0_ap_start;
    sc_signal< sc_logic > extractChannel433_U0_ap_done;
    sc_signal< sc_logic > extractChannel433_U0_ap_continue;
    sc_signal< sc_logic > extractChannel433_U0_ap_idle;
    sc_signal< sc_logic > extractChannel433_U0_ap_ready;
    sc_signal< sc_logic > extractChannel433_U0_p_src_mat_data_V_read;
    sc_signal< sc_lv<8> > extractChannel433_U0_p_dst_mat_data_V_din;
    sc_signal< sc_logic > extractChannel433_U0_p_dst_mat_data_V_write;
    sc_signal< sc_logic > extractChannel434_U0_ap_start;
    sc_signal< sc_logic > extractChannel434_U0_ap_done;
    sc_signal< sc_logic > extractChannel434_U0_ap_continue;
    sc_signal< sc_logic > extractChannel434_U0_ap_idle;
    sc_signal< sc_logic > extractChannel434_U0_ap_ready;
    sc_signal< sc_logic > extractChannel434_U0_p_src_mat_data_V_read;
    sc_signal< sc_lv<8> > extractChannel434_U0_p_dst_mat_data_V_din;
    sc_signal< sc_logic > extractChannel434_U0_p_dst_mat_data_V_write;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_logic > ap_sync_reg_extractChannel432_U0_ap_ready;
    sc_signal< sc_logic > ap_sync_extractChannel432_U0_ap_ready;
    sc_signal< sc_lv<2> > extractChannel432_U0_ap_ready_count;
    sc_signal< sc_logic > ap_sync_reg_extractChannel433_U0_ap_ready;
    sc_signal< sc_logic > ap_sync_extractChannel433_U0_ap_ready;
    sc_signal< sc_lv<2> > extractChannel433_U0_ap_ready_count;
    sc_signal< sc_logic > ap_sync_reg_extractChannel434_U0_ap_ready;
    sc_signal< sc_logic > ap_sync_extractChannel434_U0_ap_ready;
    sc_signal< sc_lv<2> > extractChannel434_U0_ap_ready_count;
    sc_signal< sc_logic > extractChannel432_U0_start_full_n;
    sc_signal< sc_logic > extractChannel432_U0_start_write;
    sc_signal< sc_logic > extractChannel433_U0_start_full_n;
    sc_signal< sc_logic > extractChannel433_U0_start_write;
    sc_signal< sc_logic > extractChannel434_U0_start_full_n;
    sc_signal< sc_logic > extractChannel434_U0_start_write;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_logic ap_const_logic_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_extractChannel432_U0_ap_ready();
    void thread_ap_sync_extractChannel433_U0_ap_ready();
    void thread_ap_sync_extractChannel434_U0_ap_ready();
    void thread_ap_sync_ready();
    void thread_b_channel_data_V_din();
    void thread_b_channel_data_V_write();
    void thread_extractChannel432_U0_ap_continue();
    void thread_extractChannel432_U0_ap_start();
    void thread_extractChannel432_U0_start_full_n();
    void thread_extractChannel432_U0_start_write();
    void thread_extractChannel433_U0_ap_continue();
    void thread_extractChannel433_U0_ap_start();
    void thread_extractChannel433_U0_start_full_n();
    void thread_extractChannel433_U0_start_write();
    void thread_extractChannel434_U0_ap_continue();
    void thread_extractChannel434_U0_ap_start();
    void thread_extractChannel434_U0_start_full_n();
    void thread_extractChannel434_U0_start_write();
    void thread_g_channel_data_V_din();
    void thread_g_channel_data_V_write();
    void thread_img_in_0_data_V_read();
    void thread_img_in_1_data_V_read();
    void thread_img_in_2_data_V_read();
    void thread_r_channel_data_V_din();
    void thread_r_channel_data_V_write();
};

}

using namespace ap_rtl;

#endif
