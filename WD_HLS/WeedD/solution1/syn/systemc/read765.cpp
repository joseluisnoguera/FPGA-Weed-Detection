// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "read765.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic read765::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic read765::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> read765::ap_ST_fsm_state1 = "1";
const sc_lv<32> read765::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool read765::ap_const_boolean_1 = true;

read765::read765(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Mat_9_720_1280_1_data_V_addr_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( Mat_9_720_1280_1_data_V_addr_empty_n );

    SC_METHOD(thread_Mat_9_720_1280_1_data_V_addr_read);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( Mat_9_720_1280_1_data_V_addr_empty_n );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( Mat_9_720_1280_1_data_V_addr_empty_n );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( Mat_9_720_1280_1_data_V_addr_empty_n );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( Mat_9_720_1280_1_data_V_addr_empty_n );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( Mat_9_720_1280_1_data_V_addr_dout );
    sensitive << ( Mat_9_720_1280_1_data_V_addr_empty_n );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( Mat_9_720_1280_1_data_V_addr_empty_n );
    sensitive << ( ap_ce );

    ap_CS_fsm = "1";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "read765_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, Mat_9_720_1280_1_data_V_addr_dout, "(port)Mat_9_720_1280_1_data_V_addr_dout");
    sc_trace(mVcdFile, Mat_9_720_1280_1_data_V_addr_empty_n, "(port)Mat_9_720_1280_1_data_V_addr_empty_n");
    sc_trace(mVcdFile, Mat_9_720_1280_1_data_V_addr_read, "(port)Mat_9_720_1280_1_data_V_addr_read");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
    sc_trace(mVcdFile, Mat_9_720_1280_1_data_V_addr_blk_n, "(port)Mat_9_720_1280_1_data_V_addr_blk_n");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

read765::~read765() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void read765::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
}

void read765::thread_Mat_9_720_1280_1_data_V_addr_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        Mat_9_720_1280_1_data_V_addr_blk_n = Mat_9_720_1280_1_data_V_addr_empty_n.read();
    } else {
        Mat_9_720_1280_1_data_V_addr_blk_n = ap_const_logic_1;
    }
}

void read765::thread_Mat_9_720_1280_1_data_V_addr_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, Mat_9_720_1280_1_data_V_addr_empty_n.read())) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        Mat_9_720_1280_1_data_V_addr_read = ap_const_logic_1;
    } else {
        Mat_9_720_1280_1_data_V_addr_read = ap_const_logic_0;
    }
}

void read765::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void read765::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, Mat_9_720_1280_1_data_V_addr_empty_n.read()));
}

void read765::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, Mat_9_720_1280_1_data_V_addr_empty_n.read())) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void read765::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void read765::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, Mat_9_720_1280_1_data_V_addr_empty_n.read())) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void read765::thread_ap_return() {
    ap_return = Mat_9_720_1280_1_data_V_addr_dout.read();
}

void read765::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state1;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

