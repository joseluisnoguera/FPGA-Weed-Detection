// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _OtsuThreshold_HH_
#define _OtsuThreshold_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "xfOtsuKernel.h"
#include "xFHistogramKernel.h"
#include "xFHistogramKerneludo.h"

namespace ap_rtl {

struct OtsuThreshold : public sc_module {
    // Port declarations 10
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > p_src_mat_data_V_dout;
    sc_in< sc_logic > p_src_mat_data_V_empty_n;
    sc_out< sc_logic > p_src_mat_data_V_read;
    sc_out< sc_lv<8> > ap_return;


    // Module declarations
    OtsuThreshold(sc_module_name name);
    SC_HAS_PROCESS(OtsuThreshold);

    ~OtsuThreshold();

    sc_trace_file* mVcdFile;

    xFHistogramKerneludo* hist_U;
    xfOtsuKernel* grp_xfOtsuKernel_fu_28;
    xFHistogramKernel* grp_xFHistogramKernel_fu_35;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > hist_address0;
    sc_signal< sc_logic > hist_ce0;
    sc_signal< sc_logic > hist_we0;
    sc_signal< sc_lv<32> > hist_q0;
    sc_signal< sc_logic > grp_xfOtsuKernel_fu_28_ap_start;
    sc_signal< sc_logic > grp_xfOtsuKernel_fu_28_ap_done;
    sc_signal< sc_logic > grp_xfOtsuKernel_fu_28_ap_idle;
    sc_signal< sc_logic > grp_xfOtsuKernel_fu_28_ap_ready;
    sc_signal< sc_lv<8> > grp_xfOtsuKernel_fu_28_p_hist_address0;
    sc_signal< sc_logic > grp_xfOtsuKernel_fu_28_p_hist_ce0;
    sc_signal< sc_lv<8> > grp_xfOtsuKernel_fu_28_ap_return;
    sc_signal< sc_logic > grp_xFHistogramKernel_fu_35_ap_start;
    sc_signal< sc_logic > grp_xFHistogramKernel_fu_35_ap_done;
    sc_signal< sc_logic > grp_xFHistogramKernel_fu_35_ap_idle;
    sc_signal< sc_logic > grp_xFHistogramKernel_fu_35_ap_ready;
    sc_signal< sc_logic > grp_xFHistogramKernel_fu_35_p_src_mat_data_V_read;
    sc_signal< sc_lv<8> > grp_xFHistogramKernel_fu_35_hist_array_address0;
    sc_signal< sc_logic > grp_xFHistogramKernel_fu_35_hist_array_ce0;
    sc_signal< sc_logic > grp_xFHistogramKernel_fu_35_hist_array_we0;
    sc_signal< sc_lv<32> > grp_xFHistogramKernel_fu_35_hist_array_d0;
    sc_signal< sc_logic > grp_xfOtsuKernel_fu_28_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > grp_xFHistogramKernel_fu_35_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<8> > ap_return_preg;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_grp_xFHistogramKernel_fu_35_ap_start();
    void thread_grp_xfOtsuKernel_fu_28_ap_start();
    void thread_hist_address0();
    void thread_hist_ce0();
    void thread_hist_we0();
    void thread_p_src_mat_data_V_read();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
