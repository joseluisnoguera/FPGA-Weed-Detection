// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _get_last_centroids_L_HH_
#define _get_last_centroids_L_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct get_last_centroids_L : public sc_module {
    // Port declarations 17
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<4> > size;
    sc_in< sc_lv<4> > seg_index_start;
    sc_in< sc_lv<3> > selected_line;
    sc_out< sc_lv<7> > centroids_address0;
    sc_out< sc_logic > centroids_ce0;
    sc_in< sc_lv<48> > centroids_q0;
    sc_out< sc_lv<2> > last_c_2_address0;
    sc_out< sc_logic > last_c_2_ce0;
    sc_out< sc_logic > last_c_2_we0;
    sc_out< sc_lv<48> > last_c_2_d0;


    // Module declarations
    get_last_centroids_L(sc_module_name name);
    SC_HAS_PROCESS(get_last_centroids_L);

    ~get_last_centroids_L();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<3> > i_0_i_i_i_reg_95;
    sc_signal< sc_lv<5> > zext_ln168_fu_115_p1;
    sc_signal< sc_lv<5> > zext_ln168_reg_208;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<5> > seg_index_end_fu_119_p2;
    sc_signal< sc_lv<5> > seg_index_end_reg_213;
    sc_signal< sc_lv<10> > zext_ln172_cast_cast_fu_125_p1;
    sc_signal< sc_lv<10> > zext_ln172_cast_cast_reg_218;
    sc_signal< sc_lv<1> > icmp_ln169_fu_129_p2;
    sc_signal< sc_lv<1> > icmp_ln169_reg_223;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<3> > i_fu_135_p2;
    sc_signal< sc_lv<3> > i_reg_227;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<1> > icmp_ln171_fu_150_p2;
    sc_signal< sc_lv<1> > icmp_ln171_reg_232;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<3> > ap_phi_mux_i_0_i_i_i_phi_fu_99_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<64> > zext_ln172_2_fu_198_p1;
    sc_signal< sc_lv<64> > zext_ln172_3_fu_203_p1;
    sc_signal< sc_lv<3> > empty_fu_107_p1;
    sc_signal< sc_lv<5> > size_cast_i_fu_111_p1;
    sc_signal< sc_lv<5> > zext_ln169_fu_141_p1;
    sc_signal< sc_lv<5> > p_i_fu_145_p2;
    sc_signal< sc_lv<8> > shl_ln_i_fu_155_p3;
    sc_signal< sc_lv<6> > shl_ln172_1_i_fu_167_p3;
    sc_signal< sc_lv<9> > zext_ln172_fu_163_p1;
    sc_signal< sc_lv<9> > zext_ln172_1_fu_175_p1;
    sc_signal< sc_lv<9> > sub_ln172_fu_179_p2;
    sc_signal< sc_lv<10> > sext_ln172_fu_185_p1;
    sc_signal< sc_lv<10> > add_ln172_fu_189_p2;
    sc_signal< sc_lv<32> > sext_ln172_1_fu_194_p1;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<3> ap_const_lv3_6;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln172_fu_189_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_i_0_i_i_i_phi_fu_99_p4();
    void thread_ap_ready();
    void thread_centroids_address0();
    void thread_centroids_ce0();
    void thread_empty_fu_107_p1();
    void thread_i_fu_135_p2();
    void thread_icmp_ln169_fu_129_p2();
    void thread_icmp_ln171_fu_150_p2();
    void thread_last_c_2_address0();
    void thread_last_c_2_ce0();
    void thread_last_c_2_d0();
    void thread_last_c_2_we0();
    void thread_p_i_fu_145_p2();
    void thread_seg_index_end_fu_119_p2();
    void thread_sext_ln172_1_fu_194_p1();
    void thread_sext_ln172_fu_185_p1();
    void thread_shl_ln172_1_i_fu_167_p3();
    void thread_shl_ln_i_fu_155_p3();
    void thread_size_cast_i_fu_111_p1();
    void thread_sub_ln172_fu_179_p2();
    void thread_zext_ln168_fu_115_p1();
    void thread_zext_ln169_fu_141_p1();
    void thread_zext_ln172_1_fu_175_p1();
    void thread_zext_ln172_2_fu_198_p1();
    void thread_zext_ln172_3_fu_203_p1();
    void thread_zext_ln172_cast_cast_fu_125_p1();
    void thread_zext_ln172_fu_163_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
