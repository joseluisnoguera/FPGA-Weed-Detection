// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "xfExtractPixels.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic xfExtractPixels::ap_const_logic_1 = sc_dt::Log_1;
const bool xfExtractPixels::ap_const_boolean_1 = true;
const sc_lv<1> xfExtractPixels::ap_const_lv1_1 = "1";
const sc_lv<1> xfExtractPixels::ap_const_lv1_0 = "0";
const sc_logic xfExtractPixels::ap_const_logic_0 = sc_dt::Log_0;

xfExtractPixels::xfExtractPixels(sc_module_name name) : sc_module(name), mVcdFile(0) {
    ip_accel_app_mux_bbk_U537 = new ip_accel_app_mux_bbk<1,1,1,1,1,1,2,1>("ip_accel_app_mux_bbk_U537");
    ip_accel_app_mux_bbk_U537->din0(ap_var_for_const0);
    ip_accel_app_mux_bbk_U537->din1(ap_var_for_const1);
    ip_accel_app_mux_bbk_U537->din2(ap_var_for_const1);
    ip_accel_app_mux_bbk_U537->din3(ap_var_for_const1);
    ip_accel_app_mux_bbk_U537->din4(zext_ln321_fu_60_p1);
    ip_accel_app_mux_bbk_U537->dout(write_flag_fu_64_p6);
    ip_accel_app_mux_bbk_U538 = new ip_accel_app_mux_bbk<1,1,1,1,1,1,2,1>("ip_accel_app_mux_bbk_U538");
    ip_accel_app_mux_bbk_U538->din0(ap_var_for_const1);
    ip_accel_app_mux_bbk_U538->din1(ap_var_for_const0);
    ip_accel_app_mux_bbk_U538->din2(ap_var_for_const1);
    ip_accel_app_mux_bbk_U538->din3(ap_var_for_const1);
    ip_accel_app_mux_bbk_U538->din4(zext_ln321_fu_60_p1);
    ip_accel_app_mux_bbk_U538->dout(write_flag4_fu_78_p6);
    ip_accel_app_mux_bbk_U539 = new ip_accel_app_mux_bbk<1,1,1,1,1,1,2,1>("ip_accel_app_mux_bbk_U539");
    ip_accel_app_mux_bbk_U539->din0(ap_var_for_const1);
    ip_accel_app_mux_bbk_U539->din1(ap_var_for_const1);
    ip_accel_app_mux_bbk_U539->din2(ap_var_for_const1);
    ip_accel_app_mux_bbk_U539->din3(ap_var_for_const0);
    ip_accel_app_mux_bbk_U539->din4(zext_ln321_fu_60_p1);
    ip_accel_app_mux_bbk_U539->dout(write_flag1_fu_92_p6);
    ip_accel_app_mux_bbk_U540 = new ip_accel_app_mux_bbk<1,1,1,1,1,1,2,1>("ip_accel_app_mux_bbk_U540");
    ip_accel_app_mux_bbk_U540->din0(ap_var_for_const1);
    ip_accel_app_mux_bbk_U540->din1(ap_var_for_const1);
    ip_accel_app_mux_bbk_U540->din2(ap_var_for_const0);
    ip_accel_app_mux_bbk_U540->din3(ap_var_for_const1);
    ip_accel_app_mux_bbk_U540->din4(zext_ln321_fu_60_p1);
    ip_accel_app_mux_bbk_U540->dout(write_flag8_fu_106_p6);

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_ap_return_0);
    sensitive << ( select_ln78_fu_120_p3 );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( select_ln78_1_fu_128_p3 );

    SC_METHOD(thread_ap_return_2);
    sensitive << ( select_ln78_2_fu_136_p3 );

    SC_METHOD(thread_ap_return_3);
    sensitive << ( select_ln78_3_fu_144_p3 );

    SC_METHOD(thread_select_ln78_1_fu_128_p3);
    sensitive << ( tmp_buf_1_V_read );
    sensitive << ( val1_V_read );
    sensitive << ( write_flag4_fu_78_p6 );

    SC_METHOD(thread_select_ln78_2_fu_136_p3);
    sensitive << ( tmp_buf_2_V_read );
    sensitive << ( val1_V_read );
    sensitive << ( write_flag8_fu_106_p6 );

    SC_METHOD(thread_select_ln78_3_fu_144_p3);
    sensitive << ( tmp_buf_3_V_read );
    sensitive << ( val1_V_read );
    sensitive << ( write_flag1_fu_92_p6 );

    SC_METHOD(thread_select_ln78_fu_120_p3);
    sensitive << ( tmp_buf_0_V_read );
    sensitive << ( val1_V_read );
    sensitive << ( write_flag_fu_64_p6 );

    SC_METHOD(thread_zext_ln321_fu_60_p1);
    sensitive << ( pos_r );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "xfExtractPixels_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, tmp_buf_0_V_read, "(port)tmp_buf_0_V_read");
    sc_trace(mVcdFile, tmp_buf_1_V_read, "(port)tmp_buf_1_V_read");
    sc_trace(mVcdFile, tmp_buf_2_V_read, "(port)tmp_buf_2_V_read");
    sc_trace(mVcdFile, tmp_buf_3_V_read, "(port)tmp_buf_3_V_read");
    sc_trace(mVcdFile, val1_V_read, "(port)val1_V_read");
    sc_trace(mVcdFile, pos_r, "(port)pos_r");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_return_2, "(port)ap_return_2");
    sc_trace(mVcdFile, ap_return_3, "(port)ap_return_3");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, zext_ln321_fu_60_p1, "zext_ln321_fu_60_p1");
    sc_trace(mVcdFile, write_flag_fu_64_p6, "write_flag_fu_64_p6");
    sc_trace(mVcdFile, write_flag4_fu_78_p6, "write_flag4_fu_78_p6");
    sc_trace(mVcdFile, write_flag8_fu_106_p6, "write_flag8_fu_106_p6");
    sc_trace(mVcdFile, write_flag1_fu_92_p6, "write_flag1_fu_92_p6");
    sc_trace(mVcdFile, select_ln78_fu_120_p3, "select_ln78_fu_120_p3");
    sc_trace(mVcdFile, select_ln78_1_fu_128_p3, "select_ln78_1_fu_128_p3");
    sc_trace(mVcdFile, select_ln78_2_fu_136_p3, "select_ln78_2_fu_136_p3");
    sc_trace(mVcdFile, select_ln78_3_fu_144_p3, "select_ln78_3_fu_144_p3");
#endif

    }
}

xfExtractPixels::~xfExtractPixels() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete ip_accel_app_mux_bbk_U537;
    delete ip_accel_app_mux_bbk_U538;
    delete ip_accel_app_mux_bbk_U539;
    delete ip_accel_app_mux_bbk_U540;
}

void xfExtractPixels::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv1_1;
}

void xfExtractPixels::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void xfExtractPixels::thread_ap_ready() {
    ap_ready = ap_const_logic_1;
}

void xfExtractPixels::thread_ap_return_0() {
    ap_return_0 = select_ln78_fu_120_p3.read();
}

void xfExtractPixels::thread_ap_return_1() {
    ap_return_1 = select_ln78_1_fu_128_p3.read();
}

void xfExtractPixels::thread_ap_return_2() {
    ap_return_2 = select_ln78_2_fu_136_p3.read();
}

void xfExtractPixels::thread_ap_return_3() {
    ap_return_3 = select_ln78_3_fu_144_p3.read();
}

void xfExtractPixels::thread_select_ln78_1_fu_128_p3() {
    select_ln78_1_fu_128_p3 = (!write_flag4_fu_78_p6.read()[0].is_01())? sc_lv<24>(): ((write_flag4_fu_78_p6.read()[0].to_bool())? val1_V_read.read(): tmp_buf_1_V_read.read());
}

void xfExtractPixels::thread_select_ln78_2_fu_136_p3() {
    select_ln78_2_fu_136_p3 = (!write_flag8_fu_106_p6.read()[0].is_01())? sc_lv<24>(): ((write_flag8_fu_106_p6.read()[0].to_bool())? val1_V_read.read(): tmp_buf_2_V_read.read());
}

void xfExtractPixels::thread_select_ln78_3_fu_144_p3() {
    select_ln78_3_fu_144_p3 = (!write_flag1_fu_92_p6.read()[0].is_01())? sc_lv<24>(): ((write_flag1_fu_92_p6.read()[0].to_bool())? val1_V_read.read(): tmp_buf_3_V_read.read());
}

void xfExtractPixels::thread_select_ln78_fu_120_p3() {
    select_ln78_fu_120_p3 = (!write_flag_fu_64_p6.read()[0].is_01())? sc_lv<24>(): ((write_flag_fu_64_p6.read()[0].to_bool())? val1_V_read.read(): tmp_buf_0_V_read.read());
}

void xfExtractPixels::thread_zext_ln321_fu_60_p1() {
    zext_ln321_fu_60_p1 = esl_zext<2,1>(pos_r.read());
}

}

