// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _get_centroid_sh_Loop_HH_
#define _get_centroid_sh_Loop_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct get_centroid_sh_Loop : public sc_module {
    // Port declarations 35
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<10> > micro_roi_data_V_address0;
    sc_out< sc_logic > micro_roi_data_V_ce0;
    sc_in< sc_lv<8> > micro_roi_data_V_q0;
    sc_in< sc_lv<8> > v_limit;
    sc_in< sc_lv<16> > h_limit;
    sc_in< sc_lv<16> > h_offset;
    sc_in< sc_lv<8> > v_offset_read;
    sc_in< sc_lv<8> > possible_c_x;
    sc_in< sc_lv<32> > possible_c_y;
    sc_in< sc_lv<48> > c_read;
    sc_out< sc_lv<16> > h_offset_out_din;
    sc_in< sc_logic > h_offset_out_full_n;
    sc_out< sc_logic > h_offset_out_write;
    sc_out< sc_lv<8> > v_offset_read_out_din;
    sc_in< sc_logic > v_offset_read_out_full_n;
    sc_out< sc_logic > v_offset_read_out_write;
    sc_out< sc_lv<8> > possible_c_x_out_din;
    sc_in< sc_logic > possible_c_x_out_full_n;
    sc_out< sc_logic > possible_c_x_out_write;
    sc_out< sc_lv<32> > possible_c_y_out_din;
    sc_in< sc_logic > possible_c_y_out_full_n;
    sc_out< sc_logic > possible_c_y_out_write;
    sc_out< sc_lv<48> > c_read_out_din;
    sc_in< sc_logic > c_read_out_full_n;
    sc_out< sc_logic > c_read_out_write;
    sc_out< sc_lv<32> > ap_return_0;
    sc_out< sc_lv<32> > ap_return_1;
    sc_out< sc_lv<32> > ap_return_2;


    // Module declarations
    get_centroid_sh_Loop(sc_module_name name);
    SC_HAS_PROCESS(get_centroid_sh_Loop);

    ~get_centroid_sh_Loop();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > h_offset_out_blk_n;
    sc_signal< sc_logic > v_offset_read_out_blk_n;
    sc_signal< sc_logic > possible_c_x_out_blk_n;
    sc_signal< sc_logic > possible_c_y_out_blk_n;
    sc_signal< sc_logic > c_read_out_blk_n;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<6> > h_fu_254_p2;
    sc_signal< sc_lv<6> > h_reg_465;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > zext_ln126_fu_260_p1;
    sc_signal< sc_lv<32> > zext_ln126_reg_470;
    sc_signal< sc_lv<1> > icmp_ln124_fu_248_p2;
    sc_signal< sc_lv<10> > zext_ln126_1_fu_264_p1;
    sc_signal< sc_lv<10> > zext_ln126_1_reg_475;
    sc_signal< sc_lv<1> > icmp_ln126_fu_272_p2;
    sc_signal< sc_lv<1> > icmp_ln126_reg_480;
    sc_signal< sc_lv<5> > v_fu_305_p2;
    sc_signal< sc_lv<5> > v_reg_488;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > and_ln126_fu_316_p2;
    sc_signal< sc_lv<1> > and_ln126_reg_493;
    sc_signal< sc_lv<1> > icmp_ln125_fu_299_p2;
    sc_signal< sc_lv<6> > h_0_i_i_i_i_reg_201;
    sc_signal< sc_lv<5> > v_0_i_i_i_i_reg_212;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<64> > zext_ln127_1_fu_334_p1;
    sc_signal< sc_lv<32> > p_sum_3_fu_94;
    sc_signal< sc_lv<32> > p_sum_5_fu_408_p3;
    sc_signal< sc_lv<32> > h_sum_3_fu_98;
    sc_signal< sc_lv<32> > h_sum_5_fu_393_p3;
    sc_signal< sc_lv<32> > v_sum_3_fu_102;
    sc_signal< sc_lv<32> > v_sum_5_fu_378_p3;
    sc_signal< sc_lv<16> > zext_ln126_2_fu_268_p1;
    sc_signal< sc_lv<8> > zext_ln125_fu_295_p1;
    sc_signal< sc_lv<1> > icmp_ln126_1_fu_311_p2;
    sc_signal< sc_lv<10> > shl_ln_fu_321_p3;
    sc_signal< sc_lv<10> > add_ln127_fu_329_p2;
    sc_signal< sc_lv<32> > zext_ln127_fu_339_p1;
    sc_signal< sc_lv<32> > v_sum_fu_349_p2;
    sc_signal< sc_lv<1> > icmp_ln895_fu_343_p2;
    sc_signal< sc_lv<1> > and_ln895_fu_373_p2;
    sc_signal< sc_lv<32> > v_sum_4_fu_366_p3;
    sc_signal< sc_lv<32> > h_sum_fu_355_p2;
    sc_signal< sc_lv<32> > h_sum_4_fu_386_p3;
    sc_signal< sc_lv<32> > p_sum_fu_360_p2;
    sc_signal< sc_lv<32> > p_sum_4_fu_401_p3;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<6> ap_const_lv6_20;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<5> ap_const_lv5_17;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln127_fu_329_p2();
    void thread_and_ln126_fu_316_p2();
    void thread_and_ln895_fu_373_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_2();
    void thread_c_read_out_blk_n();
    void thread_c_read_out_din();
    void thread_c_read_out_write();
    void thread_h_fu_254_p2();
    void thread_h_offset_out_blk_n();
    void thread_h_offset_out_din();
    void thread_h_offset_out_write();
    void thread_h_sum_4_fu_386_p3();
    void thread_h_sum_5_fu_393_p3();
    void thread_h_sum_fu_355_p2();
    void thread_icmp_ln124_fu_248_p2();
    void thread_icmp_ln125_fu_299_p2();
    void thread_icmp_ln126_1_fu_311_p2();
    void thread_icmp_ln126_fu_272_p2();
    void thread_icmp_ln895_fu_343_p2();
    void thread_micro_roi_data_V_address0();
    void thread_micro_roi_data_V_ce0();
    void thread_p_sum_4_fu_401_p3();
    void thread_p_sum_5_fu_408_p3();
    void thread_p_sum_fu_360_p2();
    void thread_possible_c_x_out_blk_n();
    void thread_possible_c_x_out_din();
    void thread_possible_c_x_out_write();
    void thread_possible_c_y_out_blk_n();
    void thread_possible_c_y_out_din();
    void thread_possible_c_y_out_write();
    void thread_shl_ln_fu_321_p3();
    void thread_v_fu_305_p2();
    void thread_v_offset_read_out_blk_n();
    void thread_v_offset_read_out_din();
    void thread_v_offset_read_out_write();
    void thread_v_sum_4_fu_366_p3();
    void thread_v_sum_5_fu_378_p3();
    void thread_v_sum_fu_349_p2();
    void thread_zext_ln125_fu_295_p1();
    void thread_zext_ln126_1_fu_264_p1();
    void thread_zext_ln126_2_fu_268_p1();
    void thread_zext_ln126_fu_260_p1();
    void thread_zext_ln127_1_fu_334_p1();
    void thread_zext_ln127_fu_339_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
