// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _is_crop_or_furrow_HH_
#define _is_crop_or_furrow_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "ip_accel_app_mul_Zio.h"

namespace ap_rtl {

struct is_crop_or_furrow : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<3> > lines_address0;
    sc_out< sc_logic > lines_ce0;
    sc_in< sc_lv<57> > lines_q0;
    sc_in< sc_lv<9> > px_read;
    sc_in< sc_lv<9> > py_read;
    sc_in< sc_lv<5> > crop_width_read;
    sc_out< sc_lv<2> > ap_return;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    is_crop_or_furrow(sc_module_name name);
    SC_HAS_PROCESS(is_crop_or_furrow);

    ~is_crop_or_furrow();

    sc_trace_file* mVcdFile;

    ip_accel_app_mul_Zio<1,4,16,24,40>* ip_accel_app_mul_Zio_U478;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<40> > zext_ln1118_fu_151_p1;
    sc_signal< sc_lv<40> > zext_ln1118_reg_414;
    sc_signal< sc_lv<32> > zext_ln388_fu_155_p1;
    sc_signal< sc_lv<32> > zext_ln388_reg_419;
    sc_signal< sc_lv<32> > zext_ln390_fu_159_p1;
    sc_signal< sc_lv<32> > zext_ln390_reg_425;
    sc_signal< sc_lv<1> > icmp_ln385_fu_168_p2;
    sc_signal< sc_lv<1> > icmp_ln385_reg_433;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<3> > i_fu_174_p2;
    sc_signal< sc_lv<3> > i_reg_437;
    sc_signal< sc_lv<2> > select_ln405_fu_201_p3;
    sc_signal< sc_lv<1> > trunc_ln386_fu_209_p1;
    sc_signal< sc_lv<1> > trunc_ln386_reg_452;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > tmp_reg_461;
    sc_signal< sc_lv<3> > i_0_reg_111;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<1> > or_ln390_fu_324_p2;
    sc_signal< sc_lv<33> > select_ln851_fu_291_p3;
    sc_signal< sc_lv<33> > ap_phi_mux_p_033_0_i_phi_fu_125_p4;
    sc_signal< sc_lv<1> > p_Result_s_fu_268_p3;
    sc_signal< sc_lv<33> > ret_V_fu_257_p4;
    sc_signal< sc_lv<2> > ap_phi_mux_UnifiedRetVal_phi_fu_134_p4;
    sc_signal< sc_lv<2> > UnifiedRetVal_reg_131;
    sc_signal< sc_lv<64> > zext_ln386_fu_180_p1;
    sc_signal< sc_lv<32> > most_right_2_fu_68;
    sc_signal< sc_lv<32> > most_right_3_fu_358_p3;
    sc_signal< sc_lv<1> > flag_first_0_load_load_fu_330_p1;
    sc_signal< sc_lv<32> > most_right_fu_309_p2;
    sc_signal< sc_lv<32> > tmp_most_left_fu_72;
    sc_signal< sc_lv<32> > select_ln397_fu_344_p3;
    sc_signal< sc_lv<32> > most_left_fu_304_p2;
    sc_signal< sc_lv<1> > flag_first_0_fu_76;
    sc_signal< sc_lv<16> > sext_ln378_fu_147_p1;
    sc_signal< sc_lv<1> > icmp_ln402_fu_185_p2;
    sc_signal< sc_lv<1> > icmp_ln402_1_fu_190_p2;
    sc_signal< sc_lv<1> > and_ln402_fu_195_p2;
    sc_signal< sc_lv<24> > lines_m_V_1_load_new_fu_213_p4;
    sc_signal< sc_lv<40> > grp_fu_386_p2;
    sc_signal< sc_lv<40> > rhs_V_fu_240_p3;
    sc_signal< sc_lv<41> > lhs_V_fu_237_p1;
    sc_signal< sc_lv<41> > sext_ln728_fu_247_p1;
    sc_signal< sc_lv<41> > ret_V_13_fu_251_p2;
    sc_signal< sc_lv<8> > trunc_ln851_fu_276_p1;
    sc_signal< sc_lv<1> > icmp_ln851_fu_279_p2;
    sc_signal< sc_lv<33> > ret_V_12_fu_285_p2;
    sc_signal< sc_lv<32> > trunc_ln555_fu_300_p1;
    sc_signal< sc_lv<1> > icmp_ln390_fu_314_p2;
    sc_signal< sc_lv<1> > icmp_ln390_1_fu_319_p2;
    sc_signal< sc_lv<1> > icmp_ln397_fu_338_p2;
    sc_signal< sc_lv<1> > icmp_ln398_fu_352_p2;
    sc_signal< sc_lv<16> > grp_fu_386_p0;
    sc_signal< sc_lv<2> > ap_return_preg;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    sc_signal< bool > ap_condition_268;
    sc_signal< bool > ap_condition_134;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<3> ap_const_lv3_6;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_19;
    static const sc_lv<32> ap_const_lv32_38;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_28;
    static const sc_lv<33> ap_const_lv33_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_and_ln402_fu_195_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state6();
    void thread_ap_condition_134();
    void thread_ap_condition_268();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_phi_mux_UnifiedRetVal_phi_fu_134_p4();
    void thread_ap_phi_mux_p_033_0_i_phi_fu_125_p4();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_flag_first_0_load_load_fu_330_p1();
    void thread_grp_fu_386_p0();
    void thread_i_fu_174_p2();
    void thread_icmp_ln385_fu_168_p2();
    void thread_icmp_ln390_1_fu_319_p2();
    void thread_icmp_ln390_fu_314_p2();
    void thread_icmp_ln397_fu_338_p2();
    void thread_icmp_ln398_fu_352_p2();
    void thread_icmp_ln402_1_fu_190_p2();
    void thread_icmp_ln402_fu_185_p2();
    void thread_icmp_ln851_fu_279_p2();
    void thread_lhs_V_fu_237_p1();
    void thread_lines_address0();
    void thread_lines_ce0();
    void thread_lines_m_V_1_load_new_fu_213_p4();
    void thread_most_left_fu_304_p2();
    void thread_most_right_3_fu_358_p3();
    void thread_most_right_fu_309_p2();
    void thread_or_ln390_fu_324_p2();
    void thread_p_Result_s_fu_268_p3();
    void thread_ret_V_12_fu_285_p2();
    void thread_ret_V_13_fu_251_p2();
    void thread_ret_V_fu_257_p4();
    void thread_rhs_V_fu_240_p3();
    void thread_select_ln397_fu_344_p3();
    void thread_select_ln405_fu_201_p3();
    void thread_select_ln851_fu_291_p3();
    void thread_sext_ln378_fu_147_p1();
    void thread_sext_ln728_fu_247_p1();
    void thread_trunc_ln386_fu_209_p1();
    void thread_trunc_ln555_fu_300_p1();
    void thread_trunc_ln851_fu_276_p1();
    void thread_zext_ln1118_fu_151_p1();
    void thread_zext_ln386_fu_180_p1();
    void thread_zext_ln388_fu_155_p1();
    void thread_zext_ln390_fu_159_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
