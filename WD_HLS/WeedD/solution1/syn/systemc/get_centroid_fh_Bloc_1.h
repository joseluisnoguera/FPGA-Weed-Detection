// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _get_centroid_fh_Bloc_1_HH_
#define _get_centroid_fh_Bloc_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct get_centroid_fh_Bloc_1 : public sc_module {
    // Port declarations 15
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > v_limit_dout;
    sc_in< sc_logic > v_limit_empty_n;
    sc_out< sc_logic > v_limit_read;
    sc_in< sc_lv<16> > h_limit_dout;
    sc_in< sc_logic > h_limit_empty_n;
    sc_out< sc_logic > h_limit_read;
    sc_out< sc_lv<16> > ap_return_0;
    sc_out< sc_lv<32> > ap_return_1;


    // Module declarations
    get_centroid_fh_Bloc_1(sc_module_name name);
    SC_HAS_PROCESS(get_centroid_fh_Bloc_1);

    ~get_centroid_fh_Bloc_1();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > v_limit_blk_n;
    sc_signal< sc_logic > h_limit_blk_n;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<7> > lshr_ln_fu_46_p4;
    sc_signal< sc_lv<15> > lshr_ln1_fu_60_p4;
    sc_signal< sc_lv<16> > zext_ln146_fu_56_p1;
    sc_signal< sc_lv<32> > zext_ln147_fu_70_p1;
    sc_signal< sc_lv<16> > ap_return_0_preg;
    sc_signal< sc_lv<32> > ap_return_1_preg;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_state1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<16> ap_const_lv16_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_h_limit_blk_n();
    void thread_h_limit_read();
    void thread_lshr_ln1_fu_60_p4();
    void thread_lshr_ln_fu_46_p4();
    void thread_v_limit_blk_n();
    void thread_v_limit_read();
    void thread_zext_ln146_fu_56_p1();
    void thread_zext_ln147_fu_70_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
