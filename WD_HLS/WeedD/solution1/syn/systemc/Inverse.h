// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Inverse_HH_
#define _Inverse_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Inverse_xf_divisiwdI.h"

namespace ap_rtl {

struct Inverse : public sc_module {
    // Port declarations 12
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_logic > ap_ce;
    sc_in< sc_lv<16> > x;
    sc_in< sc_lv<6> > M;
    sc_in< sc_lv<8> > N_read;
    sc_out< sc_lv<32> > ap_return_0;
    sc_out< sc_lv<8> > ap_return_1;


    // Module declarations
    Inverse(sc_module_name name);
    SC_HAS_PROCESS(Inverse);

    ~Inverse();

    sc_trace_file* mVcdFile;

    Inverse_xf_divisiwdI* xf_division_lut_U;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<12> > xf_division_lut_address0;
    sc_signal< sc_logic > xf_division_lut_ce0;
    sc_signal< sc_lv<16> > xf_division_lut_q0;
    sc_signal< sc_lv<1> > icmp_ln242_fu_257_p2;
    sc_signal< sc_lv<1> > icmp_ln242_reg_591;
    sc_signal< sc_lv<6> > sub_ln307_fu_560_p2;
    sc_signal< sc_lv<6> > sub_ln307_reg_639;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_lv<3> > ap_phi_mux_pos_6_phi_fu_122_p26;
    sc_signal< sc_lv<3> > ap_phi_reg_pp0_iter0_pos_6_reg_119;
    sc_signal< sc_lv<1> > icmp_ln246_fu_273_p2;
    sc_signal< sc_lv<1> > tmp_62_fu_279_p3;
    sc_signal< sc_lv<1> > icmp_ln253_fu_297_p2;
    sc_signal< sc_lv<1> > icmp_ln259_fu_328_p2;
    sc_signal< sc_lv<1> > tmp_63_fu_334_p3;
    sc_signal< sc_lv<1> > icmp_ln266_fu_352_p2;
    sc_signal< sc_lv<1> > icmp_ln272_fu_383_p2;
    sc_signal< sc_lv<1> > tmp_66_fu_389_p3;
    sc_signal< sc_lv<1> > icmp_ln279_fu_407_p2;
    sc_signal< sc_lv<1> > tmp_65_fu_438_p3;
    sc_signal< sc_lv<1> > icmp_ln292_fu_456_p2;
    sc_signal< sc_lv<1> > icmp_ln292_1_fu_472_p2;
    sc_signal< sc_lv<3> > select_ln292_fu_484_p3;
    sc_signal< sc_lv<3> > select_ln279_fu_429_p3;
    sc_signal< sc_lv<3> > select_ln266_fu_374_p3;
    sc_signal< sc_lv<3> > select_ln253_fu_319_p3;
    sc_signal< sc_lv<4> > ap_phi_mux_block_2_phi_fu_162_p26;
    sc_signal< sc_lv<4> > ap_phi_reg_pp0_iter0_block_2_reg_159;
    sc_signal< sc_lv<15> > ap_phi_mux_index_0_in_in_phi_fu_206_p4;
    sc_signal< sc_lv<15> > shl_ln302_fu_532_p2;
    sc_signal< sc_lv<15> > ap_phi_reg_pp0_iter0_index_0_in_in_reg_203;
    sc_signal< sc_lv<1> > icmp_ln301_fu_511_p2;
    sc_signal< sc_lv<15> > trunc_ln301_fu_517_p1;
    sc_signal< sc_lv<8> > ap_phi_mux_phi_ln311_phi_fu_215_p4;
    sc_signal< sc_lv<8> > zext_ln307_fu_566_p1;
    sc_signal< sc_lv<8> > ap_phi_reg_pp0_iter1_phi_ln311_reg_212;
    sc_signal< sc_lv<8> > ap_phi_reg_pp0_iter0_phi_ln311_reg_212;
    sc_signal< sc_lv<16> > ap_phi_mux_p_0_in_phi_fu_225_p4;
    sc_signal< sc_lv<16> > ap_phi_reg_pp0_iter1_p_0_in_reg_221;
    sc_signal< sc_lv<16> > ap_phi_reg_pp0_iter0_p_0_in_reg_221;
    sc_signal< sc_lv<64> > zext_ln306_fu_549_p1;
    sc_signal< sc_lv<4> > tmp_fu_263_p4;
    sc_signal< sc_lv<2> > tmp_64_fu_287_p4;
    sc_signal< sc_lv<3> > tmp_68_fu_303_p4;
    sc_signal< sc_lv<1> > icmp_ln253_1_fu_313_p2;
    sc_signal< sc_lv<4> > tmpx_fu_233_p4;
    sc_signal< sc_lv<2> > tmp_67_fu_342_p4;
    sc_signal< sc_lv<3> > tmp_71_fu_358_p4;
    sc_signal< sc_lv<1> > icmp_ln266_1_fu_368_p2;
    sc_signal< sc_lv<4> > tmpx_1_fu_243_p4;
    sc_signal< sc_lv<2> > tmp_70_fu_397_p4;
    sc_signal< sc_lv<3> > tmp_73_fu_413_p4;
    sc_signal< sc_lv<1> > icmp_ln279_1_fu_423_p2;
    sc_signal< sc_lv<2> > tmp_69_fu_446_p4;
    sc_signal< sc_lv<3> > tmp_72_fu_462_p4;
    sc_signal< sc_lv<4> > tmpx_2_fu_253_p1;
    sc_signal< sc_lv<1> > icmp_ln292_2_fu_478_p2;
    sc_signal< sc_lv<5> > zext_ln299_1_fu_497_p1;
    sc_signal< sc_lv<5> > zext_ln299_fu_493_p1;
    sc_signal< sc_lv<5> > B_L_fu_501_p2;
    sc_signal< sc_lv<5> > add_ln302_fu_522_p2;
    sc_signal< sc_lv<15> > zext_ln302_fu_528_p1;
    sc_signal< sc_lv<11> > index_fu_539_p4;
    sc_signal< sc_lv<6> > add_ln307_fu_554_p2;
    sc_signal< sc_lv<6> > zext_ln299_2_fu_507_p1;
    sc_signal< sc_lv<32> > val_fu_570_p1;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to0;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< bool > ap_condition_48;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<3> ap_const_lv3_2;
    static const sc_lv<3> ap_const_lv3_3;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_4;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_C;
    static const sc_lv<16> ap_const_lv16_FFFF;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<5> ap_const_lv5_1F;
    static const sc_lv<6> ap_const_lv6_10;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_B_L_fu_501_p2();
    void thread_add_ln302_fu_522_p2();
    void thread_add_ln307_fu_554_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_condition_48();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to0();
    void thread_ap_phi_mux_block_2_phi_fu_162_p26();
    void thread_ap_phi_mux_index_0_in_in_phi_fu_206_p4();
    void thread_ap_phi_mux_p_0_in_phi_fu_225_p4();
    void thread_ap_phi_mux_phi_ln311_phi_fu_215_p4();
    void thread_ap_phi_mux_pos_6_phi_fu_122_p26();
    void thread_ap_phi_reg_pp0_iter0_block_2_reg_159();
    void thread_ap_phi_reg_pp0_iter0_index_0_in_in_reg_203();
    void thread_ap_phi_reg_pp0_iter0_p_0_in_reg_221();
    void thread_ap_phi_reg_pp0_iter0_phi_ln311_reg_212();
    void thread_ap_phi_reg_pp0_iter0_pos_6_reg_119();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_icmp_ln242_fu_257_p2();
    void thread_icmp_ln246_fu_273_p2();
    void thread_icmp_ln253_1_fu_313_p2();
    void thread_icmp_ln253_fu_297_p2();
    void thread_icmp_ln259_fu_328_p2();
    void thread_icmp_ln266_1_fu_368_p2();
    void thread_icmp_ln266_fu_352_p2();
    void thread_icmp_ln272_fu_383_p2();
    void thread_icmp_ln279_1_fu_423_p2();
    void thread_icmp_ln279_fu_407_p2();
    void thread_icmp_ln292_1_fu_472_p2();
    void thread_icmp_ln292_2_fu_478_p2();
    void thread_icmp_ln292_fu_456_p2();
    void thread_icmp_ln301_fu_511_p2();
    void thread_index_fu_539_p4();
    void thread_select_ln253_fu_319_p3();
    void thread_select_ln266_fu_374_p3();
    void thread_select_ln279_fu_429_p3();
    void thread_select_ln292_fu_484_p3();
    void thread_shl_ln302_fu_532_p2();
    void thread_sub_ln307_fu_560_p2();
    void thread_tmp_62_fu_279_p3();
    void thread_tmp_63_fu_334_p3();
    void thread_tmp_64_fu_287_p4();
    void thread_tmp_65_fu_438_p3();
    void thread_tmp_66_fu_389_p3();
    void thread_tmp_67_fu_342_p4();
    void thread_tmp_68_fu_303_p4();
    void thread_tmp_69_fu_446_p4();
    void thread_tmp_70_fu_397_p4();
    void thread_tmp_71_fu_358_p4();
    void thread_tmp_72_fu_462_p4();
    void thread_tmp_73_fu_413_p4();
    void thread_tmp_fu_263_p4();
    void thread_tmpx_1_fu_243_p4();
    void thread_tmpx_2_fu_253_p1();
    void thread_tmpx_fu_233_p4();
    void thread_trunc_ln301_fu_517_p1();
    void thread_val_fu_570_p1();
    void thread_xf_division_lut_address0();
    void thread_xf_division_lut_ce0();
    void thread_zext_ln299_1_fu_497_p1();
    void thread_zext_ln299_2_fu_507_p1();
    void thread_zext_ln299_fu_493_p1();
    void thread_zext_ln302_fu_528_p1();
    void thread_zext_ln306_fu_549_p1();
    void thread_zext_ln307_fu_566_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
