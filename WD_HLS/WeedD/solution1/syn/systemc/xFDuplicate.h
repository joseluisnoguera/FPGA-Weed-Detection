// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _xFDuplicate_HH_
#define _xFDuplicate_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct xFDuplicate : public sc_module {
    // Port declarations 22
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<24> > p_src_mat_V_V_dout;
    sc_in< sc_logic > p_src_mat_V_V_empty_n;
    sc_out< sc_logic > p_src_mat_V_V_read;
    sc_out< sc_lv<24> > p_dst1_mat_V_V_din;
    sc_in< sc_logic > p_dst1_mat_V_V_full_n;
    sc_out< sc_logic > p_dst1_mat_V_V_write;
    sc_out< sc_lv<24> > p_dst2_mat_V_V_din;
    sc_in< sc_logic > p_dst2_mat_V_V_full_n;
    sc_out< sc_logic > p_dst2_mat_V_V_write;
    sc_in< sc_lv<10> > p_src_cols_load10_loc_dout;
    sc_in< sc_logic > p_src_cols_load10_loc_empty_n;
    sc_out< sc_logic > p_src_cols_load10_loc_read;


    // Module declarations
    xFDuplicate(sc_module_name name);
    SC_HAS_PROCESS(xFDuplicate);

    ~xFDuplicate();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > p_src_mat_V_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln57_reg_151;
    sc_signal< sc_logic > p_dst1_mat_V_V_blk_n;
    sc_signal< sc_logic > p_dst2_mat_V_V_blk_n;
    sc_signal< sc_logic > p_src_cols_load10_loc_blk_n;
    sc_signal< sc_lv<14> > t_V_reg_99;
    sc_signal< sc_lv<14> > empty_fu_110_p1;
    sc_signal< sc_lv<14> > empty_reg_137;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<1> > icmp_ln887_fu_114_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<8> > row_V_fu_120_p2;
    sc_signal< sc_lv<8> > row_V_reg_146;
    sc_signal< sc_lv<1> > icmp_ln57_fu_126_p2;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<14> > add_ln887_fu_131_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_lv<8> > t_V_9_reg_88;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_state5;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<14> ap_const_lv14_0;
    static const sc_lv<8> ap_const_lv8_B4;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<14> ap_const_lv14_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln887_fu_131_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_empty_fu_110_p1();
    void thread_icmp_ln57_fu_126_p2();
    void thread_icmp_ln887_fu_114_p2();
    void thread_internal_ap_ready();
    void thread_p_dst1_mat_V_V_blk_n();
    void thread_p_dst1_mat_V_V_din();
    void thread_p_dst1_mat_V_V_write();
    void thread_p_dst2_mat_V_V_blk_n();
    void thread_p_dst2_mat_V_V_din();
    void thread_p_dst2_mat_V_V_write();
    void thread_p_src_cols_load10_loc_blk_n();
    void thread_p_src_cols_load10_loc_read();
    void thread_p_src_mat_V_V_blk_n();
    void thread_p_src_mat_V_V_read();
    void thread_real_start();
    void thread_row_V_fu_120_p2();
    void thread_start_out();
    void thread_start_write();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
