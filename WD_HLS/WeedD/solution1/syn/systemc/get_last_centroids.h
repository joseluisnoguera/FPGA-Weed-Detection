// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _get_last_centroids_HH_
#define _get_last_centroids_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "get_last_centroids_L.h"

namespace ap_rtl {

struct get_last_centroids : public sc_module {
    // Port declarations 33
    sc_out< sc_lv<7> > centroids_address0;
    sc_out< sc_logic > centroids_ce0;
    sc_out< sc_lv<48> > centroids_d0;
    sc_in< sc_lv<48> > centroids_q0;
    sc_out< sc_logic > centroids_we0;
    sc_out< sc_lv<7> > centroids_address1;
    sc_out< sc_logic > centroids_ce1;
    sc_out< sc_lv<48> > centroids_d1;
    sc_in< sc_lv<48> > centroids_q1;
    sc_out< sc_logic > centroids_we1;
    sc_in< sc_lv<3> > selected_line;
    sc_out< sc_lv<2> > last_c_2_address0;
    sc_out< sc_logic > last_c_2_ce0;
    sc_out< sc_lv<48> > last_c_2_d0;
    sc_in< sc_lv<48> > last_c_2_q0;
    sc_out< sc_logic > last_c_2_we0;
    sc_out< sc_lv<2> > last_c_2_address1;
    sc_out< sc_logic > last_c_2_ce1;
    sc_out< sc_lv<48> > last_c_2_d1;
    sc_in< sc_lv<48> > last_c_2_q1;
    sc_out< sc_logic > last_c_2_we1;
    sc_in< sc_lv<4> > seg_index_start;
    sc_in< sc_lv<4> > size;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > size_ap_vld;
    sc_in< sc_logic > seg_index_start_ap_vld;
    sc_in< sc_logic > selected_line_ap_vld;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_idle;
    sc_in< sc_logic > ap_continue;


    // Module declarations
    get_last_centroids(sc_module_name name);
    SC_HAS_PROCESS(get_last_centroids);

    ~get_last_centroids();

    sc_trace_file* mVcdFile;

    get_last_centroids_L* get_last_centroids_L_U0;
    sc_signal< sc_logic > get_last_centroids_L_U0_ap_start;
    sc_signal< sc_logic > get_last_centroids_L_U0_ap_done;
    sc_signal< sc_logic > get_last_centroids_L_U0_ap_continue;
    sc_signal< sc_logic > get_last_centroids_L_U0_ap_idle;
    sc_signal< sc_logic > get_last_centroids_L_U0_ap_ready;
    sc_signal< sc_lv<7> > get_last_centroids_L_U0_centroids_address0;
    sc_signal< sc_logic > get_last_centroids_L_U0_centroids_ce0;
    sc_signal< sc_lv<2> > get_last_centroids_L_U0_last_c_2_address0;
    sc_signal< sc_logic > get_last_centroids_L_U0_last_c_2_ce0;
    sc_signal< sc_logic > get_last_centroids_L_U0_last_c_2_we0;
    sc_signal< sc_lv<48> > get_last_centroids_L_U0_last_c_2_d0;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_logic > get_last_centroids_L_U0_start_full_n;
    sc_signal< sc_logic > get_last_centroids_L_U0_start_write;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<48> ap_const_lv48_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_logic ap_const_logic_1;
    // Thread declarations
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_centroids_address0();
    void thread_centroids_address1();
    void thread_centroids_ce0();
    void thread_centroids_ce1();
    void thread_centroids_d0();
    void thread_centroids_d1();
    void thread_centroids_we0();
    void thread_centroids_we1();
    void thread_get_last_centroids_L_U0_ap_continue();
    void thread_get_last_centroids_L_U0_ap_start();
    void thread_get_last_centroids_L_U0_start_full_n();
    void thread_get_last_centroids_L_U0_start_write();
    void thread_last_c_2_address0();
    void thread_last_c_2_address1();
    void thread_last_c_2_ce0();
    void thread_last_c_2_ce1();
    void thread_last_c_2_d0();
    void thread_last_c_2_d1();
    void thread_last_c_2_we0();
    void thread_last_c_2_we1();
};

}

using namespace ap_rtl;

#endif
