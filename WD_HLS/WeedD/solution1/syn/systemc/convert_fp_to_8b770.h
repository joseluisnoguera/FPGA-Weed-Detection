// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _convert_fp_to_8b770_HH_
#define _convert_fp_to_8b770_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "ip_accel_app_sdivrcU.h"

namespace ap_rtl {

struct convert_fp_to_8b770 : public sc_module {
    // Port declarations 17
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<28> > min_value_V_c17_dout;
    sc_in< sc_logic > min_value_V_c17_empty_n;
    sc_out< sc_logic > min_value_V_c17_read;
    sc_in< sc_lv<24> > sub_ln703_cast_loc_c;
    sc_in< sc_lv<32> > veg_temp_data_V_dout;
    sc_in< sc_logic > veg_temp_data_V_empty_n;
    sc_out< sc_logic > veg_temp_data_V_read;
    sc_out< sc_lv<8> > img_out_data_V_din;
    sc_in< sc_logic > img_out_data_V_full_n;
    sc_out< sc_logic > img_out_data_V_write;


    // Module declarations
    convert_fp_to_8b770(sc_module_name name);
    SC_HAS_PROCESS(convert_fp_to_8b770);

    ~convert_fp_to_8b770();

    sc_trace_file* mVcdFile;

    ip_accel_app_sdivrcU<1,22,18,24,24>* ip_accel_app_sdivrcU_U203;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<24> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > min_value_V_c17_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state22;
    sc_signal< sc_logic > veg_temp_data_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln59_reg_232;
    sc_signal< sc_logic > img_out_data_V_blk_n;
    sc_signal< sc_lv<16> > i_0_i_i_i_reg_97;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<65> > sext_ln59_fu_120_p1;
    sc_signal< sc_lv<65> > sext_ln59_reg_222;
    sc_signal< sc_lv<42> > sext_ln703_fu_124_p1;
    sc_signal< sc_lv<42> > sext_ln703_reg_227;
    sc_signal< sc_lv<1> > icmp_ln59_fu_128_p2;
    sc_signal< bool > ap_block_state23_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state24_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<16> > i_fu_134_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state23;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<18> > grp_fu_108_p0;
    sc_signal< sc_lv<24> > grp_fu_108_p2;
    sc_signal< sc_lv<24> > scalar_V_fu_114_p2;
    sc_signal< sc_lv<40> > p_Val2_36_fu_140_p3;
    sc_signal< sc_lv<42> > zext_ln703_fu_148_p1;
    sc_signal< sc_lv<42> > ret_V_fu_152_p2;
    sc_signal< sc_lv<42> > r_V_fu_161_p0;
    sc_signal< sc_lv<24> > r_V_fu_161_p1;
    sc_signal< sc_lv<65> > r_V_fu_161_p2;
    sc_signal< sc_lv<16> > trunc_ln851_fu_174_p1;
    sc_signal< sc_lv<8> > trunc_ln23_i_fu_184_p4;
    sc_signal< sc_lv<1> > icmp_ln851_fu_178_p2;
    sc_signal< sc_lv<8> > add_ln851_fu_194_p2;
    sc_signal< sc_lv<1> > p_Result_s_fu_166_p3;
    sc_signal< sc_lv<8> > select_ln851_fu_200_p3;
    sc_signal< sc_logic > grp_fu_108_ap_start;
    sc_signal< sc_logic > grp_fu_108_ap_done;
    sc_signal< sc_logic > grp_fu_108_ce;
    sc_signal< sc_logic > ap_CS_fsm_state25;
    sc_signal< sc_lv<24> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<24> ap_ST_fsm_state1;
    static const sc_lv<24> ap_ST_fsm_state2;
    static const sc_lv<24> ap_ST_fsm_state3;
    static const sc_lv<24> ap_ST_fsm_state4;
    static const sc_lv<24> ap_ST_fsm_state5;
    static const sc_lv<24> ap_ST_fsm_state6;
    static const sc_lv<24> ap_ST_fsm_state7;
    static const sc_lv<24> ap_ST_fsm_state8;
    static const sc_lv<24> ap_ST_fsm_state9;
    static const sc_lv<24> ap_ST_fsm_state10;
    static const sc_lv<24> ap_ST_fsm_state11;
    static const sc_lv<24> ap_ST_fsm_state12;
    static const sc_lv<24> ap_ST_fsm_state13;
    static const sc_lv<24> ap_ST_fsm_state14;
    static const sc_lv<24> ap_ST_fsm_state15;
    static const sc_lv<24> ap_ST_fsm_state16;
    static const sc_lv<24> ap_ST_fsm_state17;
    static const sc_lv<24> ap_ST_fsm_state18;
    static const sc_lv<24> ap_ST_fsm_state19;
    static const sc_lv<24> ap_ST_fsm_state20;
    static const sc_lv<24> ap_ST_fsm_state21;
    static const sc_lv<24> ap_ST_fsm_state22;
    static const sc_lv<24> ap_ST_fsm_pp0_stage0;
    static const sc_lv<24> ap_ST_fsm_state25;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_15;
    static const sc_lv<32> ap_const_lv32_16;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<24> ap_const_lv24_FF00;
    static const sc_lv<24> ap_const_lv24_8;
    static const sc_lv<16> ap_const_lv16_E100;
    static const sc_lv<16> ap_const_lv16_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_40;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<8> ap_const_lv8_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln851_fu_194_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state22();
    void thread_ap_CS_fsm_state25();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state23_pp0_stage0_iter0();
    void thread_ap_block_state24_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state23();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_grp_fu_108_ap_start();
    void thread_grp_fu_108_ce();
    void thread_grp_fu_108_p0();
    void thread_i_fu_134_p2();
    void thread_icmp_ln59_fu_128_p2();
    void thread_icmp_ln851_fu_178_p2();
    void thread_img_out_data_V_blk_n();
    void thread_img_out_data_V_din();
    void thread_img_out_data_V_write();
    void thread_min_value_V_c17_blk_n();
    void thread_min_value_V_c17_read();
    void thread_p_Result_s_fu_166_p3();
    void thread_p_Val2_36_fu_140_p3();
    void thread_r_V_fu_161_p0();
    void thread_r_V_fu_161_p1();
    void thread_r_V_fu_161_p2();
    void thread_ret_V_fu_152_p2();
    void thread_scalar_V_fu_114_p2();
    void thread_select_ln851_fu_200_p3();
    void thread_sext_ln59_fu_120_p1();
    void thread_sext_ln703_fu_124_p1();
    void thread_trunc_ln23_i_fu_184_p4();
    void thread_trunc_ln851_fu_174_p1();
    void thread_veg_temp_data_V_blk_n();
    void thread_veg_temp_data_V_read();
    void thread_zext_ln703_fu_148_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
