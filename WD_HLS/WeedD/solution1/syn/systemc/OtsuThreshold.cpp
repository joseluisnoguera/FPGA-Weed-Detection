// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "OtsuThreshold.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic OtsuThreshold::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic OtsuThreshold::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> OtsuThreshold::ap_ST_fsm_state1 = "1";
const sc_lv<4> OtsuThreshold::ap_ST_fsm_state2 = "10";
const sc_lv<4> OtsuThreshold::ap_ST_fsm_state3 = "100";
const sc_lv<4> OtsuThreshold::ap_ST_fsm_state4 = "1000";
const sc_lv<32> OtsuThreshold::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> OtsuThreshold::ap_const_lv32_2 = "10";
const sc_lv<32> OtsuThreshold::ap_const_lv32_3 = "11";
const sc_lv<32> OtsuThreshold::ap_const_lv32_1 = "1";
const sc_lv<8> OtsuThreshold::ap_const_lv8_0 = "00000000";
const bool OtsuThreshold::ap_const_boolean_1 = true;

OtsuThreshold::OtsuThreshold(sc_module_name name) : sc_module(name), mVcdFile(0) {
    hist_U = new xFHistogramKerneludo("hist_U");
    hist_U->clk(ap_clk);
    hist_U->reset(ap_rst);
    hist_U->address0(hist_address0);
    hist_U->ce0(hist_ce0);
    hist_U->we0(hist_we0);
    hist_U->d0(grp_xFHistogramKernel_fu_35_hist_array_d0);
    hist_U->q0(hist_q0);
    grp_xfOtsuKernel_fu_28 = new xfOtsuKernel("grp_xfOtsuKernel_fu_28");
    grp_xfOtsuKernel_fu_28->ap_clk(ap_clk);
    grp_xfOtsuKernel_fu_28->ap_rst(ap_rst);
    grp_xfOtsuKernel_fu_28->ap_start(grp_xfOtsuKernel_fu_28_ap_start);
    grp_xfOtsuKernel_fu_28->ap_done(grp_xfOtsuKernel_fu_28_ap_done);
    grp_xfOtsuKernel_fu_28->ap_idle(grp_xfOtsuKernel_fu_28_ap_idle);
    grp_xfOtsuKernel_fu_28->ap_ready(grp_xfOtsuKernel_fu_28_ap_ready);
    grp_xfOtsuKernel_fu_28->p_hist_address0(grp_xfOtsuKernel_fu_28_p_hist_address0);
    grp_xfOtsuKernel_fu_28->p_hist_ce0(grp_xfOtsuKernel_fu_28_p_hist_ce0);
    grp_xfOtsuKernel_fu_28->p_hist_q0(hist_q0);
    grp_xfOtsuKernel_fu_28->ap_return(grp_xfOtsuKernel_fu_28_ap_return);
    grp_xFHistogramKernel_fu_35 = new xFHistogramKernel("grp_xFHistogramKernel_fu_35");
    grp_xFHistogramKernel_fu_35->ap_clk(ap_clk);
    grp_xFHistogramKernel_fu_35->ap_rst(ap_rst);
    grp_xFHistogramKernel_fu_35->ap_start(grp_xFHistogramKernel_fu_35_ap_start);
    grp_xFHistogramKernel_fu_35->ap_done(grp_xFHistogramKernel_fu_35_ap_done);
    grp_xFHistogramKernel_fu_35->ap_idle(grp_xFHistogramKernel_fu_35_ap_idle);
    grp_xFHistogramKernel_fu_35->ap_ready(grp_xFHistogramKernel_fu_35_ap_ready);
    grp_xFHistogramKernel_fu_35->p_src_mat_data_V_dout(p_src_mat_data_V_dout);
    grp_xFHistogramKernel_fu_35->p_src_mat_data_V_empty_n(p_src_mat_data_V_empty_n);
    grp_xFHistogramKernel_fu_35->p_src_mat_data_V_read(grp_xFHistogramKernel_fu_35_p_src_mat_data_V_read);
    grp_xFHistogramKernel_fu_35->hist_array_address0(grp_xFHistogramKernel_fu_35_hist_array_address0);
    grp_xFHistogramKernel_fu_35->hist_array_ce0(grp_xFHistogramKernel_fu_35_hist_array_ce0);
    grp_xFHistogramKernel_fu_35->hist_array_we0(grp_xFHistogramKernel_fu_35_hist_array_we0);
    grp_xFHistogramKernel_fu_35->hist_array_d0(grp_xFHistogramKernel_fu_35_hist_array_d0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_xfOtsuKernel_fu_28_ap_done );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( grp_xfOtsuKernel_fu_28_ap_done );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_return);
    sensitive << ( grp_xfOtsuKernel_fu_28_ap_done );
    sensitive << ( grp_xfOtsuKernel_fu_28_ap_return );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_return_preg );

    SC_METHOD(thread_grp_xFHistogramKernel_fu_35_ap_start);
    sensitive << ( grp_xFHistogramKernel_fu_35_ap_start_reg );

    SC_METHOD(thread_grp_xfOtsuKernel_fu_28_ap_start);
    sensitive << ( grp_xfOtsuKernel_fu_28_ap_start_reg );

    SC_METHOD(thread_hist_address0);
    sensitive << ( grp_xfOtsuKernel_fu_28_p_hist_address0 );
    sensitive << ( grp_xFHistogramKernel_fu_35_hist_array_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_hist_ce0);
    sensitive << ( grp_xfOtsuKernel_fu_28_p_hist_ce0 );
    sensitive << ( grp_xFHistogramKernel_fu_35_hist_array_ce0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_hist_we0);
    sensitive << ( grp_xFHistogramKernel_fu_35_hist_array_we0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_p_src_mat_data_V_read);
    sensitive << ( grp_xFHistogramKernel_fu_35_p_src_mat_data_V_read );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_xfOtsuKernel_fu_28_ap_done );
    sensitive << ( grp_xFHistogramKernel_fu_35_ap_done );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );

    ap_CS_fsm = "0001";
    grp_xfOtsuKernel_fu_28_ap_start_reg = SC_LOGIC_0;
    grp_xFHistogramKernel_fu_35_ap_start_reg = SC_LOGIC_0;
    ap_return_preg = "00000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "OtsuThreshold_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, p_src_mat_data_V_dout, "(port)p_src_mat_data_V_dout");
    sc_trace(mVcdFile, p_src_mat_data_V_empty_n, "(port)p_src_mat_data_V_empty_n");
    sc_trace(mVcdFile, p_src_mat_data_V_read, "(port)p_src_mat_data_V_read");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, hist_address0, "hist_address0");
    sc_trace(mVcdFile, hist_ce0, "hist_ce0");
    sc_trace(mVcdFile, hist_we0, "hist_we0");
    sc_trace(mVcdFile, hist_q0, "hist_q0");
    sc_trace(mVcdFile, grp_xfOtsuKernel_fu_28_ap_start, "grp_xfOtsuKernel_fu_28_ap_start");
    sc_trace(mVcdFile, grp_xfOtsuKernel_fu_28_ap_done, "grp_xfOtsuKernel_fu_28_ap_done");
    sc_trace(mVcdFile, grp_xfOtsuKernel_fu_28_ap_idle, "grp_xfOtsuKernel_fu_28_ap_idle");
    sc_trace(mVcdFile, grp_xfOtsuKernel_fu_28_ap_ready, "grp_xfOtsuKernel_fu_28_ap_ready");
    sc_trace(mVcdFile, grp_xfOtsuKernel_fu_28_p_hist_address0, "grp_xfOtsuKernel_fu_28_p_hist_address0");
    sc_trace(mVcdFile, grp_xfOtsuKernel_fu_28_p_hist_ce0, "grp_xfOtsuKernel_fu_28_p_hist_ce0");
    sc_trace(mVcdFile, grp_xfOtsuKernel_fu_28_ap_return, "grp_xfOtsuKernel_fu_28_ap_return");
    sc_trace(mVcdFile, grp_xFHistogramKernel_fu_35_ap_start, "grp_xFHistogramKernel_fu_35_ap_start");
    sc_trace(mVcdFile, grp_xFHistogramKernel_fu_35_ap_done, "grp_xFHistogramKernel_fu_35_ap_done");
    sc_trace(mVcdFile, grp_xFHistogramKernel_fu_35_ap_idle, "grp_xFHistogramKernel_fu_35_ap_idle");
    sc_trace(mVcdFile, grp_xFHistogramKernel_fu_35_ap_ready, "grp_xFHistogramKernel_fu_35_ap_ready");
    sc_trace(mVcdFile, grp_xFHistogramKernel_fu_35_p_src_mat_data_V_read, "grp_xFHistogramKernel_fu_35_p_src_mat_data_V_read");
    sc_trace(mVcdFile, grp_xFHistogramKernel_fu_35_hist_array_address0, "grp_xFHistogramKernel_fu_35_hist_array_address0");
    sc_trace(mVcdFile, grp_xFHistogramKernel_fu_35_hist_array_ce0, "grp_xFHistogramKernel_fu_35_hist_array_ce0");
    sc_trace(mVcdFile, grp_xFHistogramKernel_fu_35_hist_array_we0, "grp_xFHistogramKernel_fu_35_hist_array_we0");
    sc_trace(mVcdFile, grp_xFHistogramKernel_fu_35_hist_array_d0, "grp_xFHistogramKernel_fu_35_hist_array_d0");
    sc_trace(mVcdFile, grp_xfOtsuKernel_fu_28_ap_start_reg, "grp_xfOtsuKernel_fu_28_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_xFHistogramKernel_fu_35_ap_start_reg, "grp_xFHistogramKernel_fu_35_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_return_preg, "ap_return_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

OtsuThreshold::~OtsuThreshold() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete hist_U;
    delete grp_xfOtsuKernel_fu_28;
    delete grp_xFHistogramKernel_fu_35;
}

void OtsuThreshold::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_preg = ap_const_lv8_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
             esl_seteq<1,1,1>(grp_xfOtsuKernel_fu_28_ap_done.read(), ap_const_logic_1))) {
            ap_return_preg = grp_xfOtsuKernel_fu_28_ap_return.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_xFHistogramKernel_fu_35_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            grp_xFHistogramKernel_fu_35_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_xFHistogramKernel_fu_35_ap_ready.read())) {
            grp_xFHistogramKernel_fu_35_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_xfOtsuKernel_fu_28_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            grp_xfOtsuKernel_fu_28_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_xfOtsuKernel_fu_28_ap_ready.read())) {
            grp_xfOtsuKernel_fu_28_ap_start_reg = ap_const_logic_0;
        }
    }
}

void OtsuThreshold::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void OtsuThreshold::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void OtsuThreshold::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void OtsuThreshold::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void OtsuThreshold::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(grp_xfOtsuKernel_fu_28_ap_done.read(), ap_const_logic_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void OtsuThreshold::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void OtsuThreshold::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(grp_xfOtsuKernel_fu_28_ap_done.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void OtsuThreshold::thread_ap_return() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(grp_xfOtsuKernel_fu_28_ap_done.read(), ap_const_logic_1))) {
        ap_return = grp_xfOtsuKernel_fu_28_ap_return.read();
    } else {
        ap_return = ap_return_preg.read();
    }
}

void OtsuThreshold::thread_grp_xFHistogramKernel_fu_35_ap_start() {
    grp_xFHistogramKernel_fu_35_ap_start = grp_xFHistogramKernel_fu_35_ap_start_reg.read();
}

void OtsuThreshold::thread_grp_xfOtsuKernel_fu_28_ap_start() {
    grp_xfOtsuKernel_fu_28_ap_start = grp_xfOtsuKernel_fu_28_ap_start_reg.read();
}

void OtsuThreshold::thread_hist_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        hist_address0 = grp_xFHistogramKernel_fu_35_hist_array_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        hist_address0 = grp_xfOtsuKernel_fu_28_p_hist_address0.read();
    } else {
        hist_address0 = "XXXXXXXX";
    }
}

void OtsuThreshold::thread_hist_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        hist_ce0 = grp_xFHistogramKernel_fu_35_hist_array_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        hist_ce0 = grp_xfOtsuKernel_fu_28_p_hist_ce0.read();
    } else {
        hist_ce0 = ap_const_logic_0;
    }
}

void OtsuThreshold::thread_hist_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        hist_we0 = grp_xFHistogramKernel_fu_35_hist_array_we0.read();
    } else {
        hist_we0 = ap_const_logic_0;
    }
}

void OtsuThreshold::thread_p_src_mat_data_V_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        p_src_mat_data_V_read = grp_xFHistogramKernel_fu_35_p_src_mat_data_V_read.read();
    } else {
        p_src_mat_data_V_read = ap_const_logic_0;
    }
}

void OtsuThreshold::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(grp_xFHistogramKernel_fu_35_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(grp_xfOtsuKernel_fu_28_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<4>) ("XXXX");
            break;
    }
}

}

