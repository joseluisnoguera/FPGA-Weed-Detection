// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _get_centroid_fh_Loop_HH_
#define _get_centroid_fh_Loop_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct get_centroid_fh_Loop : public sc_module {
    // Port declarations 19
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<16> > h_limit_dout;
    sc_in< sc_logic > h_limit_empty_n;
    sc_out< sc_logic > h_limit_read;
    sc_in< sc_lv<8> > v_limit_dout;
    sc_in< sc_logic > v_limit_empty_n;
    sc_out< sc_logic > v_limit_read;
    sc_out< sc_lv<10> > micro_roi_data_V_address0;
    sc_out< sc_logic > micro_roi_data_V_ce0;
    sc_in< sc_lv<8> > micro_roi_data_V_q0;
    sc_out< sc_lv<32> > ap_return_0;
    sc_out< sc_lv<32> > ap_return_1;
    sc_out< sc_lv<32> > ap_return_2;


    // Module declarations
    get_centroid_fh_Loop(sc_module_name name);
    SC_HAS_PROCESS(get_centroid_fh_Loop);

    ~get_centroid_fh_Loop();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > h_limit_blk_n;
    sc_signal< sc_logic > v_limit_blk_n;
    sc_signal< sc_lv<16> > h_limit_read_reg_350;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<8> > v_limit_read_reg_355;
    sc_signal< sc_lv<6> > h_fu_152_p2;
    sc_signal< sc_lv<6> > h_reg_363;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > zext_ln150_fu_158_p1;
    sc_signal< sc_lv<32> > zext_ln150_reg_368;
    sc_signal< sc_lv<1> > icmp_ln148_fu_146_p2;
    sc_signal< sc_lv<10> > zext_ln150_1_fu_162_p1;
    sc_signal< sc_lv<10> > zext_ln150_1_reg_373;
    sc_signal< sc_lv<1> > icmp_ln150_fu_170_p2;
    sc_signal< sc_lv<1> > icmp_ln150_reg_378;
    sc_signal< sc_lv<5> > v_fu_203_p2;
    sc_signal< sc_lv<5> > v_reg_386;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > and_ln150_fu_214_p2;
    sc_signal< sc_lv<1> > and_ln150_reg_391;
    sc_signal< sc_lv<1> > icmp_ln149_fu_197_p2;
    sc_signal< sc_lv<6> > h_0_i_reg_99;
    sc_signal< sc_lv<5> > v_0_i_reg_110;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<64> > zext_ln151_1_fu_232_p1;
    sc_signal< sc_lv<32> > p_sum_6_fu_62;
    sc_signal< sc_lv<32> > p_sum_8_fu_306_p3;
    sc_signal< sc_lv<32> > h_sum_6_fu_66;
    sc_signal< sc_lv<32> > h_sum_8_fu_291_p3;
    sc_signal< sc_lv<32> > v_sum_6_fu_70;
    sc_signal< sc_lv<32> > v_sum_8_fu_276_p3;
    sc_signal< sc_lv<16> > zext_ln150_2_fu_166_p1;
    sc_signal< sc_lv<8> > zext_ln149_fu_193_p1;
    sc_signal< sc_lv<1> > icmp_ln150_1_fu_209_p2;
    sc_signal< sc_lv<10> > shl_ln_fu_219_p3;
    sc_signal< sc_lv<10> > add_ln151_fu_227_p2;
    sc_signal< sc_lv<32> > zext_ln151_fu_237_p1;
    sc_signal< sc_lv<32> > v_sum_fu_247_p2;
    sc_signal< sc_lv<1> > icmp_ln895_fu_241_p2;
    sc_signal< sc_lv<1> > and_ln895_fu_271_p2;
    sc_signal< sc_lv<32> > v_sum_7_fu_264_p3;
    sc_signal< sc_lv<32> > h_sum_fu_253_p2;
    sc_signal< sc_lv<32> > h_sum_7_fu_284_p3;
    sc_signal< sc_lv<32> > p_sum_fu_258_p2;
    sc_signal< sc_lv<32> > p_sum_7_fu_299_p3;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<6> ap_const_lv6_20;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<5> ap_const_lv5_17;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln151_fu_227_p2();
    void thread_and_ln150_fu_214_p2();
    void thread_and_ln895_fu_271_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_2();
    void thread_h_fu_152_p2();
    void thread_h_limit_blk_n();
    void thread_h_limit_read();
    void thread_h_sum_7_fu_284_p3();
    void thread_h_sum_8_fu_291_p3();
    void thread_h_sum_fu_253_p2();
    void thread_icmp_ln148_fu_146_p2();
    void thread_icmp_ln149_fu_197_p2();
    void thread_icmp_ln150_1_fu_209_p2();
    void thread_icmp_ln150_fu_170_p2();
    void thread_icmp_ln895_fu_241_p2();
    void thread_micro_roi_data_V_address0();
    void thread_micro_roi_data_V_ce0();
    void thread_p_sum_7_fu_299_p3();
    void thread_p_sum_8_fu_306_p3();
    void thread_p_sum_fu_258_p2();
    void thread_shl_ln_fu_219_p3();
    void thread_v_fu_203_p2();
    void thread_v_limit_blk_n();
    void thread_v_limit_read();
    void thread_v_sum_7_fu_264_p3();
    void thread_v_sum_8_fu_276_p3();
    void thread_v_sum_fu_247_p2();
    void thread_zext_ln149_fu_193_p1();
    void thread_zext_ln150_1_fu_162_p1();
    void thread_zext_ln150_2_fu_166_p1();
    void thread_zext_ln150_fu_158_p1();
    void thread_zext_ln151_1_fu_232_p1();
    void thread_zext_ln151_fu_237_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
