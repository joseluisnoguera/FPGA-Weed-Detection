// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _xfExtractPixels_HH_
#define _xfExtractPixels_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "ip_accel_app_mux_bbk.h"

namespace ap_rtl {

struct xfExtractPixels : public sc_module {
    // Port declarations 11
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<24> > tmp_buf_0_V_read;
    sc_in< sc_lv<24> > tmp_buf_1_V_read;
    sc_in< sc_lv<24> > tmp_buf_2_V_read;
    sc_in< sc_lv<24> > tmp_buf_3_V_read;
    sc_in< sc_lv<24> > val1_V_read;
    sc_in< sc_lv<1> > pos_r;
    sc_out< sc_lv<24> > ap_return_0;
    sc_out< sc_lv<24> > ap_return_1;
    sc_out< sc_lv<24> > ap_return_2;
    sc_out< sc_lv<24> > ap_return_3;
    sc_signal< sc_lv<1> > ap_var_for_const0;
    sc_signal< sc_lv<1> > ap_var_for_const1;


    // Module declarations
    xfExtractPixels(sc_module_name name);
    SC_HAS_PROCESS(xfExtractPixels);

    ~xfExtractPixels();

    sc_trace_file* mVcdFile;

    ip_accel_app_mux_bbk<1,1,1,1,1,1,2,1>* ip_accel_app_mux_bbk_U537;
    ip_accel_app_mux_bbk<1,1,1,1,1,1,2,1>* ip_accel_app_mux_bbk_U538;
    ip_accel_app_mux_bbk<1,1,1,1,1,1,2,1>* ip_accel_app_mux_bbk_U539;
    ip_accel_app_mux_bbk<1,1,1,1,1,1,2,1>* ip_accel_app_mux_bbk_U540;
    sc_signal< sc_lv<2> > zext_ln321_fu_60_p1;
    sc_signal< sc_lv<1> > write_flag_fu_64_p6;
    sc_signal< sc_lv<1> > write_flag4_fu_78_p6;
    sc_signal< sc_lv<1> > write_flag8_fu_106_p6;
    sc_signal< sc_lv<1> > write_flag1_fu_92_p6;
    sc_signal< sc_lv<24> > select_ln78_fu_120_p3;
    sc_signal< sc_lv<24> > select_ln78_1_fu_128_p3;
    sc_signal< sc_lv<24> > select_ln78_2_fu_136_p3;
    sc_signal< sc_lv<24> > select_ln78_3_fu_144_p3;
    static const sc_logic ap_const_logic_1;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_2();
    void thread_ap_return_3();
    void thread_select_ln78_1_fu_128_p3();
    void thread_select_ln78_2_fu_136_p3();
    void thread_select_ln78_3_fu_144_p3();
    void thread_select_ln78_fu_120_p3();
    void thread_zext_ln321_fu_60_p1();
};

}

using namespace ap_rtl;

#endif
