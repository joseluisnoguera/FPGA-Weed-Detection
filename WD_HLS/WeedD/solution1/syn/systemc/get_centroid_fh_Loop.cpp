// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "get_centroid_fh_Loop.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic get_centroid_fh_Loop::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic get_centroid_fh_Loop::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> get_centroid_fh_Loop::ap_ST_fsm_state1 = "1";
const sc_lv<4> get_centroid_fh_Loop::ap_ST_fsm_state2 = "10";
const sc_lv<4> get_centroid_fh_Loop::ap_ST_fsm_state3 = "100";
const sc_lv<4> get_centroid_fh_Loop::ap_ST_fsm_state4 = "1000";
const sc_lv<32> get_centroid_fh_Loop::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> get_centroid_fh_Loop::ap_const_lv32_1 = "1";
const sc_lv<1> get_centroid_fh_Loop::ap_const_lv1_0 = "0";
const sc_lv<32> get_centroid_fh_Loop::ap_const_lv32_2 = "10";
const sc_lv<6> get_centroid_fh_Loop::ap_const_lv6_0 = "000000";
const sc_lv<1> get_centroid_fh_Loop::ap_const_lv1_1 = "1";
const sc_lv<32> get_centroid_fh_Loop::ap_const_lv32_3 = "11";
const sc_lv<5> get_centroid_fh_Loop::ap_const_lv5_0 = "00000";
const sc_lv<6> get_centroid_fh_Loop::ap_const_lv6_20 = "100000";
const sc_lv<6> get_centroid_fh_Loop::ap_const_lv6_1 = "1";
const sc_lv<5> get_centroid_fh_Loop::ap_const_lv5_17 = "10111";
const sc_lv<5> get_centroid_fh_Loop::ap_const_lv5_1 = "1";
const sc_lv<8> get_centroid_fh_Loop::ap_const_lv8_0 = "00000000";
const bool get_centroid_fh_Loop::ap_const_boolean_1 = true;

get_centroid_fh_Loop::get_centroid_fh_Loop(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln151_fu_227_p2);
    sensitive << ( zext_ln150_1_reg_373 );
    sensitive << ( shl_ln_fu_219_p3 );

    SC_METHOD(thread_and_ln150_fu_214_p2);
    sensitive << ( icmp_ln150_reg_378 );
    sensitive << ( icmp_ln150_1_fu_209_p2 );

    SC_METHOD(thread_and_ln895_fu_271_p2);
    sensitive << ( and_ln150_reg_391 );
    sensitive << ( icmp_ln895_fu_241_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( h_limit_empty_n );
    sensitive << ( v_limit_empty_n );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln148_fu_146_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln148_fu_146_p2 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln148_fu_146_p2 );
    sensitive << ( v_sum_6_fu_70 );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln148_fu_146_p2 );
    sensitive << ( h_sum_6_fu_66 );

    SC_METHOD(thread_ap_return_2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln148_fu_146_p2 );
    sensitive << ( p_sum_6_fu_62 );

    SC_METHOD(thread_h_fu_152_p2);
    sensitive << ( h_0_i_reg_99 );

    SC_METHOD(thread_h_limit_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( h_limit_empty_n );

    SC_METHOD(thread_h_limit_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( h_limit_empty_n );
    sensitive << ( v_limit_empty_n );

    SC_METHOD(thread_h_sum_7_fu_284_p3);
    sensitive << ( and_ln150_reg_391 );
    sensitive << ( h_sum_6_fu_66 );
    sensitive << ( h_sum_fu_253_p2 );

    SC_METHOD(thread_h_sum_8_fu_291_p3);
    sensitive << ( h_sum_6_fu_66 );
    sensitive << ( and_ln895_fu_271_p2 );
    sensitive << ( h_sum_7_fu_284_p3 );

    SC_METHOD(thread_h_sum_fu_253_p2);
    sensitive << ( zext_ln150_reg_368 );
    sensitive << ( h_sum_6_fu_66 );

    SC_METHOD(thread_icmp_ln148_fu_146_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( h_0_i_reg_99 );

    SC_METHOD(thread_icmp_ln149_fu_197_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( v_0_i_reg_110 );

    SC_METHOD(thread_icmp_ln150_1_fu_209_p2);
    sensitive << ( v_limit_read_reg_355 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln149_fu_197_p2 );
    sensitive << ( zext_ln149_fu_193_p1 );

    SC_METHOD(thread_icmp_ln150_fu_170_p2);
    sensitive << ( h_limit_read_reg_350 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln148_fu_146_p2 );
    sensitive << ( zext_ln150_2_fu_166_p1 );

    SC_METHOD(thread_icmp_ln895_fu_241_p2);
    sensitive << ( micro_roi_data_V_q0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_micro_roi_data_V_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln151_1_fu_232_p1 );

    SC_METHOD(thread_micro_roi_data_V_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_p_sum_7_fu_299_p3);
    sensitive << ( and_ln150_reg_391 );
    sensitive << ( p_sum_6_fu_62 );
    sensitive << ( p_sum_fu_258_p2 );

    SC_METHOD(thread_p_sum_8_fu_306_p3);
    sensitive << ( p_sum_6_fu_62 );
    sensitive << ( and_ln895_fu_271_p2 );
    sensitive << ( p_sum_7_fu_299_p3 );

    SC_METHOD(thread_p_sum_fu_258_p2);
    sensitive << ( p_sum_6_fu_62 );

    SC_METHOD(thread_shl_ln_fu_219_p3);
    sensitive << ( v_0_i_reg_110 );

    SC_METHOD(thread_v_fu_203_p2);
    sensitive << ( v_0_i_reg_110 );

    SC_METHOD(thread_v_limit_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( v_limit_empty_n );

    SC_METHOD(thread_v_limit_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( h_limit_empty_n );
    sensitive << ( v_limit_empty_n );

    SC_METHOD(thread_v_sum_7_fu_264_p3);
    sensitive << ( and_ln150_reg_391 );
    sensitive << ( v_sum_6_fu_70 );
    sensitive << ( v_sum_fu_247_p2 );

    SC_METHOD(thread_v_sum_8_fu_276_p3);
    sensitive << ( v_sum_6_fu_70 );
    sensitive << ( and_ln895_fu_271_p2 );
    sensitive << ( v_sum_7_fu_264_p3 );

    SC_METHOD(thread_v_sum_fu_247_p2);
    sensitive << ( v_sum_6_fu_70 );
    sensitive << ( zext_ln151_fu_237_p1 );

    SC_METHOD(thread_zext_ln149_fu_193_p1);
    sensitive << ( v_0_i_reg_110 );

    SC_METHOD(thread_zext_ln150_1_fu_162_p1);
    sensitive << ( h_0_i_reg_99 );

    SC_METHOD(thread_zext_ln150_2_fu_166_p1);
    sensitive << ( h_0_i_reg_99 );

    SC_METHOD(thread_zext_ln150_fu_158_p1);
    sensitive << ( h_0_i_reg_99 );

    SC_METHOD(thread_zext_ln151_1_fu_232_p1);
    sensitive << ( add_ln151_fu_227_p2 );

    SC_METHOD(thread_zext_ln151_fu_237_p1);
    sensitive << ( v_0_i_reg_110 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( h_limit_empty_n );
    sensitive << ( v_limit_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln148_fu_146_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln149_fu_197_p2 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "get_centroid_fh_Loop_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, h_limit_dout, "(port)h_limit_dout");
    sc_trace(mVcdFile, h_limit_empty_n, "(port)h_limit_empty_n");
    sc_trace(mVcdFile, h_limit_read, "(port)h_limit_read");
    sc_trace(mVcdFile, v_limit_dout, "(port)v_limit_dout");
    sc_trace(mVcdFile, v_limit_empty_n, "(port)v_limit_empty_n");
    sc_trace(mVcdFile, v_limit_read, "(port)v_limit_read");
    sc_trace(mVcdFile, micro_roi_data_V_address0, "(port)micro_roi_data_V_address0");
    sc_trace(mVcdFile, micro_roi_data_V_ce0, "(port)micro_roi_data_V_ce0");
    sc_trace(mVcdFile, micro_roi_data_V_q0, "(port)micro_roi_data_V_q0");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_return_2, "(port)ap_return_2");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, h_limit_blk_n, "h_limit_blk_n");
    sc_trace(mVcdFile, v_limit_blk_n, "v_limit_blk_n");
    sc_trace(mVcdFile, h_limit_read_reg_350, "h_limit_read_reg_350");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, v_limit_read_reg_355, "v_limit_read_reg_355");
    sc_trace(mVcdFile, h_fu_152_p2, "h_fu_152_p2");
    sc_trace(mVcdFile, h_reg_363, "h_reg_363");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln150_fu_158_p1, "zext_ln150_fu_158_p1");
    sc_trace(mVcdFile, zext_ln150_reg_368, "zext_ln150_reg_368");
    sc_trace(mVcdFile, icmp_ln148_fu_146_p2, "icmp_ln148_fu_146_p2");
    sc_trace(mVcdFile, zext_ln150_1_fu_162_p1, "zext_ln150_1_fu_162_p1");
    sc_trace(mVcdFile, zext_ln150_1_reg_373, "zext_ln150_1_reg_373");
    sc_trace(mVcdFile, icmp_ln150_fu_170_p2, "icmp_ln150_fu_170_p2");
    sc_trace(mVcdFile, icmp_ln150_reg_378, "icmp_ln150_reg_378");
    sc_trace(mVcdFile, v_fu_203_p2, "v_fu_203_p2");
    sc_trace(mVcdFile, v_reg_386, "v_reg_386");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, and_ln150_fu_214_p2, "and_ln150_fu_214_p2");
    sc_trace(mVcdFile, and_ln150_reg_391, "and_ln150_reg_391");
    sc_trace(mVcdFile, icmp_ln149_fu_197_p2, "icmp_ln149_fu_197_p2");
    sc_trace(mVcdFile, h_0_i_reg_99, "h_0_i_reg_99");
    sc_trace(mVcdFile, v_0_i_reg_110, "v_0_i_reg_110");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, zext_ln151_1_fu_232_p1, "zext_ln151_1_fu_232_p1");
    sc_trace(mVcdFile, p_sum_6_fu_62, "p_sum_6_fu_62");
    sc_trace(mVcdFile, p_sum_8_fu_306_p3, "p_sum_8_fu_306_p3");
    sc_trace(mVcdFile, h_sum_6_fu_66, "h_sum_6_fu_66");
    sc_trace(mVcdFile, h_sum_8_fu_291_p3, "h_sum_8_fu_291_p3");
    sc_trace(mVcdFile, v_sum_6_fu_70, "v_sum_6_fu_70");
    sc_trace(mVcdFile, v_sum_8_fu_276_p3, "v_sum_8_fu_276_p3");
    sc_trace(mVcdFile, zext_ln150_2_fu_166_p1, "zext_ln150_2_fu_166_p1");
    sc_trace(mVcdFile, zext_ln149_fu_193_p1, "zext_ln149_fu_193_p1");
    sc_trace(mVcdFile, icmp_ln150_1_fu_209_p2, "icmp_ln150_1_fu_209_p2");
    sc_trace(mVcdFile, shl_ln_fu_219_p3, "shl_ln_fu_219_p3");
    sc_trace(mVcdFile, add_ln151_fu_227_p2, "add_ln151_fu_227_p2");
    sc_trace(mVcdFile, zext_ln151_fu_237_p1, "zext_ln151_fu_237_p1");
    sc_trace(mVcdFile, v_sum_fu_247_p2, "v_sum_fu_247_p2");
    sc_trace(mVcdFile, icmp_ln895_fu_241_p2, "icmp_ln895_fu_241_p2");
    sc_trace(mVcdFile, and_ln895_fu_271_p2, "and_ln895_fu_271_p2");
    sc_trace(mVcdFile, v_sum_7_fu_264_p3, "v_sum_7_fu_264_p3");
    sc_trace(mVcdFile, h_sum_fu_253_p2, "h_sum_fu_253_p2");
    sc_trace(mVcdFile, h_sum_7_fu_284_p3, "h_sum_7_fu_284_p3");
    sc_trace(mVcdFile, p_sum_fu_258_p2, "p_sum_fu_258_p2");
    sc_trace(mVcdFile, p_sum_7_fu_299_p3, "p_sum_7_fu_299_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

get_centroid_fh_Loop::~get_centroid_fh_Loop() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void get_centroid_fh_Loop::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(icmp_ln148_fu_146_p2.read(), ap_const_lv1_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln149_fu_197_p2.read(), ap_const_lv1_1))) {
        h_0_i_reg_99 = h_reg_363.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, h_limit_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, v_limit_empty_n.read())))) {
        h_0_i_reg_99 = ap_const_lv6_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        h_sum_6_fu_66 = h_sum_8_fu_291_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, h_limit_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, v_limit_empty_n.read())))) {
        h_sum_6_fu_66 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        p_sum_6_fu_62 = p_sum_8_fu_306_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, h_limit_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, v_limit_empty_n.read())))) {
        p_sum_6_fu_62 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln148_fu_146_p2.read(), ap_const_lv1_0))) {
        v_0_i_reg_110 = ap_const_lv5_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        v_0_i_reg_110 = v_reg_386.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        v_sum_6_fu_70 = v_sum_8_fu_276_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, h_limit_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, v_limit_empty_n.read())))) {
        v_sum_6_fu_70 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln149_fu_197_p2.read()))) {
        and_ln150_reg_391 = and_ln150_fu_214_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, h_limit_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, v_limit_empty_n.read())))) {
        h_limit_read_reg_350 = h_limit_dout.read();
        v_limit_read_reg_355 = v_limit_dout.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        h_reg_363 = h_fu_152_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln148_fu_146_p2.read(), ap_const_lv1_0))) {
        icmp_ln150_reg_378 = icmp_ln150_fu_170_p2.read();
        zext_ln150_1_reg_373 = zext_ln150_1_fu_162_p1.read();
        zext_ln150_reg_368 = zext_ln150_fu_158_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        v_reg_386 = v_fu_203_p2.read();
    }
}

void get_centroid_fh_Loop::thread_add_ln151_fu_227_p2() {
    add_ln151_fu_227_p2 = (!zext_ln150_1_reg_373.read().is_01() || !shl_ln_fu_219_p3.read().is_01())? sc_lv<10>(): (sc_biguint<10>(zext_ln150_1_reg_373.read()) + sc_biguint<10>(shl_ln_fu_219_p3.read()));
}

void get_centroid_fh_Loop::thread_and_ln150_fu_214_p2() {
    and_ln150_fu_214_p2 = (icmp_ln150_reg_378.read() & icmp_ln150_1_fu_209_p2.read());
}

void get_centroid_fh_Loop::thread_and_ln895_fu_271_p2() {
    and_ln895_fu_271_p2 = (and_ln150_reg_391.read() & icmp_ln895_fu_241_p2.read());
}

void get_centroid_fh_Loop::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void get_centroid_fh_Loop::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void get_centroid_fh_Loop::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void get_centroid_fh_Loop::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void get_centroid_fh_Loop::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, h_limit_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, v_limit_empty_n.read()));
}

void get_centroid_fh_Loop::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln148_fu_146_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void get_centroid_fh_Loop::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void get_centroid_fh_Loop::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln148_fu_146_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void get_centroid_fh_Loop::thread_ap_return_0() {
    ap_return_0 = v_sum_6_fu_70.read();
}

void get_centroid_fh_Loop::thread_ap_return_1() {
    ap_return_1 = h_sum_6_fu_66.read();
}

void get_centroid_fh_Loop::thread_ap_return_2() {
    ap_return_2 = p_sum_6_fu_62.read();
}

void get_centroid_fh_Loop::thread_h_fu_152_p2() {
    h_fu_152_p2 = (!h_0_i_reg_99.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(h_0_i_reg_99.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void get_centroid_fh_Loop::thread_h_limit_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        h_limit_blk_n = h_limit_empty_n.read();
    } else {
        h_limit_blk_n = ap_const_logic_1;
    }
}

void get_centroid_fh_Loop::thread_h_limit_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, h_limit_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, v_limit_empty_n.read())))) {
        h_limit_read = ap_const_logic_1;
    } else {
        h_limit_read = ap_const_logic_0;
    }
}

void get_centroid_fh_Loop::thread_h_sum_7_fu_284_p3() {
    h_sum_7_fu_284_p3 = (!and_ln150_reg_391.read()[0].is_01())? sc_lv<32>(): ((and_ln150_reg_391.read()[0].to_bool())? h_sum_fu_253_p2.read(): h_sum_6_fu_66.read());
}

void get_centroid_fh_Loop::thread_h_sum_8_fu_291_p3() {
    h_sum_8_fu_291_p3 = (!and_ln895_fu_271_p2.read()[0].is_01())? sc_lv<32>(): ((and_ln895_fu_271_p2.read()[0].to_bool())? h_sum_6_fu_66.read(): h_sum_7_fu_284_p3.read());
}

void get_centroid_fh_Loop::thread_h_sum_fu_253_p2() {
    h_sum_fu_253_p2 = (!zext_ln150_reg_368.read().is_01() || !h_sum_6_fu_66.read().is_01())? sc_lv<32>(): (sc_biguint<32>(zext_ln150_reg_368.read()) + sc_biguint<32>(h_sum_6_fu_66.read()));
}

void get_centroid_fh_Loop::thread_icmp_ln148_fu_146_p2() {
    icmp_ln148_fu_146_p2 = (!h_0_i_reg_99.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(h_0_i_reg_99.read() == ap_const_lv6_20);
}

void get_centroid_fh_Loop::thread_icmp_ln149_fu_197_p2() {
    icmp_ln149_fu_197_p2 = (!v_0_i_reg_110.read().is_01() || !ap_const_lv5_17.is_01())? sc_lv<1>(): sc_lv<1>(v_0_i_reg_110.read() == ap_const_lv5_17);
}

void get_centroid_fh_Loop::thread_icmp_ln150_1_fu_209_p2() {
    icmp_ln150_1_fu_209_p2 = (!zext_ln149_fu_193_p1.read().is_01() || !v_limit_read_reg_355.read().is_01())? sc_lv<1>(): (sc_biguint<8>(zext_ln149_fu_193_p1.read()) < sc_biguint<8>(v_limit_read_reg_355.read()));
}

void get_centroid_fh_Loop::thread_icmp_ln150_fu_170_p2() {
    icmp_ln150_fu_170_p2 = (!zext_ln150_2_fu_166_p1.read().is_01() || !h_limit_read_reg_350.read().is_01())? sc_lv<1>(): (sc_biguint<16>(zext_ln150_2_fu_166_p1.read()) < sc_biguint<16>(h_limit_read_reg_350.read()));
}

void get_centroid_fh_Loop::thread_icmp_ln895_fu_241_p2() {
    icmp_ln895_fu_241_p2 = (!micro_roi_data_V_q0.read().is_01() || !ap_const_lv8_0.is_01())? sc_lv<1>(): sc_lv<1>(micro_roi_data_V_q0.read() == ap_const_lv8_0);
}

void get_centroid_fh_Loop::thread_micro_roi_data_V_address0() {
    micro_roi_data_V_address0 =  (sc_lv<10>) (zext_ln151_1_fu_232_p1.read());
}

void get_centroid_fh_Loop::thread_micro_roi_data_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        micro_roi_data_V_ce0 = ap_const_logic_1;
    } else {
        micro_roi_data_V_ce0 = ap_const_logic_0;
    }
}

void get_centroid_fh_Loop::thread_p_sum_7_fu_299_p3() {
    p_sum_7_fu_299_p3 = (!and_ln150_reg_391.read()[0].is_01())? sc_lv<32>(): ((and_ln150_reg_391.read()[0].to_bool())? p_sum_fu_258_p2.read(): p_sum_6_fu_62.read());
}

void get_centroid_fh_Loop::thread_p_sum_8_fu_306_p3() {
    p_sum_8_fu_306_p3 = (!and_ln895_fu_271_p2.read()[0].is_01())? sc_lv<32>(): ((and_ln895_fu_271_p2.read()[0].to_bool())? p_sum_6_fu_62.read(): p_sum_7_fu_299_p3.read());
}

void get_centroid_fh_Loop::thread_p_sum_fu_258_p2() {
    p_sum_fu_258_p2 = (!p_sum_6_fu_62.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(p_sum_6_fu_62.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void get_centroid_fh_Loop::thread_shl_ln_fu_219_p3() {
    shl_ln_fu_219_p3 = esl_concat<5,5>(v_0_i_reg_110.read(), ap_const_lv5_0);
}

void get_centroid_fh_Loop::thread_v_fu_203_p2() {
    v_fu_203_p2 = (!v_0_i_reg_110.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(v_0_i_reg_110.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void get_centroid_fh_Loop::thread_v_limit_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        v_limit_blk_n = v_limit_empty_n.read();
    } else {
        v_limit_blk_n = ap_const_logic_1;
    }
}

void get_centroid_fh_Loop::thread_v_limit_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, h_limit_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, v_limit_empty_n.read())))) {
        v_limit_read = ap_const_logic_1;
    } else {
        v_limit_read = ap_const_logic_0;
    }
}

void get_centroid_fh_Loop::thread_v_sum_7_fu_264_p3() {
    v_sum_7_fu_264_p3 = (!and_ln150_reg_391.read()[0].is_01())? sc_lv<32>(): ((and_ln150_reg_391.read()[0].to_bool())? v_sum_fu_247_p2.read(): v_sum_6_fu_70.read());
}

void get_centroid_fh_Loop::thread_v_sum_8_fu_276_p3() {
    v_sum_8_fu_276_p3 = (!and_ln895_fu_271_p2.read()[0].is_01())? sc_lv<32>(): ((and_ln895_fu_271_p2.read()[0].to_bool())? v_sum_6_fu_70.read(): v_sum_7_fu_264_p3.read());
}

void get_centroid_fh_Loop::thread_v_sum_fu_247_p2() {
    v_sum_fu_247_p2 = (!zext_ln151_fu_237_p1.read().is_01() || !v_sum_6_fu_70.read().is_01())? sc_lv<32>(): (sc_biguint<32>(zext_ln151_fu_237_p1.read()) + sc_biguint<32>(v_sum_6_fu_70.read()));
}

void get_centroid_fh_Loop::thread_zext_ln149_fu_193_p1() {
    zext_ln149_fu_193_p1 = esl_zext<8,5>(v_0_i_reg_110.read());
}

void get_centroid_fh_Loop::thread_zext_ln150_1_fu_162_p1() {
    zext_ln150_1_fu_162_p1 = esl_zext<10,6>(h_0_i_reg_99.read());
}

void get_centroid_fh_Loop::thread_zext_ln150_2_fu_166_p1() {
    zext_ln150_2_fu_166_p1 = esl_zext<16,6>(h_0_i_reg_99.read());
}

void get_centroid_fh_Loop::thread_zext_ln150_fu_158_p1() {
    zext_ln150_fu_158_p1 = esl_zext<32,6>(h_0_i_reg_99.read());
}

void get_centroid_fh_Loop::thread_zext_ln151_1_fu_232_p1() {
    zext_ln151_1_fu_232_p1 = esl_zext<64,10>(add_ln151_fu_227_p2.read());
}

void get_centroid_fh_Loop::thread_zext_ln151_fu_237_p1() {
    zext_ln151_fu_237_p1 = esl_zext<32,5>(v_0_i_reg_110.read());
}

void get_centroid_fh_Loop::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, h_limit_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, v_limit_empty_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln148_fu_146_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln149_fu_197_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}

