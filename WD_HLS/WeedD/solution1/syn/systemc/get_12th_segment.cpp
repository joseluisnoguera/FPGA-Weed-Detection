// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "get_12th_segment.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic get_12th_segment::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<8> get_12th_segment::ap_const_lv8_0 = "00000000";
const sc_logic get_12th_segment::ap_const_logic_1 = sc_dt::Log_1;

get_12th_segment::get_12th_segment(sc_module_name name) : sc_module(name), mVcdFile(0) {
    get_12th_segment_Loo_U0 = new get_12th_segment_Loo("get_12th_segment_Loo_U0");
    get_12th_segment_Loo_U0->ap_clk(ap_clk);
    get_12th_segment_Loo_U0->ap_rst(ap_rst);
    get_12th_segment_Loo_U0->ap_start(get_12th_segment_Loo_U0_ap_start);
    get_12th_segment_Loo_U0->ap_done(get_12th_segment_Loo_U0_ap_done);
    get_12th_segment_Loo_U0->ap_continue(get_12th_segment_Loo_U0_ap_continue);
    get_12th_segment_Loo_U0->ap_idle(get_12th_segment_Loo_U0_ap_idle);
    get_12th_segment_Loo_U0->ap_ready(get_12th_segment_Loo_U0_ap_ready);
    get_12th_segment_Loo_U0->eroded_data_V_dout(eroded_data_V_dout);
    get_12th_segment_Loo_U0->eroded_data_V_empty_n(eroded_data_V_empty_n);
    get_12th_segment_Loo_U0->eroded_data_V_read(get_12th_segment_Loo_U0_eroded_data_V_read);
    get_12th_segment_Loo_U0->bottom_data_V_din(get_12th_segment_Loo_U0_bottom_data_V_din);
    get_12th_segment_Loo_U0->bottom_data_V_full_n(bottom_data_V_full_n);
    get_12th_segment_Loo_U0->bottom_data_V_write(get_12th_segment_Loo_U0_bottom_data_V_write);

    SC_METHOD(thread_ap_done);
    sensitive << ( get_12th_segment_Loo_U0_ap_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( get_12th_segment_Loo_U0_ap_idle );

    SC_METHOD(thread_ap_ready);
    sensitive << ( get_12th_segment_Loo_U0_ap_ready );

    SC_METHOD(thread_ap_sync_continue);
    sensitive << ( ap_continue );

    SC_METHOD(thread_ap_sync_done);
    sensitive << ( get_12th_segment_Loo_U0_ap_done );

    SC_METHOD(thread_ap_sync_ready);
    sensitive << ( get_12th_segment_Loo_U0_ap_ready );

    SC_METHOD(thread_bottom_data_V_din);
    sensitive << ( get_12th_segment_Loo_U0_bottom_data_V_din );

    SC_METHOD(thread_bottom_data_V_write);
    sensitive << ( get_12th_segment_Loo_U0_bottom_data_V_write );

    SC_METHOD(thread_eroded_data_V_read);
    sensitive << ( get_12th_segment_Loo_U0_eroded_data_V_read );

    SC_METHOD(thread_get_12th_segment_Loo_U0_ap_continue);
    sensitive << ( ap_continue );

    SC_METHOD(thread_get_12th_segment_Loo_U0_ap_start);
    sensitive << ( ap_start );

    SC_METHOD(thread_get_12th_segment_Loo_U0_start_full_n);

    SC_METHOD(thread_get_12th_segment_Loo_U0_start_write);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "get_12th_segment_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, eroded_data_V_dout, "(port)eroded_data_V_dout");
    sc_trace(mVcdFile, eroded_data_V_empty_n, "(port)eroded_data_V_empty_n");
    sc_trace(mVcdFile, eroded_data_V_read, "(port)eroded_data_V_read");
    sc_trace(mVcdFile, bottom_data_V_din, "(port)bottom_data_V_din");
    sc_trace(mVcdFile, bottom_data_V_full_n, "(port)bottom_data_V_full_n");
    sc_trace(mVcdFile, bottom_data_V_write, "(port)bottom_data_V_write");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, get_12th_segment_Loo_U0_ap_start, "get_12th_segment_Loo_U0_ap_start");
    sc_trace(mVcdFile, get_12th_segment_Loo_U0_ap_done, "get_12th_segment_Loo_U0_ap_done");
    sc_trace(mVcdFile, get_12th_segment_Loo_U0_ap_continue, "get_12th_segment_Loo_U0_ap_continue");
    sc_trace(mVcdFile, get_12th_segment_Loo_U0_ap_idle, "get_12th_segment_Loo_U0_ap_idle");
    sc_trace(mVcdFile, get_12th_segment_Loo_U0_ap_ready, "get_12th_segment_Loo_U0_ap_ready");
    sc_trace(mVcdFile, get_12th_segment_Loo_U0_eroded_data_V_read, "get_12th_segment_Loo_U0_eroded_data_V_read");
    sc_trace(mVcdFile, get_12th_segment_Loo_U0_bottom_data_V_din, "get_12th_segment_Loo_U0_bottom_data_V_din");
    sc_trace(mVcdFile, get_12th_segment_Loo_U0_bottom_data_V_write, "get_12th_segment_Loo_U0_bottom_data_V_write");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, ap_sync_done, "ap_sync_done");
    sc_trace(mVcdFile, ap_sync_ready, "ap_sync_ready");
    sc_trace(mVcdFile, get_12th_segment_Loo_U0_start_full_n, "get_12th_segment_Loo_U0_start_full_n");
    sc_trace(mVcdFile, get_12th_segment_Loo_U0_start_write, "get_12th_segment_Loo_U0_start_write");
#endif

    }
}

get_12th_segment::~get_12th_segment() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete get_12th_segment_Loo_U0;
}

void get_12th_segment::thread_ap_done() {
    ap_done = get_12th_segment_Loo_U0_ap_done.read();
}

void get_12th_segment::thread_ap_idle() {
    ap_idle = get_12th_segment_Loo_U0_ap_idle.read();
}

void get_12th_segment::thread_ap_ready() {
    ap_ready = get_12th_segment_Loo_U0_ap_ready.read();
}

void get_12th_segment::thread_ap_sync_continue() {
    ap_sync_continue = ap_continue.read();
}

void get_12th_segment::thread_ap_sync_done() {
    ap_sync_done = get_12th_segment_Loo_U0_ap_done.read();
}

void get_12th_segment::thread_ap_sync_ready() {
    ap_sync_ready = get_12th_segment_Loo_U0_ap_ready.read();
}

void get_12th_segment::thread_bottom_data_V_din() {
    bottom_data_V_din = get_12th_segment_Loo_U0_bottom_data_V_din.read();
}

void get_12th_segment::thread_bottom_data_V_write() {
    bottom_data_V_write = get_12th_segment_Loo_U0_bottom_data_V_write.read();
}

void get_12th_segment::thread_eroded_data_V_read() {
    eroded_data_V_read = get_12th_segment_Loo_U0_eroded_data_V_read.read();
}

void get_12th_segment::thread_get_12th_segment_Loo_U0_ap_continue() {
    get_12th_segment_Loo_U0_ap_continue = ap_continue.read();
}

void get_12th_segment::thread_get_12th_segment_Loo_U0_ap_start() {
    get_12th_segment_Loo_U0_ap_start = ap_start.read();
}

void get_12th_segment::thread_get_12th_segment_Loo_U0_start_full_n() {
    get_12th_segment_Loo_U0_start_full_n = ap_const_logic_1;
}

void get_12th_segment::thread_get_12th_segment_Loo_U0_start_write() {
    get_12th_segment_Loo_U0_start_write = ap_const_logic_0;
}

}

