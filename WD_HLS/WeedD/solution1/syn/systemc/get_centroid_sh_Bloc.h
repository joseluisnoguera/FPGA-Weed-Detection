// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _get_centroid_sh_Bloc_HH_
#define _get_centroid_sh_Bloc_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "ip_accel_app_udivHfu.h"
#include "ip_accel_app_udivIfE.h"

namespace ap_rtl {

struct get_centroid_sh_Bloc : public sc_module {
    // Port declarations 27
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > p_read;
    sc_in< sc_lv<8> > possible_c_x_dout;
    sc_in< sc_logic > possible_c_x_empty_n;
    sc_out< sc_logic > possible_c_x_read;
    sc_in< sc_lv<48> > c_read_dout;
    sc_in< sc_logic > c_read_empty_n;
    sc_out< sc_logic > c_read_read;
    sc_in< sc_lv<32> > p_read1;
    sc_in< sc_lv<8> > v_offset_read_dout;
    sc_in< sc_logic > v_offset_read_empty_n;
    sc_out< sc_logic > v_offset_read_read;
    sc_in< sc_lv<32> > p_read2;
    sc_in< sc_lv<16> > h_offset_dout;
    sc_in< sc_logic > h_offset_empty_n;
    sc_out< sc_logic > h_offset_read;
    sc_in< sc_lv<32> > possible_c_y_dout;
    sc_in< sc_logic > possible_c_y_empty_n;
    sc_out< sc_logic > possible_c_y_read;
    sc_out< sc_lv<48> > c;
    sc_out< sc_logic > c_ap_vld;


    // Module declarations
    get_centroid_sh_Bloc(sc_module_name name);
    SC_HAS_PROCESS(get_centroid_sh_Bloc);

    ~get_centroid_sh_Bloc();

    sc_trace_file* mVcdFile;

    ip_accel_app_udivHfu<1,36,32,32,16>* ip_accel_app_udivHfu_U434;
    ip_accel_app_udivIfE<1,36,32,32,32>* ip_accel_app_udivIfE_U435;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<36> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > possible_c_x_blk_n;
    sc_signal< sc_logic > c_read_blk_n;
    sc_signal< sc_logic > v_offset_read_blk_n;
    sc_signal< sc_logic > h_offset_blk_n;
    sc_signal< sc_logic > possible_c_y_blk_n;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<48> > c_read_2_reg_223;
    sc_signal< sc_lv<8> > v_offset_read_2_reg_228;
    sc_signal< sc_lv<16> > h_offset_read_reg_233;
    sc_signal< sc_lv<1> > icmp_ln133_fu_125_p2;
    sc_signal< sc_lv<1> > icmp_ln133_reg_243;
    sc_signal< sc_lv<48> > c1_part_set_i_i_fu_147_p5;
    sc_signal< sc_lv<48> > c2_part_set_i_i_fu_172_p5;
    sc_signal< sc_lv<48> > ap_phi_mux_c3_i_i_phi_fu_110_p4;
    sc_signal< sc_lv<48> > c3_i_i_reg_107;
    sc_signal< sc_logic > ap_CS_fsm_state36;
    sc_signal< sc_lv<32> > add_ln135_fu_187_p2;
    sc_signal< sc_lv<32> > ap_phi_mux_storemerge_i_i_phi_fu_119_p4;
    sc_signal< sc_lv<32> > storemerge_i_i_reg_116;
    sc_signal< sc_lv<48> > c3_part_set_i_i_fu_194_p5;
    sc_signal< sc_lv<48> > c_preg;
    sc_signal< sc_lv<16> > zext_ln120_fu_143_p1;
    sc_signal< sc_lv<16> > grp_fu_131_p2;
    sc_signal< sc_lv<16> > trunc_ln134_fu_159_p1;
    sc_signal< sc_lv<16> > zext_ln134_fu_163_p1;
    sc_signal< sc_lv<16> > add_ln134_fu_166_p2;
    sc_signal< sc_lv<32> > grp_fu_137_p2;
    sc_signal< sc_lv<32> > zext_ln135_fu_184_p1;
    sc_signal< sc_logic > grp_fu_131_ap_start;
    sc_signal< sc_logic > grp_fu_131_ap_done;
    sc_signal< sc_logic > grp_fu_131_ce;
    sc_signal< sc_logic > grp_fu_137_ap_start;
    sc_signal< sc_logic > grp_fu_137_ap_done;
    sc_signal< sc_logic > grp_fu_137_ce;
    sc_signal< sc_lv<36> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<36> ap_ST_fsm_state1;
    static const sc_lv<36> ap_ST_fsm_state2;
    static const sc_lv<36> ap_ST_fsm_state3;
    static const sc_lv<36> ap_ST_fsm_state4;
    static const sc_lv<36> ap_ST_fsm_state5;
    static const sc_lv<36> ap_ST_fsm_state6;
    static const sc_lv<36> ap_ST_fsm_state7;
    static const sc_lv<36> ap_ST_fsm_state8;
    static const sc_lv<36> ap_ST_fsm_state9;
    static const sc_lv<36> ap_ST_fsm_state10;
    static const sc_lv<36> ap_ST_fsm_state11;
    static const sc_lv<36> ap_ST_fsm_state12;
    static const sc_lv<36> ap_ST_fsm_state13;
    static const sc_lv<36> ap_ST_fsm_state14;
    static const sc_lv<36> ap_ST_fsm_state15;
    static const sc_lv<36> ap_ST_fsm_state16;
    static const sc_lv<36> ap_ST_fsm_state17;
    static const sc_lv<36> ap_ST_fsm_state18;
    static const sc_lv<36> ap_ST_fsm_state19;
    static const sc_lv<36> ap_ST_fsm_state20;
    static const sc_lv<36> ap_ST_fsm_state21;
    static const sc_lv<36> ap_ST_fsm_state22;
    static const sc_lv<36> ap_ST_fsm_state23;
    static const sc_lv<36> ap_ST_fsm_state24;
    static const sc_lv<36> ap_ST_fsm_state25;
    static const sc_lv<36> ap_ST_fsm_state26;
    static const sc_lv<36> ap_ST_fsm_state27;
    static const sc_lv<36> ap_ST_fsm_state28;
    static const sc_lv<36> ap_ST_fsm_state29;
    static const sc_lv<36> ap_ST_fsm_state30;
    static const sc_lv<36> ap_ST_fsm_state31;
    static const sc_lv<36> ap_ST_fsm_state32;
    static const sc_lv<36> ap_ST_fsm_state33;
    static const sc_lv<36> ap_ST_fsm_state34;
    static const sc_lv<36> ap_ST_fsm_state35;
    static const sc_lv<36> ap_ST_fsm_state36;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_23;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<48> ap_const_lv48_0;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_2F;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln134_fu_166_p2();
    void thread_add_ln135_fu_187_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state36();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_phi_mux_c3_i_i_phi_fu_110_p4();
    void thread_ap_phi_mux_storemerge_i_i_phi_fu_119_p4();
    void thread_ap_ready();
    void thread_c();
    void thread_c1_part_set_i_i_fu_147_p5();
    void thread_c2_part_set_i_i_fu_172_p5();
    void thread_c3_part_set_i_i_fu_194_p5();
    void thread_c_ap_vld();
    void thread_c_read_blk_n();
    void thread_c_read_read();
    void thread_grp_fu_131_ap_start();
    void thread_grp_fu_131_ce();
    void thread_grp_fu_137_ap_start();
    void thread_grp_fu_137_ce();
    void thread_h_offset_blk_n();
    void thread_h_offset_read();
    void thread_icmp_ln133_fu_125_p2();
    void thread_possible_c_x_blk_n();
    void thread_possible_c_x_read();
    void thread_possible_c_y_blk_n();
    void thread_possible_c_y_read();
    void thread_trunc_ln134_fu_159_p1();
    void thread_v_offset_read_blk_n();
    void thread_v_offset_read_read();
    void thread_zext_ln120_fu_143_p1();
    void thread_zext_ln134_fu_163_p1();
    void thread_zext_ln135_fu_184_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
