// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module OtsuThreshold (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_src_mat_data_V_dout,
        p_src_mat_data_V_empty_n,
        p_src_mat_data_V_read,
        ap_return
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] p_src_mat_data_V_dout;
input   p_src_mat_data_V_empty_n;
output   p_src_mat_data_V_read;
output  [7:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_src_mat_data_V_read;
reg[7:0] ap_return;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] hist_address0;
reg    hist_ce0;
reg    hist_we0;
wire   [31:0] hist_q0;
wire    grp_xfOtsuKernel_fu_28_ap_start;
wire    grp_xfOtsuKernel_fu_28_ap_done;
wire    grp_xfOtsuKernel_fu_28_ap_idle;
wire    grp_xfOtsuKernel_fu_28_ap_ready;
wire   [7:0] grp_xfOtsuKernel_fu_28_p_hist_address0;
wire    grp_xfOtsuKernel_fu_28_p_hist_ce0;
wire   [7:0] grp_xfOtsuKernel_fu_28_ap_return;
wire    grp_xFHistogramKernel_fu_35_ap_start;
wire    grp_xFHistogramKernel_fu_35_ap_done;
wire    grp_xFHistogramKernel_fu_35_ap_idle;
wire    grp_xFHistogramKernel_fu_35_ap_ready;
wire    grp_xFHistogramKernel_fu_35_p_src_mat_data_V_read;
wire   [7:0] grp_xFHistogramKernel_fu_35_hist_array_address0;
wire    grp_xFHistogramKernel_fu_35_hist_array_ce0;
wire    grp_xFHistogramKernel_fu_35_hist_array_we0;
wire   [31:0] grp_xFHistogramKernel_fu_35_hist_array_d0;
reg    grp_xfOtsuKernel_fu_28_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg    grp_xFHistogramKernel_fu_35_ap_start_reg;
wire    ap_CS_fsm_state2;
reg   [7:0] ap_return_preg;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 grp_xfOtsuKernel_fu_28_ap_start_reg = 1'b0;
#0 grp_xFHistogramKernel_fu_35_ap_start_reg = 1'b0;
#0 ap_return_preg = 8'd0;
end

xFHistogramKerneludo #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
hist_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(hist_address0),
    .ce0(hist_ce0),
    .we0(hist_we0),
    .d0(grp_xFHistogramKernel_fu_35_hist_array_d0),
    .q0(hist_q0)
);

xfOtsuKernel grp_xfOtsuKernel_fu_28(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_xfOtsuKernel_fu_28_ap_start),
    .ap_done(grp_xfOtsuKernel_fu_28_ap_done),
    .ap_idle(grp_xfOtsuKernel_fu_28_ap_idle),
    .ap_ready(grp_xfOtsuKernel_fu_28_ap_ready),
    .p_hist_address0(grp_xfOtsuKernel_fu_28_p_hist_address0),
    .p_hist_ce0(grp_xfOtsuKernel_fu_28_p_hist_ce0),
    .p_hist_q0(hist_q0),
    .ap_return(grp_xfOtsuKernel_fu_28_ap_return)
);

xFHistogramKernel grp_xFHistogramKernel_fu_35(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_xFHistogramKernel_fu_35_ap_start),
    .ap_done(grp_xFHistogramKernel_fu_35_ap_done),
    .ap_idle(grp_xFHistogramKernel_fu_35_ap_idle),
    .ap_ready(grp_xFHistogramKernel_fu_35_ap_ready),
    .p_src_mat_data_V_dout(p_src_mat_data_V_dout),
    .p_src_mat_data_V_empty_n(p_src_mat_data_V_empty_n),
    .p_src_mat_data_V_read(grp_xFHistogramKernel_fu_35_p_src_mat_data_V_read),
    .hist_array_address0(grp_xFHistogramKernel_fu_35_hist_array_address0),
    .hist_array_ce0(grp_xFHistogramKernel_fu_35_hist_array_ce0),
    .hist_array_we0(grp_xFHistogramKernel_fu_35_hist_array_we0),
    .hist_array_d0(grp_xFHistogramKernel_fu_35_hist_array_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 8'd0;
    end else begin
        if (((grp_xfOtsuKernel_fu_28_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_return_preg <= grp_xfOtsuKernel_fu_28_ap_return;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_xFHistogramKernel_fu_35_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_xFHistogramKernel_fu_35_ap_start_reg <= 1'b1;
        end else if ((grp_xFHistogramKernel_fu_35_ap_ready == 1'b1)) begin
            grp_xFHistogramKernel_fu_35_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_xfOtsuKernel_fu_28_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_xfOtsuKernel_fu_28_ap_start_reg <= 1'b1;
        end else if ((grp_xfOtsuKernel_fu_28_ap_ready == 1'b1)) begin
            grp_xfOtsuKernel_fu_28_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((((grp_xfOtsuKernel_fu_28_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_xfOtsuKernel_fu_28_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((grp_xfOtsuKernel_fu_28_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_return = grp_xfOtsuKernel_fu_28_ap_return;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        hist_address0 = grp_xFHistogramKernel_fu_35_hist_array_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        hist_address0 = grp_xfOtsuKernel_fu_28_p_hist_address0;
    end else begin
        hist_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        hist_ce0 = grp_xFHistogramKernel_fu_35_hist_array_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        hist_ce0 = grp_xfOtsuKernel_fu_28_p_hist_ce0;
    end else begin
        hist_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        hist_we0 = grp_xFHistogramKernel_fu_35_hist_array_we0;
    end else begin
        hist_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_src_mat_data_V_read = grp_xFHistogramKernel_fu_35_p_src_mat_data_V_read;
    end else begin
        p_src_mat_data_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_xFHistogramKernel_fu_35_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_xfOtsuKernel_fu_28_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign grp_xFHistogramKernel_fu_35_ap_start = grp_xFHistogramKernel_fu_35_ap_start_reg;

assign grp_xfOtsuKernel_fu_28_ap_start = grp_xfOtsuKernel_fu_28_ap_start_reg;

endmodule //OtsuThreshold
