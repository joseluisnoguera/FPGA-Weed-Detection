// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module get_centroid_sh (
        micro_roi_data_V_address0,
        micro_roi_data_V_ce0,
        micro_roi_data_V_d0,
        micro_roi_data_V_q0,
        micro_roi_data_V_we0,
        micro_roi_data_V_address1,
        micro_roi_data_V_ce1,
        micro_roi_data_V_d1,
        micro_roi_data_V_q1,
        micro_roi_data_V_we1,
        h_offset,
        v_offset_read,
        v_limit,
        h_limit,
        possible_c_x,
        possible_c_y,
        c,
        c_read,
        ap_clk,
        ap_rst,
        v_limit_ap_vld,
        h_limit_ap_vld,
        h_offset_ap_vld,
        v_offset_read_ap_vld,
        possible_c_x_ap_vld,
        possible_c_y_ap_vld,
        c_read_ap_vld,
        ap_start,
        c_ap_vld,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


output  [9:0] micro_roi_data_V_address0;
output   micro_roi_data_V_ce0;
output  [7:0] micro_roi_data_V_d0;
input  [7:0] micro_roi_data_V_q0;
output   micro_roi_data_V_we0;
output  [9:0] micro_roi_data_V_address1;
output   micro_roi_data_V_ce1;
output  [7:0] micro_roi_data_V_d1;
input  [7:0] micro_roi_data_V_q1;
output   micro_roi_data_V_we1;
input  [15:0] h_offset;
input  [7:0] v_offset_read;
input  [7:0] v_limit;
input  [15:0] h_limit;
input  [7:0] possible_c_x;
input  [31:0] possible_c_y;
output  [47:0] c;
input  [47:0] c_read;
input   ap_clk;
input   ap_rst;
input   v_limit_ap_vld;
input   h_limit_ap_vld;
input   h_offset_ap_vld;
input   v_offset_read_ap_vld;
input   possible_c_x_ap_vld;
input   possible_c_y_ap_vld;
input   c_read_ap_vld;
input   ap_start;
output   c_ap_vld;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    get_centroid_sh_Loop_U0_ap_start;
wire    get_centroid_sh_Loop_U0_ap_done;
wire    get_centroid_sh_Loop_U0_ap_continue;
wire    get_centroid_sh_Loop_U0_ap_idle;
wire    get_centroid_sh_Loop_U0_ap_ready;
wire   [9:0] get_centroid_sh_Loop_U0_micro_roi_data_V_address0;
wire    get_centroid_sh_Loop_U0_micro_roi_data_V_ce0;
wire   [15:0] get_centroid_sh_Loop_U0_h_offset_out_din;
wire    get_centroid_sh_Loop_U0_h_offset_out_write;
wire   [7:0] get_centroid_sh_Loop_U0_v_offset_read_out_din;
wire    get_centroid_sh_Loop_U0_v_offset_read_out_write;
wire   [7:0] get_centroid_sh_Loop_U0_possible_c_x_out_din;
wire    get_centroid_sh_Loop_U0_possible_c_x_out_write;
wire   [31:0] get_centroid_sh_Loop_U0_possible_c_y_out_din;
wire    get_centroid_sh_Loop_U0_possible_c_y_out_write;
wire   [47:0] get_centroid_sh_Loop_U0_c_read_out_din;
wire    get_centroid_sh_Loop_U0_c_read_out_write;
wire   [31:0] get_centroid_sh_Loop_U0_ap_return_0;
wire   [31:0] get_centroid_sh_Loop_U0_ap_return_1;
wire   [31:0] get_centroid_sh_Loop_U0_ap_return_2;
wire    ap_channel_done_p_sum_0_loc_0_i_loc_c;
wire    p_sum_0_loc_0_i_loc_c_full_n;
reg    ap_sync_reg_channel_write_p_sum_0_loc_0_i_loc_c;
wire    ap_sync_channel_write_p_sum_0_loc_0_i_loc_c;
wire    ap_channel_done_h_sum_0_loc_0_i_loc_s;
wire    h_sum_0_loc_0_i_loc_s_full_n;
reg    ap_sync_reg_channel_write_h_sum_0_loc_0_i_loc_s;
wire    ap_sync_channel_write_h_sum_0_loc_0_i_loc_s;
wire    ap_channel_done_v_sum_0_loc_0_i_loc_s;
wire    v_sum_0_loc_0_i_loc_s_full_n;
reg    ap_sync_reg_channel_write_v_sum_0_loc_0_i_loc_s;
wire    ap_sync_channel_write_v_sum_0_loc_0_i_loc_s;
wire    get_centroid_sh_Bloc_U0_ap_start;
wire    get_centroid_sh_Bloc_U0_ap_done;
wire    get_centroid_sh_Bloc_U0_ap_continue;
wire    get_centroid_sh_Bloc_U0_ap_idle;
wire    get_centroid_sh_Bloc_U0_ap_ready;
wire    get_centroid_sh_Bloc_U0_possible_c_x_read;
wire    get_centroid_sh_Bloc_U0_c_read_read;
wire    get_centroid_sh_Bloc_U0_v_offset_read_read;
wire    get_centroid_sh_Bloc_U0_h_offset_read;
wire    get_centroid_sh_Bloc_U0_possible_c_y_read;
wire   [47:0] get_centroid_sh_Bloc_U0_c;
wire    get_centroid_sh_Bloc_U0_c_ap_vld;
wire    ap_sync_continue;
wire    h_offset_c_full_n;
wire   [15:0] h_offset_c_dout;
wire    h_offset_c_empty_n;
wire    v_offset_read_c_full_n;
wire   [7:0] v_offset_read_c_dout;
wire    v_offset_read_c_empty_n;
wire    possible_c_x_c_full_n;
wire   [7:0] possible_c_x_c_dout;
wire    possible_c_x_c_empty_n;
wire    possible_c_y_c_full_n;
wire   [31:0] possible_c_y_c_dout;
wire    possible_c_y_c_empty_n;
wire    c_read_c_full_n;
wire   [47:0] c_read_c_dout;
wire    c_read_c_empty_n;
wire   [31:0] v_sum_0_loc_0_i_loc_s_dout;
wire    v_sum_0_loc_0_i_loc_s_empty_n;
wire   [31:0] h_sum_0_loc_0_i_loc_s_dout;
wire    h_sum_0_loc_0_i_loc_s_empty_n;
wire   [31:0] p_sum_0_loc_0_i_loc_c_dout;
wire    p_sum_0_loc_0_i_loc_c_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
wire    get_centroid_sh_Loop_U0_start_full_n;
wire    get_centroid_sh_Loop_U0_start_write;
wire    get_centroid_sh_Bloc_U0_start_full_n;
wire    get_centroid_sh_Bloc_U0_start_write;

// power-on initialization
initial begin
#0 ap_sync_reg_channel_write_p_sum_0_loc_0_i_loc_c = 1'b0;
#0 ap_sync_reg_channel_write_h_sum_0_loc_0_i_loc_s = 1'b0;
#0 ap_sync_reg_channel_write_v_sum_0_loc_0_i_loc_s = 1'b0;
end

get_centroid_sh_Loop get_centroid_sh_Loop_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(get_centroid_sh_Loop_U0_ap_start),
    .ap_done(get_centroid_sh_Loop_U0_ap_done),
    .ap_continue(get_centroid_sh_Loop_U0_ap_continue),
    .ap_idle(get_centroid_sh_Loop_U0_ap_idle),
    .ap_ready(get_centroid_sh_Loop_U0_ap_ready),
    .micro_roi_data_V_address0(get_centroid_sh_Loop_U0_micro_roi_data_V_address0),
    .micro_roi_data_V_ce0(get_centroid_sh_Loop_U0_micro_roi_data_V_ce0),
    .micro_roi_data_V_q0(micro_roi_data_V_q0),
    .v_limit(v_limit),
    .h_limit(h_limit),
    .h_offset(h_offset),
    .v_offset_read(v_offset_read),
    .possible_c_x(possible_c_x),
    .possible_c_y(possible_c_y),
    .c_read(c_read),
    .h_offset_out_din(get_centroid_sh_Loop_U0_h_offset_out_din),
    .h_offset_out_full_n(h_offset_c_full_n),
    .h_offset_out_write(get_centroid_sh_Loop_U0_h_offset_out_write),
    .v_offset_read_out_din(get_centroid_sh_Loop_U0_v_offset_read_out_din),
    .v_offset_read_out_full_n(v_offset_read_c_full_n),
    .v_offset_read_out_write(get_centroid_sh_Loop_U0_v_offset_read_out_write),
    .possible_c_x_out_din(get_centroid_sh_Loop_U0_possible_c_x_out_din),
    .possible_c_x_out_full_n(possible_c_x_c_full_n),
    .possible_c_x_out_write(get_centroid_sh_Loop_U0_possible_c_x_out_write),
    .possible_c_y_out_din(get_centroid_sh_Loop_U0_possible_c_y_out_din),
    .possible_c_y_out_full_n(possible_c_y_c_full_n),
    .possible_c_y_out_write(get_centroid_sh_Loop_U0_possible_c_y_out_write),
    .c_read_out_din(get_centroid_sh_Loop_U0_c_read_out_din),
    .c_read_out_full_n(c_read_c_full_n),
    .c_read_out_write(get_centroid_sh_Loop_U0_c_read_out_write),
    .ap_return_0(get_centroid_sh_Loop_U0_ap_return_0),
    .ap_return_1(get_centroid_sh_Loop_U0_ap_return_1),
    .ap_return_2(get_centroid_sh_Loop_U0_ap_return_2)
);

get_centroid_sh_Bloc get_centroid_sh_Bloc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(get_centroid_sh_Bloc_U0_ap_start),
    .ap_done(get_centroid_sh_Bloc_U0_ap_done),
    .ap_continue(get_centroid_sh_Bloc_U0_ap_continue),
    .ap_idle(get_centroid_sh_Bloc_U0_ap_idle),
    .ap_ready(get_centroid_sh_Bloc_U0_ap_ready),
    .p_read(p_sum_0_loc_0_i_loc_c_dout),
    .possible_c_x_dout(possible_c_x_c_dout),
    .possible_c_x_empty_n(possible_c_x_c_empty_n),
    .possible_c_x_read(get_centroid_sh_Bloc_U0_possible_c_x_read),
    .c_read_dout(c_read_c_dout),
    .c_read_empty_n(c_read_c_empty_n),
    .c_read_read(get_centroid_sh_Bloc_U0_c_read_read),
    .p_read1(v_sum_0_loc_0_i_loc_s_dout),
    .v_offset_read_dout(v_offset_read_c_dout),
    .v_offset_read_empty_n(v_offset_read_c_empty_n),
    .v_offset_read_read(get_centroid_sh_Bloc_U0_v_offset_read_read),
    .p_read2(h_sum_0_loc_0_i_loc_s_dout),
    .h_offset_dout(h_offset_c_dout),
    .h_offset_empty_n(h_offset_c_empty_n),
    .h_offset_read(get_centroid_sh_Bloc_U0_h_offset_read),
    .possible_c_y_dout(possible_c_y_c_dout),
    .possible_c_y_empty_n(possible_c_y_c_empty_n),
    .possible_c_y_read(get_centroid_sh_Bloc_U0_possible_c_y_read),
    .c(get_centroid_sh_Bloc_U0_c),
    .c_ap_vld(get_centroid_sh_Bloc_U0_c_ap_vld)
);

fifo_w16_d2_A_x h_offset_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(get_centroid_sh_Loop_U0_h_offset_out_din),
    .if_full_n(h_offset_c_full_n),
    .if_write(get_centroid_sh_Loop_U0_h_offset_out_write),
    .if_dout(h_offset_c_dout),
    .if_empty_n(h_offset_c_empty_n),
    .if_read(get_centroid_sh_Bloc_U0_h_offset_read)
);

fifo_w8_d2_A_x1 v_offset_read_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(get_centroid_sh_Loop_U0_v_offset_read_out_din),
    .if_full_n(v_offset_read_c_full_n),
    .if_write(get_centroid_sh_Loop_U0_v_offset_read_out_write),
    .if_dout(v_offset_read_c_dout),
    .if_empty_n(v_offset_read_c_empty_n),
    .if_read(get_centroid_sh_Bloc_U0_v_offset_read_read)
);

fifo_w8_d2_A_x1 possible_c_x_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(get_centroid_sh_Loop_U0_possible_c_x_out_din),
    .if_full_n(possible_c_x_c_full_n),
    .if_write(get_centroid_sh_Loop_U0_possible_c_x_out_write),
    .if_dout(possible_c_x_c_dout),
    .if_empty_n(possible_c_x_c_empty_n),
    .if_read(get_centroid_sh_Bloc_U0_possible_c_x_read)
);

fifo_w32_d2_A_x1 possible_c_y_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(get_centroid_sh_Loop_U0_possible_c_y_out_din),
    .if_full_n(possible_c_y_c_full_n),
    .if_write(get_centroid_sh_Loop_U0_possible_c_y_out_write),
    .if_dout(possible_c_y_c_dout),
    .if_empty_n(possible_c_y_c_empty_n),
    .if_read(get_centroid_sh_Bloc_U0_possible_c_y_read)
);

fifo_w48_d2_A c_read_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(get_centroid_sh_Loop_U0_c_read_out_din),
    .if_full_n(c_read_c_full_n),
    .if_write(get_centroid_sh_Loop_U0_c_read_out_write),
    .if_dout(c_read_c_dout),
    .if_empty_n(c_read_c_empty_n),
    .if_read(get_centroid_sh_Bloc_U0_c_read_read)
);

fifo_w32_d2_A_x1 v_sum_0_loc_0_i_loc_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(get_centroid_sh_Loop_U0_ap_return_0),
    .if_full_n(v_sum_0_loc_0_i_loc_s_full_n),
    .if_write(ap_channel_done_v_sum_0_loc_0_i_loc_s),
    .if_dout(v_sum_0_loc_0_i_loc_s_dout),
    .if_empty_n(v_sum_0_loc_0_i_loc_s_empty_n),
    .if_read(get_centroid_sh_Bloc_U0_ap_ready)
);

fifo_w32_d2_A_x1 h_sum_0_loc_0_i_loc_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(get_centroid_sh_Loop_U0_ap_return_1),
    .if_full_n(h_sum_0_loc_0_i_loc_s_full_n),
    .if_write(ap_channel_done_h_sum_0_loc_0_i_loc_s),
    .if_dout(h_sum_0_loc_0_i_loc_s_dout),
    .if_empty_n(h_sum_0_loc_0_i_loc_s_empty_n),
    .if_read(get_centroid_sh_Bloc_U0_ap_ready)
);

fifo_w32_d2_A_x1 p_sum_0_loc_0_i_loc_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(get_centroid_sh_Loop_U0_ap_return_2),
    .if_full_n(p_sum_0_loc_0_i_loc_c_full_n),
    .if_write(ap_channel_done_p_sum_0_loc_0_i_loc_c),
    .if_dout(p_sum_0_loc_0_i_loc_c_dout),
    .if_empty_n(p_sum_0_loc_0_i_loc_c_empty_n),
    .if_read(get_centroid_sh_Bloc_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_h_sum_0_loc_0_i_loc_s <= 1'b0;
    end else begin
        if (((get_centroid_sh_Loop_U0_ap_done & get_centroid_sh_Loop_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_h_sum_0_loc_0_i_loc_s <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_h_sum_0_loc_0_i_loc_s <= ap_sync_channel_write_h_sum_0_loc_0_i_loc_s;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_p_sum_0_loc_0_i_loc_c <= 1'b0;
    end else begin
        if (((get_centroid_sh_Loop_U0_ap_done & get_centroid_sh_Loop_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_p_sum_0_loc_0_i_loc_c <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_p_sum_0_loc_0_i_loc_c <= ap_sync_channel_write_p_sum_0_loc_0_i_loc_c;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_v_sum_0_loc_0_i_loc_s <= 1'b0;
    end else begin
        if (((get_centroid_sh_Loop_U0_ap_done & get_centroid_sh_Loop_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_v_sum_0_loc_0_i_loc_s <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_v_sum_0_loc_0_i_loc_s <= ap_sync_channel_write_v_sum_0_loc_0_i_loc_s;
        end
    end
end

assign ap_channel_done_h_sum_0_loc_0_i_loc_s = (get_centroid_sh_Loop_U0_ap_done & (ap_sync_reg_channel_write_h_sum_0_loc_0_i_loc_s ^ 1'b1));

assign ap_channel_done_p_sum_0_loc_0_i_loc_c = (get_centroid_sh_Loop_U0_ap_done & (ap_sync_reg_channel_write_p_sum_0_loc_0_i_loc_c ^ 1'b1));

assign ap_channel_done_v_sum_0_loc_0_i_loc_s = (get_centroid_sh_Loop_U0_ap_done & (ap_sync_reg_channel_write_v_sum_0_loc_0_i_loc_s ^ 1'b1));

assign ap_done = get_centroid_sh_Bloc_U0_ap_done;

assign ap_idle = (get_centroid_sh_Loop_U0_ap_idle & get_centroid_sh_Bloc_U0_ap_idle & (p_sum_0_loc_0_i_loc_c_empty_n ^ 1'b1) & (h_sum_0_loc_0_i_loc_s_empty_n ^ 1'b1) & (v_sum_0_loc_0_i_loc_s_empty_n ^ 1'b1));

assign ap_ready = get_centroid_sh_Loop_U0_ap_ready;

assign ap_sync_channel_write_h_sum_0_loc_0_i_loc_s = ((h_sum_0_loc_0_i_loc_s_full_n & ap_channel_done_h_sum_0_loc_0_i_loc_s) | ap_sync_reg_channel_write_h_sum_0_loc_0_i_loc_s);

assign ap_sync_channel_write_p_sum_0_loc_0_i_loc_c = ((p_sum_0_loc_0_i_loc_c_full_n & ap_channel_done_p_sum_0_loc_0_i_loc_c) | ap_sync_reg_channel_write_p_sum_0_loc_0_i_loc_c);

assign ap_sync_channel_write_v_sum_0_loc_0_i_loc_s = ((v_sum_0_loc_0_i_loc_s_full_n & ap_channel_done_v_sum_0_loc_0_i_loc_s) | ap_sync_reg_channel_write_v_sum_0_loc_0_i_loc_s);

assign ap_sync_continue = ap_continue;

assign ap_sync_done = get_centroid_sh_Bloc_U0_ap_done;

assign ap_sync_ready = get_centroid_sh_Loop_U0_ap_ready;

assign c = get_centroid_sh_Bloc_U0_c;

assign c_ap_vld = get_centroid_sh_Bloc_U0_c_ap_vld;

assign get_centroid_sh_Bloc_U0_ap_continue = ap_continue;

assign get_centroid_sh_Bloc_U0_ap_start = (v_sum_0_loc_0_i_loc_s_empty_n & p_sum_0_loc_0_i_loc_c_empty_n & h_sum_0_loc_0_i_loc_s_empty_n);

assign get_centroid_sh_Bloc_U0_start_full_n = 1'b1;

assign get_centroid_sh_Bloc_U0_start_write = 1'b0;

assign get_centroid_sh_Loop_U0_ap_continue = (ap_sync_channel_write_v_sum_0_loc_0_i_loc_s & ap_sync_channel_write_p_sum_0_loc_0_i_loc_c & ap_sync_channel_write_h_sum_0_loc_0_i_loc_s);

assign get_centroid_sh_Loop_U0_ap_start = ap_start;

assign get_centroid_sh_Loop_U0_start_full_n = 1'b1;

assign get_centroid_sh_Loop_U0_start_write = 1'b0;

assign micro_roi_data_V_address0 = get_centroid_sh_Loop_U0_micro_roi_data_V_address0;

assign micro_roi_data_V_address1 = 10'd0;

assign micro_roi_data_V_ce0 = get_centroid_sh_Loop_U0_micro_roi_data_V_ce0;

assign micro_roi_data_V_ce1 = 1'b0;

assign micro_roi_data_V_d0 = 8'd0;

assign micro_roi_data_V_d1 = 8'd0;

assign micro_roi_data_V_we0 = 1'b0;

assign micro_roi_data_V_we1 = 1'b0;

endmodule //get_centroid_sh
