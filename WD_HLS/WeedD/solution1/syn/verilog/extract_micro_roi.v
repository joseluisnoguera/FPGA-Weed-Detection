// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module extract_micro_roi (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        img_in_mr_data_V_dout,
        img_in_mr_data_V_empty_n,
        img_in_mr_data_V_read,
        x_top,
        x_bottom,
        y_left,
        y_right,
        micro_roi_data_V_address0,
        micro_roi_data_V_ce0,
        micro_roi_data_V_we0,
        micro_roi_data_V_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] img_in_mr_data_V_dout;
input   img_in_mr_data_V_empty_n;
output   img_in_mr_data_V_read;
input  [9:0] x_top;
input  [9:0] x_bottom;
input  [15:0] y_left;
input  [15:0] y_right;
output  [9:0] micro_roi_data_V_address0;
output   micro_roi_data_V_ce0;
output   micro_roi_data_V_we0;
output  [7:0] micro_roi_data_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_in_mr_data_V_read;
reg micro_roi_data_V_ce0;
reg micro_roi_data_V_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    img_in_mr_data_V_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln111_fu_170_p2;
wire   [0:0] and_ln114_fu_196_p2;
wire   [7:0] trunc_ln112_fu_128_p1;
reg   [7:0] trunc_ln112_reg_225;
wire   [7:0] trunc_ln110_fu_132_p1;
reg   [7:0] trunc_ln110_reg_230;
wire   [4:0] v_fu_146_p2;
reg   [4:0] v_reg_238;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln114_fu_157_p2;
reg   [0:0] icmp_ln114_reg_243;
wire   [0:0] icmp_ln110_fu_140_p2;
wire   [9:0] shl_ln_fu_162_p3;
reg   [9:0] shl_ln_reg_248;
wire   [5:0] h_fu_176_p2;
reg    ap_predicate_op38_read_state3;
reg    ap_block_state3;
reg   [4:0] v_0_reg_106;
reg   [5:0] h_0_reg_117;
wire   [63:0] zext_ln115_1_fu_210_p1;
wire   [7:0] zext_ln110_fu_136_p1;
wire   [7:0] p_v_fu_152_p2;
wire   [15:0] zext_ln113_fu_182_p1;
wire   [15:0] p_h_fu_186_p2;
wire   [0:0] icmp_ln114_1_fu_191_p2;
wire   [9:0] zext_ln115_fu_201_p1;
wire   [9:0] add_ln115_fu_205_p2;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln110_fu_140_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        h_0_reg_117 <= 6'd0;
    end else if ((~((img_in_mr_data_V_empty_n == 1'b0) & (ap_predicate_op38_read_state3 == 1'b1)) & (icmp_ln111_fu_170_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        h_0_reg_117 <= h_fu_176_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((img_in_mr_data_V_empty_n == 1'b0) & (ap_predicate_op38_read_state3 == 1'b1)) & (icmp_ln111_fu_170_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        v_0_reg_106 <= v_reg_238;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        v_0_reg_106 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln110_fu_140_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln114_reg_243 <= icmp_ln114_fu_157_p2;
        shl_ln_reg_248[9 : 5] <= shl_ln_fu_162_p3[9 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        trunc_ln110_reg_230 <= trunc_ln110_fu_132_p1;
        trunc_ln112_reg_225 <= trunc_ln112_fu_128_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        v_reg_238 <= v_fu_146_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln110_fu_140_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln110_fu_140_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln114_fu_196_p2) & (icmp_ln111_fu_170_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        img_in_mr_data_V_blk_n = img_in_mr_data_V_empty_n;
    end else begin
        img_in_mr_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((img_in_mr_data_V_empty_n == 1'b0) & (ap_predicate_op38_read_state3 == 1'b1)) & (1'b1 == ap_CS_fsm_state3) & (ap_predicate_op38_read_state3 == 1'b1))) begin
        img_in_mr_data_V_read = 1'b1;
    end else begin
        img_in_mr_data_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((img_in_mr_data_V_empty_n == 1'b0) & (ap_predicate_op38_read_state3 == 1'b1)) & (1'b1 == ap_CS_fsm_state3))) begin
        micro_roi_data_V_ce0 = 1'b1;
    end else begin
        micro_roi_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((img_in_mr_data_V_empty_n == 1'b0) & (ap_predicate_op38_read_state3 == 1'b1)) & (1'd1 == and_ln114_fu_196_p2) & (icmp_ln111_fu_170_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        micro_roi_data_V_we0 = 1'b1;
    end else begin
        micro_roi_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln110_fu_140_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((img_in_mr_data_V_empty_n == 1'b0) & (ap_predicate_op38_read_state3 == 1'b1)) & (icmp_ln111_fu_170_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((img_in_mr_data_V_empty_n == 1'b0) & (ap_predicate_op38_read_state3 == 1'b1)) & (icmp_ln111_fu_170_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln115_fu_205_p2 = (shl_ln_reg_248 + zext_ln115_fu_201_p1);

assign and_ln114_fu_196_p2 = (icmp_ln114_reg_243 & icmp_ln114_1_fu_191_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state3 = ((img_in_mr_data_V_empty_n == 1'b0) & (ap_predicate_op38_read_state3 == 1'b1));
end

always @ (*) begin
    ap_predicate_op38_read_state3 = ((1'd1 == and_ln114_fu_196_p2) & (icmp_ln111_fu_170_p2 == 1'd0));
end

assign h_fu_176_p2 = (h_0_reg_117 + 6'd1);

assign icmp_ln110_fu_140_p2 = ((v_0_reg_106 == 5'd23) ? 1'b1 : 1'b0);

assign icmp_ln111_fu_170_p2 = ((h_0_reg_117 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln114_1_fu_191_p2 = ((p_h_fu_186_p2 < y_right) ? 1'b1 : 1'b0);

assign icmp_ln114_fu_157_p2 = ((p_v_fu_152_p2 < trunc_ln110_reg_230) ? 1'b1 : 1'b0);

assign micro_roi_data_V_address0 = zext_ln115_1_fu_210_p1;

assign micro_roi_data_V_d0 = img_in_mr_data_V_dout;

assign p_h_fu_186_p2 = (zext_ln113_fu_182_p1 + y_left);

assign p_v_fu_152_p2 = (zext_ln110_fu_136_p1 + trunc_ln112_reg_225);

assign shl_ln_fu_162_p3 = {{v_0_reg_106}, {5'd0}};

assign trunc_ln110_fu_132_p1 = x_bottom[7:0];

assign trunc_ln112_fu_128_p1 = x_top[7:0];

assign v_fu_146_p2 = (v_0_reg_106 + 5'd1);

assign zext_ln110_fu_136_p1 = v_0_reg_106;

assign zext_ln113_fu_182_p1 = h_0_reg_117;

assign zext_ln115_1_fu_210_p1 = add_ln115_fu_205_p2;

assign zext_ln115_fu_201_p1 = h_0_reg_117;

always @ (posedge ap_clk) begin
    shl_ln_reg_248[4:0] <= 5'b00000;
end

endmodule //extract_micro_roi
