<?xml version="1.0" encoding="UTF-8"?>
<vivadoHLSLog:LogRoot xmlns:vivadoHLSLog="www.xilinx.com/vivadoHLSLog">
  <errorLogs>
    <logs>
      <synLog>
        <logs message="ERROR: [HLS 200-70] Compilation errors found: In file included from weed_detection.cpp:1:&#xD;&#xA;In file included from weed_detection.cpp:1:&#xD;&#xA;In file included from ./weed_detection.h:4:&#xD;&#xA;In file included from ./image_config.h:3:&#xD;&#xA;...&#xD;&#xA;In file included from D:/Xilinx/xfopencv-master/include\common/xf_common.h:34:&#xD;&#xA;D:/Xilinx/xfopencv-master/include\common/xf_structs.h:403:33: warning: unknown attribute 'xcl_array_geometry' ignored [-Wattributes]&#xD;&#xA;    DATATYPE *data __attribute((xcl_array_geometry((ROWS)*(COLS>> (xfNPixelsPerCycle&lt;NPC>::datashift)))));&#xD;&#xA;                                ^&#xD;&#xA;In file included from weed_detection.cpp:1:&#xD;&#xA;In file included from weed_detection.cpp:2:&#xD;&#xA;./wd_stage_1.h:46:45: error: use of overloaded operator '/' is ambiguous (with operand types 'fixed_88b_64i' (aka 'float') and 'fixed_32b_16i' (aka 'ap_fixed&lt;24, 16>'))&#xD;&#xA;  temp = 2*((fixed_88b_64i)g_channel.data[i]/denominator)&#xD;&#xA;            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~&#xD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2213:2797: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator +(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::plus operator +( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator -(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::minus operator -( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator *(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (&#xD;&#xA;false)>::mult operator *( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator /(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::div operator /( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &amp;(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::logic operator &amp;( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator |(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I&#xD;&#xA;, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::logic operator |( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator ^(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::logic operator ^( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >>(ap_int_base&lt;(1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _&#xD;&#xA;AP_O, _AP_N>&amp; op, bool i_op) { return op.operator +=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator -=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator *=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator /=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &amp;=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator |=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) {&#xD;&#xA; return op.operator ^=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >>=(ap_int_base&lt;(1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_&#xD;&#xA;AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator ==(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator !=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool i_op, const ap_fixed_base&lt;_AP_W,&#xD;&#xA; _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator !=(op); }&#xD;&#xxD;&#xxD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2214:2932: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator +(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::plus operator +( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator -(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::minus operator -( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator *(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__&#xD;&#xA;((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::mult operator *( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator /(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::div operator /( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &amp;(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::logic operator &amp;( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::log&#xD;&#xA;ic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator |(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::logic operator |( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator ^(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator >>(ap_int_base&lt;(8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &#xD;&#xA;&lt;&lt;(ap_int_base&lt;(8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator +=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator -=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator *=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator /=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &amp;=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { re&#xD;&#xA;turn op.operator |=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator ^=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator >>=(ap_int_base&lt;(8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator >(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_&#xD;&#xA;Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator >=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator ==(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ==(op); } template &lt;int&#xD;&#xA; _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator !=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator !=(op); }&#xD;&#xxD;&#xxD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2215:2831: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator +(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::plus operator +( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator -(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::minus operator -( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator *(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::te&#xD;&#xA;mplate RType&lt; (8), (8), (true)>::mult operator *( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator /(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::div operator /( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &amp;(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::logic operator &amp;( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator |(ap_fixed_base&lt;(8)&#xD;&#xA;, (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::logic operator |( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ^(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::logic operator ^( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >>(ap_int_base&lt;(8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S&#xD;&#xA;, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator +=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator -=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator *=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator /=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &amp;=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator |=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,&#xD;&#xA; _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ^=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >>=(ap_int_base&lt;(8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator &lt;(op); } template&#xD;&#xA; &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ==(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator !=(ap_fixed_base&lt;(8), (8), &#xD;&#xA;(true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator !=(op); }&#xD;&#xxD;&#xxD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2216:2860: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator +(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::plus operator +( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator -(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::minus operator -( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator *(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_&#xD;&#xA;W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::mult operator *( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator /(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::div operator /( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &amp;(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::logic operator &amp;( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_o&#xD;&#xA;p) { return op.operator |(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::logic operator |( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ^(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::logic operator ^( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >>(ap_int_base&lt;(8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline &#xD;&#xA;__attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator +=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator -=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator *=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator /=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &amp;=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator |=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _&#xD;&#xA;AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ^=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >>=(ap_int_base&lt;(8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_&#xD;&#xA;S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ==(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fix&#xD;&#xA;ed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator !=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator !=(op); }&#xD;&#xxD;&#xA;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ^&#xD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2217:3179: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator *(ap_fixed_bas&#xD;&#xA;e&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &amp;( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, &#xD;&#xA;_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator >>( co&#xD;&#xA;nst ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator /=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q&#xD;&#xA;_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator >(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } templa&#xD;&#xA;te &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( short i_op, const&#xD;&#xA; ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator !=(op); }&#xD;&#xxD;&#xA;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ^&#xD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2218:3257: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, un&#xD;&#xA;signed short i_op) { return op.operator *(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_S&#xD;&#xA;IZE_short), (false)>::logic operator &amp;( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __&#xD;&#xA;attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixe&#xD;&#xA;d_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator /=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode &#xD;&#xA;_AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const a&#xD;&#xA;p_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator !=(op); }&#xD;&#xxD;&#xxD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2219:3105: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator *(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op&#xD;&#xA;)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &amp;( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator&#xD;&#xA; &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_int), (true)>(i_op)); }&#xD;&#xA; template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator /=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP&#xD;&#xA;_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator >(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; o&#xD;&#xA;p) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __at&#xD;&#xA;tribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator !=(op); }&#xD;&#xxD;&#xxD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2220:3183: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator *(ap_f&#xD;&#xA;ixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &amp;( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _&#xD;&#xA;AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs oper&#xD;&#xA;ator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator /=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;in&#xD;&#xA;t _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >(ap_fixe&#xD;&#xA;d_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP&#xD;&#xA;_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator !=(op); }&#xD;&#xxD;&#xxD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2221:3142: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator *(ap_fixed_base&lt;(_AP_SIZE_long), (_AP&#xD;&#xA;_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &amp;( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_S&#xD;&#xA;IZE_long), (_AP_SIZE_long), (true)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_&#xD;&#xA;op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator /=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_ba&#xD;&#xA;se&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator >(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((a&#xD;&#xA;lways_inline)) bool operator >( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)&#xD;&#xA;>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator !=(op); }&#xD;&#xxD;&#xxD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2222:3220: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { re&#xD;&#xA;turn op.operator *(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &amp;( unsigne&#xD;&#xA;d long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_&#xD;&#xA;S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.o&#xD;&#xA;perator /=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixe&#xD;&#xA;d_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_A&#xD;&#xA;P_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator !=(op); }&#xD;&#xxD;&#xxD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2223:3290: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, &#xD;&#xA;_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator *(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::temp&#xD;&#xA;late RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &amp;( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S&#xD;&#xA;, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _&#xD;&#xA;AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator /=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;i&#xD;&#xA;nt _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((alwa&#xD;&#xA;ys_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator !=(op); }&#xD;&#xxD;&#xxD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2224:3305: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S&#xD;&#xA;, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator *(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _&#xD;&#xA;AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &amp;( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ^(op); } template &lt;int &#xD;&#xA;_AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((alw&#xD;&#xA;ays_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator /=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_&#xD;&#xA;ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mo&#xD;&#xA;de _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator !=(op); }&#xD;&#xxD;&#xxD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(float, double)&#xD;&#xA;  temp = 2*((fixed_88b_64i)g_channel.data[i]/denominator)&#xD;&#xA;                                            ^&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(float, long double)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(float, int)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(float, long)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(float, long long)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(float, unsigned int)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(float, unsigned long)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(float, unsigned long long)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(float, float)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(double, unsigned long)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(double, unsigned long long)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(double, unsigned int)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(double, long long)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(double, int)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(double, long double)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(double, long)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(double, double)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(double, float)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(unsigned long, double)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(unsigned long, float)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(unsigned int, unsigned long long)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(unsigned int, unsigned long)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(unsigned int, unsigned int)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(unsigned int, long long)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(unsigned int, long)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(unsigned int, int)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(unsigned int, long double)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(unsigned int, double)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(unsigned int, float)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(long long, unsigned long long)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(long long, unsigned long)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(long long, unsigned int)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(long long, long long)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(unsigned long, long double)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(unsigned long, int)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(unsigned long, long)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(unsigned long, long long)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(unsigned long, unsigned int)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(unsigned long, unsigned long)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(unsigned long, unsigned long long)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(unsigned long long, float)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(unsigned long long, double)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(unsigned long long, long double)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(unsigned long long, int)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(unsigned long long, long)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(unsigned long long, long long)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(unsigned long long, unsigned int)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(unsigned long long, unsigned long)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(unsigned long long, unsigned long long)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(int, unsigned int)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(long double, float)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(long double, double)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(long double, long double)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(long double, int)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(long double, long)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(long double, long long)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(long double, unsigned int)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(long double, unsigned long)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(long double, unsigned long long)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(int, float)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(int, double)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(int, long double)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(int, int)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(int, long)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(int, long long)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(long long, long)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(int, unsigned long)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(int, unsigned long long)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(long, float)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(long, double)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(long, long double)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(long, int)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(long, long)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(long, long long)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(long, unsigned int)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(long, unsigned long)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(long, unsigned long long)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(long long, float)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(long long, double)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(long long, long double)&#xD;&#xA;./wd_stage_1.h:46:45: note: built-in candidate operator/(long long, int)&#xD;&#xA;./wd_stage_1.h:47:40: error: use of overloaded operator '/' is ambiguous (with operand types 'fixed_88b_64i' (aka 'float') and 'fixed_32b_16i' (aka 'ap_fixed&lt;24, 16>'))&#xD;&#xA;    - ((fixed_88b_64i)r_channel.data[i]/denominator)&#xD;&#xA;       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~&#xD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2213:2797: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator +(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::plus operator +( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator -(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::minus operator -( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator *(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (&#xD;&#xA;false)>::mult operator *( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator /(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::div operator /( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &amp;(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::logic operator &amp;( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator |(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I&#xD;&#xA;, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::logic operator |( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator ^(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::logic operator ^( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >>(ap_int_base&lt;(1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _&#xD;&#xA;AP_O, _AP_N>&amp; op, bool i_op) { return op.operator +=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator -=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator *=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator /=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &amp;=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator |=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) {&#xD;&#xA; return op.operator ^=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >>=(ap_int_base&lt;(1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_&#xD;&#xA;AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator ==(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator !=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool i_op, const ap_fixed_base&lt;_AP_W,&#xD;&#xA; _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator !=(op); }&#xD;&#xxD;&#xxD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2214:2932: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator +(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::plus operator +( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator -(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::minus operator -( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator *(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__&#xD;&#xA;((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::mult operator *( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator /(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::div operator /( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &amp;(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::logic operator &amp;( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::log&#xD;&#xA;ic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator |(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::logic operator |( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator ^(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator >>(ap_int_base&lt;(8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &#xD;&#xA;&lt;&lt;(ap_int_base&lt;(8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator +=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator -=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator *=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator /=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &amp;=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { re&#xD;&#xA;turn op.operator |=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator ^=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator >>=(ap_int_base&lt;(8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator >(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_&#xD;&#xA;Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator >=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator ==(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ==(op); } template &lt;int&#xD;&#xA; _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator !=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator !=(op); }&#xD;&#xxD;&#xxD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2215:2831: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator +(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::plus operator +( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator -(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::minus operator -( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator *(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::te&#xD;&#xA;mplate RType&lt; (8), (8), (true)>::mult operator *( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator /(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::div operator /( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &amp;(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::logic operator &amp;( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator |(ap_fixed_base&lt;(8)&#xD;&#xA;, (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::logic operator |( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ^(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::logic operator ^( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >>(ap_int_base&lt;(8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S&#xD;&#xA;, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator +=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator -=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator *=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator /=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &amp;=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator |=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,&#xD;&#xA; _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ^=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >>=(ap_int_base&lt;(8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator &lt;(op); } template&#xD;&#xA; &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ==(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator !=(ap_fixed_base&lt;(8), (8), &#xD;&#xA;(true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator !=(op); }&#xD;&#xxD;&#xA;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ^&#xD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2216:2860: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator +(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::plus operator +( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator -(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::minus operator -( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator *(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_&#xD;&#xA;W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::mult operator *( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator /(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::div operator /( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &amp;(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::logic operator &amp;( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_o&#xD;&#xA;p) { return op.operator |(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::logic operator |( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ^(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::logic operator ^( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >>(ap_int_base&lt;(8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline &#xD;&#xA;__attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator +=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator -=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator *=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator /=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &amp;=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator |=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _&#xD;&#xA;AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ^=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >>=(ap_int_base&lt;(8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_&#xD;&#xA;S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ==(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fix&#xD;&#xA;ed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator !=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator !=(op); }&#xD;&#xxD;&#xxD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2217:3179: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator *(ap_fixed_bas&#xD;&#xA;e&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &amp;( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, &#xD;&#xA;_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator >>( co&#xD;&#xA;nst ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator /=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q&#xD;&#xA;_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator >(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } templa&#xD;&#xA;te &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( short i_op, const&#xD;&#xA; ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator !=(op); }&#xD;&#xxD;&#xxD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2218:3257: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, un&#xD;&#xA;signed short i_op) { return op.operator *(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_S&#xD;&#xA;IZE_short), (false)>::logic operator &amp;( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __&#xD;&#xA;attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixe&#xD;&#xA;d_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator /=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode &#xD;&#xA;_AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const a&#xD;&#xA;p_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator !=(op); }&#xD;&#xxD;&#xxD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2219:3105: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator *(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op&#xD;&#xA;)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &amp;( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator&#xD;&#xA; &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_int), (true)>(i_op)); }&#xD;&#xA; template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator /=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP&#xD;&#xA;_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator >(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; o&#xD;&#xA;p) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __at&#xD;&#xA;tribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator !=(op); }&#xD;&#xxD;&#xxD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2220:3183: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator *(ap_f&#xD;&#xA;ixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &amp;( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _&#xD;&#xA;AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs oper&#xD;&#xA;ator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator /=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;in&#xD;&#xA;t _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >(ap_fixe&#xD;&#xA;d_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP&#xD;&#xA;_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator !=(op); }&#xD;&#xxD;&#xxD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2221:3142: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator *(ap_fixed_base&lt;(_AP_SIZE_long), (_AP&#xD;&#xA;_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &amp;( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_S&#xD;&#xA;IZE_long), (_AP_SIZE_long), (true)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_&#xD;&#xA;op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator /=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_ba&#xD;&#xA;se&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator >(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((a&#xD;&#xA;lways_inline)) bool operator >( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)&#xD;&#xA;>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator !=(op); }&#xD;&#xxD;&#xxD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2222:3220: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { re&#xD;&#xA;turn op.operator *(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &amp;( unsigne&#xD;&#xA;d long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_&#xD;&#xA;S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.o&#xD;&#xA;perator /=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixe&#xD;&#xA;d_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_A&#xD;&#xA;P_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator !=(op); }&#xD;&#xxD;&#xxD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2223:3290: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, &#xD;&#xA;_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator *(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::temp&#xD;&#xA;late RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &amp;( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S&#xD;&#xA;, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _&#xD;&#xA;AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator /=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;i&#xD;&#xA;nt _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((alwa&#xD;&#xA;ys_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator !=(op); }&#xD;&#xxD;&#xxD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2224:3305: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S&#xD;&#xA;, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator *(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _&#xD;&#xA;AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &amp;( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ^(op); } template &lt;int &#xD;&#xA;_AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((alw&#xD;&#xA;ays_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator /=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_&#xD;&#xA;ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mo&#xD;&#xA;de _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator !=(op); }&#xD;&#xxD;&#xxD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(float, double)&#xD;&#xA;    - ((fixed_88b_64i)r_channel.data[i]/denominator)&#xD;&#xA;                                       ^&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(float, long double)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(float, int)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(float, long)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(float, long long)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(float, unsigned int)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(float, unsigned long)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(float, unsigned long long)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(float, float)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(double, unsigned long)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(double, unsigned long long)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(double, unsigned int)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(double, long long)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(double, int)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(double, long double)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(double, long)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(double, double)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(double, float)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(unsigned long, double)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(unsigned long, float)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(unsigned int, unsigned long long)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(unsigned int, unsigned long)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(unsigned int, unsigned int)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(unsigned int, long long)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(unsigned int, long)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(unsigned int, int)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(unsigned int, long double)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(unsigned int, double)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(unsigned int, float)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(long long, unsigned long long)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(long long, unsigned long)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(long long, unsigned int)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(long long, long long)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(unsigned long, long double)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(unsigned long, int)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(unsigned long, long)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(unsigned long, long long)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(unsigned long, unsigned int)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(unsigned long, unsigned long)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(unsigned long, unsigned long long)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(unsigned long long, float)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(unsigned long long, double)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(unsigned long long, long double)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(unsigned long long, int)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(unsigned long long, long)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(unsigned long long, long long)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(unsigned long long, unsigned int)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(unsigned long long, unsigned long)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(unsigned long long, unsigned long long)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(int, unsigned int)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(long double, float)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(long double, double)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(long double, long double)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(long double, int)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(long double, long)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(long double, long long)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(long double, unsigned int)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(long double, unsigned long)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(long double, unsigned long long)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(int, float)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(int, double)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(int, long double)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(int, int)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(int, long)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(int, long long)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(long long, long)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(int, unsigned long)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(int, unsigned long long)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(long, float)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(long, double)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(long, long double)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(long, int)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(long, long)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(long, long long)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(long, unsigned int)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(long, unsigned long)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(long, unsigned long long)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(long long, float)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(long long, double)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(long long, long double)&#xD;&#xA;./wd_stage_1.h:47:40: note: built-in candidate operator/(long long, int)&#xD;&#xA;./wd_stage_1.h:48:40: error: use of overloaded operator '/' is ambiguous (with operand types 'fixed_88b_64i' (aka 'float') and 'fixed_32b_16i' (aka 'ap_fixed&lt;24, 16>'))&#xD;&#xA;    - ((fixed_88b_64i)b_channel.data[i]/denominator);&#xD;&#xA;       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~&#xD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2213:2797: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator +(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::plus operator +( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator -(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::minus operator -( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator *(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (&#xD;&#xA;false)>::mult operator *( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator /(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::div operator /( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &amp;(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::logic operator &amp;( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator |(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I&#xD;&#xA;, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::logic operator |( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator ^(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::logic operator ^( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >>(ap_int_base&lt;(1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _&#xD;&#xA;AP_O, _AP_N>&amp; op, bool i_op) { return op.operator +=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator -=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator *=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator /=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &amp;=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator |=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) {&#xD;&#xA; return op.operator ^=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >>=(ap_int_base&lt;(1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_&#xD;&#xA;AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator ==(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator !=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool i_op, const ap_fixed_base&lt;_AP_W,&#xD;&#xA; _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator !=(op); }&#xD;&#xxD;&#xA;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ^&#xD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2214:2932: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator +(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::plus operator +( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator -(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::minus operator -( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator *(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__&#xD;&#xA;((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::mult operator *( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator /(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::div operator /( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &amp;(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::logic operator &amp;( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::log&#xD;&#xA;ic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator |(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::logic operator |( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator ^(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator >>(ap_int_base&lt;(8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &#xD;&#xA;&lt;&lt;(ap_int_base&lt;(8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator +=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator -=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator *=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator /=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &amp;=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { re&#xD;&#xA;turn op.operator |=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator ^=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator >>=(ap_int_base&lt;(8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator >(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_&#xD;&#xA;Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator >=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator ==(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ==(op); } template &lt;int&#xD;&#xA; _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator !=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator !=(op); }&#xD;&#xxD;&#xxD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2215:2831: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator +(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::plus operator +( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator -(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::minus operator -( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator *(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::te&#xD;&#xA;mplate RType&lt; (8), (8), (true)>::mult operator *( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator /(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::div operator /( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &amp;(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::logic operator &amp;( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator |(ap_fixed_base&lt;(8)&#xD;&#xA;, (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::logic operator |( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ^(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::logic operator ^( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >>(ap_int_base&lt;(8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S&#xD;&#xA;, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator +=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator -=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator *=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator /=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &amp;=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator |=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,&#xD;&#xA; _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ^=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >>=(ap_int_base&lt;(8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator &lt;(op); } template&#xD;&#xA; &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ==(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator !=(ap_fixed_base&lt;(8), (8), &#xD;&#xA;(true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator !=(op); }&#xD;&#xxD;&#xxD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2216:2860: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator +(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::plus operator +( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator -(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::minus operator -( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator *(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_&#xD;&#xA;W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::mult operator *( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator /(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::div operator /( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &amp;(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::logic operator &amp;( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_o&#xD;&#xA;p) { return op.operator |(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::logic operator |( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ^(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::logic operator ^( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >>(ap_int_base&lt;(8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline &#xD;&#xA;__attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator +=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator -=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator *=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator /=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &amp;=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator |=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _&#xD;&#xA;AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ^=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >>=(ap_int_base&lt;(8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_&#xD;&#xA;S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ==(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fix&#xD;&#xA;ed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator !=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator !=(op); }&#xD;&#xxD;&#xxD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2217:3179: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator *(ap_fixed_bas&#xD;&#xA;e&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &amp;( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, &#xD;&#xA;_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator >>( co&#xD;&#xA;nst ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator /=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q&#xD;&#xA;_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator >(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } templa&#xD;&#xA;te &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( short i_op, const&#xD;&#xA; ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator !=(op); }&#xD;&#xxD;&#xxD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2218:3257: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, un&#xD;&#xA;signed short i_op) { return op.operator *(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_S&#xD;&#xA;IZE_short), (false)>::logic operator &amp;( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __&#xD;&#xA;attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixe&#xD;&#xA;d_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator /=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode &#xD;&#xA;_AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const a&#xD;&#xA;p_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator !=(op); }&#xD;&#xxD;&#xxD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2219:3105: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator *(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op&#xD;&#xA;)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &amp;( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator&#xD;&#xA; &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_int), (true)>(i_op)); }&#xD;&#xA; template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator /=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP&#xD;&#xA;_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator >(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; o&#xD;&#xA;p) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __at&#xD;&#xA;tribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator !=(op); }&#xD;&#xxD;&#xxD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2220:3183: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator *(ap_f&#xD;&#xA;ixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &amp;( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _&#xD;&#xA;AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs oper&#xD;&#xA;ator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator /=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;in&#xD;&#xA;t _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >(ap_fixe&#xD;&#xA;d_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP&#xD;&#xA;_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator !=(op); }&#xD;&#xA;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              &#xD;&#xxD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2221:3142: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator *(ap_fixed_base&lt;(_AP_SIZE_long), (_AP&#xD;&#xA;_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &amp;( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_S&#xD;&#xA;IZE_long), (_AP_SIZE_long), (true)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_&#xD;&#xA;op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator /=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_ba&#xD;&#xA;se&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator >(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((a&#xD;&#xA;lways_inline)) bool operator >( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)&#xD;&#xA;>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator !=(op); }&#xD;&#xxD;&#xxD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2222:3220: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { re&#xD;&#xA;turn op.operator *(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &amp;( unsigne&#xD;&#xA;d long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_&#xD;&#xA;S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.o&#xD;&#xA;perator /=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixe&#xD;&#xA;d_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_A&#xD;&#xA;P_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator !=(op); }&#xD;&#xxD;&#xA;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ^&#xD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2223:3290: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, &#xD;&#xA;_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator *(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::temp&#xD;&#xA;late RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &amp;( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S&#xD;&#xA;, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _&#xD;&#xA;AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator /=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;i&#xD;&#xA;nt _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((alwa&#xD;&#xA;ys_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator !=(op); }&#xD;&#xA;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              &#xD;&#xxD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2224:3305: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S&#xD;&#xA;, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator *(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _&#xD;&#xA;AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &amp;( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ^(op); } template &lt;int &#xD;&#xA;_AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((alw&#xD;&#xA;ays_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator /=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_&#xD;&#xA;ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mo&#xD;&#xA;de _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator !=(op); }&#xD;&#xxD;&#xxD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(float, double)&#xD;&#xA;    - ((fixed_88b_64i)b_channel.data[i]/denominator);&#xD;&#xA;                                       ^&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(float, long double)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(float, int)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(float, long)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(float, long long)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(float, unsigned int)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(float, unsigned long)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(float, unsigned long long)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(float, float)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(double, unsigned long)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(double, unsigned long long)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(double, unsigned int)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(double, long long)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(double, int)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(double, long double)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(double, long)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(double, double)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(double, float)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(unsigned long, double)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(unsigned long, float)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(unsigned int, unsigned long long)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(unsigned int, unsigned long)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(unsigned int, unsigned int)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(unsigned int, long long)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(unsigned int, long)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(unsigned int, int)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(unsigned int, long double)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(unsigned int, double)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(unsigned int, float)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(long long, unsigned long long)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(long long, unsigned long)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(long long, unsigned int)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(long long, long long)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(unsigned long, long double)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(unsigned long, int)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(unsigned long, long)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(unsigned long, long long)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(unsigned long, unsigned int)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(unsigned long, unsigned long)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(unsigned long, unsigned long long)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(unsigned long long, float)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(unsigned long long, double)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(unsigned long long, long double)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(unsigned long long, int)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(unsigned long long, long)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(unsigned long long, long long)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(unsigned long long, unsigned int)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(unsigned long long, unsigned long)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(unsigned long long, unsigned long long)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(int, unsigned int)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(long double, float)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(long double, double)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(long double, long double)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(long double, int)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(long double, long)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(long double, long long)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(long double, unsigned int)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(long double, unsigned long)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(long double, unsigned long long)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(int, float)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(int, double)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(int, long double)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(int, int)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(int, long)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(int, long long)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(long long, long)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(int, unsigned long)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(int, unsigned long long)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(long, float)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(long, double)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(long, long double)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(long, int)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(long, long)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(long, long long)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(long, unsigned int)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(long, unsigned long)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(long, unsigned long long)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(long long, float)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(long long, double)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(long long, long double)&#xD;&#xA;./wd_stage_1.h:48:40: note: built-in candidate operator/(long long, int)&#xD;&#xA;./wd_stage_1.h:60:69: error: use of overloaded operator '*' is ambiguous (with operand types 'float' and 'fixed_32b_16i' (aka 'ap_fixed&lt;24, 16>'))&#xD;&#xA;  img_out.data[i] = (uint8_t)((fixed_88b_64i(veg.data[i])-min_value)*scalar);&#xD;&#xA;                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~&#xD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2213:2061: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator +(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::plus operator +( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator -(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::minus operator -( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator *(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (&#xD;&#xA;false)>::mult operator *( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator /(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::div operator /( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &amp;(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::logic operator &amp;( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator |(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I&#xD;&#xA;, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::logic operator |( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator ^(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::logic operator ^( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >>(ap_int_base&lt;(1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _&#xD;&#xA;AP_O, _AP_N>&amp; op, bool i_op) { return op.operator +=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator -=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator *=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator /=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &amp;=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator |=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) {&#xD;&#xA; return op.operator ^=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >>=(ap_int_base&lt;(1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_&#xD;&#xA;AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator ==(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator !=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool i_op, const ap_fixed_base&lt;_AP_W,&#xD;&#xA; _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator !=(op); }&#xD;&#xA;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              &#xD;&#xA;              ^&#xD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2214:2160: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator +(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::plus operator +( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator -(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::minus operator -( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator *(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__&#xD;&#xA;((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::mult operator *( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator /(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::div operator /( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &amp;(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::logic operator &amp;( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::log&#xD;&#xA;ic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator |(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::logic operator |( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator ^(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator >>(ap_int_base&lt;(8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &#xD;&#xA;&lt;&lt;(ap_int_base&lt;(8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator +=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator -=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator *=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator /=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &amp;=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { re&#xD;&#xA;turn op.operator |=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator ^=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator >>=(ap_int_base&lt;(8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator >(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_&#xD;&#xA;Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator >=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator ==(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ==(op); } template &lt;int&#xD;&#xA; _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator !=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator !=(op); }&#xD;&#xA;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              &#xD;&#xA;                                                                                                                 ^&#xD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2215:2085: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator +(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::plus operator +( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator -(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::minus operator -( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator *(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::te&#xD;&#xA;mplate RType&lt; (8), (8), (true)>::mult operator *( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator /(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::div operator /( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &amp;(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::logic operator &amp;( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator |(ap_fixed_base&lt;(8)&#xD;&#xA;, (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::logic operator |( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ^(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::logic operator ^( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >>(ap_int_base&lt;(8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S&#xD;&#xA;, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator +=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator -=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator *=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator /=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &amp;=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator |=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,&#xD;&#xA; _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ^=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >>=(ap_int_base&lt;(8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator &lt;(op); } template&#xD;&#xA; &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ==(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator !=(ap_fixed_base&lt;(8), (8), &#xD;&#xA;(true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator !=(op); }&#xD;&#xxD;&#xA;                                      ^&#xD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2216:2106: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator +(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::plus operator +( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator -(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::minus operator -( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator *(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_&#xD;&#xA;W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::mult operator *( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator /(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::div operator /( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &amp;(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::logic operator &amp;( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_o&#xD;&#xA;p) { return op.operator |(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::logic operator |( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ^(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::logic operator ^( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >>(ap_int_base&lt;(8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline &#xD;&#xA;__attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator +=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator -=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator *=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator /=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &amp;=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator |=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _&#xD;&#xA;AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ^=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >>=(ap_int_base&lt;(8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_&#xD;&#xA;S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ==(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fix&#xD;&#xA;ed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator !=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator !=(op); }&#xD;&#xxD;&#xA;                                                           ^&#xD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2217:2341: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator *(ap_fixed_bas&#xD;&#xA;e&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &amp;( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, &#xD;&#xA;_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator >>( co&#xD;&#xA;nst ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator /=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q&#xD;&#xA;_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator >(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } templa&#xD;&#xA;te &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( short i_op, const&#xD;&#xA; ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator !=(op); }&#xD;&#xxD;&#xA;                                                                                                                                                                                                                                                                                                      ^&#xD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2218:2397: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, un&#xD;&#xA;signed short i_op) { return op.operator *(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_S&#xD;&#xA;IZE_short), (false)>::logic operator &amp;( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __&#xD;&#xA;attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixe&#xD;&#xA;d_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator /=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode &#xD;&#xA;_AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const a&#xD;&#xA;p_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator !=(op); }&#xD;&#xxD;&#xA;                                                                                                                                                                                                                                                                                                                                                              ^&#xD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2219:2287: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator *(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op&#xD;&#xA;)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &amp;( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator&#xD;&#xA; &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_int), (true)>(i_op)); }&#xD;&#xA; template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator /=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP&#xD;&#xA;_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator >(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; o&#xD;&#xA;p) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __at&#xD;&#xA;tribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator !=(op); }&#xD;&#xxD;&#xA;                                                                                                                                                                                                                                                ^&#xD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2220:2343: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator *(ap_f&#xD;&#xA;ixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &amp;( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _&#xD;&#xA;AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs oper&#xD;&#xA;ator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator /=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;in&#xD;&#xA;t _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >(ap_fixe&#xD;&#xA;d_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP&#xD;&#xA;_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator !=(op); }&#xD;&#xxD;&#xA;                                                                                                                                                                                                                                                                                                        ^&#xD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2221:2314: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator *(ap_fixed_base&lt;(_AP_SIZE_long), (_AP&#xD;&#xA;_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &amp;( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_S&#xD;&#xA;IZE_long), (_AP_SIZE_long), (true)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_&#xD;&#xA;op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator /=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_ba&#xD;&#xA;se&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator >(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((a&#xD;&#xA;lways_inline)) bool operator >( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)&#xD;&#xA;>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator !=(op); }&#xD;&#xxD;&#xA;                                                                                                                                                                                                                                                                           ^&#xD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2222:2370: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { re&#xD;&#xA;turn op.operator *(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &amp;( unsigne&#xD;&#xA;d long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_&#xD;&#xA;S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.o&#xD;&#xA;perator /=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixe&#xD;&#xA;d_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_A&#xD;&#xA;P_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator !=(op); }&#xD;&#xxD;&#xA;                                                                                                                                                                                                                                                                                                                                   ^&#xD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2223:2422: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, &#xD;&#xA;_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator *(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::temp&#xD;&#xA;late RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &amp;( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S&#xD;&#xA;, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _&#xD;&#xA;AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator /=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;i&#xD;&#xA;nt _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((alwa&#xD;&#xA;ys_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator !=(op); }&#xD;&#xxD;&#xA;                                                                                                                                                                                                                                                                                                                                                                                       ^&#xD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:2224:2433: note: candidate function [with _AP_W = 24, _AP_I = 16, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S&#xD;&#xA;, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator *(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _&#xD;&#xA;AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &amp;( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ^(op); } template &lt;int &#xD;&#xA;_AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((alw&#xD;&#xA;ays_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator /=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_&#xD;&#xA;ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mo&#xD;&#xA;de _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator !=(op); }&#xD;&#xA;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              &#xD;&#xA;                                                                                                                                                                                                                                                                                                                                                                                                  ^&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(float, double)&#xD;&#xA;  img_out.data[i] = (uint8_t)((fixed_88b_64i(veg.data[i])-min_value)*scalar);&#xD;&#xA;                                                                    ^&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(float, long double)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(float, int)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(float, long)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(float, long long)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(float, unsigned int)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(float, unsigned long)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(float, unsigned long long)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(float, float)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(double, unsigned long)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(double, unsigned long long)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(double, unsigned int)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(double, long long)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(double, int)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(double, long double)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(double, long)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(double, double)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(double, float)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(unsigned long, double)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(unsigned long, float)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(unsigned int, unsigned long long)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(unsigned int, unsigned long)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(unsigned int, unsigned int)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(unsigned int, long long)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(unsigned int, long)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(unsigned int, int)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(unsigned int, long double)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(unsigned int, double)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(unsigned int, float)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(long long, unsigned long long)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(long long, unsigned long)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(long long, unsigned int)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(long long, long long)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(unsigned long, long double)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(unsigned long, int)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(unsigned long, long)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(unsigned long, long long)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(unsigned long, unsigned int)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(unsigned long, unsigned long)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(unsigned long, unsigned long long)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(unsigned long long, float)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(unsigned long long, double)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(unsigned long long, long double)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(unsigned long long, int)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(unsigned long long, long)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(unsigned long long, long long)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(unsigned long long, unsigned int)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(unsigned long long, unsigned long)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(unsigned long long, unsigned long long)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(int, unsigned int)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(long double, float)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(long double, double)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(long double, long double)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(long double, int)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(long double, long)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(long double, long long)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(long double, unsigned int)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(long double, unsigned long)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(long double, unsigned long long)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(int, float)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(int, double)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(int, long double)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(int, int)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(int, long)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(int, long long)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(long long, long)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(int, unsigned long)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(int, unsigned long long)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(long, float)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(long, double)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(long, long double)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(long, int)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(long, long)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(long, long long)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(long, unsigned int)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(long, unsigned long)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(long, unsigned long long)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(long long, float)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(long long, double)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(long long, long double)&#xD;&#xA;./wd_stage_1.h:60:69: note: built-in candidate operator*(long long, int)&#xD;&#xA;In file included from weed_detection.cpp:1:&#xD;&#xA;In file included from weed_detection.cpp:1:&#xD;&#xA;In file included from ./weed_detection.h:4:&#xD;&#xA;In file included from ./image_config.h:1:&#xD;&#xA;In file included from D:/Xilinx/xfopencv-master/include\common/xf_axi_sdata.h:40:&#xD;&#xA;In file included from D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_int.h:367:&#xD;&#xA;In file included from D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed.h:55:&#xD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:838:13: warning: shift count is negative [-Wshift-count-negative]&#xD;&#xA;      ret.V &lt;&lt;= (_AP_I - _AP_W);&#xD;&#xA;            ^   ~~~~~~~~~~~~~~~&#xD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:871:75: note: in instantiation of member function 'ap_fixed_base&lt;25, 17, true, 5, 3, 0>::to_ap_int_base' requested here&#xD;&#xA;  inline __attribute__((always_inline)) unsigned to_uint() const { return to_ap_int_base().to_uint(); }&#xD;&#xA;                                                                          ^&#xD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:1040:98: note: in instantiation of member function 'ap_fixed_base&lt;25, 17, true, 5, 3, 0>::to_uint' requested here&#xD;&#xA;  inline __attribute__((always_inline)) operator unsigned short() const { return (unsigned short)to_uint(); }&#xD;&#xA;                                                                                                 ^&#xD;&#xA;./image_config.h:93:43: note: in instantiation of member function 'ap_fixed_base&lt;25, 17, true, 5, 3, 0>::operator unsigned short' requested here&#xD;&#xA;static const uint16_t third_2 = (uint16_t)((ufixed_32b_16i)(320&lt;&lt;1)/3);&#xD;&#xA;                                          ^&#xD;&#xA;In file included from weed_detection.cpp:1:&#xD;&#xA;In file included from weed_detection.cpp:1:&#xD;&#xA;In file included from ./weed_detection.h:8:&#xD;&#xA;In file included from D:/Xilinx/xfopencv-master/include\imgproc/xf_otsuthreshold.hpp:36:&#xD;&#xA;D:/Xilinx/xfopencv-master/include\imgproc/xf_histogram.hpp:129:21: warning: array index 1 is past the end of the array (which contains 1 element) [-Warray-bounds]&#xD;&#xA;   hist_array[1][i]=plane[1];&#xD;&#xA;                    ^     ~&#xD;&#xA;D:/Xilinx/xfopencv-master/include\imgproc/xf_otsuthreshold.hpp:175:2: note: in instantiation of function template specialization 'xf::xFHistogramKernel&lt;0, 180, 320, 0, 1, 1, 160, 1>' requested here&#xD;&#xA; xFHistogramKernel&lt;SRC_T, ROWS, COLS, DataType&lt;SRC_T,NPC>::pixeldepth, NPC, DataType&lt;SRC_T,NPC>::wordwidth, ((COLS>>(xfNPixelsPerCycle&lt;NPC>::datashift))>>1), DataType&lt;SRC_T,NPC>::channel>&#xD;&#xA; ^&#xD;&#xA;./wd_stage_1.h:112:2: note: in instantiation of function template specialization 'xf::OtsuThreshold&lt;0, 180, 320, 1>' requested here&#xD;&#xA; xf::OtsuThreshold&lt;XF_8UC1, 180, 320, XF_NPPC1>(img_in, otsuValue);&#xD;&#xA; ^&#xD;&#xA;D:/Xilinx/xfopencv-master/include\imgproc/xf_histogram.hpp:104:2: note: array 'plane' declared here&#xD;&#xA; uint32_t plane[PLANES];&#xD;&#xA; ^&#xD;&#xA;D:/Xilinx/xfopencv-master/include\imgproc/xf_histogram.hpp:130:21: warning: array index 2 is past the end of the array (which contains 1 element) [-Warray-bounds]&#xD;&#xA;   hist_array[2][i]=plane[2];&#xD;&#xA;                    ^     ~&#xD;&#xA;D:/Xilinx/xfopencv-master/include\imgproc/xf_histogram.hpp:104:2: note: array 'plane' declared here&#xD;&#xA; uint32_t plane[PLANES];&#xD;&#xA; ^&#xD;&#xA;In file included from weed_detection.cpp:1:&#xD;&#xA;In file included from weed_detection.cpp:1:&#xD;&#xA;In file included from ./weed_detection.h:4:&#xD;&#xA;In file included from ./image_config.h:1:&#xD;&#xA;In file included from D:/Xilinx/xfopencv-master/include\common/xf_axi_sdata.h:40:&#xD;&#xA;In file included from D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_int.h:367:&#xD;&#xA;In file included from D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed.h:55:&#xD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:838:13: warning: shift count is negative [-Wshift-count-negative]&#xD;&#xA;      ret.V &lt;&lt;= (_AP_I - _AP_W);&#xD;&#xA;            ^   ~~~~~~~~~~~~~~~&#xD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:871:75: note: in instantiation of member function 'ap_fixed_base&lt;16, 8, false, 5, 3, 0>::to_ap_int_base' requested here&#xD;&#xA;  inline __attribute__((always_inline)) unsigned to_uint() const { return to_ap_int_base().to_uint(); }&#xD;&#xA;                                                                          ^&#xD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:1036:96: note: in instantiation of member function 'ap_fixed_base&lt;16, 8, false, 5, 3, 0>::to_uint' requested here&#xD;&#xA;  inline __attribute__((always_inline)) operator unsigned char() const { return (unsigned char)to_uint(); }&#xD;&#xA;                                                                                               ^&#xD;&#xA;./wd_stage_2.h:204:30: note: in instantiation of member function 'ap_fixed_base&lt;16, 8, false, 5, 3, 0>::operator unsigned char' requested here&#xD;&#xA; uint8_t half_width=(uint8_t(micro_roi_width_control)>>1);&#xD;&#xA;                             ^&#xD;&#xA;In file included from weed_detection.cpp:1:&#xD;&#xA;In file included from weed_detection.cpp:1:&#xD;&#xA;In file included from ./weed_detection.h:4:&#xD;&#xA;In file included from ./image_config.h:1:&#xD;&#xA;In file included from D:/Xilinx/xfopencv-master/include\common/xf_axi_sdata.h:40:&#xD;&#xA;In file included from D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_int.h:367:&#xD;&#xA;In file included from D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed.h:55:&#xD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:838:13: warning: shift count is negative [-Wshift-count-negative]&#xD;&#xA;      ret.V &lt;&lt;= (_AP_I - _AP_W);&#xD;&#xA;            ^   ~~~~~~~~~~~~~~~&#xD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_int_base.h:359:18: note: in instantiation of member function 'ap_fixed_base&lt;50, 21, true, 5, 3, 0>::to_ap_int_base' requested here&#xD;&#xA;    Base::V = op.to_ap_int_base().V;&#xD;&#xA;                 ^&#xD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_int.h:249:9: note: in instantiation of function template specialization 'ap_int_base&lt;17, false>::ap_int_base&lt;50, 21, true, 5, 3, 0>' requested here&#xD;&#xA;      : Base((ap_fixed_base&lt;_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}&#xD;&#xA;        ^&#xD;&#xA;D:/Xilinx/xfopencv-master/include\imgproc/xf_resize_nn_bilinear.hpp:175:16: note: in instantiation of function template specialization 'ap_uint&lt;17>::ap_uint&lt;50, 21, 5, 3, 0>' requested here&#xD;&#xA;  nextYScale = indexy_pre+scaley;&#xD;&#xA;               ^&#xD;&#xA;D:/Xilinx/xfopencv-master/include\imgproc/xf_resize_nn_bilinear.hpp:314:4: note: in instantiation of function template specialization 'computeInterpolation&lt;1, 42, 20, 17, 32, 3, 12, 2, 1>' requested here&#xD;&#xA;   computeInterpolation&lt;INTERPOLATION_TYPE, COMP_INDEX_WIDTH, COMP_INDEX_INT, INDEX_INT, SCALE_WIDTH, SCALE_INT, WEIGHT_WIDTH, WEIGHT_INT, NPPC>(imgInput.rows, imgInput.cols, j&lt;&lt;(xfNPixelsPerCycle&lt;NPPC>::datashift), output_rows_count, scalex, scaleXParallel, scaley, indexx, indexy, nextYScale, WeightX, WeightY, indexx_pre_comp, indexy_pre_comp);&#xD;&#xA;   ^&#xD;&#xA;weed_detection.cpp:67:1: note: in instantiation of function template specialization 'resizeNNBilinear&lt;9, 720, 1280, 1, 180, 320, 1, 2>' requested here&#xD;&#xA;resizeNNBilinear&lt;XF_8UC3, 720, 1280, XF_NPPC1, 180, 320, 1, 2>(img_in_0,resized);&#xD;&#xA;^&#xD;&#xA;In file included from weed_detection.cpp:1:&#xD;&#xA;In file included from weed_detection.cpp:1:&#xD;&#xA;In file included from ./weed_detection.h:4:&#xD;&#xA;In file included from ./image_config.h:1:&#xD;&#xA;In file included from D:/Xilinx/xfopencv-master/include\common/xf_axi_sdata.h:40:&#xD;&#xA;In file included from D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_int.h:367:&#xD;&#xA;In file included from D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed.h:55:&#xD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:838:13: warning: shift count is negative [-Wshift-count-negative]&#xD;&#xA;      ret.V &lt;&lt;= (_AP_I - _AP_W);&#xD;&#xA;            ^   ~~~~~~~~~~~~~~~&#xD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_int_base.h:359:18: note: in instantiation of member function 'ap_fixed_base&lt;42, 20, true, 5, 3, 0>::to_ap_int_base' requested here&#xD;&#xA;    Base::V = op.to_ap_int_base().V;&#xD;&#xA;                 ^&#xD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_int.h:249:9: note: in instantiation of function template specialization 'ap_int_base&lt;17, false>::ap_int_base&lt;42, 20, true, 5, 3, 0>' requested here&#xD;&#xA;      : Base((ap_fixed_base&lt;_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}&#xD;&#xA;        ^&#xD;&#xA;D:/Xilinx/xfopencv-master/include\imgproc/xf_resize_nn_bilinear.hpp:176:12: note: in instantiation of function template specialization 'ap_uint&lt;17>::ap_uint&lt;42, 20, 5, 3, 0>' requested here&#xD;&#xA;  indexy = (ap_uint&lt;INDEX_INT>)indexy_pre;&#xD;&#xA;           ^&#xD;&#xA;D:/Xilinx/xfopencv-master/include\imgproc/xf_resize_nn_bilinear.hpp:314:4: note: in instantiation of function template specialization 'computeInterpolation&lt;1, 42, 20, 17, 32, 3, 12, 2, 1>' requested here&#xD;&#xA;   computeInterpolation&lt;INTERPOLATION_TYPE, COMP_INDEX_WIDTH, COMP_INDEX_INT, INDEX_INT, SCALE_WIDTH, SCALE_INT, WEIGHT_WIDTH, WEIGHT_INT, NPPC>(imgInput.rows, imgInput.cols, j&lt;&lt;(xfNPixelsPerCycle&lt;NPPC>::datashift), output_rows_count, scalex, scaleXParallel, scaley, indexx, indexy, nextYScale, WeightX, WeightY, indexx_pre_comp, indexy_pre_comp);&#xD;&#xA;   ^&#xD;&#xA;weed_detection.cpp:67:1: note: in instantiation of function template specialization 'resizeNNBilinear&lt;9, 720, 1280, 1, 180, 320, 1, 2>' requested here&#xD;&#xA;resizeNNBilinear&lt;XF_8UC3, 720, 1280, XF_NPPC1, 180, 320, 1, 2>(img_in_0,resized);&#xD;&#xA;^&#xD;&#xA;In file included from weed_detection.cpp:1:&#xD;&#xA;In file included from weed_detection.cpp:1:&#xD;&#xA;In file included from ./weed_detection.h:4:&#xD;&#xA;In file included from ./image_config.h:1:&#xD;&#xA;In file included from D:/Xilinx/xfopencv-master/include\common/xf_axi_sdata.h:40:&#xD;&#xA;In file included from D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_int.h:367:&#xD;&#xA;In file included from D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed.h:55:&#xD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:838:13: warning: shift count is negative [-Wshift-count-negative]&#xD;&#xA;      ret.V &lt;&lt;= (_AP_I - _AP_W);&#xD;&#xA;            ^   ~~~~~~~~~~~~~~~&#xD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_int_base.h:359:18: note: in instantiation of member function 'ap_fixed_base&lt;43, 21, true, 5, 3, 0>::to_ap_int_base' requested here&#xD;&#xA;    Base::V = op.to_ap_int_base().V;&#xD;&#xA;                 ^&#xD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_int.h:249:9: note: in instantiation of function template specialization 'ap_int_base&lt;17, false>::ap_int_base&lt;43, 21, true, 5, 3, 0>' requested here&#xD;&#xA;      : Base((ap_fixed_base&lt;_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}&#xD;&#xA;        ^&#xD;&#xA;D:/Xilinx/xfopencv-master/include\imgproc/xf_resize_nn_bilinear.hpp:181:16: note: in instantiation of function template specialization 'ap_uint&lt;17>::ap_uint&lt;43, 21, 5, 3, 0>' requested here&#xD;&#xA;  nextYScale = indexy_pre+(ap_fixed&lt;COMP_INDEX_WIDTH,COMP_INDEX_INT>)scaley;&#xD;&#xA;               ^&#xD;&#xA;D:/Xilinx/xfopencv-master/include\imgproc/xf_resize_nn_bilinear.hpp:314:4: note: in instantiation of function template specialization 'computeInterpolation&lt;1, 42, 20, 17, 32, 3, 12, 2, 1>' requested here&#xD;&#xA;   computeInterpolation&lt;INTERPOLATION_TYPE, COMP_INDEX_WIDTH, COMP_INDEX_INT, INDEX_INT, SCALE_WIDTH, SCALE_INT, WEIGHT_WIDTH, WEIGHT_INT, NPPC>(imgInput.rows, imgInput.cols, j&lt;&lt;(xfNPixelsPerCycle&lt;NPPC>::datashift), output_rows_count, scalex, scaleXParallel, scaley, indexx, indexy, nextYScale, WeightX, WeightY, indexx_pre_comp, indexy_pre_comp);&#xD;&#xA;   ^&#xD;&#xA;weed_detection.cpp:67:1: note: in instantiation of function template specialization 'resizeNNBilinear&lt;9, 720, 1280, 1, 180, 320, 1, 2>' requested here&#xD;&#xA;resizeNNBilinear&lt;XF_8UC3, 720, 1280, XF_NPPC1, 180, 320, 1, 2>(img_in_0,resized);&#xD;&#xA;^&#xD;&#xA;In file included from weed_detection.cpp:1:&#xD;&#xA;In file included from weed_detection.cpp:1:&#xD;&#xA;In file included from ./weed_detection.h:4:&#xD;&#xA;In file included from ./image_config.h:1:&#xD;&#xA;In file included from D:/Xilinx/xfopencv-master/include\common/xf_axi_sdata.h:40:&#xD;&#xA;In file included from D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_int.h:367:&#xD;&#xA;In file included from D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed.h:55:&#xD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_fixed_base.h:838:13: warning: shift count is negative [-Wshift-count-negative]&#xD;&#xA;      ret.V &lt;&lt;= (_AP_I - _AP_W);&#xD;&#xA;            ^   ~~~~~~~~~~~~~~~&#xD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_int_base.h:359:18: note: in instantiation of member function 'ap_fixed_base&lt;32, 22, true, 5, 3, 0>::to_ap_int_base' requested here&#xD;&#xA;    Base::V = op.to_ap_int_base().V;&#xD;&#xA;                 ^&#xD;&#xA;D:/Xilinx/Vivado/2019.2/common/technology/autopilot\ap_int.h:249:9: note: in instantiation of function template specialization 'ap_int_base&lt;8, false>::ap_int_base&lt;32, 22, true, 5, 3, 0>' requested here&#xD;&#xA;      : Base((ap_fixed_base&lt;_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}&#xD;&#xA;        ^&#xD;&#xA;D:/Xilinx/xfopencv-master/include\imgproc/xf_resize_nn_bilinear.hpp:67:11: note: in instantiation of function template specialization 'ap_uint&lt;8>::ap_uint&lt;32, 22, 5, 3, 0>' requested here&#xD;&#xA;  pixel = (typename DataType&lt;DEPTH,NPPC>::cname)((ap_fixed&lt;32,22>)(P1 + P2 + P3 + P4));&#xD;&#xA;          ^&#xD;&#xA;D:/Xilinx/xfopencv-master/include\imgproc/xf_resize_nn_bilinear.hpp:117:4: note: in instantiation of function template specialization 'interpolatePixel&lt;9, 1, 1>' requested here&#xD;&#xA;   interpolatePixel&lt;DEPTH, INTERPOLATION_TYPE, NPPC>(unpackX1temp[indexx[i]-initIndex], unpackX2temp[indexx[i]-initIndex], unpackX1temp[indexx[i]-initIndex+1], unpackX2temp[indexx[i]-initIndex+1], Wx[i], Wy, currentoutput);&#xD;&#xA;   ^&#xD;&#xA;D:/Xilinx/xfopencv-master/include\imgproc/xf_resize_nn_bilinear.hpp:422:6: note: in instantiation of function template specialization 'computeOutputPixel&lt;9, 1, 1, 17, 2>' requested here&#xD;&#xA;     computeOutputPixel&lt;SRC_TYPE,INTERPOLATION_TYPE,NPPC,INDEX_INT,BUFFER_WORDS>(P0Buf,P1Buf,((indexx[0]>>xfNPixelsPerCycle&lt;NPPC>::datashift)&lt;&lt;xfNPixelsPerCycle&lt;NPPC>::datashift),indexx,WeightX,WeightY,temp_store_output);&#xD;&#xA;     ^&#xD;&#xA;weed_detection.cpp:67:1: note: in instantiation of function template specialization 'resizeNNBilinear&lt;9, 720, 1280, 1, 180, 320, 1, 2>' requested here&#xD;&#xA;resizeNNBilinear&lt;XF_8UC3, 720, 1280, XF_NPPC1, 180, 320, 1, 2>(img_in_0,resized);&#xD;&#xA;^&#xD;&#xA;9 warnings and 4 errors generated.&#xD;&#xA;Failed during preprocessing.&#xD;&#xA;    while executing&#xD;&#xA;&quot;source D:/GitHub/Weed_Detection/WD_HLS/WeedD/solution1/csynth.tcl&quot;&#xD;&#xA;    invoked from within&#xD;&#xA;&quot;hls::main D:/GitHub/Weed_Detection/WD_HLS/WeedD/solution1/csynth.tcl&quot;&#xD;&#xA;    (&quot;uplevel&quot; body line 1)&#xD;&#xA;    invoked from within&#xD;&#xA;&quot;uplevel 1 hls::main {*}$args&quot;&#xD;&#xA;    (procedure &quot;hls_proc&quot; line 5)&#xD;&#xA;    invoked from within&#xD;&#xA;&quot;hls_proc $argv&quot;&#xD;&#xA;" projectName="WeedD" solutionName="solution1" date="2020-07-21T00:47:39.900-0300"/>
      </synLog>
      <simLog/>
      <mgLog/>
      <packageLog/>
      <csimLog/>
    </logs>
  </errorLogs>
  <warningLogs>
    <logs>
      <synLog/>
      <simLog/>
      <mgLog/>
      <packageLog/>
      <csimLog/>
    </logs>
  </warningLogs>
</vivadoHLSLog:LogRoot>
